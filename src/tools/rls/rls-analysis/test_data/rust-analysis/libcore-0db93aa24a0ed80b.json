{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":false,"distro_crate":true,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"core","disambiguator":[12641647969103297473,10130382509811922120]},"crate_root":"libcore","external_crates":[],"span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":467,"byte_end":6907,"line_start":11,"line_end":218,"column_start":1,"column_end":24}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":366},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":234491,"byte_end":234496,"line_start":659,"line_end":659,"column_start":29,"column_end":34},"name":"isize","value":"","parent":{"krate":0,"index":360}},{"kind":"Use","ref_id":{"krate":0,"index":364},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":234645,"byte_end":234650,"line_start":665,"line_end":665,"column_start":29,"column_end":34},"name":"usize","value":"","parent":{"krate":0,"index":360}},{"kind":"Use","ref_id":{"krate":0,"index":430},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":240818,"byte_end":240824,"line_start":134,"line_end":134,"column_start":25,"column_end":31},"name":"decode","value":"","parent":{"krate":0,"index":388}},{"kind":"Use","ref_id":{"krate":0,"index":418},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":240826,"byte_end":240840,"line_start":134,"line_end":134,"column_start":33,"column_end":47},"name":"DecodableFloat","value":"","parent":{"krate":0,"index":388}},{"kind":"Use","ref_id":{"krate":0,"index":16690},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":240842,"byte_end":240853,"line_start":134,"line_end":134,"column_start":49,"column_end":60},"name":"FullDecoded","value":"","parent":{"krate":0,"index":388}},{"kind":"Use","ref_id":{"krate":0,"index":16668},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":240855,"byte_end":240862,"line_start":134,"line_end":134,"column_start":62,"column_end":69},"name":"Decoded","value":"","parent":{"krate":0,"index":388}},{"kind":"Use","ref_id":{"krate":0,"index":16934},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":369624,"byte_end":369627,"line_start":17,"line_end":17,"column_start":34,"column_end":37},"name":"Big","value":"","parent":{"krate":0,"index":660}},{"kind":"Use","ref_id":{"krate":0,"index":16866},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":202454,"byte_end":202469,"line_start":4514,"line_end":4514,"column_start":23,"column_end":38},"name":"ParseFloatError","value":"","parent":{"krate":0,"index":300}},{"kind":"Use","ref_id":{"krate":0,"index":1784},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":414473,"byte_end":414477,"line_start":22,"line_end":22,"column_start":18,"column_end":22},"name":"Copy","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":1774},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":414479,"byte_end":414483,"line_start":22,"line_end":22,"column_start":24,"column_end":28},"name":"Send","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":1780},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":414485,"byte_end":414490,"line_start":22,"line_end":22,"column_start":30,"column_end":35},"name":"Sized","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":1786},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":414492,"byte_end":414496,"line_start":22,"line_end":22,"column_start":37,"column_end":41},"name":"Sync","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2040},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":414584,"byte_end":414588,"line_start":25,"line_end":25,"column_start":15,"column_end":19},"name":"Drop","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2046},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":414590,"byte_end":414592,"line_start":25,"line_end":25,"column_start":21,"column_end":23},"name":"Fn","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2050},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":414594,"byte_end":414599,"line_start":25,"line_end":25,"column_start":25,"column_end":30},"name":"FnMut","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2054},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":414601,"byte_end":414607,"line_start":25,"line_end":25,"column_start":32,"column_end":38},"name":"FnOnce","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":1266},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":414720,"byte_end":414724,"line_start":30,"line_end":30,"column_start":14,"column_end":18},"name":"drop","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2594},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":414845,"byte_end":414850,"line_start":35,"line_end":35,"column_start":16,"column_end":21},"name":"Clone","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2406},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":414937,"byte_end":414946,"line_start":38,"line_end":38,"column_start":15,"column_end":24},"name":"PartialEq","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2460},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":414948,"byte_end":414958,"line_start":38,"line_end":38,"column_start":26,"column_end":36},"name":"PartialOrd","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2412},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":414960,"byte_end":414962,"line_start":38,"line_end":38,"column_start":38,"column_end":40},"name":"Eq","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2442},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":414964,"byte_end":414967,"line_start":38,"line_end":38,"column_start":42,"column_end":45},"name":"Ord","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2636},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415059,"byte_end":415064,"line_start":41,"line_end":41,"column_start":19,"column_end":24},"name":"AsRef","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2640},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415066,"byte_end":415071,"line_start":41,"line_end":41,"column_start":26,"column_end":31},"name":"AsMut","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2644},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415073,"byte_end":415077,"line_start":41,"line_end":41,"column_start":33,"column_end":37},"name":"Into","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2648},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415079,"byte_end":415083,"line_start":41,"line_end":41,"column_start":39,"column_end":43},"name":"From","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":2628},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415174,"byte_end":415181,"line_start":44,"line_end":44,"column_start":18,"column_end":25},"name":"Default","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":3820},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415269,"byte_end":415277,"line_start":47,"line_end":47,"column_start":16,"column_end":24},"name":"Iterator","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":4226},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415279,"byte_end":415285,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"name":"Extend","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":4210},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415287,"byte_end":415299,"line_start":47,"line_end":47,"column_start":34,"column_end":46},"name":"IntoIterator","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":4230},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415388,"byte_end":415407,"line_start":50,"line_end":50,"column_start":16,"column_end":35},"name":"DoubleEndedIterator","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":4244},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415409,"byte_end":415426,"line_start":50,"line_end":50,"column_start":37,"column_end":54},"name":"ExactSizeIterator","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":40958},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415525,"byte_end":415529,"line_start":53,"line_end":53,"column_start":26,"column_end":30},"name":"self","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":26755},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415531,"byte_end":415535,"line_start":53,"line_end":53,"column_start":32,"column_end":36},"name":"Some","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":26753},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415537,"byte_end":415541,"line_start":53,"line_end":53,"column_start":38,"column_end":42},"name":"None","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":41072},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415640,"byte_end":415644,"line_start":56,"line_end":56,"column_start":26,"column_end":30},"name":"self","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":26823},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415646,"byte_end":415648,"line_start":56,"line_end":56,"column_start":32,"column_end":34},"name":"Ok","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":26827},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415650,"byte_end":415653,"line_start":56,"line_end":56,"column_start":36,"column_end":39},"name":"Err","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":5536},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415795,"byte_end":415803,"line_start":61,"line_end":61,"column_start":16,"column_end":24},"name":"SliceExt","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":7108},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":415889,"byte_end":415895,"line_start":64,"line_end":64,"column_start":14,"column_end":20},"name":"StrExt","value":"","parent":{"krate":0,"index":1116}},{"kind":"Use","ref_id":{"krate":0,"index":1470},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":418066,"byte_end":418079,"line_start":52,"line_end":52,"column_start":14,"column_end":27},"name":"drop_in_place","value":"","parent":{"krate":0,"index":1198}},{"kind":"Use","ref_id":{"krate":0,"index":605},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":484935,"byte_end":484944,"line_start":28,"line_end":28,"column_start":21,"column_end":30},"name":"transmute","value":"","parent":{"krate":0,"index":1206}},{"kind":"Use","ref_id":{"krate":0,"index":623},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":525954,"byte_end":525973,"line_start":31,"line_end":31,"column_start":21,"column_end":40},"name":"copy_nonoverlapping","value":"","parent":{"krate":0,"index":1432}},{"kind":"Use","ref_id":{"krate":0,"index":627},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":526042,"byte_end":526046,"line_start":34,"line_end":34,"column_start":21,"column_end":25},"name":"copy","value":"","parent":{"krate":0,"index":1432}},{"kind":"Use","ref_id":{"krate":0,"index":631},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":526115,"byte_end":526126,"line_start":37,"line_end":37,"column_start":21,"column_end":32},"name":"write_bytes","value":"","parent":{"krate":0,"index":1432}},{"kind":"Use","ref_id":{"krate":0,"index":1836},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":651978,"byte_end":651981,"line_start":169,"line_end":169,"column_start":23,"column_end":26},"name":"Add","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1844},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":651983,"byte_end":651986,"line_start":169,"line_end":169,"column_start":28,"column_end":31},"name":"Sub","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1852},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":651988,"byte_end":651991,"line_start":169,"line_end":169,"column_start":33,"column_end":36},"name":"Mul","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1860},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":651993,"byte_end":651996,"line_start":169,"line_end":169,"column_start":38,"column_end":41},"name":"Div","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1870},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":651998,"byte_end":652001,"line_start":169,"line_end":169,"column_start":43,"column_end":46},"name":"Rem","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1880},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652003,"byte_end":652006,"line_start":169,"line_end":169,"column_start":48,"column_end":51},"name":"Neg","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1892},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652088,"byte_end":652097,"line_start":171,"line_end":171,"column_start":23,"column_end":32},"name":"AddAssign","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1898},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652099,"byte_end":652108,"line_start":171,"line_end":171,"column_start":34,"column_end":43},"name":"SubAssign","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1904},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652110,"byte_end":652119,"line_start":171,"line_end":171,"column_start":45,"column_end":54},"name":"MulAssign","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1910},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652121,"byte_end":652130,"line_start":171,"line_end":171,"column_start":56,"column_end":65},"name":"DivAssign","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1916},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652132,"byte_end":652141,"line_start":171,"line_end":171,"column_start":67,"column_end":76},"name":"RemAssign","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1924},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652211,"byte_end":652214,"line_start":174,"line_end":174,"column_start":21,"column_end":24},"name":"Not","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1932},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652216,"byte_end":652222,"line_start":174,"line_end":174,"column_start":26,"column_end":32},"name":"BitAnd","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1940},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652224,"byte_end":652229,"line_start":174,"line_end":174,"column_start":34,"column_end":39},"name":"BitOr","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1948},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652231,"byte_end":652237,"line_start":174,"line_end":174,"column_start":41,"column_end":47},"name":"BitXor","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1956},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652239,"byte_end":652242,"line_start":174,"line_end":174,"column_start":49,"column_end":52},"name":"Shl","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1966},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652244,"byte_end":652247,"line_start":174,"line_end":174,"column_start":54,"column_end":57},"name":"Shr","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1976},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652327,"byte_end":652339,"line_start":176,"line_end":176,"column_start":21,"column_end":33},"name":"BitAndAssign","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1982},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652341,"byte_end":652352,"line_start":176,"line_end":176,"column_start":35,"column_end":46},"name":"BitOrAssign","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1988},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652354,"byte_end":652366,"line_start":176,"line_end":176,"column_start":48,"column_end":60},"name":"BitXorAssign","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":1994},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652368,"byte_end":652377,"line_start":176,"line_end":176,"column_start":62,"column_end":71},"name":"ShlAssign","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":2002},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652379,"byte_end":652388,"line_start":176,"line_end":176,"column_start":73,"column_end":82},"name":"ShrAssign","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":2012},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652460,"byte_end":652465,"line_start":179,"line_end":179,"column_start":23,"column_end":28},"name":"Deref","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":2030},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652467,"byte_end":652475,"line_start":179,"line_end":179,"column_start":30,"column_end":38},"name":"DerefMut","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":2040},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652545,"byte_end":652549,"line_start":182,"line_end":182,"column_start":21,"column_end":25},"name":"Drop","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":2046},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652623,"byte_end":652625,"line_start":185,"line_end":185,"column_start":26,"column_end":28},"name":"Fn","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":2050},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652627,"byte_end":652632,"line_start":185,"line_end":185,"column_start":30,"column_end":35},"name":"FnMut","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":2054},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652634,"byte_end":652640,"line_start":185,"line_end":185,"column_start":37,"column_end":43},"name":"FnOnce","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":2106},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652712,"byte_end":652717,"line_start":188,"line_end":188,"column_start":23,"column_end":28},"name":"Index","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":2112},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652719,"byte_end":652727,"line_start":188,"line_end":188,"column_start":30,"column_end":38},"name":"IndexMut","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":34736},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652799,"byte_end":652804,"line_start":191,"line_end":191,"column_start":23,"column_end":28},"name":"Range","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":34756},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652806,"byte_end":652815,"line_start":191,"line_end":191,"column_start":30,"column_end":39},"name":"RangeFrom","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":34716},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652817,"byte_end":652826,"line_start":191,"line_end":191,"column_start":41,"column_end":50},"name":"RangeFull","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":34776},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652828,"byte_end":652835,"line_start":191,"line_end":191,"column_start":52,"column_end":59},"name":"RangeTo","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":34798},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652918,"byte_end":652932,"line_start":194,"line_end":194,"column_start":23,"column_end":37},"name":"RangeInclusive","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":34818},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652934,"byte_end":652950,"line_start":194,"line_end":194,"column_start":39,"column_end":55},"name":"RangeToInclusive","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":2168},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652952,"byte_end":652963,"line_start":194,"line_end":194,"column_start":57,"column_end":68},"name":"RangeBounds","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":34840},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":652965,"byte_end":652970,"line_start":194,"line_end":194,"column_start":70,"column_end":75},"name":"Bound","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":2262},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":653045,"byte_end":653048,"line_start":197,"line_end":197,"column_start":20,"column_end":23},"name":"Try","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":2088},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":653135,"byte_end":653144,"line_start":200,"line_end":200,"column_start":27,"column_end":36},"name":"Generator","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":34674},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":653146,"byte_end":653160,"line_start":200,"line_end":200,"column_start":38,"column_end":52},"name":"GeneratorState","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":2278},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":653243,"byte_end":653256,"line_start":203,"line_end":203,"column_start":23,"column_end":36},"name":"CoerceUnsized","value":"","parent":{"krate":0,"index":1832}},{"kind":"Use","ref_id":{"krate":0,"index":3302},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":972575,"byte_end":972583,"line_start":38,"line_end":38,"column_start":25,"column_end":33},"name":"from_u32","value":"","parent":{"krate":0,"index":3288}},{"kind":"Use","ref_id":{"krate":0,"index":3338},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":972585,"byte_end":972595,"line_start":38,"line_end":38,"column_start":35,"column_end":45},"name":"from_digit","value":"","parent":{"krate":0,"index":3288}},{"kind":"Use","ref_id":{"krate":0,"index":3304},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":972681,"byte_end":972699,"line_start":40,"line_end":40,"column_start":24,"column_end":42},"name":"from_u32_unchecked","value":"","parent":{"krate":0,"index":3288}},{"kind":"Use","ref_id":{"krate":0,"index":39860},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":972779,"byte_end":972793,"line_start":42,"line_end":42,"column_start":24,"column_end":38},"name":"ParseCharError","value":"","parent":{"krate":0,"index":3288}},{"kind":"Use","ref_id":{"krate":0,"index":39900},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":972868,"byte_end":972884,"line_start":44,"line_end":44,"column_start":24,"column_end":40},"name":"CharTryFromError","value":"","parent":{"krate":0,"index":3288}},{"kind":"Use","ref_id":{"krate":0,"index":3364},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":972962,"byte_end":972974,"line_start":46,"line_end":46,"column_start":24,"column_end":36},"name":"decode_utf16","value":"","parent":{"krate":0,"index":3288}},{"kind":"Use","ref_id":{"krate":0,"index":39948},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":972976,"byte_end":972987,"line_start":46,"line_end":46,"column_start":38,"column_end":49},"name":"DecodeUtf16","value":"","parent":{"krate":0,"index":3288}},{"kind":"Use","ref_id":{"krate":0,"index":39958},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":972989,"byte_end":973005,"line_start":46,"line_end":46,"column_start":51,"column_end":67},"name":"DecodeUtf16Error","value":"","parent":{"krate":0,"index":3288}},{"kind":"Use","ref_id":{"krate":0,"index":8222},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":973115,"byte_end":973130,"line_start":50,"line_end":50,"column_start":26,"column_end":41},"name":"UNICODE_VERSION","value":"","parent":{"krate":0,"index":3288}},{"kind":"Use","ref_id":{"krate":0,"index":42886},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":973216,"byte_end":973230,"line_start":52,"line_end":52,"column_start":27,"column_end":41},"name":"UnicodeVersion","value":"","parent":{"krate":0,"index":3288}},{"kind":"Use","ref_id":{"krate":0,"index":3348},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":973309,"byte_end":973320,"line_start":54,"line_end":54,"column_start":24,"column_end":35},"name":"decode_utf8","value":"","parent":{"krate":0,"index":3288}},{"kind":"Use","ref_id":{"krate":0,"index":39922},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":973322,"byte_end":973332,"line_start":54,"line_end":54,"column_start":37,"column_end":47},"name":"DecodeUtf8","value":"","parent":{"krate":0,"index":3288}},{"kind":"Use","ref_id":{"krate":0,"index":39932},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":973334,"byte_end":973349,"line_start":54,"line_end":54,"column_start":49,"column_end":64},"name":"InvalidSequence","value":"","parent":{"krate":0,"index":3288}},{"kind":"Use","ref_id":{"krate":0,"index":3820},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070080,"byte_end":1070088,"line_start":327,"line_end":327,"column_start":25,"column_end":33},"name":"Iterator","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":3970},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070245,"byte_end":1070249,"line_start":332,"line_end":332,"column_start":22,"column_end":26},"name":"Step","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":40330},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070322,"byte_end":1070328,"line_start":335,"line_end":335,"column_start":25,"column_end":31},"name":"Repeat","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":4110},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070330,"byte_end":1070336,"line_start":335,"line_end":335,"column_start":33,"column_end":39},"name":"repeat","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":40340},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070426,"byte_end":1070436,"line_start":337,"line_end":337,"column_start":25,"column_end":35},"name":"RepeatWith","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":4128},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070438,"byte_end":1070449,"line_start":337,"line_end":337,"column_start":37,"column_end":48},"name":"repeat_with","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":4130},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070527,"byte_end":1070532,"line_start":339,"line_end":339,"column_start":25,"column_end":30},"name":"Empty","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":4164},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070534,"byte_end":1070539,"line_start":339,"line_end":339,"column_start":32,"column_end":37},"name":"empty","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":40352},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070616,"byte_end":1070620,"line_start":341,"line_end":341,"column_start":25,"column_end":29},"name":"Once","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":4186},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070622,"byte_end":1070626,"line_start":341,"line_end":341,"column_start":31,"column_end":35},"name":"once","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":4206},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070699,"byte_end":1070711,"line_start":344,"line_end":344,"column_start":24,"column_end":36},"name":"FromIterator","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":4210},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070713,"byte_end":1070725,"line_start":344,"line_end":344,"column_start":38,"column_end":50},"name":"IntoIterator","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":4230},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070727,"byte_end":1070746,"line_start":344,"line_end":344,"column_start":52,"column_end":71},"name":"DoubleEndedIterator","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":4226},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070748,"byte_end":1070754,"line_start":344,"line_end":344,"column_start":73,"column_end":79},"name":"Extend","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":4244},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070826,"byte_end":1070843,"line_start":346,"line_end":346,"column_start":24,"column_end":41},"name":"ExactSizeIterator","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":4256},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070845,"byte_end":1070848,"line_start":346,"line_end":346,"column_start":43,"column_end":46},"name":"Sum","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":4260},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070850,"byte_end":1070857,"line_start":346,"line_end":346,"column_start":48,"column_end":55},"name":"Product","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":4294},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1070929,"byte_end":1070942,"line_start":348,"line_end":348,"column_start":23,"column_end":36},"name":"FusedIterator","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":4298},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1071020,"byte_end":1071030,"line_start":350,"line_end":350,"column_start":23,"column_end":33},"name":"TrustedLen","value":"","parent":{"krate":0,"index":3680}},{"kind":"Use","ref_id":{"krate":0,"index":41850},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1641312,"byte_end":1641321,"line_start":100,"line_end":100,"column_start":20,"column_end":29},"name":"SipHasher","value":"","parent":{"krate":0,"index":7338}},{"kind":"Use","ref_id":{"krate":0,"index":41822},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1641435,"byte_end":1641446,"line_start":105,"line_end":105,"column_start":20,"column_end":31},"name":"SipHasher13","value":"","parent":{"krate":0,"index":7338}},{"kind":"Use","ref_id":{"krate":0,"index":7708},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1672700,"byte_end":1672711,"line_start":43,"line_end":43,"column_start":26,"column_end":37},"name":"DebugStruct","value":"","parent":{"krate":0,"index":7572}},{"kind":"Use","ref_id":{"krate":0,"index":7720},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1672713,"byte_end":1672723,"line_start":43,"line_end":43,"column_start":39,"column_end":49},"name":"DebugTuple","value":"","parent":{"krate":0,"index":7572}},{"kind":"Use","ref_id":{"krate":0,"index":7742},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1672725,"byte_end":1672733,"line_start":43,"line_end":43,"column_start":51,"column_end":59},"name":"DebugSet","value":"","parent":{"krate":0,"index":7572}},{"kind":"Use","ref_id":{"krate":0,"index":7754},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1672735,"byte_end":1672744,"line_start":43,"line_end":43,"column_start":61,"column_end":70},"name":"DebugList","value":"","parent":{"krate":0,"index":7572}},{"kind":"Use","ref_id":{"krate":0,"index":7766},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1672746,"byte_end":1672754,"line_start":43,"line_end":43,"column_start":72,"column_end":80},"name":"DebugMap","value":"","parent":{"krate":0,"index":7572}},{"kind":"Use","ref_id":{"krate":0,"index":8242},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,109,111,100,46,114,115],"byte_start":1788253,"byte_end":1788267,"line_start":21,"line_end":21,"column_start":49,"column_end":63},"name":"Case_Ignorable","value":"","parent":{"krate":0,"index":8288}},{"kind":"Use","ref_id":{"krate":0,"index":8246},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,109,111,100,46,114,115],"byte_start":1788269,"byte_end":1788274,"line_start":21,"line_end":21,"column_start":65,"column_end":70},"name":"Cased","value":"","parent":{"krate":0,"index":8288}},{"kind":"Use","ref_id":{"krate":0,"index":8268},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,109,111,100,46,114,115],"byte_start":1788362,"byte_end":1788381,"line_start":26,"line_end":26,"column_start":40,"column_end":59},"name":"Pattern_White_Space","value":"","parent":{"krate":0,"index":8296}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":6067,"byte_end":6068,"line_start":194,"line_end":194,"column_start":20,"column_end":21},"name":"*","value":"","parent":{"krate":0,"index":8418}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,109,111,100,46,114,115],"byte_start":2072070,"byte_end":2072071,"line_start":44,"line_end":44,"column_start":20,"column_end":21},"name":"*","value":"u8x2, i8x2, b8x2","parent":{"krate":0,"index":8456}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,109,111,100,46,114,115],"byte_start":2072092,"byte_end":2072093,"line_start":45,"line_end":45,"column_start":20,"column_end":21},"name":"*","value":"u8x4, i8x4, u16x2, i16x2, b8x4","parent":{"krate":0,"index":8456}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,109,111,100,46,114,115],"byte_start":2072114,"byte_end":2072115,"line_start":46,"line_end":46,"column_start":20,"column_end":21},"name":"*","value":"i16x4, u32x2, i32x2, f32x2, u8x8, i8x8, b8x8, u16x4","parent":{"krate":0,"index":8456}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,109,111,100,46,114,115],"byte_start":2072137,"byte_end":2072138,"line_start":47,"line_end":47,"column_start":21,"column_end":22},"name":"*","value":"u64x2, f32x4, i64x2, f64x2, u8x16, i8x16, b8x16, u16x8, i16x8, u32x4, i32x4","parent":{"krate":0,"index":8456}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,109,111,100,46,114,115],"byte_start":2072160,"byte_end":2072161,"line_start":48,"line_end":48,"column_start":21,"column_end":22},"name":"*","value":"f32x8, f64x4, b8x32, u8x32, i8x32, u16x16, i16x16, u32x8, i32x8, u64x4, i64x4","parent":{"krate":0,"index":8456}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,109,111,100,46,114,115],"byte_start":2072183,"byte_end":2072184,"line_start":49,"line_end":49,"column_start":21,"column_end":22},"name":"*","value":"f64x8, u8x64, i8x64, u16x32, i16x32, u32x16, i32x16, u64x8, i64x8, b8x64, f32x16","parent":{"krate":0,"index":8456}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,109,111,100,46,114,115],"byte_start":2068005,"byte_end":2068006,"line_start":13,"line_end":13,"column_start":29,"column_end":30},"name":"*","value":"f64x8, f32x8, f64x4, f32x4, f64x2, f32x2, u8x64, i8x64, u16x32, i16x32, u8x32, i8x32, u32x16, i32x16, u16x16, i16x16, u8x16, i8x16, u64x8, b8x16, i64x8, b8x2, u32x8, i32x8, u16x8, i16x8, u8x8, i8x8, u64x4, i64x4, u32x4, i32x4, u16x4, i16x4, u8x4, i8x4, u64x2, i64x2, u32x2, i32x2, u16x2, FromBits, i16x2, u8x2, b8x32, b8x4, i8x2, b8x64, b8x8, f32x16","parent":{"krate":0,"index":8748}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,109,111,100,46,114,115],"byte_start":2069621,"byte_end":2069622,"line_start":54,"line_end":54,"column_start":32,"column_end":33},"name":"*","value":"","parent":{"krate":0,"index":8754}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,109,111,100,46,114,115],"byte_start":2069658,"byte_end":2069659,"line_start":55,"line_end":55,"column_start":35,"column_end":36},"name":"*","value":"","parent":{"krate":0,"index":8754}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2234123,"byte_end":2234124,"line_start":548,"line_end":548,"column_start":23,"column_end":24},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2234337,"byte_end":2234338,"line_start":556,"line_end":556,"column_start":22,"column_end":23},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2234373,"byte_end":2234374,"line_start":559,"line_end":559,"column_start":22,"column_end":23},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2234409,"byte_end":2234410,"line_start":562,"line_end":562,"column_start":22,"column_end":23},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2234444,"byte_end":2234445,"line_start":564,"line_end":564,"column_start":22,"column_end":23},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2234476,"byte_end":2234477,"line_start":567,"line_end":567,"column_start":20,"column_end":21},"name":"*","value":"_mm_storeu_ps, _mm_undefined_ps, _mm_loadu_ps, _mm_set1_ps, _mm_setzero_ps","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2234509,"byte_end":2234510,"line_start":569,"line_end":569,"column_start":21,"column_end":22},"name":"*","value":"_mm_loadu_si128, _mm_setzero_si128, _mm_set1_pd, _mm_set_epi64x, _mm_loadu_pd, _mm_load1_pd, _mm_set1_epi8, _mm_storeu_pd, _mm_set1_epi64x, _mm_setzero_pd, _mm_undefined_pd, _mm_cmpeq_epi32, _mm_storeu_si128, _mm_set1_epi32","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2234542,"byte_end":2234543,"line_start":571,"line_end":571,"column_start":21,"column_end":22},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2234577,"byte_end":2234578,"line_start":573,"line_end":573,"column_start":22,"column_end":23},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2234612,"byte_end":2234613,"line_start":575,"line_end":575,"column_start":22,"column_end":23},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2234647,"byte_end":2234648,"line_start":577,"line_end":577,"column_start":22,"column_end":23},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2234678,"byte_end":2234679,"line_start":579,"line_end":579,"column_start":20,"column_end":21},"name":"*","value":"_mm256_castsi128_si256, _mm256_set1_epi64x, _mm256_set1_epi32, _mm256_set1_ps, _mm256_undefined_si256, _mm256_set1_epi8, _mm256_undefined_pd, _mm256_setzero_pd, _mm256_set1_pd, _mm256_setzero_si256, _mm256_setzero_ps","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2234711,"byte_end":2234712,"line_start":581,"line_end":581,"column_start":21,"column_end":22},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2234743,"byte_end":2234744,"line_start":584,"line_end":584,"column_start":20,"column_end":21},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2234774,"byte_end":2234775,"line_start":586,"line_end":586,"column_start":20,"column_end":21},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2234808,"byte_end":2234809,"line_start":589,"line_end":589,"column_start":21,"column_end":22},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2234914,"byte_end":2234915,"line_start":594,"line_end":594,"column_start":22,"column_end":23},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2235016,"byte_end":2235017,"line_start":599,"line_end":599,"column_start":20,"column_end":21},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2235048,"byte_end":2235049,"line_start":602,"line_end":602,"column_start":20,"column_end":21},"name":"*","value":"_mm_packs_pi16, _mm_unpackhi_pi16, _mm_cmpgt_pi8, _mm_packs_pi32, _mm_cmpgt_pi16, _mm_setzero_si64, _mm_unpacklo_pi16, _mm_unpacklo_pi8","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2235092,"byte_end":2235093,"line_start":605,"line_end":605,"column_start":26,"column_end":27},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2235124,"byte_end":2235125,"line_start":608,"line_end":608,"column_start":20,"column_end":21},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2235162,"byte_end":2235163,"line_start":611,"line_end":611,"column_start":23,"column_end":24},"name":"*","value":"","parent":{"krate":0,"index":8764}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,109,111,100,46,114,115],"byte_start":3060587,"byte_end":3060588,"line_start":9,"line_end":9,"column_start":20,"column_end":21},"name":"*","value":"","parent":{"krate":0,"index":11578}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,109,111,100,46,114,115],"byte_start":3060621,"byte_end":3060622,"line_start":12,"line_end":12,"column_start":21,"column_end":22},"name":"*","value":"","parent":{"krate":0,"index":11578}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,109,111,100,46,114,115],"byte_start":3060657,"byte_end":3060658,"line_start":15,"line_end":15,"column_start":22,"column_end":23},"name":"*","value":"","parent":{"krate":0,"index":11578}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,109,111,100,46,114,115],"byte_start":3060693,"byte_end":3060694,"line_start":18,"line_end":18,"column_start":22,"column_end":23},"name":"*","value":"","parent":{"krate":0,"index":11578}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,109,111,100,46,114,115],"byte_start":3060729,"byte_end":3060730,"line_start":21,"line_end":21,"column_start":22,"column_end":23},"name":"*","value":"","parent":{"krate":0,"index":11578}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,109,111,100,46,114,115],"byte_start":3060761,"byte_end":3060762,"line_start":24,"line_end":24,"column_start":20,"column_end":21},"name":"*","value":"","parent":{"krate":0,"index":11578}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,109,111,100,46,114,115],"byte_start":3060793,"byte_end":3060794,"line_start":27,"line_end":27,"column_start":20,"column_end":21},"name":"*","value":"","parent":{"krate":0,"index":11578}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,109,111,100,46,114,115],"byte_start":3060825,"byte_end":3060826,"line_start":30,"line_end":30,"column_start":20,"column_end":21},"name":"*","value":"","parent":{"krate":0,"index":11578}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,109,111,100,46,114,115],"byte_start":3060859,"byte_end":3060860,"line_start":33,"line_end":33,"column_start":21,"column_end":22},"name":"*","value":"","parent":{"krate":0,"index":11578}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,109,111,100,46,114,115],"byte_start":3060893,"byte_end":3060894,"line_start":36,"line_end":36,"column_start":21,"column_end":22},"name":"*","value":"","parent":{"krate":0,"index":11578}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,109,111,100,46,114,115],"byte_start":3060929,"byte_end":3060930,"line_start":39,"line_end":39,"column_start":22,"column_end":23},"name":"*","value":"","parent":{"krate":0,"index":11578}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,109,111,100,46,114,115],"byte_start":3060967,"byte_end":3060968,"line_start":42,"line_end":42,"column_start":23,"column_end":24},"name":"*","value":"","parent":{"krate":0,"index":11578}},{"kind":"Use","ref_id":{"krate":0,"index":8748},"span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":6808,"byte_end":6812,"line_start":215,"line_end":215,"column_start":19,"column_end":23},"name":"simd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8752},"span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":6902,"byte_end":6906,"line_start":218,"line_end":218,"column_start":19,"column_end":23},"name":"arch","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":467,"byte_end":6907,"line_start":11,"line_end":218,"column_start":1,"column_end":24},"name":"","qualname":"::","value":"libcore/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":30},{"krate":0,"index":38},{"krate":0,"index":42},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":186},{"krate":0,"index":300},{"krate":0,"index":1114},{"krate":0,"index":1198},{"krate":0,"index":1206},{"krate":0,"index":1398},{"krate":0,"index":1432},{"krate":0,"index":1764},{"krate":0,"index":1832},{"krate":0,"index":2402},{"krate":0,"index":2592},{"krate":0,"index":2626},{"krate":0,"index":2634},{"krate":0,"index":2708},{"krate":0,"index":2738},{"krate":0,"index":2780},{"krate":0,"index":2836},{"krate":0,"index":2870},{"krate":0,"index":3010},{"krate":0,"index":3288},{"krate":0,"index":3634},{"krate":0,"index":3668},{"krate":0,"index":3680},{"krate":0,"index":4978},{"krate":0,"index":5194},{"krate":0,"index":5196},{"krate":0,"index":5374},{"krate":0,"index":6382},{"krate":0,"index":7338},{"krate":0,"index":7572},{"krate":0,"index":8068},{"krate":0,"index":8176},{"krate":0,"index":8300},{"krate":0,"index":8418},{"krate":0,"index":8422},{"krate":0,"index":8430},{"krate":0,"index":8446},{"krate":0,"index":8454},{"krate":0,"index":11782},{"krate":0,"index":11784}],"decl_id":null,"docs":" # The Rust Core Library","sig":null,"attributes":[{"value":"stable(feature = \"core\", since = \"1.6.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":2683,"byte_end":2728,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"no_core","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3214,"byte_end":3225,"line_start":63,"line_end":63,"column_start":1,"column_end":12}},{"value":"deny(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3226,"byte_end":3248,"line_start":64,"line_end":64,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3249,"byte_end":3288,"line_start":65,"line_end":65,"column_start":1,"column_end":40}},{"value":"feature(allow_internal_unstable)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3290,"byte_end":3326,"line_start":67,"line_end":67,"column_start":1,"column_end":37}},{"value":"feature(asm)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3327,"byte_end":3343,"line_start":68,"line_end":68,"column_start":1,"column_end":17}},{"value":"feature(associated_type_defaults)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3344,"byte_end":3381,"line_start":69,"line_end":69,"column_start":1,"column_end":38}},{"value":"feature(attr_literals)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3382,"byte_end":3408,"line_start":70,"line_end":70,"column_start":1,"column_end":27}},{"value":"feature(cfg_target_feature)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3409,"byte_end":3440,"line_start":71,"line_end":71,"column_start":1,"column_end":32}},{"value":"feature(cfg_target_has_atomic)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3441,"byte_end":3475,"line_start":72,"line_end":72,"column_start":1,"column_end":35}},{"value":"feature(concat_idents)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3476,"byte_end":3502,"line_start":73,"line_end":73,"column_start":1,"column_end":27}},{"value":"feature(const_fn)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3503,"byte_end":3524,"line_start":74,"line_end":74,"column_start":1,"column_end":22}},{"value":"feature(custom_attribute)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3525,"byte_end":3554,"line_start":75,"line_end":75,"column_start":1,"column_end":30}},{"value":"feature(doc_cfg)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3555,"byte_end":3575,"line_start":76,"line_end":76,"column_start":1,"column_end":21}},{"value":"feature(doc_spotlight)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3576,"byte_end":3602,"line_start":77,"line_end":77,"column_start":1,"column_end":27}},{"value":"feature(extern_types)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3603,"byte_end":3628,"line_start":78,"line_end":78,"column_start":1,"column_end":26}},{"value":"feature(fn_must_use)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3629,"byte_end":3653,"line_start":79,"line_end":79,"column_start":1,"column_end":25}},{"value":"feature(fundamental)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3654,"byte_end":3678,"line_start":80,"line_end":80,"column_start":1,"column_end":25}},{"value":"feature(intrinsics)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3679,"byte_end":3702,"line_start":81,"line_end":81,"column_start":1,"column_end":24}},{"value":"feature(iterator_flatten)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3703,"byte_end":3732,"line_start":82,"line_end":82,"column_start":1,"column_end":30}},{"value":"feature(iterator_repeat_with)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3733,"byte_end":3766,"line_start":83,"line_end":83,"column_start":1,"column_end":34}},{"value":"feature(lang_items)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3767,"byte_end":3790,"line_start":84,"line_end":84,"column_start":1,"column_end":24}},{"value":"feature(link_llvm_intrinsics)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3791,"byte_end":3824,"line_start":85,"line_end":85,"column_start":1,"column_end":34}},{"value":"feature(exhaustive_patterns)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3825,"byte_end":3857,"line_start":86,"line_end":86,"column_start":1,"column_end":33}},{"value":"feature(macro_at_most_once_rep)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3858,"byte_end":3893,"line_start":87,"line_end":87,"column_start":1,"column_end":36}},{"value":"feature(no_core)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3894,"byte_end":3914,"line_start":88,"line_end":88,"column_start":1,"column_end":21}},{"value":"feature(on_unimplemented)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3915,"byte_end":3944,"line_start":89,"line_end":89,"column_start":1,"column_end":30}},{"value":"feature(optin_builtin_traits)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3945,"byte_end":3978,"line_start":90,"line_end":90,"column_start":1,"column_end":34}},{"value":"feature(prelude_import)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3979,"byte_end":4006,"line_start":91,"line_end":91,"column_start":1,"column_end":28}},{"value":"feature(repr_simd, platform_intrinsics)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4007,"byte_end":4050,"line_start":92,"line_end":92,"column_start":1,"column_end":44}},{"value":"feature(rustc_attrs)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4051,"byte_end":4075,"line_start":93,"line_end":93,"column_start":1,"column_end":25}},{"value":"feature(rustc_const_unstable)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4076,"byte_end":4109,"line_start":94,"line_end":94,"column_start":1,"column_end":34}},{"value":"feature(simd_ffi)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4110,"byte_end":4131,"line_start":95,"line_end":95,"column_start":1,"column_end":22}},{"value":"feature(specialization)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4132,"byte_end":4159,"line_start":96,"line_end":96,"column_start":1,"column_end":28}},{"value":"feature(staged_api)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4160,"byte_end":4183,"line_start":97,"line_end":97,"column_start":1,"column_end":24}},{"value":"feature(stmt_expr_attributes)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4184,"byte_end":4217,"line_start":98,"line_end":98,"column_start":1,"column_end":34}},{"value":"feature(target_feature)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4218,"byte_end":4245,"line_start":99,"line_end":99,"column_start":1,"column_end":28}},{"value":"feature(unboxed_closures)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4246,"byte_end":4275,"line_start":100,"line_end":100,"column_start":1,"column_end":30}},{"value":"feature(untagged_unions)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4276,"byte_end":4304,"line_start":101,"line_end":101,"column_start":1,"column_end":29}},{"value":"feature(unwind_attributes)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4305,"byte_end":4335,"line_start":102,"line_end":102,"column_start":1,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":46},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,115,105,122,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"isize","qualname":"::isize","value":"libcore/num/isize.rs","parent":null,"children":[{"krate":0,"index":11786},{"krate":0,"index":11788}],"decl_id":null,"docs":" The pointer-sized signed integer type.","sig":null,"attributes":[{"value":"path = \"num/isize.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4576,"byte_end":4600,"line_start":122,"line_end":122,"column_start":1,"column_end":25}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,115,105,122,101,46,114,115],"byte_start":36223,"byte_end":36269,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":48},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,56,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i8","qualname":"::i8","value":"libcore/num/i8.rs","parent":null,"children":[{"krate":0,"index":11790},{"krate":0,"index":11792}],"decl_id":null,"docs":" The 8-bit signed integer type.","sig":null,"attributes":[{"value":"path = \"num/i8.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4616,"byte_end":4637,"line_start":123,"line_end":123,"column_start":1,"column_end":22}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,56,46,114,115],"byte_start":36872,"byte_end":36918,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":50},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,49,54,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i16","qualname":"::i16","value":"libcore/num/i16.rs","parent":null,"children":[{"krate":0,"index":11794},{"krate":0,"index":11796}],"decl_id":null,"docs":" The 16-bit signed integer type.","sig":null,"attributes":[{"value":"path = \"num/i16.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4653,"byte_end":4675,"line_start":124,"line_end":124,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,49,54,46,114,115],"byte_start":37521,"byte_end":37567,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":52},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,51,50,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i32","qualname":"::i32","value":"libcore/num/i32.rs","parent":null,"children":[{"krate":0,"index":11798},{"krate":0,"index":11800}],"decl_id":null,"docs":" The 32-bit signed integer type.","sig":null,"attributes":[{"value":"path = \"num/i32.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4691,"byte_end":4713,"line_start":125,"line_end":125,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,51,50,46,114,115],"byte_start":38171,"byte_end":38217,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":54},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,54,52,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i64","qualname":"::i64","value":"libcore/num/i64.rs","parent":null,"children":[{"krate":0,"index":11802},{"krate":0,"index":11804}],"decl_id":null,"docs":" The 64-bit signed integer type.","sig":null,"attributes":[{"value":"path = \"num/i64.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4729,"byte_end":4751,"line_start":126,"line_end":126,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,54,52,46,114,115],"byte_start":38821,"byte_end":38867,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":56},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,49,50,56,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i128","qualname":"::i128","value":"libcore/num/i128.rs","parent":null,"children":[{"krate":0,"index":11806},{"krate":0,"index":11808}],"decl_id":null,"docs":" The 128-bit signed integer type.","sig":null,"attributes":[{"value":"path = \"num/i128.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4767,"byte_end":4790,"line_start":127,"line_end":127,"column_start":1,"column_end":24}},{"value":"stable(feature = \"i128\", since = \"1.26.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,105,49,50,56,46,114,115],"byte_start":39474,"byte_end":39520,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":58},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,115,105,122,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"usize","qualname":"::usize","value":"libcore/num/usize.rs","parent":null,"children":[{"krate":0,"index":11810},{"krate":0,"index":11812}],"decl_id":null,"docs":" The pointer-sized unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/usize.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4808,"byte_end":4832,"line_start":129,"line_end":129,"column_start":1,"column_end":25}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,115,105,122,101,46,114,115],"byte_start":40188,"byte_end":40234,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":60},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,56,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"u8","qualname":"::u8","value":"libcore/num/u8.rs","parent":null,"children":[{"krate":0,"index":11814},{"krate":0,"index":11816}],"decl_id":null,"docs":" The 8-bit unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/u8.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4848,"byte_end":4869,"line_start":130,"line_end":130,"column_start":1,"column_end":22}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,56,46,114,115],"byte_start":40840,"byte_end":40886,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":62},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,49,54,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"u16","qualname":"::u16","value":"libcore/num/u16.rs","parent":null,"children":[{"krate":0,"index":11818},{"krate":0,"index":11820}],"decl_id":null,"docs":" The 16-bit unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/u16.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4885,"byte_end":4907,"line_start":131,"line_end":131,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,49,54,46,114,115],"byte_start":41492,"byte_end":41538,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":64},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,51,50,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"u32","qualname":"::u32","value":"libcore/num/u32.rs","parent":null,"children":[{"krate":0,"index":11822},{"krate":0,"index":11824}],"decl_id":null,"docs":" The 32-bit unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/u32.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4923,"byte_end":4945,"line_start":132,"line_end":132,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,51,50,46,114,115],"byte_start":42145,"byte_end":42191,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":66},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,54,52,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"u64","qualname":"::u64","value":"libcore/num/u64.rs","parent":null,"children":[{"krate":0,"index":11826},{"krate":0,"index":11828}],"decl_id":null,"docs":" The 64-bit unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/u64.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4961,"byte_end":4983,"line_start":133,"line_end":133,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,54,52,46,114,115],"byte_start":42798,"byte_end":42844,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":68},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,49,50,56,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"u128","qualname":"::u128","value":"libcore/num/u128.rs","parent":null,"children":[{"krate":0,"index":11830},{"krate":0,"index":11832}],"decl_id":null,"docs":" The 128-bit unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/u128.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4999,"byte_end":5022,"line_start":134,"line_end":134,"column_start":1,"column_end":24}},{"value":"stable(feature = \"i128\", since = \"1.26.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,117,49,50,56,46,114,115],"byte_start":43454,"byte_end":43500,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":70},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"f32","qualname":"::f32","value":"libcore/num/f32.rs","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":142}],"decl_id":null,"docs":" This module provides constants which are specific to the implementation\n of the `f32` floating point data type.","sig":null,"attributes":[{"value":"path = \"num/f32.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5040,"byte_end":5062,"line_start":136,"line_end":136,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44322,"byte_end":44368,"line_start":18,"line_end":18,"column_start":1,"column_end":47}}]},{"kind":"Const","id":{"krate":0,"index":80},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44558,"byte_end":44563,"line_start":27,"line_end":27,"column_start":11,"column_end":16},"name":"RADIX","qualname":"::f32::RADIX","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of `f32`.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44502,"byte_end":44547,"line_start":26,"line_end":26,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":82},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44675,"byte_end":44690,"line_start":31,"line_end":31,"column_start":11,"column_end":26},"name":"MANTISSA_DIGITS","qualname":"::f32::MANTISSA_DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Number of significant digits in base 2.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44619,"byte_end":44664,"line_start":30,"line_end":30,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":84},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44815,"byte_end":44821,"line_start":34,"line_end":34,"column_start":11,"column_end":17},"name":"DIGITS","qualname":"::f32::DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Approximate number of significant digits in base 10.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44759,"byte_end":44804,"line_start":33,"line_end":33,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":86},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44961,"byte_end":44968,"line_start":38,"line_end":38,"column_start":11,"column_end":18},"name":"EPSILON","qualname":"::f32::EPSILON","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Difference between `1.0` and the next largest representable number.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44905,"byte_end":44950,"line_start":37,"line_end":37,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":88},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45086,"byte_end":45089,"line_start":42,"line_end":42,"column_start":11,"column_end":14},"name":"MIN","qualname":"::f32::MIN","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Smallest finite `f32` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45030,"byte_end":45075,"line_start":41,"line_end":41,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":90},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45216,"byte_end":45228,"line_start":45,"line_end":45,"column_start":11,"column_end":23},"name":"MIN_POSITIVE","qualname":"::f32::MIN_POSITIVE","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Smallest positive normal `f32` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45160,"byte_end":45205,"line_start":44,"line_end":44,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":92},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45344,"byte_end":45347,"line_start":48,"line_end":48,"column_start":11,"column_end":14},"name":"MAX","qualname":"::f32::MAX","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Largest finite `f32` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45288,"byte_end":45333,"line_start":47,"line_end":47,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":94},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45502,"byte_end":45509,"line_start":52,"line_end":52,"column_start":11,"column_end":18},"name":"MIN_EXP","qualname":"::f32::MIN_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal power of 2 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45446,"byte_end":45491,"line_start":51,"line_end":51,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":96},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45621,"byte_end":45628,"line_start":55,"line_end":55,"column_start":11,"column_end":18},"name":"MAX_EXP","qualname":"::f32::MAX_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Maximum possible power of 2 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45565,"byte_end":45610,"line_start":54,"line_end":54,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":98},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45748,"byte_end":45758,"line_start":59,"line_end":59,"column_start":11,"column_end":21},"name":"MIN_10_EXP","qualname":"::f32::MIN_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Minimum possible normal power of 10 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45692,"byte_end":45737,"line_start":58,"line_end":58,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":100},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45870,"byte_end":45880,"line_start":62,"line_end":62,"column_start":11,"column_end":21},"name":"MAX_10_EXP","qualname":"::f32::MAX_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Maximum possible power of 10 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45814,"byte_end":45859,"line_start":61,"line_end":61,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":102},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45973,"byte_end":45976,"line_start":66,"line_end":66,"column_start":11,"column_end":14},"name":"NAN","qualname":"::f32::NAN","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Not a Number (NaN).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45917,"byte_end":45962,"line_start":65,"line_end":65,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":104},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46079,"byte_end":46087,"line_start":69,"line_end":69,"column_start":11,"column_end":19},"name":"INFINITY","qualname":"::f32::INFINITY","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Infinity (∞).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46023,"byte_end":46068,"line_start":68,"line_end":68,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":106},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46200,"byte_end":46212,"line_start":72,"line_end":72,"column_start":11,"column_end":23},"name":"NEG_INFINITY","qualname":"::f32::NEG_INFINITY","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Negative infinity (-∞).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46144,"byte_end":46189,"line_start":71,"line_end":71,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":108},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46329,"byte_end":46335,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"name":"consts","qualname":"::f32::consts","value":"libcore/num/f32.rs","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140}],"decl_id":null,"docs":" Basic mathematical constants.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46275,"byte_end":46320,"line_start":75,"line_end":75,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":110},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46499,"byte_end":46501,"line_start":81,"line_end":81,"column_start":15,"column_end":17},"name":"PI","qualname":"::f32::consts::PI","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Archimedes' constant (π)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46439,"byte_end":46484,"line_start":80,"line_end":80,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":112},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46630,"byte_end":46639,"line_start":85,"line_end":85,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::f32::consts::FRAC_PI_2","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" π/2\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46570,"byte_end":46615,"line_start":84,"line_end":84,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":114},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46768,"byte_end":46777,"line_start":89,"line_end":89,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::f32::consts::FRAC_PI_3","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" π/3\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46708,"byte_end":46753,"line_start":88,"line_end":88,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":116},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46906,"byte_end":46915,"line_start":93,"line_end":93,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::f32::consts::FRAC_PI_4","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" π/4\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46846,"byte_end":46891,"line_start":92,"line_end":92,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":118},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47045,"byte_end":47054,"line_start":97,"line_end":97,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::f32::consts::FRAC_PI_6","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" π/6\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46985,"byte_end":47030,"line_start":96,"line_end":96,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":120},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47183,"byte_end":47192,"line_start":101,"line_end":101,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::f32::consts::FRAC_PI_8","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" π/8\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47123,"byte_end":47168,"line_start":100,"line_end":100,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":122},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47321,"byte_end":47330,"line_start":105,"line_end":105,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::f32::consts::FRAC_1_PI","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" 1/π\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47261,"byte_end":47306,"line_start":104,"line_end":104,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":124},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47460,"byte_end":47469,"line_start":109,"line_end":109,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::f32::consts::FRAC_2_PI","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" 2/π\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47400,"byte_end":47445,"line_start":108,"line_end":108,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":126},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47605,"byte_end":47619,"line_start":113,"line_end":113,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::f32::consts::FRAC_2_SQRT_PI","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" 2/sqrt(π)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47545,"byte_end":47590,"line_start":112,"line_end":112,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":128},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47751,"byte_end":47757,"line_start":117,"line_end":117,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::f32::consts::SQRT_2","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" sqrt(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47691,"byte_end":47736,"line_start":116,"line_end":116,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":130},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47891,"byte_end":47904,"line_start":121,"line_end":121,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::f32::consts::FRAC_1_SQRT_2","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" 1/sqrt(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47831,"byte_end":47876,"line_start":120,"line_end":120,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":132},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":48048,"byte_end":48049,"line_start":125,"line_end":125,"column_start":15,"column_end":16},"name":"E","qualname":"::f32::consts::E","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Euler's number (e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47988,"byte_end":48033,"line_start":124,"line_end":124,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":134},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":48192,"byte_end":48198,"line_start":129,"line_end":129,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::f32::consts::LOG2_E","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" log<sub>2</sub>(e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":48132,"byte_end":48177,"line_start":128,"line_end":128,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":136},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":48342,"byte_end":48349,"line_start":133,"line_end":133,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::f32::consts::LOG10_E","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" log<sub>10</sub>(e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":48282,"byte_end":48327,"line_start":132,"line_end":132,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":138},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":48480,"byte_end":48484,"line_start":137,"line_end":137,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::f32::consts::LN_2","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" ln(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":48420,"byte_end":48465,"line_start":136,"line_end":136,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":140},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":48616,"byte_end":48621,"line_start":141,"line_end":141,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::f32::consts::LN_10","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" ln(10)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":48556,"byte_end":48601,"line_start":140,"line_end":140,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":186},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"f64","qualname":"::f64","value":"libcore/num/f64.rs","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":258}],"decl_id":null,"docs":" This module provides constants which are specific to the implementation\n of the `f64` floating point data type.","sig":null,"attributes":[{"value":"path = \"num/f64.rs\"","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5078,"byte_end":5100,"line_start":137,"line_end":137,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54791,"byte_end":54837,"line_start":18,"line_end":18,"column_start":1,"column_end":47}}]},{"kind":"Const","id":{"krate":0,"index":196},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55027,"byte_end":55032,"line_start":27,"line_end":27,"column_start":11,"column_end":16},"name":"RADIX","qualname":"::f64::RADIX","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of `f64`.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54971,"byte_end":55016,"line_start":26,"line_end":26,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":198},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55144,"byte_end":55159,"line_start":31,"line_end":31,"column_start":11,"column_end":26},"name":"MANTISSA_DIGITS","qualname":"::f64::MANTISSA_DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Number of significant digits in base 2.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55088,"byte_end":55133,"line_start":30,"line_end":30,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":200},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55284,"byte_end":55290,"line_start":34,"line_end":34,"column_start":11,"column_end":17},"name":"DIGITS","qualname":"::f64::DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Approximate number of significant digits in base 10.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55228,"byte_end":55273,"line_start":33,"line_end":33,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":202},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55431,"byte_end":55438,"line_start":38,"line_end":38,"column_start":11,"column_end":18},"name":"EPSILON","qualname":"::f64::EPSILON","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Difference between `1.0` and the next largest representable number.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55375,"byte_end":55420,"line_start":37,"line_end":37,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":204},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55564,"byte_end":55567,"line_start":42,"line_end":42,"column_start":11,"column_end":14},"name":"MIN","qualname":"::f64::MIN","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Smallest finite `f64` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55508,"byte_end":55553,"line_start":41,"line_end":41,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":206},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55703,"byte_end":55715,"line_start":45,"line_end":45,"column_start":11,"column_end":23},"name":"MIN_POSITIVE","qualname":"::f64::MIN_POSITIVE","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Smallest positive normal `f64` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55647,"byte_end":55692,"line_start":44,"line_end":44,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":208},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55840,"byte_end":55843,"line_start":48,"line_end":48,"column_start":11,"column_end":14},"name":"MAX","qualname":"::f64::MAX","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Largest finite `f64` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55784,"byte_end":55829,"line_start":47,"line_end":47,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":210},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56007,"byte_end":56014,"line_start":52,"line_end":52,"column_start":11,"column_end":18},"name":"MIN_EXP","qualname":"::f64::MIN_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal power of 2 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55951,"byte_end":55996,"line_start":51,"line_end":51,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":212},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56127,"byte_end":56134,"line_start":55,"line_end":55,"column_start":11,"column_end":18},"name":"MAX_EXP","qualname":"::f64::MAX_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Maximum possible power of 2 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56071,"byte_end":56116,"line_start":54,"line_end":54,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":214},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56255,"byte_end":56265,"line_start":59,"line_end":59,"column_start":11,"column_end":21},"name":"MIN_10_EXP","qualname":"::f64::MIN_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Minimum possible normal power of 10 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56199,"byte_end":56244,"line_start":58,"line_end":58,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":216},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56378,"byte_end":56388,"line_start":62,"line_end":62,"column_start":11,"column_end":21},"name":"MAX_10_EXP","qualname":"::f64::MAX_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Maximum possible power of 10 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56322,"byte_end":56367,"line_start":61,"line_end":61,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":218},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56482,"byte_end":56485,"line_start":66,"line_end":66,"column_start":11,"column_end":14},"name":"NAN","qualname":"::f64::NAN","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Not a Number (NaN).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56426,"byte_end":56471,"line_start":65,"line_end":65,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":220},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56588,"byte_end":56596,"line_start":69,"line_end":69,"column_start":11,"column_end":19},"name":"INFINITY","qualname":"::f64::INFINITY","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Infinity (∞).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56532,"byte_end":56577,"line_start":68,"line_end":68,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":222},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56709,"byte_end":56721,"line_start":72,"line_end":72,"column_start":11,"column_end":23},"name":"NEG_INFINITY","qualname":"::f64::NEG_INFINITY","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Negative infinity (-∞).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56653,"byte_end":56698,"line_start":71,"line_end":71,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":224},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56838,"byte_end":56844,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"name":"consts","qualname":"::f64::consts","value":"libcore/num/f64.rs","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256}],"decl_id":null,"docs":" Basic mathematical constants.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56784,"byte_end":56829,"line_start":75,"line_end":75,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":226},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57008,"byte_end":57010,"line_start":81,"line_end":81,"column_start":15,"column_end":17},"name":"PI","qualname":"::f64::consts::PI","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Archimedes' constant (π)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56948,"byte_end":56993,"line_start":80,"line_end":80,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":228},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57139,"byte_end":57148,"line_start":85,"line_end":85,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::f64::consts::FRAC_PI_2","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" π/2\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57079,"byte_end":57124,"line_start":84,"line_end":84,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":230},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57277,"byte_end":57286,"line_start":89,"line_end":89,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::f64::consts::FRAC_PI_3","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" π/3\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57217,"byte_end":57262,"line_start":88,"line_end":88,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":232},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57415,"byte_end":57424,"line_start":93,"line_end":93,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::f64::consts::FRAC_PI_4","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" π/4\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57355,"byte_end":57400,"line_start":92,"line_end":92,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":234},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57554,"byte_end":57563,"line_start":97,"line_end":97,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::f64::consts::FRAC_PI_6","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" π/6\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57494,"byte_end":57539,"line_start":96,"line_end":96,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":236},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57692,"byte_end":57701,"line_start":101,"line_end":101,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::f64::consts::FRAC_PI_8","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" π/8\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57632,"byte_end":57677,"line_start":100,"line_end":100,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":238},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57830,"byte_end":57839,"line_start":105,"line_end":105,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::f64::consts::FRAC_1_PI","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" 1/π\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57770,"byte_end":57815,"line_start":104,"line_end":104,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":240},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57969,"byte_end":57978,"line_start":109,"line_end":109,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::f64::consts::FRAC_2_PI","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" 2/π\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57909,"byte_end":57954,"line_start":108,"line_end":108,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":242},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58114,"byte_end":58128,"line_start":113,"line_end":113,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::f64::consts::FRAC_2_SQRT_PI","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" 2/sqrt(π)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58054,"byte_end":58099,"line_start":112,"line_end":112,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":244},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58260,"byte_end":58266,"line_start":117,"line_end":117,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::f64::consts::SQRT_2","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" sqrt(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58200,"byte_end":58245,"line_start":116,"line_end":116,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":246},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58400,"byte_end":58413,"line_start":121,"line_end":121,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::f64::consts::FRAC_1_SQRT_2","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" 1/sqrt(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58340,"byte_end":58385,"line_start":120,"line_end":120,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":248},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58557,"byte_end":58558,"line_start":125,"line_end":125,"column_start":15,"column_end":16},"name":"E","qualname":"::f64::consts::E","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Euler's number (e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58497,"byte_end":58542,"line_start":124,"line_end":124,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":250},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58701,"byte_end":58707,"line_start":129,"line_end":129,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::f64::consts::LOG2_E","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" log<sub>2</sub>(e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58641,"byte_end":58686,"line_start":128,"line_end":128,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":252},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58851,"byte_end":58858,"line_start":133,"line_end":133,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::f64::consts::LOG10_E","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" log<sub>10</sub>(e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58791,"byte_end":58836,"line_start":132,"line_end":132,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":254},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58989,"byte_end":58993,"line_start":137,"line_end":137,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::f64::consts::LN_2","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" ln(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":58929,"byte_end":58974,"line_start":136,"line_end":136,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":256},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":59125,"byte_end":59130,"line_start":141,"line_end":141,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::f64::consts::LN_10","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" ln(10)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":59065,"byte_end":59110,"line_start":140,"line_end":140,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":300},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"num","qualname":"::num","value":"libcore/num/mod.rs","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":11882},{"krate":0,"index":11918},{"krate":0,"index":11914},{"krate":0,"index":11910},{"krate":0,"index":11904},{"krate":0,"index":11900},{"krate":0,"index":11888},{"krate":0,"index":11884},{"krate":0,"index":11834},{"krate":0,"index":11920},{"krate":0,"index":11924},{"krate":0,"index":11928},{"krate":0,"index":11932},{"krate":0,"index":11936},{"krate":0,"index":11940},{"krate":0,"index":11944},{"krate":0,"index":11980},{"krate":0,"index":11976},{"krate":0,"index":11972},{"krate":0,"index":11966},{"krate":0,"index":11962},{"krate":0,"index":11950},{"krate":0,"index":11946},{"krate":0,"index":11842},{"krate":0,"index":11982},{"krate":0,"index":11986},{"krate":0,"index":11990},{"krate":0,"index":11994},{"krate":0,"index":11998},{"krate":0,"index":12002},{"krate":0,"index":12006},{"krate":0,"index":12042},{"krate":0,"index":12038},{"krate":0,"index":12034},{"krate":0,"index":12028},{"krate":0,"index":12024},{"krate":0,"index":12012},{"krate":0,"index":12008},{"krate":0,"index":11850},{"krate":0,"index":12044},{"krate":0,"index":12048},{"krate":0,"index":12052},{"krate":0,"index":12056},{"krate":0,"index":12060},{"krate":0,"index":12064},{"krate":0,"index":12068},{"krate":0,"index":12104},{"krate":0,"index":12100},{"krate":0,"index":12096},{"krate":0,"index":12090},{"krate":0,"index":12086},{"krate":0,"index":12074},{"krate":0,"index":12070},{"krate":0,"index":11858},{"krate":0,"index":12106},{"krate":0,"index":12110},{"krate":0,"index":12114},{"krate":0,"index":12118},{"krate":0,"index":12122},{"krate":0,"index":12126},{"krate":0,"index":12130},{"krate":0,"index":12166},{"krate":0,"index":12162},{"krate":0,"index":12158},{"krate":0,"index":12152},{"krate":0,"index":12148},{"krate":0,"index":12136},{"krate":0,"index":12132},{"krate":0,"index":11866},{"krate":0,"index":12168},{"krate":0,"index":12172},{"krate":0,"index":12176},{"krate":0,"index":12180},{"krate":0,"index":12184},{"krate":0,"index":12188},{"krate":0,"index":12192},{"krate":0,"index":12228},{"krate":0,"index":12224},{"krate":0,"index":12220},{"krate":0,"index":12214},{"krate":0,"index":12210},{"krate":0,"index":12198},{"krate":0,"index":12194},{"krate":0,"index":11874},{"krate":0,"index":12230},{"krate":0,"index":12234},{"krate":0,"index":12238},{"krate":0,"index":12242},{"krate":0,"index":12246},{"krate":0,"index":12250},{"krate":0,"index":12302},{"krate":0,"index":12338},{"krate":0,"index":12334},{"krate":0,"index":12330},{"krate":0,"index":12324},{"krate":0,"index":12320},{"krate":0,"index":12308},{"krate":0,"index":12304},{"krate":0,"index":12254},{"krate":0,"index":12340},{"krate":0,"index":12344},{"krate":0,"index":12348},{"krate":0,"index":12352},{"krate":0,"index":12356},{"krate":0,"index":12360},{"krate":0,"index":12364},{"krate":0,"index":12400},{"krate":0,"index":12396},{"krate":0,"index":12392},{"krate":0,"index":12386},{"krate":0,"index":12382},{"krate":0,"index":12370},{"krate":0,"index":12366},{"krate":0,"index":12262},{"krate":0,"index":12402},{"krate":0,"index":12406},{"krate":0,"index":12410},{"krate":0,"index":12414},{"krate":0,"index":12418},{"krate":0,"index":12422},{"krate":0,"index":12426},{"krate":0,"index":12462},{"krate":0,"index":12458},{"krate":0,"index":12454},{"krate":0,"index":12448},{"krate":0,"index":12444},{"krate":0,"index":12432},{"krate":0,"index":12428},{"krate":0,"index":12270},{"krate":0,"index":12464},{"krate":0,"index":12468},{"krate":0,"index":12472},{"krate":0,"index":12476},{"krate":0,"index":12480},{"krate":0,"index":12484},{"krate":0,"index":12488},{"krate":0,"index":12524},{"krate":0,"index":12520},{"krate":0,"index":12516},{"krate":0,"index":12510},{"krate":0,"index":12506},{"krate":0,"index":12494},{"krate":0,"index":12490},{"krate":0,"index":12278},{"krate":0,"index":12526},{"krate":0,"index":12530},{"krate":0,"index":12534},{"krate":0,"index":12538},{"krate":0,"index":12542},{"krate":0,"index":12546},{"krate":0,"index":12550},{"krate":0,"index":12586},{"krate":0,"index":12582},{"krate":0,"index":12578},{"krate":0,"index":12572},{"krate":0,"index":12568},{"krate":0,"index":12556},{"krate":0,"index":12552},{"krate":0,"index":12286},{"krate":0,"index":12588},{"krate":0,"index":12592},{"krate":0,"index":12596},{"krate":0,"index":12600},{"krate":0,"index":12604},{"krate":0,"index":12608},{"krate":0,"index":12612},{"krate":0,"index":12648},{"krate":0,"index":12644},{"krate":0,"index":12640},{"krate":0,"index":12634},{"krate":0,"index":12630},{"krate":0,"index":12618},{"krate":0,"index":12614},{"krate":0,"index":12294},{"krate":0,"index":12650},{"krate":0,"index":12654},{"krate":0,"index":12658},{"krate":0,"index":12662},{"krate":0,"index":12666},{"krate":0,"index":12670},{"krate":0,"index":12674},{"krate":0,"index":12710},{"krate":0,"index":12706},{"krate":0,"index":12694},{"krate":0,"index":12690},{"krate":0,"index":12686},{"krate":0,"index":12684},{"krate":0,"index":12680},{"krate":0,"index":12676},{"krate":0,"index":320},{"krate":0,"index":324},{"krate":0,"index":328},{"krate":0,"index":332},{"krate":0,"index":336},{"krate":0,"index":340},{"krate":0,"index":344},{"krate":0,"index":388},{"krate":0,"index":568},{"krate":0,"index":904},{"krate":0,"index":930},{"krate":0,"index":942},{"krate":0,"index":944},{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":952},{"krate":0,"index":954},{"krate":0,"index":956},{"krate":0,"index":958},{"krate":0,"index":960},{"krate":0,"index":994},{"krate":0,"index":996},{"krate":0,"index":998},{"krate":0,"index":1000},{"krate":0,"index":1002},{"krate":0,"index":18630},{"krate":0,"index":18648},{"krate":0,"index":18644},{"krate":0,"index":18640},{"krate":0,"index":18636},{"krate":0,"index":18632},{"krate":0,"index":1004},{"krate":0,"index":1042},{"krate":0,"index":18650},{"krate":0,"index":18656},{"krate":0,"index":18662},{"krate":0,"index":18668},{"krate":0,"index":18674},{"krate":0,"index":18680},{"krate":0,"index":18686},{"krate":0,"index":18692},{"krate":0,"index":18698},{"krate":0,"index":18704},{"krate":0,"index":18710},{"krate":0,"index":18716},{"krate":0,"index":18722},{"krate":0,"index":18730},{"krate":0,"index":18728},{"krate":0,"index":18724},{"krate":0,"index":1044},{"krate":0,"index":1048},{"krate":0,"index":1052},{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":1060},{"krate":0,"index":1062},{"krate":0,"index":18734},{"krate":0,"index":18740},{"krate":0,"index":18746},{"krate":0,"index":18752},{"krate":0,"index":18758},{"krate":0,"index":18764},{"krate":0,"index":18770},{"krate":0,"index":18776},{"krate":0,"index":18782},{"krate":0,"index":18788},{"krate":0,"index":18794},{"krate":0,"index":18800},{"krate":0,"index":18806},{"krate":0,"index":18812},{"krate":0,"index":18818},{"krate":0,"index":18824},{"krate":0,"index":18830},{"krate":0,"index":18836},{"krate":0,"index":18842},{"krate":0,"index":18848},{"krate":0,"index":18854},{"krate":0,"index":18860},{"krate":0,"index":18866},{"krate":0,"index":18872},{"krate":0,"index":18878},{"krate":0,"index":18884},{"krate":0,"index":18890},{"krate":0,"index":18896},{"krate":0,"index":18902},{"krate":0,"index":18908},{"krate":0,"index":18914},{"krate":0,"index":18920},{"krate":0,"index":18926},{"krate":0,"index":18932},{"krate":0,"index":18938},{"krate":0,"index":18944},{"krate":0,"index":18950},{"krate":0,"index":18956},{"krate":0,"index":18962},{"krate":0,"index":18968},{"krate":0,"index":18974},{"krate":0,"index":18980},{"krate":0,"index":18986},{"krate":0,"index":18992},{"krate":0,"index":18998},{"krate":0,"index":19004},{"krate":0,"index":19010},{"krate":0,"index":19016},{"krate":0,"index":19022},{"krate":0,"index":19028},{"krate":0,"index":19034},{"krate":0,"index":19040},{"krate":0,"index":19046},{"krate":0,"index":19052},{"krate":0,"index":19058},{"krate":0,"index":19064},{"krate":0,"index":19070},{"krate":0,"index":19076},{"krate":0,"index":19082},{"krate":0,"index":19088},{"krate":0,"index":19094},{"krate":0,"index":19100},{"krate":0,"index":19106},{"krate":0,"index":19112},{"krate":0,"index":19118},{"krate":0,"index":19124},{"krate":0,"index":19130},{"krate":0,"index":1064},{"krate":0,"index":1070},{"krate":0,"index":1084},{"krate":0,"index":19190},{"krate":0,"index":19204},{"krate":0,"index":19218},{"krate":0,"index":19232},{"krate":0,"index":19246},{"krate":0,"index":19260},{"krate":0,"index":19274},{"krate":0,"index":19288},{"krate":0,"index":19302},{"krate":0,"index":19316},{"krate":0,"index":19330},{"krate":0,"index":19344},{"krate":0,"index":1086},{"krate":0,"index":19358},{"krate":0,"index":19374},{"krate":0,"index":19370},{"krate":0,"index":19364},{"krate":0,"index":19360},{"krate":0,"index":19378},{"krate":0,"index":19392},{"krate":0,"index":19388},{"krate":0,"index":19384},{"krate":0,"index":19380},{"krate":0,"index":1092},{"krate":0,"index":1096},{"krate":0,"index":1100},{"krate":0,"index":1102},{"krate":0,"index":19396},{"krate":0,"index":19400},{"krate":0,"index":19404},{"krate":0,"index":19408},{"krate":0,"index":19412},{"krate":0,"index":19416},{"krate":0,"index":19420},{"krate":0,"index":19424},{"krate":0,"index":19428},{"krate":0,"index":19432},{"krate":0,"index":19436},{"krate":0,"index":19440},{"krate":0,"index":19444},{"krate":0,"index":19448},{"krate":0,"index":19452},{"krate":0,"index":19456},{"krate":0,"index":19460},{"krate":0,"index":19464},{"krate":0,"index":19468},{"krate":0,"index":19472},{"krate":0,"index":19476},{"krate":0,"index":19480},{"krate":0,"index":19484},{"krate":0,"index":19488},{"krate":0,"index":19492},{"krate":0,"index":19496},{"krate":0,"index":19500},{"krate":0,"index":19504},{"krate":0,"index":19508},{"krate":0,"index":19512},{"krate":0,"index":19516},{"krate":0,"index":19520},{"krate":0,"index":19524},{"krate":0,"index":19528},{"krate":0,"index":19532},{"krate":0,"index":19536},{"krate":0,"index":19540},{"krate":0,"index":19544},{"krate":0,"index":19548},{"krate":0,"index":19552},{"krate":0,"index":19556},{"krate":0,"index":19560},{"krate":0,"index":19564},{"krate":0,"index":19568},{"krate":0,"index":19572},{"krate":0,"index":19576},{"krate":0,"index":1104},{"krate":0,"index":1106},{"krate":0,"index":1108},{"krate":0,"index":1110},{"krate":0,"index":1112}],"decl_id":null,"docs":" Numeric traits and functions for the built-in numeric types.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5117,"byte_end":5129,"line_start":139,"line_end":139,"column_start":1,"column_end":13}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":65063,"byte_end":65109,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":12674},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":69183,"byte_end":69191,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"Wrapping","qualname":"::num::Wrapping","value":"","parent":null,"children":[],"decl_id":null,"docs":" Provides intentionally-wrapped arithmetic on `T`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":69056,"byte_end":69101,"line_start":144,"line_end":144,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":69172,"byte_end":69271,"line_start":146,"line_end":147,"column_start":1,"column_end":31}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":69172,"byte_end":69271,"line_start":146,"line_end":147,"column_start":1,"column_end":31}}]},{"kind":"Const","id":{"krate":0,"index":364},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":234233,"byte_end":234238,"line_start":651,"line_end":651,"column_start":19,"column_end":24},"name":"usize","qualname":"::num::wrapping::shift_max::platform::usize","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":366},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":234276,"byte_end":234281,"line_start":652,"line_end":652,"column_start":19,"column_end":24},"name":"isize","qualname":"::num::wrapping::shift_max::platform::isize","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":368},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":234322,"byte_end":234324,"line_start":655,"line_end":655,"column_start":15,"column_end":17},"name":"i8","qualname":"::num::wrapping::shift_max::i8","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":370},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":234360,"byte_end":234363,"line_start":656,"line_end":656,"column_start":15,"column_end":18},"name":"i16","qualname":"::num::wrapping::shift_max::i16","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":372},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":234399,"byte_end":234402,"line_start":657,"line_end":657,"column_start":15,"column_end":18},"name":"i32","qualname":"::num::wrapping::shift_max::i32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":374},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":234438,"byte_end":234441,"line_start":658,"line_end":658,"column_start":15,"column_end":18},"name":"i64","qualname":"::num::wrapping::shift_max::i64","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":378},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":234513,"byte_end":234515,"line_start":661,"line_end":661,"column_start":15,"column_end":17},"name":"u8","qualname":"::num::wrapping::shift_max::u8","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":380},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":234541,"byte_end":234544,"line_start":662,"line_end":662,"column_start":15,"column_end":18},"name":"u16","qualname":"::num::wrapping::shift_max::u16","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":382},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":234571,"byte_end":234574,"line_start":663,"line_end":663,"column_start":15,"column_end":18},"name":"u32","qualname":"::num::wrapping::shift_max::u32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":384},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":234601,"byte_end":234604,"line_start":664,"line_end":664,"column_start":15,"column_end":18},"name":"u64","qualname":"::num::wrapping::shift_max::u64","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":388},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flt2dec","qualname":"::num::flt2dec","value":"libcore/num/flt2dec/mod.rs","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":402},{"krate":0,"index":406},{"krate":0,"index":432},{"krate":0,"index":536},{"krate":0,"index":538},{"krate":0,"index":16712},{"krate":0,"index":16732},{"krate":0,"index":16728},{"krate":0,"index":16722},{"krate":0,"index":16718},{"krate":0,"index":16714},{"krate":0,"index":540},{"krate":0,"index":16734},{"krate":0,"index":16736},{"krate":0,"index":546},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":16740},{"krate":0,"index":16758},{"krate":0,"index":16754},{"krate":0,"index":16750},{"krate":0,"index":16746},{"krate":0,"index":16742},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":566}],"decl_id":null,"docs":"Floating-point number to decimal conversion routines.","sig":null,"attributes":[{"value":"unstable(feature = \"flt2dec\",\n           reason = \"internal routines only exposed for testing\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":240658,"byte_end":240783,"line_start":129,"line_end":131,"column_start":1,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":402},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,101,115,116,105,109,97,116,111,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"estimator","qualname":"::num::flt2dec::estimator","value":"libcore/num/flt2dec/estimator.rs","parent":null,"children":[{"krate":0,"index":404}],"decl_id":null,"docs":" The exponent estimator.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":404},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,101,115,116,105,109,97,116,111,114,46,114,115],"byte_start":264335,"byte_end":264358,"line_start":18,"line_end":18,"column_start":8,"column_end":31},"name":"estimate_scaling_factor","qualname":"::num::flt2dec::estimator::estimate_scaling_factor","value":"fn (mant: u64, exp: i16) -> i16","parent":null,"children":[],"decl_id":null,"docs":" Finds `k_0` such that `10^(k_0-1) < mant * 2^exp <= 10^(k_0+1)`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":406},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"decoder","qualname":"::num::flt2dec::decoder","value":"libcore/num/flt2dec/decoder.rs","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":16668},{"krate":0,"index":16688},{"krate":0,"index":16684},{"krate":0,"index":16680},{"krate":0,"index":16674},{"krate":0,"index":16670},{"krate":0,"index":16690},{"krate":0,"index":16710},{"krate":0,"index":16706},{"krate":0,"index":16702},{"krate":0,"index":16696},{"krate":0,"index":16692},{"krate":0,"index":418},{"krate":0,"index":422},{"krate":0,"index":426},{"krate":0,"index":430}],"decl_id":null,"docs":" Decodes a floating-point value into individual parts and error ranges.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16668},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":265620,"byte_end":265627,"line_start":25,"line_end":25,"column_start":12,"column_end":19},"name":"Decoded","qualname":"::num::flt2dec::decoder::Decoded","value":"Decoded { mant, minus, plus, exp, inclusive }","parent":null,"children":[{"krate":0,"index":7829},{"krate":0,"index":7831},{"krate":0,"index":7833},{"krate":0,"index":7835},{"krate":0,"index":7837}],"decl_id":null,"docs":" Decoded unsigned finite value, such that:","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":265609,"byte_end":265989,"line_start":25,"line_end":38,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":265609,"byte_end":265989,"line_start":25,"line_end":38,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":7829},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":265667,"byte_end":265671,"line_start":27,"line_end":27,"column_start":9,"column_end":13},"name":"mant","qualname":"::num::flt2dec::decoder::Decoded::mant","value":"u64","parent":{"krate":0,"index":16668},"children":[],"decl_id":null,"docs":" The scaled mantissa.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7831},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":265717,"byte_end":265722,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"name":"minus","qualname":"::num::flt2dec::decoder::Decoded::minus","value":"u64","parent":{"krate":0,"index":16668},"children":[],"decl_id":null,"docs":" The lower error range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7833},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":265768,"byte_end":265772,"line_start":31,"line_end":31,"column_start":9,"column_end":13},"name":"plus","qualname":"::num::flt2dec::decoder::Decoded::plus","value":"u64","parent":{"krate":0,"index":16668},"children":[],"decl_id":null,"docs":" The upper error range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7835},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":265826,"byte_end":265829,"line_start":33,"line_end":33,"column_start":9,"column_end":12},"name":"exp","qualname":"::num::flt2dec::decoder::Decoded::exp","value":"i16","parent":{"krate":0,"index":16668},"children":[],"decl_id":null,"docs":" The shared exponent in base 2.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7837},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":265971,"byte_end":265980,"line_start":37,"line_end":37,"column_start":9,"column_end":18},"name":"inclusive","qualname":"::num::flt2dec::decoder::Decoded::inclusive","value":"bool","parent":{"krate":0,"index":16668},"children":[],"decl_id":null,"docs":" True when the error range is inclusive.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7839},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":266113,"byte_end":266116,"line_start":44,"line_end":44,"column_start":5,"column_end":8},"name":"Nan","qualname":"::num::flt2dec::decoder::FullDecoded::Nan","value":"FullDecoded::Nan","parent":{"krate":0,"index":16690},"children":[],"decl_id":null,"docs":" Not-a-number.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7841},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":266171,"byte_end":266179,"line_start":46,"line_end":46,"column_start":5,"column_end":13},"name":"Infinite","qualname":"::num::flt2dec::decoder::FullDecoded::Infinite","value":"FullDecoded::Infinite","parent":{"krate":0,"index":16690},"children":[],"decl_id":null,"docs":" Infinities, either positive or negative.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7843},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":266228,"byte_end":266232,"line_start":48,"line_end":48,"column_start":5,"column_end":9},"name":"Zero","qualname":"::num::flt2dec::decoder::FullDecoded::Zero","value":"FullDecoded::Zero","parent":{"krate":0,"index":16690},"children":[],"decl_id":null,"docs":" Zero, either positive or negative.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7845},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":266290,"byte_end":266296,"line_start":50,"line_end":50,"column_start":5,"column_end":11},"name":"Finite","qualname":"::num::flt2dec::decoder::FullDecoded::Finite","value":"FullDecoded::Finite(Decoded)","parent":{"krate":0,"index":16690},"children":[],"decl_id":null,"docs":" Finite numbers with further decoded fields.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":16690},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":266073,"byte_end":266084,"line_start":42,"line_end":42,"column_start":10,"column_end":21},"name":"FullDecoded","qualname":"::num::flt2dec::decoder::FullDecoded","value":"FullDecoded::{Nan, Infinite, Zero, Finite}","parent":null,"children":[{"krate":0,"index":7839},{"krate":0,"index":7841},{"krate":0,"index":7843},{"krate":0,"index":7845}],"decl_id":null,"docs":" Decoded unsigned value.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":266064,"byte_end":266308,"line_start":42,"line_end":51,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":266064,"byte_end":266308,"line_start":42,"line_end":51,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":418},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":266370,"byte_end":266384,"line_start":54,"line_end":54,"column_start":11,"column_end":25},"name":"DecodableFloat","qualname":"::num::flt2dec::decoder::DecodableFloat","value":"DecodableFloat: RawFloat + Copy","parent":null,"children":[{"krate":0,"index":420}],"decl_id":null,"docs":" A floating point type which can be `decode`d.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":266458,"byte_end":266476,"line_start":56,"line_end":56,"column_start":8,"column_end":26},"name":"min_pos_norm_value","qualname":"::num::flt2dec::decoder::DecodableFloat::min_pos_norm_value","value":"fn () -> Self","parent":{"krate":0,"index":418},"children":[],"decl_id":null,"docs":" A floating point type which can be `decode`d.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":430},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":266782,"byte_end":266788,"line_start":69,"line_end":69,"column_start":8,"column_end":14},"name":"decode","qualname":"::num::flt2dec::decoder::decode","value":"fn <T> (v: T) -> (bool, FullDecoded)","parent":null,"children":[],"decl_id":null,"docs":" Returns a sign (true when negative) and `FullDecoded` value\n from given floating point number.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":432},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":240944,"byte_end":240952,"line_start":140,"line_end":140,"column_start":9,"column_end":17},"name":"strategy","qualname":"::num::flt2dec::strategy","value":"libcore/num/flt2dec/mod.rs","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":476}],"decl_id":null,"docs":" Digit-generation algorithms.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":434},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,100,114,97,103,111,110,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dragon","qualname":"::num::flt2dec::strategy::dragon","value":"libcore/num/flt2dec/strategy/dragon.rs","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":472},{"krate":0,"index":474}],"decl_id":null,"docs":"Almost direct (but slightly optimized) Rust translation of Figure 3 of [1].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":466},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,100,114,97,103,111,110,46,114,115],"byte_start":270225,"byte_end":270234,"line_start":43,"line_end":43,"column_start":8,"column_end":17},"name":"mul_pow10","qualname":"::num::flt2dec::strategy::dragon::mul_pow10","value":"fn (x: &mut Big, n: usize) -> &mut Big","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":472},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,100,114,97,103,111,110,46,114,115],"byte_start":271416,"byte_end":271431,"line_start":78,"line_end":78,"column_start":8,"column_end":23},"name":"format_shortest","qualname":"::num::flt2dec::strategy::dragon::format_shortest","value":"fn (d: &Decoded, buf: &mut [u8]) -> (usize, i16)","parent":null,"children":[],"decl_id":null,"docs":" The shortest mode implementation for Dragon.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":474},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,100,114,97,103,111,110,46,114,115],"byte_start":278337,"byte_end":278349,"line_start":228,"line_end":228,"column_start":8,"column_end":20},"name":"format_exact","qualname":"::num::flt2dec::strategy::dragon::format_exact","value":"fn (d: &Decoded, buf: &mut [u8], limit: i16) -> (usize, i16)","parent":null,"children":[],"decl_id":null,"docs":" The exact and fixed mode implementation for Dragon.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":476},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"grisu","qualname":"::num::flt2dec::strategy::grisu","value":"libcore/num/flt2dec/strategy/grisu.rs","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":488},{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":520},{"krate":0,"index":524},{"krate":0,"index":528},{"krate":0,"index":532}],"decl_id":null,"docs":"Rust adaptation of Grisu3 algorithm described in [1]. It uses about\n1KB of precomputed table, and in turn, it's very quick for most inputs.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":488},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":283479,"byte_end":283484,"line_start":24,"line_end":24,"column_start":26,"column_end":31},"name":"ALPHA","qualname":"::num::flt2dec::strategy::grisu::ALPHA","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":490},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":283522,"byte_end":283527,"line_start":25,"line_end":25,"column_start":26,"column_end":31},"name":"GAMMA","qualname":"::num::flt2dec::strategy::grisu::GAMMA","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":492},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":283861,"byte_end":283873,"line_start":38,"line_end":38,"column_start":12,"column_end":24},"name":"CACHED_POW10","qualname":"::num::flt2dec::strategy::grisu::CACHED_POW10","value":"[(u64, i16, i16); 81]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":494},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":287102,"byte_end":287122,"line_start":122,"line_end":122,"column_start":26,"column_end":46},"name":"CACHED_POW10_FIRST_E","qualname":"::num::flt2dec::strategy::grisu::CACHED_POW10_FIRST_E","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":496},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":287162,"byte_end":287181,"line_start":123,"line_end":123,"column_start":26,"column_end":45},"name":"CACHED_POW10_LAST_E","qualname":"::num::flt2dec::strategy::grisu::CACHED_POW10_LAST_E","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":498},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":287218,"byte_end":287230,"line_start":126,"line_end":126,"column_start":8,"column_end":20},"name":"cached_power","qualname":"::num::flt2dec::strategy::grisu::cached_power","value":"fn (alpha: i16, gamma: i16) -> (i16, Fp)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":500},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":287711,"byte_end":287733,"line_start":138,"line_end":138,"column_start":8,"column_end":30},"name":"max_pow10_no_more_than","qualname":"::num::flt2dec::strategy::grisu::max_pow10_no_more_than","value":"fn (x: u32) -> (u8, u32)","parent":null,"children":[],"decl_id":null,"docs":" Given `x > 0`, returns `(k, 10^k)` such that `10^k <= x < 10^(k+1)`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":520},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":288568,"byte_end":288587,"line_start":164,"line_end":164,"column_start":8,"column_end":27},"name":"format_shortest_opt","qualname":"::num::flt2dec::strategy::grisu::format_shortest_opt","value":"fn (d: &Decoded, buf: &mut [u8]) -> Option<(usize, i16)>","parent":null,"children":[],"decl_id":null,"docs":" The shortest mode implementation for Grisu.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":524},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":302777,"byte_end":302792,"line_start":431,"line_end":431,"column_start":8,"column_end":23},"name":"format_shortest","qualname":"::num::flt2dec::strategy::grisu::format_shortest","value":"fn (d: &Decoded, buf: &mut [u8]) -> (usize, i16)","parent":null,"children":[],"decl_id":null,"docs":" The shortest mode implementation for Grisu with Dragon fallback.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":528},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":303184,"byte_end":303200,"line_start":442,"line_end":442,"column_start":8,"column_end":24},"name":"format_exact_opt","qualname":"::num::flt2dec::strategy::grisu::format_exact_opt","value":"fn (d: &Decoded, buf: &mut [u8], limit: i16) -> Option<(usize, i16)>","parent":null,"children":[],"decl_id":null,"docs":" The exact and fixed mode implementation for Grisu.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":532},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":314415,"byte_end":314427,"line_start":688,"line_end":688,"column_start":8,"column_end":20},"name":"format_exact","qualname":"::num::flt2dec::strategy::grisu::format_exact","value":"fn (d: &Decoded, buf: &mut [u8], limit: i16) -> (usize, i16)","parent":null,"children":[],"decl_id":null,"docs":" The exact and fixed mode implementation for Grisu with Dragon fallback.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":536},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":241309,"byte_end":241323,"line_start":150,"line_end":150,"column_start":11,"column_end":25},"name":"MAX_SIG_DIGITS","qualname":"::num::flt2dec::MAX_SIG_DIGITS","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The minimum size of buffer necessary for the shortest mode.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":538},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":241507,"byte_end":241515,"line_start":155,"line_end":155,"column_start":8,"column_end":16},"name":"round_up","qualname":"::num::flt2dec::round_up","value":"fn (d: &mut [u8], n: usize) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" When `d[..n]` contains decimal digits, increase the last digit and propagate carry.\n Returns a next digit when it causes the length change.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7849},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":242184,"byte_end":242188,"line_start":177,"line_end":177,"column_start":5,"column_end":9},"name":"Zero","qualname":"::num::flt2dec::Part::Zero","value":"Part::Zero(usize)","parent":{"krate":0,"index":16712},"children":[],"decl_id":null,"docs":" Given number of zero digits.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7853},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":242242,"byte_end":242245,"line_start":179,"line_end":179,"column_start":5,"column_end":8},"name":"Num","qualname":"::num::flt2dec::Part::Num","value":"Part::Num(u16)","parent":{"krate":0,"index":16712},"children":[],"decl_id":null,"docs":" A literal number up to 5 digits.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7857},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":242296,"byte_end":242300,"line_start":181,"line_end":181,"column_start":5,"column_end":9},"name":"Copy","qualname":"::num::flt2dec::Part::Copy","value":"Part::Copy(&'a [u8])","parent":{"krate":0,"index":16712},"children":[],"decl_id":null,"docs":" A verbatim copy of given bytes.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":16712},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":242132,"byte_end":242136,"line_start":175,"line_end":175,"column_start":10,"column_end":14},"name":"Part","qualname":"::num::flt2dec::Part","value":"Part::{Zero, Num, Copy}","parent":null,"children":[{"krate":0,"index":7849},{"krate":0,"index":7853},{"krate":0,"index":7857}],"decl_id":null,"docs":" Formatted parts.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":242123,"byte_end":242313,"line_start":175,"line_end":182,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":242123,"byte_end":242313,"line_start":175,"line_end":182,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":242399,"byte_end":242402,"line_start":186,"line_end":186,"column_start":12,"column_end":15},"name":"len","qualname":"<Part<'a>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":242941,"byte_end":242946,"line_start":198,"line_end":198,"column_start":12,"column_end":17},"name":"write","qualname":"<Part<'a>>::write","value":"fn (&self, out: &mut [u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16734},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":243823,"byte_end":243832,"line_start":226,"line_end":226,"column_start":12,"column_end":21},"name":"Formatted","qualname":"::num::flt2dec::Formatted","value":"Formatted { sign, parts }","parent":null,"children":[{"krate":0,"index":7873},{"krate":0,"index":7875}],"decl_id":null,"docs":" Formatted result containing one or more parts.\n This can be written to the byte buffer or converted to the allocated string.\n","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":243755,"byte_end":243794,"line_start":224,"line_end":224,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":7873},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":243918,"byte_end":243922,"line_start":228,"line_end":228,"column_start":9,"column_end":13},"name":"sign","qualname":"::num::flt2dec::Formatted::sign","value":"&'static [u8]","parent":{"krate":0,"index":16734},"children":[],"decl_id":null,"docs":" A byte slice representing a sign, either `\"\"`, `\"-\"` or `\"+\"`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7875},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":244026,"byte_end":244031,"line_start":230,"line_end":230,"column_start":9,"column_end":14},"name":"parts","qualname":"::num::flt2dec::Formatted::parts","value":"&'a [num::flt2dec::Part<'a>]","parent":{"krate":0,"index":16734},"children":[],"decl_id":null,"docs":" Formatted parts to be rendered after a sign and optional zero padding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":244156,"byte_end":244159,"line_start":235,"line_end":235,"column_start":12,"column_end":15},"name":"len","qualname":"<Formatted<'a>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":244555,"byte_end":244560,"line_start":246,"line_end":246,"column_start":12,"column_end":17},"name":"write","qualname":"<Formatted<'a>>::write","value":"fn (&self, out: &mut [u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7881},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":249638,"byte_end":249643,"line_start":374,"line_end":374,"column_start":5,"column_end":10},"name":"Minus","qualname":"::num::flt2dec::Sign::Minus","value":"Sign::Minus","parent":{"krate":0,"index":16740},"children":[],"decl_id":null,"docs":" Prints `-` only for the negative non-zero values.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7883},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":249764,"byte_end":249772,"line_start":376,"line_end":376,"column_start":5,"column_end":13},"name":"MinusRaw","qualname":"::num::flt2dec::Sign::MinusRaw","value":"Sign::MinusRaw","parent":{"krate":0,"index":16740},"children":[],"decl_id":null,"docs":" Prints `-` only for any negative values (including the negative zero).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7885},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":249882,"byte_end":249891,"line_start":378,"line_end":378,"column_start":5,"column_end":14},"name":"MinusPlus","qualname":"::num::flt2dec::Sign::MinusPlus","value":"Sign::MinusPlus","parent":{"krate":0,"index":16740},"children":[],"decl_id":null,"docs":" Prints `-` for the negative non-zero values, or `+` otherwise.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7887},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":250021,"byte_end":250033,"line_start":380,"line_end":380,"column_start":5,"column_end":17},"name":"MinusPlusRaw","qualname":"::num::flt2dec::Sign::MinusPlusRaw","value":"Sign::MinusPlusRaw","parent":{"krate":0,"index":16740},"children":[],"decl_id":null,"docs":" Prints `-` for any negative values (including the negative zero), or `+` otherwise.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":16740},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":249569,"byte_end":249573,"line_start":372,"line_end":372,"column_start":10,"column_end":14},"name":"Sign","qualname":"::num::flt2dec::Sign","value":"Sign::{Minus, MinusRaw, MinusPlus, MinusPlusRaw}","parent":null,"children":[{"krate":0,"index":7881},{"krate":0,"index":7883},{"krate":0,"index":7885},{"krate":0,"index":7887}],"decl_id":null,"docs":" Sign formatting options.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":249560,"byte_end":250065,"line_start":372,"line_end":381,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":249560,"byte_end":250065,"line_start":372,"line_end":381,"column_start":1,"column_end":2}}]},{"kind":"Function","id":{"krate":0,"index":558},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":251928,"byte_end":251943,"line_start":415,"line_end":415,"column_start":8,"column_end":23},"name":"to_shortest_str","qualname":"::num::flt2dec::to_shortest_str","value":"fn <'a, T, F> (mut format_shortest: F, v: T, sign: Sign, frac_digits: usize, _upper: bool, buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>","parent":null,"children":[],"decl_id":null,"docs":" Formats given floating point number into the decimal form with at least\n given number of fractional digits. The result is stored to the supplied parts\n array while utilizing given byte buffer as a scratch. `upper` is currently\n unused but left for the future decision to change the case of non-finite values,\n i.e. `inf` and `nan`. The first part to be rendered is always a `Part::Sign`\n (which can be an empty string if no sign is rendered).","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":254481,"byte_end":254500,"line_start":470,"line_end":470,"column_start":8,"column_end":27},"name":"to_shortest_exp_str","qualname":"::num::flt2dec::to_shortest_exp_str","value":"fn <'a, T, F> (mut format_shortest: F, v: T, sign: Sign, dec_bounds: (i16, i16), upper: bool, buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>","parent":null,"children":[],"decl_id":null,"docs":" Formats given floating point number into the decimal form or\n the exponential form, depending on the resulting exponent. The result is\n stored to the supplied parts array while utilizing given byte buffer\n as a scratch. `upper` is used to determine the case of non-finite values\n (`inf` and `nan`) or the case of the exponent prefix (`e` or `E`).\n The first part to be rendered is always a `Part::Sign` (which can be\n an empty string if no sign is rendered).","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":564},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":258288,"byte_end":258304,"line_start":549,"line_end":549,"column_start":8,"column_end":24},"name":"to_exact_exp_str","qualname":"::num::flt2dec::to_exact_exp_str","value":"fn <'a, T, F> (mut format_exact: F, v: T, sign: Sign, ndigits: usize, upper: bool, buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>","parent":null,"children":[],"decl_id":null,"docs":" Formats given floating point number into the exponential form with\n exactly given number of significant digits. The result is stored to\n the supplied parts array while utilizing given byte buffer as a scratch.\n `upper` is used to determine the case of the exponent prefix (`e` or `E`).\n The first part to be rendered is always a `Part::Sign` (which can be\n an empty string if no sign is rendered).","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":566},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":261012,"byte_end":261030,"line_start":605,"line_end":605,"column_start":8,"column_end":26},"name":"to_exact_fixed_str","qualname":"::num::flt2dec::to_exact_fixed_str","value":"fn <'a, T, F> (mut format_exact: F, v: T, sign: Sign, frac_digits: usize, _upper: bool, buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>","parent":null,"children":[],"decl_id":null,"docs":" Formats given floating point number into the decimal form with exactly\n given number of fractional digits. The result is stored to the supplied parts\n array while utilizing given byte buffer as a scratch. `upper` is currently\n unused but left for the future decision to change the case of non-finite values,\n i.e. `inf` and `nan`. The first part to be rendered is always a `Part::Sign`\n (which can be an empty string if no sign is rendered).","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":568},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dec2flt","qualname":"::num::dec2flt","value":"libcore/num/dec2flt/mod.rs","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":648},{"krate":0,"index":660},{"krate":0,"index":684},{"krate":0,"index":854},{"krate":0,"index":878},{"krate":0,"index":16854},{"krate":0,"index":16860},{"krate":0,"index":16866},{"krate":0,"index":16882},{"krate":0,"index":16878},{"krate":0,"index":16872},{"krate":0,"index":16868},{"krate":0,"index":16886},{"krate":0,"index":16900},{"krate":0,"index":16896},{"krate":0,"index":16892},{"krate":0,"index":16888},{"krate":0,"index":880},{"krate":0,"index":884},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":894},{"krate":0,"index":896},{"krate":0,"index":898},{"krate":0,"index":900},{"krate":0,"index":902}],"decl_id":null,"docs":" Converting decimal strings into IEEE 754 binary floating point numbers.","sig":null,"attributes":[{"value":"unstable(feature = \"dec2flt\",\n           reason = \"internal routines only exposed for testing\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":320165,"byte_end":320290,"line_start":91,"line_end":93,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":630},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,97,108,103,111,114,105,116,104,109,46,114,115],"byte_start":330951,"byte_end":330964,"line_start":38,"line_end":38,"column_start":12,"column_end":25},"name":"set_precision","qualname":"::num::dec2flt::algorithm::fpu_precision::set_precision","value":"fn <T> () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":632},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,97,108,103,111,114,105,116,104,109,46,114,115],"byte_start":333859,"byte_end":333868,"line_start":107,"line_end":107,"column_start":8,"column_end":17},"name":"fast_path","qualname":"::num::dec2flt::algorithm::fast_path","value":"fn <T> (integral: &[u8], fractional: &[u8], e: i64) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" The fast path of Bellerophon using machine-sized integers and floats.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":634},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,97,108,103,111,114,105,116,104,109,46,114,115],"byte_start":336454,"byte_end":336465,"line_start":155,"line_end":155,"column_start":8,"column_end":19},"name":"bellerophon","qualname":"::num::dec2flt::algorithm::bellerophon","value":"fn <T> (f: &Big, e: i16) -> T","parent":null,"children":[],"decl_id":null,"docs":" Algorithm Bellerophon is trivial code justified by non-trivial numeric analysis.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":640},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,97,108,103,111,114,105,116,104,109,46,114,115],"byte_start":342262,"byte_end":342273,"line_start":287,"line_end":287,"column_start":8,"column_end":19},"name":"algorithm_m","qualname":"::num::dec2flt::algorithm::algorithm_m","value":"fn <T> (f: &Big, e: i16) -> T","parent":null,"children":[],"decl_id":null,"docs":" Conceptually, Algorithm M is the simplest way to convert a decimal to a float.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":650},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,116,97,98,108,101,46,114,115],"byte_start":347926,"byte_end":347931,"line_start":14,"line_end":14,"column_start":11,"column_end":16},"name":"MIN_E","qualname":"::num::dec2flt::table::MIN_E","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":652},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,116,97,98,108,101,46,114,115],"byte_start":347955,"byte_end":347960,"line_start":15,"line_end":15,"column_start":11,"column_end":16},"name":"MAX_E","qualname":"::num::dec2flt::table::MAX_E","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":654},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,116,97,98,108,101,46,114,115],"byte_start":347984,"byte_end":347990,"line_start":17,"line_end":17,"column_start":11,"column_end":17},"name":"POWERS","qualname":"::num::dec2flt::table::POWERS","value":"([u64; 611], [i16; 611])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":656},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,116,97,98,108,101,46,114,115],"byte_start":368488,"byte_end":368504,"line_start":1243,"line_end":1243,"column_start":11,"column_end":27},"name":"F32_SHORT_POWERS","qualname":"::num::dec2flt::table::F32_SHORT_POWERS","value":"[f32; 11]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":658},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,116,97,98,108,101,46,114,115],"byte_start":368634,"byte_end":368650,"line_start":1257,"line_end":1257,"column_start":11,"column_end":27},"name":"F64_SHORT_POWERS","qualname":"::num::dec2flt::table::F64_SHORT_POWERS","value":"[f64; 23]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":674},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":369779,"byte_end":369800,"line_start":21,"line_end":21,"column_start":8,"column_end":29},"name":"compare_with_half_ulp","qualname":"::num::dec2flt::num::compare_with_half_ulp","value":"fn (f: &Big, ones_place: usize) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Test whether truncating all bits less significant than `ones_place` introduces\n a relative error less, equal, or greater than 0.5 ULP.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":676},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":370843,"byte_end":370861,"line_start":49,"line_end":49,"column_start":8,"column_end":26},"name":"from_str_unchecked","qualname":"::num::dec2flt::num::from_str_unchecked","value":"fn <'a, T> (bytes: T) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Convert an ASCII string containing only decimal digits to a `u64`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":371193,"byte_end":371206,"line_start":60,"line_end":60,"column_start":8,"column_end":21},"name":"digits_to_big","qualname":"::num::dec2flt::num::digits_to_big","value":"fn (integral: &[u8], fractional: &[u8]) -> Big","parent":null,"children":[],"decl_id":null,"docs":" Convert a string of ASCII digits into a bignum.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":680},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":371523,"byte_end":371529,"line_start":71,"line_end":71,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::num::dec2flt::num::to_u64","value":"fn (x: &Big) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Unwraps a bignum into a 64 bit integer. Panics if the number is too large.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":682},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":371899,"byte_end":371907,"line_start":86,"line_end":86,"column_start":8,"column_end":16},"name":"get_bits","qualname":"::num::dec2flt::num::get_bits","value":"fn (x: &Big, start: usize, end: usize) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Extract a range of bits.\n Index 0 is the least significant bit and the range is half-open as usual.\n Panics if asked to extract more bits than fit into the return type.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":684},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rawfp","qualname":"::num::dec2flt::rawfp","value":"libcore/num/dec2flt/rawfp.rs","parent":null,"children":[{"krate":0,"index":686},{"krate":0,"index":694},{"krate":0,"index":700},{"krate":0,"index":710},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":738},{"krate":0,"index":16760},{"krate":0,"index":16770},{"krate":0,"index":16766},{"krate":0,"index":16762},{"krate":0,"index":740},{"krate":0,"index":744},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":816},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":852}],"decl_id":null,"docs":" Bit fiddling on positive IEEE 754 floats. Negative numbers aren't and needn't be handled.\n Normal floating point numbers have a canonical representation as (frac, exp) such that the\n value is 2<sup>exp</sup> * (1 + sum(frac[N-i] / 2<sup>i</sup>)) where N is the number of bits.\n Subnormals are slightly different and weird, but the same principle applies.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16760},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374048,"byte_end":374056,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"Unpacked","qualname":"::num::dec2flt::rawfp::Unpacked","value":"Unpacked { sig, k }","parent":null,"children":[{"krate":0,"index":7889},{"krate":0,"index":7891}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374037,"byte_end":374094,"line_start":41,"line_end":44,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":7889},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374067,"byte_end":374070,"line_start":42,"line_end":42,"column_start":9,"column_end":12},"name":"sig","qualname":"::num::dec2flt::rawfp::Unpacked::sig","value":"u64","parent":{"krate":0,"index":16760},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7891},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374085,"byte_end":374086,"line_start":43,"line_end":43,"column_start":9,"column_end":10},"name":"k","qualname":"::num::dec2flt::rawfp::Unpacked::k","value":"i16","parent":{"krate":0,"index":16760},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374123,"byte_end":374126,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"new","qualname":"<Unpacked>::new","value":"fn (sig: u64, k: i16) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":744},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374573,"byte_end":374581,"line_start":58,"line_end":58,"column_start":11,"column_end":19},"name":"RawFloat","qualname":"::num::dec2flt::rawfp::RawFloat","value":"RawFloat: Float + Copy + Debug + LowerExp + Mul<Output = Self> + Div<Output = Self> +\nNeg<Output = Self>","parent":null,"children":[{"krate":0,"index":746},{"krate":0,"index":748},{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":788}],"decl_id":null,"docs":" A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":746},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374771,"byte_end":374779,"line_start":69,"line_end":69,"column_start":11,"column_end":19},"name":"INFINITY","qualname":"::num::dec2flt::rawfp::RawFloat::INFINITY","value":"Self","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":748},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374797,"byte_end":374800,"line_start":70,"line_end":70,"column_start":11,"column_end":14},"name":"NAN","qualname":"::num::dec2flt::rawfp::RawFloat::NAN","value":"Self","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":750},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374818,"byte_end":374822,"line_start":71,"line_end":71,"column_start":11,"column_end":15},"name":"ZERO","qualname":"::num::dec2flt::rawfp::RawFloat::ZERO","value":"Self","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":752},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374889,"byte_end":374896,"line_start":74,"line_end":74,"column_start":10,"column_end":17},"name":"RawBits","qualname":"::num::dec2flt::rawfp::RawFloat::RawBits","value":"type RawBits: Add<Output = Self::RawBits> + From<u8> + TryFrom<u64>;","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" Same as `Float::Bits` with extra traits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":375022,"byte_end":375036,"line_start":77,"line_end":77,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::num::dec2flt::rawfp::RawFloat::integer_decode","value":"fn (self) -> (u64, i16, i8)","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":375096,"byte_end":375102,"line_start":80,"line_end":80,"column_start":8,"column_end":14},"name":"unpack","qualname":"::num::dec2flt::rawfp::RawFloat::unpack","value":"fn (self) -> Unpacked","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":375316,"byte_end":375324,"line_start":84,"line_end":84,"column_start":8,"column_end":16},"name":"from_int","qualname":"::num::dec2flt::rawfp::RawFloat::from_int","value":"fn (x: u64) -> Self","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":375462,"byte_end":375478,"line_start":88,"line_end":88,"column_start":8,"column_end":24},"name":"short_fast_pow10","qualname":"::num::dec2flt::rawfp::RawFloat::short_fast_pow10","value":"fn (e: usize) -> Self","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":762},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":375630,"byte_end":375650,"line_start":92,"line_end":92,"column_start":11,"column_end":31},"name":"CEIL_LOG5_OF_MAX_SIG","qualname":"::num::dec2flt::rawfp::RawFloat::CEIL_LOG5_OF_MAX_SIG","value":"i16","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" What the name says. It's easier to hard code than juggling intrinsics and\n hoping LLVM constant folds it.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":764},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":375862,"byte_end":375879,"line_start":96,"line_end":96,"column_start":11,"column_end":28},"name":"MAX_NORMAL_DIGITS","qualname":"::num::dec2flt::rawfp::RawFloat::MAX_NORMAL_DIGITS","value":"usize","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" subnormals. Probably the decimal exponent of the maximum normal value, hence the name.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":766},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":376037,"byte_end":376047,"line_start":100,"line_end":100,"column_start":11,"column_end":21},"name":"INF_CUTOFF","qualname":"::num::dec2flt::rawfp::RawFloat::INF_CUTOFF","value":"i64","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" When the most significant decimal digit has a place value greater than this, the number\n is certainly rounded to infinity.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":768},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":376196,"byte_end":376207,"line_start":104,"line_end":104,"column_start":11,"column_end":22},"name":"ZERO_CUTOFF","qualname":"::num::dec2flt::rawfp::RawFloat::ZERO_CUTOFF","value":"i64","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" When the most significant decimal digit has a place value less than this, the number\n is certainly rounded to zero.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":770},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":376269,"byte_end":376277,"line_start":107,"line_end":107,"column_start":11,"column_end":19},"name":"EXP_BITS","qualname":"::num::dec2flt::rawfp::RawFloat::EXP_BITS","value":"u8","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" The number of bits in the exponent.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":772},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":376369,"byte_end":376377,"line_start":110,"line_end":110,"column_start":11,"column_end":19},"name":"SIG_BITS","qualname":"::num::dec2flt::rawfp::RawFloat::SIG_BITS","value":"u8","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" The number of bits in the significand, *including* the hidden bit.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":774},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":376469,"byte_end":376486,"line_start":113,"line_end":113,"column_start":11,"column_end":28},"name":"EXPLICIT_SIG_BITS","qualname":"::num::dec2flt::rawfp::RawFloat::EXPLICIT_SIG_BITS","value":"u8","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" The number of bits in the significand, *excluding* the hidden bit.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":776},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":376568,"byte_end":376575,"line_start":116,"line_end":116,"column_start":11,"column_end":18},"name":"MAX_EXP","qualname":"::num::dec2flt::rawfp::RawFloat::MAX_EXP","value":"i16","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" The maximum legal exponent in fractional representation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":778},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":376680,"byte_end":376687,"line_start":119,"line_end":119,"column_start":11,"column_end":18},"name":"MIN_EXP","qualname":"::num::dec2flt::rawfp::RawFloat::MIN_EXP","value":"i16","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" The minimum legal exponent in fractional representation, excluding subnormals.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":780},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":376782,"byte_end":376793,"line_start":122,"line_end":122,"column_start":11,"column_end":22},"name":"MAX_EXP_INT","qualname":"::num::dec2flt::rawfp::RawFloat::MAX_EXP_INT","value":"i16","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" `MAX_EXP` for integral representation, i.e., with the shift applied.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":782},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":376862,"byte_end":376877,"line_start":125,"line_end":125,"column_start":11,"column_end":26},"name":"MAX_ENCODED_EXP","qualname":"::num::dec2flt::rawfp::RawFloat::MAX_ENCODED_EXP","value":"i16","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" `MAX_EXP` encoded (i.e., with offset bias)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":784},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":376972,"byte_end":376983,"line_start":128,"line_end":128,"column_start":11,"column_end":22},"name":"MIN_EXP_INT","qualname":"::num::dec2flt::rawfp::RawFloat::MIN_EXP_INT","value":"i16","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" `MIN_EXP` for integral representation, i.e., with the shift applied.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":786},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":377072,"byte_end":377079,"line_start":131,"line_end":131,"column_start":11,"column_end":18},"name":"MAX_SIG","qualname":"::num::dec2flt::rawfp::RawFloat::MAX_SIG","value":"u64","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" The maximum normalized significand in integral representation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":788},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":377168,"byte_end":377175,"line_start":134,"line_end":134,"column_start":11,"column_end":18},"name":"MIN_SIG","qualname":"::num::dec2flt::rawfp::RawFloat::MIN_SIG","value":"u64","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":" The minimal normalized significand in integral representation.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":840},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":380513,"byte_end":380524,"line_start":242,"line_end":242,"column_start":8,"column_end":19},"name":"fp_to_float","qualname":"::num::dec2flt::rawfp::fp_to_float","value":"fn <T> (x: Fp) -> T","parent":null,"children":[],"decl_id":null,"docs":" Convert an Fp to the closest machine float type.\n Does not handle subnormal results.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":842},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":381009,"byte_end":381021,"line_start":257,"line_end":257,"column_start":8,"column_end":20},"name":"round_normal","qualname":"::num::dec2flt::rawfp::round_normal","value":"fn <T> (x: Fp) -> Unpacked","parent":null,"children":[],"decl_id":null,"docs":" Round the 64-bit significand to T::SIG_BITS bits with half-to-even.\n Does not handle exponent overflow.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":844},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":381689,"byte_end":381702,"line_start":277,"line_end":277,"column_start":8,"column_end":21},"name":"encode_normal","qualname":"::num::dec2flt::rawfp::encode_normal","value":"fn <T> (x: Unpacked) -> T","parent":null,"children":[],"decl_id":null,"docs":" Inverse of `RawFloat::unpack()` for normalized numbers.\n Panics if the significand or exponent are not valid for normalized numbers.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":846},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":382456,"byte_end":382472,"line_start":292,"line_end":292,"column_start":8,"column_end":24},"name":"encode_subnormal","qualname":"::num::dec2flt::rawfp::encode_subnormal","value":"fn <T> (significand: u64) -> T","parent":null,"children":[],"decl_id":null,"docs":" Construct a subnormal. A mantissa of 0 is allowed and constructs zero.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":848},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":382848,"byte_end":382857,"line_start":299,"line_end":299,"column_start":8,"column_end":17},"name":"big_to_fp","qualname":"::num::dec2flt::rawfp::big_to_fp","value":"fn (f: &Big) -> Fp","parent":null,"children":[],"decl_id":null,"docs":" Approximate a bignum with an Fp. Rounds within 0.5 ULP with half-to-even.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":850},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":383820,"byte_end":383830,"line_start":321,"line_end":321,"column_start":8,"column_end":18},"name":"prev_float","qualname":"::num::dec2flt::rawfp::prev_float","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Find the largest floating point number strictly smaller than the argument.\n Does not handle subnormals, zero, or exponent underflow.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":852},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":384731,"byte_end":384741,"line_start":342,"line_end":342,"column_start":8,"column_end":18},"name":"next_float","qualname":"::num::dec2flt::rawfp::next_float","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":854},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"parse","qualname":"::num::dec2flt::parse","value":"libcore/num/dec2flt/parse.rs","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":858},{"krate":0,"index":16816},{"krate":0,"index":16818},{"krate":0,"index":16822},{"krate":0,"index":16834},{"krate":0,"index":16828},{"krate":0,"index":16824},{"krate":0,"index":868},{"krate":0,"index":16838},{"krate":0,"index":16850},{"krate":0,"index":16844},{"krate":0,"index":16840},{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":876}],"decl_id":null,"docs":" Validating and decomposing a decimal string of the form:","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7937},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":386961,"byte_end":386969,"line_start":28,"line_end":28,"column_start":5,"column_end":13},"name":"Positive","qualname":"::num::dec2flt::parse::Sign::Positive","value":"Sign::Positive","parent":{"krate":0,"index":16816},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7939},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":386975,"byte_end":386983,"line_start":29,"line_end":29,"column_start":5,"column_end":13},"name":"Negative","qualname":"::num::dec2flt::parse::Sign::Negative","value":"Sign::Negative","parent":{"krate":0,"index":16816},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":16816},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":386950,"byte_end":386954,"line_start":27,"line_end":27,"column_start":10,"column_end":14},"name":"Sign","qualname":"::num::dec2flt::parse::Sign","value":"Sign::{Positive, Negative}","parent":null,"children":[{"krate":0,"index":7937},{"krate":0,"index":7939}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16822},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":387078,"byte_end":387085,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"Decimal","qualname":"::num::dec2flt::parse::Decimal","value":"Decimal { integral, fractional, exp }","parent":null,"children":[{"krate":0,"index":7941},{"krate":0,"index":7943},{"krate":0,"index":7945}],"decl_id":null,"docs":" The interesting parts of a decimal string.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":387067,"byte_end":387248,"line_start":34,"line_end":39,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":7941},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":387100,"byte_end":387108,"line_start":35,"line_end":35,"column_start":9,"column_end":17},"name":"integral","qualname":"::num::dec2flt::parse::Decimal::integral","value":"&'a [u8]","parent":{"krate":0,"index":16822},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7943},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":387128,"byte_end":387138,"line_start":36,"line_end":36,"column_start":9,"column_end":19},"name":"fractional","qualname":"::num::dec2flt::parse::Decimal::fractional","value":"&'a [u8]","parent":{"krate":0,"index":16822},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7945},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":387237,"byte_end":387240,"line_start":38,"line_end":38,"column_start":9,"column_end":12},"name":"exp","qualname":"::num::dec2flt::parse::Decimal::exp","value":"i64","parent":{"krate":0,"index":16822},"children":[],"decl_id":null,"docs":" The decimal exponent, guaranteed to have fewer than 18 decimal digits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":387284,"byte_end":387287,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<Decimal<'a>>::new","value":"fn (integral: &'a [u8], fractional: &'a [u8], exp: i64) -> Decimal<'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7955},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":387502,"byte_end":387507,"line_start":49,"line_end":49,"column_start":5,"column_end":10},"name":"Valid","qualname":"::num::dec2flt::parse::ParseResult::Valid","value":"ParseResult::Valid(Decimal<'a>)","parent":{"krate":0,"index":16838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7959},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":387526,"byte_end":387539,"line_start":50,"line_end":50,"column_start":5,"column_end":18},"name":"ShortcutToInf","qualname":"::num::dec2flt::parse::ParseResult::ShortcutToInf","value":"ParseResult::ShortcutToInf","parent":{"krate":0,"index":16838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7961},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":387545,"byte_end":387559,"line_start":51,"line_end":51,"column_start":5,"column_end":19},"name":"ShortcutToZero","qualname":"::num::dec2flt::parse::ParseResult::ShortcutToZero","value":"ParseResult::ShortcutToZero","parent":{"krate":0,"index":16838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7963},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":387565,"byte_end":387572,"line_start":52,"line_end":52,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::num::dec2flt::parse::ParseResult::Invalid","value":"ParseResult::Invalid","parent":{"krate":0,"index":16838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":16838},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":387480,"byte_end":387491,"line_start":48,"line_end":48,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::num::dec2flt::parse::ParseResult","value":"ParseResult::{Valid, ShortcutToInf, ShortcutToZero, Invalid}","parent":null,"children":[{"krate":0,"index":7955},{"krate":0,"index":7959},{"krate":0,"index":7961},{"krate":0,"index":7963}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":387471,"byte_end":387575,"line_start":48,"line_end":53,"column_start":1,"column_end":2}}]},{"kind":"Function","id":{"krate":0,"index":872},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":387756,"byte_end":387769,"line_start":57,"line_end":57,"column_start":8,"column_end":21},"name":"parse_decimal","qualname":"::num::dec2flt::parse::parse_decimal","value":"fn (s: &str) -> ParseResult","parent":null,"children":[],"decl_id":null,"docs":" Check if the input string is a valid floating point number and if so, locate the integral\n part, the fractional part, and the exponent in it. Does not handle signs.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16866},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":322200,"byte_end":322215,"line_start":159,"line_end":159,"column_start":12,"column_end":27},"name":"ParseFloatError","qualname":"::num::dec2flt::ParseFloatError","value":"ParseFloatError {  }","parent":null,"children":[{"krate":0,"index":7973}],"decl_id":null,"docs":" An error which can be returned when parsing a float.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":322143,"byte_end":322188,"line_start":158,"line_end":158,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":322189,"byte_end":322244,"line_start":159,"line_end":161,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":322595,"byte_end":322608,"line_start":175,"line_end":175,"column_start":12,"column_end":25},"name":"__description","qualname":"<ParseFloatError>::__description","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":904},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bignum","qualname":"::num::bignum","value":"libcore/num/bignum.rs","parent":null,"children":[{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":920},{"krate":0,"index":16904},{"krate":0,"index":16914},{"krate":0,"index":16924},{"krate":0,"index":922},{"krate":0,"index":924},{"krate":0,"index":926},{"krate":0,"index":16934},{"krate":0,"index":16936},{"krate":0,"index":17000},{"krate":0,"index":17004},{"krate":0,"index":17006},{"krate":0,"index":17010},{"krate":0,"index":17016},{"krate":0,"index":17020},{"krate":0,"index":928}],"decl_id":null,"docs":" Custom arbitrary-precision number (bignum) implementation.","sig":null,"attributes":[{"value":"unstable(feature = \"core_private_bignum\",\n           reason = \"internal routines only exposed for testing\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":391700,"byte_end":391837,"line_start":25,"line_end":27,"column_start":1,"column_end":26}},{"value":"macro_use","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":391838,"byte_end":391851,"line_start":28,"line_end":28,"column_start":1,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":910},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":391936,"byte_end":391943,"line_start":34,"line_end":34,"column_start":11,"column_end":18},"name":"FullOps","qualname":"::num::bignum::FullOps","value":"FullOps: Sized","parent":null,"children":[{"krate":0,"index":912},{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":918}],"decl_id":null,"docs":" Arithmetic operations required by bignums.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":392096,"byte_end":392104,"line_start":37,"line_end":37,"column_start":8,"column_end":16},"name":"full_add","qualname":"::num::bignum::FullOps::full_add","value":"fn (self, other: Self, carry: bool) -> (bool, Self)","parent":{"krate":0,"index":910},"children":[],"decl_id":null,"docs":" Arithmetic operations required by bignums.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":392310,"byte_end":392318,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"full_mul","qualname":"::num::bignum::FullOps::full_mul","value":"fn (self, other: Self, carry: Self) -> (Self, Self)","parent":{"krate":0,"index":910},"children":[],"decl_id":null,"docs":" Arithmetic operations required by bignums.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":392533,"byte_end":392545,"line_start":45,"line_end":45,"column_start":8,"column_end":20},"name":"full_mul_add","qualname":"::num::bignum::FullOps::full_mul_add","value":"fn (self, other: Self, other2: Self, carry: Self) -> (Self, Self)","parent":{"krate":0,"index":910},"children":[],"decl_id":null,"docs":" Arithmetic operations required by bignums.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":392785,"byte_end":392797,"line_start":49,"line_end":49,"column_start":8,"column_end":20},"name":"full_div_rem","qualname":"::num::bignum::FullOps::full_div_rem","value":"fn (self, other: Self, borrow: Self) -> (Self, Self)","parent":{"krate":0,"index":910},"children":[],"decl_id":null,"docs":" Arithmetic operations required by bignums.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":926},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":410070,"byte_end":410077,"line_start":487,"line_end":487,"column_start":10,"column_end":17},"name":"Digit32","qualname":"::num::bignum::Digit32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The digit type for `Big32x40`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":928},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":410194,"byte_end":410199,"line_start":493,"line_end":493,"column_start":9,"column_end":14},"name":"tests","qualname":"::num::bignum::tests","value":"libcore/num/bignum.rs","parent":null,"children":[{"krate":0,"index":17026},{"krate":0,"index":17028},{"krate":0,"index":17092},{"krate":0,"index":17096},{"krate":0,"index":17098},{"krate":0,"index":17102},{"krate":0,"index":17108},{"krate":0,"index":17112}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":930},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"diy_float","qualname":"::num::diy_float","value":"libcore/num/diy_float.rs","parent":null,"children":[{"krate":0,"index":17118},{"krate":0,"index":17128},{"krate":0,"index":17124},{"krate":0,"index":17120},{"krate":0,"index":932}],"decl_id":null,"docs":" Extended precision \"soft float\", for internal use only.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_private_diy_float\",\n           reason = \"internal routines only exposed for testing\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":410922,"byte_end":411062,"line_start":16,"line_end":18,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":17118},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":411185,"byte_end":411187,"line_start":23,"line_end":23,"column_start":12,"column_end":14},"name":"Fp","qualname":"::num::diy_float::Fp","value":"Fp { f, e }","parent":null,"children":[{"krate":0,"index":8039},{"krate":0,"index":8041}],"decl_id":null,"docs":" A custom 64-bit floating point type, representing `f * 2^e`.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":411174,"byte_end":411285,"line_start":23,"line_end":28,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":8039},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":411228,"byte_end":411229,"line_start":25,"line_end":25,"column_start":9,"column_end":10},"name":"f","qualname":"::num::diy_float::Fp::f","value":"u64","parent":{"krate":0,"index":17118},"children":[],"decl_id":null,"docs":" The integer mantissa.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8041},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":411276,"byte_end":411277,"line_start":27,"line_end":27,"column_start":9,"column_end":10},"name":"e","qualname":"::num::diy_float::Fp::e","value":"i16","parent":{"krate":0,"index":17118},"children":[],"decl_id":null,"docs":" The exponent in base 2.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":411375,"byte_end":411378,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"mul","qualname":"<Fp>::mul","value":"fn (&self, other: &Fp) -> Fp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":411966,"byte_end":411975,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Fp>::normalize","value":"fn (&self) -> Fp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":412765,"byte_end":412777,"line_start":82,"line_end":82,"column_start":12,"column_end":24},"name":"normalize_to","qualname":"<Fp>::normalize_to","value":"fn (&self, e: i16) -> Fp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":169824,"byte_end":169832,"line_start":3486,"line_end":3486,"column_start":12,"column_end":20},"name":"is_ascii","qualname":"<u8>::is_ascii","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":169403,"byte_end":169417,"line_start":3468,"line_end":3468,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":170469,"byte_end":170487,"line_start":3508,"line_end":3508,"column_start":12,"column_end":30},"name":"to_ascii_uppercase","qualname":"<u8>::to_ascii_uppercase","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":169403,"byte_end":169417,"line_start":3468,"line_end":3468,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":171141,"byte_end":171159,"line_start":3530,"line_end":3530,"column_start":12,"column_end":30},"name":"to_ascii_lowercase","qualname":"<u8>::to_ascii_lowercase","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":169403,"byte_end":169417,"line_start":3468,"line_end":3468,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":171676,"byte_end":171696,"line_start":3548,"line_end":3548,"column_start":12,"column_end":32},"name":"eq_ignore_ascii_case","qualname":"<u8>::eq_ignore_ascii_case","value":"fn (&self, other: &u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":169403,"byte_end":169417,"line_start":3468,"line_end":3468,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":172441,"byte_end":172461,"line_start":3573,"line_end":3573,"column_start":12,"column_end":32},"name":"make_ascii_uppercase","qualname":"<u8>::make_ascii_uppercase","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":169403,"byte_end":169417,"line_start":3468,"line_end":3468,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":173169,"byte_end":173189,"line_start":3598,"line_end":3598,"column_start":12,"column_end":32},"name":"make_ascii_lowercase","qualname":"<u8>::make_ascii_lowercase","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":169403,"byte_end":169417,"line_start":3468,"line_end":3468,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":174261,"byte_end":174280,"line_start":3634,"line_end":3634,"column_start":12,"column_end":31},"name":"is_ascii_alphabetic","qualname":"<u8>::is_ascii_alphabetic","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":169403,"byte_end":169417,"line_start":3468,"line_end":3468,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":175422,"byte_end":175440,"line_start":3672,"line_end":3672,"column_start":12,"column_end":30},"name":"is_ascii_uppercase","qualname":"<u8>::is_ascii_uppercase","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":169403,"byte_end":169417,"line_start":3468,"line_end":3468,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":176572,"byte_end":176590,"line_start":3710,"line_end":3710,"column_start":12,"column_end":30},"name":"is_ascii_lowercase","qualname":"<u8>::is_ascii_lowercase","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":169403,"byte_end":169417,"line_start":3468,"line_end":3468,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":177839,"byte_end":177860,"line_start":3751,"line_end":3751,"column_start":12,"column_end":33},"name":"is_ascii_alphanumeric","qualname":"<u8>::is_ascii_alphanumeric","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":169403,"byte_end":169417,"line_start":3468,"line_end":3468,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":178964,"byte_end":178978,"line_start":3789,"line_end":3789,"column_start":12,"column_end":26},"name":"is_ascii_digit","qualname":"<u8>::is_ascii_digit","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":169403,"byte_end":169417,"line_start":3468,"line_end":3468,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":180183,"byte_end":180200,"line_start":3830,"line_end":3830,"column_start":12,"column_end":29},"name":"is_ascii_hexdigit","qualname":"<u8>::is_ascii_hexdigit","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":169403,"byte_end":169417,"line_start":3468,"line_end":3468,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":181530,"byte_end":181550,"line_start":3872,"line_end":3872,"column_start":12,"column_end":32},"name":"is_ascii_punctuation","qualname":"<u8>::is_ascii_punctuation","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":169403,"byte_end":169417,"line_start":3468,"line_end":3468,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":182653,"byte_end":182669,"line_start":3910,"line_end":3910,"column_start":12,"column_end":28},"name":"is_ascii_graphic","qualname":"<u8>::is_ascii_graphic","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":169403,"byte_end":169417,"line_start":3468,"line_end":3468,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":184847,"byte_end":184866,"line_start":3965,"line_end":3965,"column_start":12,"column_end":31},"name":"is_ascii_whitespace","qualname":"<u8>::is_ascii_whitespace","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":169403,"byte_end":169417,"line_start":3468,"line_end":3468,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":186109,"byte_end":186125,"line_start":4005,"line_end":4005,"column_start":12,"column_end":28},"name":"is_ascii_control","qualname":"<u8>::is_ascii_control","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"u8\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":169403,"byte_end":169417,"line_start":3468,"line_end":3468,"column_start":1,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8103},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188086,"byte_end":188089,"line_start":4082,"line_end":4082,"column_start":5,"column_end":8},"name":"Nan","qualname":"::num::FpCategory::Nan","value":"FpCategory::Nan","parent":{"krate":0,"index":18630},"children":[],"decl_id":null,"docs":" \"Not a Number\", often obtained by dividing by zero.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188036,"byte_end":188081,"line_start":4081,"line_end":4081,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8105},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188185,"byte_end":188193,"line_start":4086,"line_end":4086,"column_start":5,"column_end":13},"name":"Infinite","qualname":"::num::FpCategory::Infinite","value":"FpCategory::Infinite","parent":{"krate":0,"index":18630},"children":[],"decl_id":null,"docs":" Positive or negative infinity.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188135,"byte_end":188180,"line_start":4085,"line_end":4085,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8107},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188285,"byte_end":188289,"line_start":4090,"line_end":4090,"column_start":5,"column_end":9},"name":"Zero","qualname":"::num::FpCategory::Zero","value":"FpCategory::Zero","parent":{"krate":0,"index":18630},"children":[],"decl_id":null,"docs":" Positive or negative zero.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188235,"byte_end":188280,"line_start":4089,"line_end":4089,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8109},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188428,"byte_end":188437,"line_start":4094,"line_end":4094,"column_start":5,"column_end":14},"name":"Subnormal","qualname":"::num::FpCategory::Subnormal","value":"FpCategory::Subnormal","parent":{"krate":0,"index":18630},"children":[],"decl_id":null,"docs":" De-normalized floating point representation (less precise than `Normal`).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188378,"byte_end":188423,"line_start":4093,"line_end":4093,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8111},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188535,"byte_end":188541,"line_start":4098,"line_end":4098,"column_start":5,"column_end":11},"name":"Normal","qualname":"::num::FpCategory::Normal","value":"FpCategory::Normal","parent":{"krate":0,"index":18630},"children":[],"decl_id":null,"docs":" A regular floating point number.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188485,"byte_end":188530,"line_start":4097,"line_end":4097,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":18630},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":187959,"byte_end":187969,"line_start":4079,"line_end":4079,"column_start":10,"column_end":20},"name":"FpCategory","qualname":"::num::FpCategory","value":"FpCategory::{Nan, Infinite, Zero, Subnormal, Normal}","parent":null,"children":[{"krate":0,"index":8103},{"krate":0,"index":8105},{"krate":0,"index":8107},{"krate":0,"index":8109},{"krate":0,"index":8111}],"decl_id":null,"docs":" A classification of floating point numbers.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":187904,"byte_end":187949,"line_start":4078,"line_end":4078,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":187950,"byte_end":188544,"line_start":4079,"line_end":4099,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":187950,"byte_end":188544,"line_start":4079,"line_end":4099,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":1004},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188752,"byte_end":188757,"line_start":4106,"line_end":4106,"column_start":11,"column_end":16},"name":"Float","qualname":"::num::Float","value":"Float: Sized","parent":null,"children":[{"krate":0,"index":1006},{"krate":0,"index":1008},{"krate":0,"index":1010},{"krate":0,"index":1012},{"krate":0,"index":1014},{"krate":0,"index":1016},{"krate":0,"index":1018},{"krate":0,"index":1020},{"krate":0,"index":1022},{"krate":0,"index":1024},{"krate":0,"index":1026},{"krate":0,"index":1028},{"krate":0,"index":1030},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1036},{"krate":0,"index":1038},{"krate":0,"index":1040}],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":1006},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188885,"byte_end":188889,"line_start":4109,"line_end":4109,"column_start":10,"column_end":14},"name":"Bits","qualname":"::num::Float::Bits","value":"type Bits;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" Type used by `to_bits` and `from_bits`.\n","sig":null,"attributes":[{"value":"stable(feature = \"core_float_bits\", since = \"1.25.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188819,"byte_end":188875,"line_start":4108,"line_end":4108,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":189013,"byte_end":189019,"line_start":4113,"line_end":4113,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::num::Float::is_nan","value":"fn (self) -> bool","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":189199,"byte_end":189210,"line_start":4117,"line_end":4117,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::num::Float::is_infinite","value":"fn (self) -> bool","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":189349,"byte_end":189358,"line_start":4120,"line_end":4120,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::num::Float::is_finite","value":"fn (self) -> bool","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":189513,"byte_end":189522,"line_start":4123,"line_end":4123,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::num::Float::is_normal","value":"fn (self) -> bool","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":189652,"byte_end":189660,"line_start":4126,"line_end":4126,"column_start":8,"column_end":16},"name":"classify","qualname":"::num::Float::classify","value":"fn (self) -> FpCategory","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":189850,"byte_end":189853,"line_start":4131,"line_end":4131,"column_start":8,"column_end":11},"name":"abs","qualname":"::num::Float::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1020},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":190202,"byte_end":190208,"line_start":4138,"line_end":4138,"column_start":8,"column_end":14},"name":"signum","qualname":"::num::Float::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":190377,"byte_end":190393,"line_start":4143,"line_end":4143,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::num::Float::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":190565,"byte_end":190581,"line_start":4147,"line_end":4147,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::num::Float::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":190712,"byte_end":190717,"line_start":4151,"line_end":4151,"column_start":8,"column_end":13},"name":"recip","qualname":"::num::Float::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":190908,"byte_end":190912,"line_start":4157,"line_end":4157,"column_start":8,"column_end":12},"name":"powi","qualname":"::num::Float::powi","value":"fn (self, n: i32) -> Self","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":191042,"byte_end":191052,"line_start":4161,"line_end":4161,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::num::Float::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":191173,"byte_end":191183,"line_start":4164,"line_end":4164,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::num::Float::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":191317,"byte_end":191320,"line_start":4168,"line_end":4168,"column_start":8,"column_end":11},"name":"max","qualname":"::num::Float::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1036},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":191466,"byte_end":191469,"line_start":4171,"line_end":4171,"column_start":8,"column_end":11},"name":"min","qualname":"::num::Float::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1038},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":191603,"byte_end":191610,"line_start":4175,"line_end":4175,"column_start":8,"column_end":15},"name":"to_bits","qualname":"::num::Float::to_bits","value":"fn (self) -> Self::Bits","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1040},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":191738,"byte_end":191747,"line_start":4178,"line_end":4178,"column_start":8,"column_end":17},"name":"from_bits","qualname":"::num::Float::from_bits","value":"fn (v: Self::Bits) -> Self","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188599,"byte_end":188741,"line_start":4103,"line_end":4105,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":18722},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":192349,"byte_end":192364,"line_start":4197,"line_end":4197,"column_start":12,"column_end":27},"name":"TryFromIntError","qualname":"::num::TryFromIntError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type returned when a checked integral type conversion fails.\n","sig":null,"attributes":[{"value":"stable(feature = \"try_from\", since = \"1.26.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":192258,"byte_end":192307,"line_start":4195,"line_end":4195,"column_start":1,"column_end":50}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":192338,"byte_end":192369,"line_start":4197,"line_end":4197,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":192632,"byte_end":192645,"line_start":4205,"line_end":4205,"column_start":12,"column_end":25},"name":"__description","qualname":"<TryFromIntError>::__description","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":197411,"byte_end":197420,"line_start":4364,"line_end":4364,"column_start":8,"column_end":17},"name":"min_value","qualname":"::num::FromStrRadixHelper::min_value","value":"fn () -> Self","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":197439,"byte_end":197448,"line_start":4365,"line_end":4365,"column_start":8,"column_end":17},"name":"max_value","qualname":"::num::FromStrRadixHelper::max_value","value":"fn () -> Self","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":197467,"byte_end":197475,"line_start":4366,"line_end":4366,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::num::FromStrRadixHelper::from_u32","value":"fn (u: u32) -> Self","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":197500,"byte_end":197511,"line_start":4367,"line_end":4367,"column_start":8,"column_end":19},"name":"checked_mul","qualname":"::num::FromStrRadixHelper::checked_mul","value":"fn (&self, other: u32) -> Option<Self>","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":197555,"byte_end":197566,"line_start":4368,"line_end":4368,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"::num::FromStrRadixHelper::checked_sub","value":"fn (&self, other: u32) -> Option<Self>","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":197610,"byte_end":197621,"line_start":4369,"line_end":4369,"column_start":8,"column_end":19},"name":"checked_add","qualname":"::num::FromStrRadixHelper::checked_add","value":"fn (&self, other: u32) -> Option<Self>","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":19358},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":201387,"byte_end":201400,"line_start":4478,"line_end":4478,"column_start":12,"column_end":25},"name":"ParseIntError","qualname":"::num::ParseIntError","value":"ParseIntError {  }","parent":null,"children":[{"krate":0,"index":8117}],"decl_id":null,"docs":" An error which can be returned when parsing an integer.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":201330,"byte_end":201375,"line_start":4477,"line_end":4477,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":201376,"byte_end":201428,"line_start":4478,"line_end":4480,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":201809,"byte_end":201822,"line_start":4496,"line_end":4496,"column_start":12,"column_end":25},"name":"__description","qualname":"<ParseIntError>::__description","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1114},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"libcore/prelude/mod.rs","parent":null,"children":[{"krate":0,"index":1116}],"decl_id":null,"docs":" The libcore prelude\n","sig":null,"attributes":[{"value":"stable(feature = \"core_prelude\", since = \"1.4.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,109,111,100,46,114,115],"byte_start":413530,"byte_end":413583,"line_start":13,"line_end":13,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":1116},"span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v1","qualname":"::prelude::v1","value":"libcore/prelude/v1.rs","parent":null,"children":[{"krate":0,"index":1118},{"krate":0,"index":1128},{"krate":0,"index":1138},{"krate":0,"index":1140},{"krate":0,"index":1142},{"krate":0,"index":1152},{"krate":0,"index":1162},{"krate":0,"index":1164},{"krate":0,"index":1172},{"krate":0,"index":1178},{"krate":0,"index":1186},{"krate":0,"index":1194},{"krate":0,"index":1196}],"decl_id":null,"docs":" The core prelude","sig":null,"attributes":[{"value":"stable(feature = \"core_prelude\", since = \"1.4.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":414300,"byte_end":414353,"line_start":17,"line_end":17,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":1198},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"intrinsics","qualname":"::intrinsics","value":"libcore/intrinsics.rs","parent":null,"children":[{"krate":0,"index":1200},{"krate":0,"index":1202},{"krate":0,"index":1204}],"decl_id":null,"docs":" rustc compiler intrinsics.","sig":null,"attributes":[{"value":"unstable(feature = \"core_intrinsics\",\n           reason =\n               \"intrinsics are unlikely to ever be stabilized, instead they should be used through stabilized interfaces in the rest of the standard library\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":417566,"byte_end":417845,"line_start":42,"line_end":46,"column_start":1,"column_end":26}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":417846,"byte_end":417869,"line_start":47,"line_end":47,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":193},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":418783,"byte_end":418795,"line_start":66,"line_end":66,"column_start":12,"column_end":24},"name":"atomic_cxchg","qualname":"::intrinsics::::atomic_cxchg","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":197},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":419383,"byte_end":419399,"line_start":75,"line_end":75,"column_start":12,"column_end":28},"name":"atomic_cxchg_acq","qualname":"::intrinsics::::atomic_cxchg_acq","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":201},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":420069,"byte_end":420085,"line_start":86,"line_end":86,"column_start":12,"column_end":28},"name":"atomic_cxchg_rel","qualname":"::intrinsics::::atomic_cxchg_rel","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":205},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":420754,"byte_end":420773,"line_start":97,"line_end":97,"column_start":12,"column_end":31},"name":"atomic_cxchg_acqrel","qualname":"::intrinsics::::atomic_cxchg_acqrel","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":209},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":421361,"byte_end":421381,"line_start":106,"line_end":106,"column_start":12,"column_end":32},"name":"atomic_cxchg_relaxed","qualname":"::intrinsics::::atomic_cxchg_relaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":213},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":422050,"byte_end":422074,"line_start":117,"line_end":117,"column_start":12,"column_end":36},"name":"atomic_cxchg_failrelaxed","qualname":"::intrinsics::::atomic_cxchg_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":217},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":422743,"byte_end":422763,"line_start":128,"line_end":128,"column_start":12,"column_end":32},"name":"atomic_cxchg_failacq","qualname":"::intrinsics::::atomic_cxchg_failacq","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":221},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":423433,"byte_end":423461,"line_start":139,"line_end":139,"column_start":12,"column_end":40},"name":"atomic_cxchg_acq_failrelaxed","qualname":"::intrinsics::::atomic_cxchg_acq_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":225},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":424130,"byte_end":424161,"line_start":150,"line_end":150,"column_start":12,"column_end":43},"name":"atomic_cxchg_acqrel_failrelaxed","qualname":"::intrinsics::::atomic_cxchg_acqrel_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":229},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":424738,"byte_end":424754,"line_start":160,"line_end":160,"column_start":12,"column_end":28},"name":"atomic_cxchgweak","qualname":"::intrinsics::::atomic_cxchgweak","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":233},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":425331,"byte_end":425351,"line_start":169,"line_end":169,"column_start":12,"column_end":32},"name":"atomic_cxchgweak_acq","qualname":"::intrinsics::::atomic_cxchgweak_acq","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":237},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":426010,"byte_end":426030,"line_start":180,"line_end":180,"column_start":12,"column_end":32},"name":"atomic_cxchgweak_rel","qualname":"::intrinsics::::atomic_cxchgweak_rel","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":241},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":426688,"byte_end":426711,"line_start":191,"line_end":191,"column_start":12,"column_end":35},"name":"atomic_cxchgweak_acqrel","qualname":"::intrinsics::::atomic_cxchgweak_acqrel","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":245},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":427288,"byte_end":427312,"line_start":200,"line_end":200,"column_start":12,"column_end":36},"name":"atomic_cxchgweak_relaxed","qualname":"::intrinsics::::atomic_cxchgweak_relaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":249},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":427970,"byte_end":427998,"line_start":211,"line_end":211,"column_start":12,"column_end":40},"name":"atomic_cxchgweak_failrelaxed","qualname":"::intrinsics::::atomic_cxchgweak_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":253},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":428656,"byte_end":428680,"line_start":222,"line_end":222,"column_start":12,"column_end":36},"name":"atomic_cxchgweak_failacq","qualname":"::intrinsics::::atomic_cxchgweak_failacq","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":257},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":429339,"byte_end":429371,"line_start":233,"line_end":233,"column_start":12,"column_end":44},"name":"atomic_cxchgweak_acq_failrelaxed","qualname":"::intrinsics::::atomic_cxchgweak_acq_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":261},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":430029,"byte_end":430064,"line_start":244,"line_end":244,"column_start":12,"column_end":47},"name":"atomic_cxchgweak_acqrel_failrelaxed","qualname":"::intrinsics::::atomic_cxchgweak_acqrel_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":265},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":430503,"byte_end":430514,"line_start":252,"line_end":252,"column_start":12,"column_end":23},"name":"atomic_load","qualname":"::intrinsics::::atomic_load","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Loads the current value of the pointer.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `load` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":269},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":430931,"byte_end":430946,"line_start":259,"line_end":259,"column_start":12,"column_end":27},"name":"atomic_load_acq","qualname":"::intrinsics::::atomic_load_acq","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Loads the current value of the pointer.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `load` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":273},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":431363,"byte_end":431382,"line_start":266,"line_end":266,"column_start":12,"column_end":31},"name":"atomic_load_relaxed","qualname":"::intrinsics::::atomic_load_relaxed","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Loads the current value of the pointer.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `load` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":277},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":431418,"byte_end":431439,"line_start":267,"line_end":267,"column_start":12,"column_end":33},"name":"atomic_load_unordered","qualname":"::intrinsics::::atomic_load_unordered","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":281},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":431870,"byte_end":431882,"line_start":275,"line_end":275,"column_start":12,"column_end":24},"name":"atomic_store","qualname":"::intrinsics::::atomic_store","value":"fn <T> (dst: *mut T, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `store` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":285},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":432314,"byte_end":432330,"line_start":282,"line_end":282,"column_start":12,"column_end":28},"name":"atomic_store_rel","qualname":"::intrinsics::::atomic_store_rel","value":"fn <T> (dst: *mut T, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `store` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":289},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":432762,"byte_end":432782,"line_start":289,"line_end":289,"column_start":12,"column_end":32},"name":"atomic_store_relaxed","qualname":"::intrinsics::::atomic_store_relaxed","value":"fn <T> (dst: *mut T, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `store` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":293},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":432819,"byte_end":432841,"line_start":290,"line_end":290,"column_start":12,"column_end":34},"name":"atomic_store_unordered","qualname":"::intrinsics::::atomic_store_unordered","value":"fn <T> (dst: *mut T, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":297},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":433295,"byte_end":433306,"line_start":298,"line_end":298,"column_start":12,"column_end":23},"name":"atomic_xchg","qualname":"::intrinsics::::atomic_xchg","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location, returning the old value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `swap` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":301},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":433765,"byte_end":433780,"line_start":305,"line_end":305,"column_start":12,"column_end":27},"name":"atomic_xchg_acq","qualname":"::intrinsics::::atomic_xchg_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location, returning the old value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `swap` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":305},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":434239,"byte_end":434254,"line_start":312,"line_end":312,"column_start":12,"column_end":27},"name":"atomic_xchg_rel","qualname":"::intrinsics::::atomic_xchg_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location, returning the old value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `swap` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":309},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":434712,"byte_end":434730,"line_start":319,"line_end":319,"column_start":12,"column_end":30},"name":"atomic_xchg_acqrel","qualname":"::intrinsics::::atomic_xchg_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location, returning the old value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `swap` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":313},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":435189,"byte_end":435208,"line_start":326,"line_end":326,"column_start":12,"column_end":31},"name":"atomic_xchg_relaxed","qualname":"::intrinsics::::atomic_xchg_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location, returning the old value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `swap` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":317},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":435664,"byte_end":435675,"line_start":334,"line_end":334,"column_start":12,"column_end":23},"name":"atomic_xadd","qualname":"::intrinsics::::atomic_xadd","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Add to the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_add` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":321},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":436131,"byte_end":436146,"line_start":341,"line_end":341,"column_start":12,"column_end":27},"name":"atomic_xadd_acq","qualname":"::intrinsics::::atomic_xadd_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Add to the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_add` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":325},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":436602,"byte_end":436617,"line_start":348,"line_end":348,"column_start":12,"column_end":27},"name":"atomic_xadd_rel","qualname":"::intrinsics::::atomic_xadd_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Add to the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_add` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":329},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":437072,"byte_end":437090,"line_start":355,"line_end":355,"column_start":12,"column_end":30},"name":"atomic_xadd_acqrel","qualname":"::intrinsics::::atomic_xadd_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Add to the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_add` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":333},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":437546,"byte_end":437565,"line_start":362,"line_end":362,"column_start":12,"column_end":31},"name":"atomic_xadd_relaxed","qualname":"::intrinsics::::atomic_xadd_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Add to the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_add` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":337},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":438028,"byte_end":438039,"line_start":370,"line_end":370,"column_start":12,"column_end":23},"name":"atomic_xsub","qualname":"::intrinsics::::atomic_xsub","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Subtract from the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_sub` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":341},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":438502,"byte_end":438517,"line_start":377,"line_end":377,"column_start":12,"column_end":27},"name":"atomic_xsub_acq","qualname":"::intrinsics::::atomic_xsub_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Subtract from the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_sub` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":345},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":438980,"byte_end":438995,"line_start":384,"line_end":384,"column_start":12,"column_end":27},"name":"atomic_xsub_rel","qualname":"::intrinsics::::atomic_xsub_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Subtract from the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_sub` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":349},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":439457,"byte_end":439475,"line_start":391,"line_end":391,"column_start":12,"column_end":30},"name":"atomic_xsub_acqrel","qualname":"::intrinsics::::atomic_xsub_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Subtract from the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_sub` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":353},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":439938,"byte_end":439957,"line_start":398,"line_end":398,"column_start":12,"column_end":31},"name":"atomic_xsub_relaxed","qualname":"::intrinsics::::atomic_xsub_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Subtract from the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_sub` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":357},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":440421,"byte_end":440431,"line_start":406,"line_end":406,"column_start":12,"column_end":22},"name":"atomic_and","qualname":"::intrinsics::::atomic_and","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise and with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_and` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":361},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":440895,"byte_end":440909,"line_start":413,"line_end":413,"column_start":12,"column_end":26},"name":"atomic_and_acq","qualname":"::intrinsics::::atomic_and_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise and with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_and` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":365},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":441373,"byte_end":441387,"line_start":420,"line_end":420,"column_start":12,"column_end":26},"name":"atomic_and_rel","qualname":"::intrinsics::::atomic_and_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise and with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_and` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":369},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":441850,"byte_end":441867,"line_start":427,"line_end":427,"column_start":12,"column_end":29},"name":"atomic_and_acqrel","qualname":"::intrinsics::::atomic_and_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise and with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_and` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":373},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":442331,"byte_end":442349,"line_start":434,"line_end":434,"column_start":12,"column_end":30},"name":"atomic_and_relaxed","qualname":"::intrinsics::::atomic_and_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise and with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_and` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":377},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":442828,"byte_end":442839,"line_start":442,"line_end":442,"column_start":12,"column_end":23},"name":"atomic_nand","qualname":"::intrinsics::::atomic_nand","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise nand with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":381},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":443318,"byte_end":443333,"line_start":449,"line_end":449,"column_start":12,"column_end":27},"name":"atomic_nand_acq","qualname":"::intrinsics::::atomic_nand_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise nand with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":385},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":443812,"byte_end":443827,"line_start":456,"line_end":456,"column_start":12,"column_end":27},"name":"atomic_nand_rel","qualname":"::intrinsics::::atomic_nand_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise nand with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":389},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":444305,"byte_end":444323,"line_start":463,"line_end":463,"column_start":12,"column_end":30},"name":"atomic_nand_acqrel","qualname":"::intrinsics::::atomic_nand_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise nand with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":393},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":444802,"byte_end":444821,"line_start":470,"line_end":470,"column_start":12,"column_end":31},"name":"atomic_nand_relaxed","qualname":"::intrinsics::::atomic_nand_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise nand with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":397},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":445281,"byte_end":445290,"line_start":478,"line_end":478,"column_start":12,"column_end":21},"name":"atomic_or","qualname":"::intrinsics::::atomic_or","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise or with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_or` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":401},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":445750,"byte_end":445763,"line_start":485,"line_end":485,"column_start":12,"column_end":25},"name":"atomic_or_acq","qualname":"::intrinsics::::atomic_or_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise or with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_or` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":405},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":446223,"byte_end":446236,"line_start":492,"line_end":492,"column_start":12,"column_end":25},"name":"atomic_or_rel","qualname":"::intrinsics::::atomic_or_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise or with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_or` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":409},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":446695,"byte_end":446711,"line_start":499,"line_end":499,"column_start":12,"column_end":28},"name":"atomic_or_acqrel","qualname":"::intrinsics::::atomic_or_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise or with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_or` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":413},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":447171,"byte_end":447188,"line_start":506,"line_end":506,"column_start":12,"column_end":29},"name":"atomic_or_relaxed","qualname":"::intrinsics::::atomic_or_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise or with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_or` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":417},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":447652,"byte_end":447662,"line_start":514,"line_end":514,"column_start":12,"column_end":22},"name":"atomic_xor","qualname":"::intrinsics::::atomic_xor","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise xor with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_xor` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":421},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":448126,"byte_end":448140,"line_start":521,"line_end":521,"column_start":12,"column_end":26},"name":"atomic_xor_acq","qualname":"::intrinsics::::atomic_xor_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise xor with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_xor` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":425},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":448604,"byte_end":448618,"line_start":528,"line_end":528,"column_start":12,"column_end":26},"name":"atomic_xor_rel","qualname":"::intrinsics::::atomic_xor_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise xor with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_xor` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":429},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":449081,"byte_end":449098,"line_start":535,"line_end":535,"column_start":12,"column_end":29},"name":"atomic_xor_acqrel","qualname":"::intrinsics::::atomic_xor_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise xor with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_xor` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":433},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":449562,"byte_end":449580,"line_start":542,"line_end":542,"column_start":12,"column_end":30},"name":"atomic_xor_relaxed","qualname":"::intrinsics::::atomic_xor_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise xor with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_xor` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":437},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":449623,"byte_end":449633,"line_start":544,"line_end":544,"column_start":12,"column_end":22},"name":"atomic_max","qualname":"::intrinsics::::atomic_max","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":441},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":449675,"byte_end":449689,"line_start":545,"line_end":545,"column_start":12,"column_end":26},"name":"atomic_max_acq","qualname":"::intrinsics::::atomic_max_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":445},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":449731,"byte_end":449745,"line_start":546,"line_end":546,"column_start":12,"column_end":26},"name":"atomic_max_rel","qualname":"::intrinsics::::atomic_max_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":449},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":449787,"byte_end":449804,"line_start":547,"line_end":547,"column_start":12,"column_end":29},"name":"atomic_max_acqrel","qualname":"::intrinsics::::atomic_max_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":453},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":449846,"byte_end":449864,"line_start":548,"line_end":548,"column_start":12,"column_end":30},"name":"atomic_max_relaxed","qualname":"::intrinsics::::atomic_max_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":457},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":449907,"byte_end":449917,"line_start":550,"line_end":550,"column_start":12,"column_end":22},"name":"atomic_min","qualname":"::intrinsics::::atomic_min","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":461},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":449959,"byte_end":449973,"line_start":551,"line_end":551,"column_start":12,"column_end":26},"name":"atomic_min_acq","qualname":"::intrinsics::::atomic_min_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":465},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":450015,"byte_end":450029,"line_start":552,"line_end":552,"column_start":12,"column_end":26},"name":"atomic_min_rel","qualname":"::intrinsics::::atomic_min_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":469},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":450071,"byte_end":450088,"line_start":553,"line_end":553,"column_start":12,"column_end":29},"name":"atomic_min_acqrel","qualname":"::intrinsics::::atomic_min_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":473},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":450130,"byte_end":450148,"line_start":554,"line_end":554,"column_start":12,"column_end":30},"name":"atomic_min_relaxed","qualname":"::intrinsics::::atomic_min_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":477},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":450191,"byte_end":450202,"line_start":556,"line_end":556,"column_start":12,"column_end":23},"name":"atomic_umin","qualname":"::intrinsics::::atomic_umin","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":481},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":450244,"byte_end":450259,"line_start":557,"line_end":557,"column_start":12,"column_end":27},"name":"atomic_umin_acq","qualname":"::intrinsics::::atomic_umin_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":485},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":450301,"byte_end":450316,"line_start":558,"line_end":558,"column_start":12,"column_end":27},"name":"atomic_umin_rel","qualname":"::intrinsics::::atomic_umin_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":489},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":450358,"byte_end":450376,"line_start":559,"line_end":559,"column_start":12,"column_end":30},"name":"atomic_umin_acqrel","qualname":"::intrinsics::::atomic_umin_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":493},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":450418,"byte_end":450437,"line_start":560,"line_end":560,"column_start":12,"column_end":31},"name":"atomic_umin_relaxed","qualname":"::intrinsics::::atomic_umin_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":497},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":450480,"byte_end":450491,"line_start":562,"line_end":562,"column_start":12,"column_end":23},"name":"atomic_umax","qualname":"::intrinsics::::atomic_umax","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":501},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":450533,"byte_end":450548,"line_start":563,"line_end":563,"column_start":12,"column_end":27},"name":"atomic_umax_acq","qualname":"::intrinsics::::atomic_umax_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":450590,"byte_end":450605,"line_start":564,"line_end":564,"column_start":12,"column_end":27},"name":"atomic_umax_rel","qualname":"::intrinsics::::atomic_umax_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":509},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":450647,"byte_end":450665,"line_start":565,"line_end":565,"column_start":12,"column_end":30},"name":"atomic_umax_acqrel","qualname":"::intrinsics::::atomic_umax_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":450707,"byte_end":450726,"line_start":566,"line_end":566,"column_start":12,"column_end":31},"name":"atomic_umax_relaxed","qualname":"::intrinsics::::atomic_umax_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":451218,"byte_end":451236,"line_start":575,"line_end":575,"column_start":12,"column_end":30},"name":"prefetch_read_data","qualname":"::intrinsics::::prefetch_read_data","value":"fn <T> (data: *const T, locality: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n if supported; otherwise, it is a noop.\n Prefetches have no effect on the behavior of the program but can change its performance\n characteristics.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":521},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":451732,"byte_end":451751,"line_start":583,"line_end":583,"column_start":12,"column_end":31},"name":"prefetch_write_data","qualname":"::intrinsics::::prefetch_write_data","value":"fn <T> (data: *const T, locality: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n if supported; otherwise, it is a noop.\n Prefetches have no effect on the behavior of the program but can change its performance\n characteristics.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":525},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":452247,"byte_end":452272,"line_start":591,"line_end":591,"column_start":12,"column_end":37},"name":"prefetch_read_instruction","qualname":"::intrinsics::::prefetch_read_instruction","value":"fn <T> (data: *const T, locality: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n if supported; otherwise, it is a noop.\n Prefetches have no effect on the behavior of the program but can change its performance\n characteristics.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":452768,"byte_end":452794,"line_start":599,"line_end":599,"column_start":12,"column_end":38},"name":"prefetch_write_instruction","qualname":"::intrinsics::::prefetch_write_instruction","value":"fn <T> (data: *const T, locality: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n if supported; otherwise, it is a noop.\n Prefetches have no effect on the behavior of the program but can change its performance\n characteristics.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":533},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":452871,"byte_end":452883,"line_start":604,"line_end":604,"column_start":12,"column_end":24},"name":"atomic_fence","qualname":"::intrinsics::::atomic_fence","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":535},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":452898,"byte_end":452914,"line_start":605,"line_end":605,"column_start":12,"column_end":28},"name":"atomic_fence_acq","qualname":"::intrinsics::::atomic_fence_acq","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":452929,"byte_end":452945,"line_start":606,"line_end":606,"column_start":12,"column_end":28},"name":"atomic_fence_rel","qualname":"::intrinsics::::atomic_fence_rel","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":452960,"byte_end":452979,"line_start":607,"line_end":607,"column_start":12,"column_end":31},"name":"atomic_fence_acqrel","qualname":"::intrinsics::::atomic_fence_acqrel","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":541},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":453320,"byte_end":453344,"line_start":615,"line_end":615,"column_start":12,"column_end":36},"name":"atomic_singlethreadfence","qualname":"::intrinsics::::atomic_singlethreadfence","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" A compiler-only memory barrier.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":543},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":453359,"byte_end":453387,"line_start":616,"line_end":616,"column_start":12,"column_end":40},"name":"atomic_singlethreadfence_acq","qualname":"::intrinsics::::atomic_singlethreadfence_acq","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":545},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":453402,"byte_end":453430,"line_start":617,"line_end":617,"column_start":12,"column_end":40},"name":"atomic_singlethreadfence_rel","qualname":"::intrinsics::::atomic_singlethreadfence_rel","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":547},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":453445,"byte_end":453476,"line_start":618,"line_end":618,"column_start":12,"column_end":43},"name":"atomic_singlethreadfence_acqrel","qualname":"::intrinsics::::atomic_singlethreadfence_acqrel","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":549},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":453860,"byte_end":453870,"line_start":627,"line_end":627,"column_start":12,"column_end":22},"name":"rustc_peek","qualname":"::intrinsics::::rustc_peek","value":"fn <T> (_: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Magic intrinsic that derives its meaning from attributes\n attached to the function.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":553},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":454068,"byte_end":454073,"line_start":633,"line_end":633,"column_start":12,"column_end":17},"name":"abort","qualname":"::intrinsics::::abort","value":"fn () -> !","parent":null,"children":[],"decl_id":null,"docs":" Aborts the execution of the process.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":555},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":454411,"byte_end":454422,"line_start":641,"line_end":641,"column_start":12,"column_end":23},"name":"unreachable","qualname":"::intrinsics::::unreachable","value":"fn () -> !","parent":null,"children":[],"decl_id":null,"docs":" Tells LLVM that this point in the code is not reachable, enabling\n further optimizations.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":557},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":454959,"byte_end":454965,"line_start":651,"line_end":651,"column_start":12,"column_end":18},"name":"assume","qualname":"::intrinsics::::assume","value":"fn (b: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Informs the optimizer that a condition is always true.\n If the condition is false, the behavior is undefined.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":559},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":455192,"byte_end":455198,"line_start":657,"line_end":657,"column_start":12,"column_end":18},"name":"likely","qualname":"::intrinsics::::likely","value":"fn (b: bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Hints to the compiler that branch condition is likely to be true.\n Returns the value passed to it.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":561},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":455434,"byte_end":455442,"line_start":663,"line_end":663,"column_start":12,"column_end":20},"name":"unlikely","qualname":"::intrinsics::::unlikely","value":"fn (b: bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Hints to the compiler that branch condition is likely to be false.\n Returns the value passed to it.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":455539,"byte_end":455549,"line_start":666,"line_end":666,"column_start":12,"column_end":22},"name":"breakpoint","qualname":"::intrinsics::::breakpoint","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" Executes a breakpoint trap, for inspection by a debugger.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":565},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":455745,"byte_end":455752,"line_start":672,"line_end":672,"column_start":12,"column_end":19},"name":"size_of","qualname":"::intrinsics::::size_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":" The size of a type in bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":569},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":455896,"byte_end":455909,"line_start":677,"line_end":677,"column_start":12,"column_end":25},"name":"move_val_init","qualname":"::intrinsics::::move_val_init","value":"fn <T> (dst: *mut T, src: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves a value to an uninitialized memory location.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":573},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":455947,"byte_end":455959,"line_start":679,"line_end":679,"column_start":12,"column_end":24},"name":"min_align_of","qualname":"::intrinsics::::min_align_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":577},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":455986,"byte_end":455999,"line_start":680,"line_end":680,"column_start":12,"column_end":25},"name":"pref_align_of","qualname":"::intrinsics::::pref_align_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":581},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":456208,"byte_end":456219,"line_start":686,"line_end":686,"column_start":12,"column_end":23},"name":"size_of_val","qualname":"::intrinsics::::size_of_val","value":"fn <T> (_: &T) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The size of the referenced value in bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":585},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":456259,"byte_end":456275,"line_start":687,"line_end":687,"column_start":12,"column_end":28},"name":"min_align_of_val","qualname":"::intrinsics::::min_align_of_val","value":"fn <T> (_: &T) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":589},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":456382,"byte_end":456391,"line_start":690,"line_end":690,"column_start":12,"column_end":21},"name":"type_name","qualname":"::intrinsics::::type_name","value":"fn <T> () -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Gets a static string slice containing the name of a type.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":593},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":456625,"byte_end":456632,"line_start":695,"line_end":695,"column_start":12,"column_end":19},"name":"type_id","qualname":"::intrinsics::::type_id","value":"fn <T> () -> u64","parent":null,"children":[],"decl_id":null,"docs":" Gets an identifier which is globally unique to the specified type. This\n function will return the same value for a type regardless of whichever\n crate it is invoked in.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":597},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":456968,"byte_end":456972,"line_start":703,"line_end":703,"column_start":12,"column_end":16},"name":"init","qualname":"::intrinsics::::init","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Creates a value initialized to zero.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":601},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":457373,"byte_end":457379,"line_start":712,"line_end":712,"column_start":12,"column_end":18},"name":"uninit","qualname":"::intrinsics::::uninit","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Creates an uninitialized value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":605},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":465434,"byte_end":465443,"line_start":923,"line_end":923,"column_start":12,"column_end":21},"name":"transmute","qualname":"::intrinsics::::transmute","value":"fn <T, U> (e: T) -> U","parent":null,"children":[],"decl_id":null,"docs":" Reinterprets the bits of a value of one type as another type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":465377,"byte_end":465422,"line_start":922,"line_end":922,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":611},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":465892,"byte_end":465902,"line_start":934,"line_end":934,"column_start":12,"column_end":22},"name":"needs_drop","qualname":"::intrinsics::::needs_drop","value":"fn <T> () -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the actual type given as `T` requires drop\n glue; returns `false` if the actual type provided for `T`\n implements `Copy`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":615},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":466461,"byte_end":466467,"line_start":947,"line_end":947,"column_start":12,"column_end":18},"name":"offset","qualname":"::intrinsics::::offset","value":"fn <T> (dst: *const T, offset: isize) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":619},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":467095,"byte_end":467107,"line_start":960,"line_end":960,"column_start":12,"column_end":24},"name":"arith_offset","qualname":"::intrinsics::::arith_offset","value":"fn <T> (dst: *const T, offset: isize) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer, potentially wrapping.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":623},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":468682,"byte_end":468701,"line_start":1002,"line_end":1002,"column_start":12,"column_end":31},"name":"copy_nonoverlapping","qualname":"::intrinsics::::copy_nonoverlapping","value":"fn <T> (src: *const T, dst: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Copies `count * size_of<T>` bytes from `src` to `dst`. The source\n and destination may *not* overlap.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":468625,"byte_end":468670,"line_start":1001,"line_end":1001,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":627},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":469718,"byte_end":469722,"line_start":1033,"line_end":1033,"column_start":12,"column_end":16},"name":"copy","qualname":"::intrinsics::::copy","value":"fn <T> (src: *const T, dst: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Copies `count * size_of<T>` bytes from `src` to `dst`. The source\n and destination may overlap.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":469661,"byte_end":469706,"line_start":1032,"line_end":1032,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":631},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":470252,"byte_end":470263,"line_start":1051,"line_end":1051,"column_start":12,"column_end":23},"name":"write_bytes","qualname":"::intrinsics::::write_bytes","value":"fn <T> (dst: *mut T, val: u8, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Invokes memset on the specified pointer, setting `count * size_of::<T>()`\n bytes of memory starting at `dst` to `val`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":470195,"byte_end":470240,"line_start":1050,"line_end":1050,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":635},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":470617,"byte_end":470652,"line_start":1059,"line_end":1059,"column_start":12,"column_end":47},"name":"volatile_copy_nonoverlapping_memory","qualname":"::intrinsics::::volatile_copy_nonoverlapping_memory","value":"fn <T> (dst: *mut T, src: *const T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\n a size of `count` * `size_of::<T>()` and an alignment of\n `min_align_of::<T>()`","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":639},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":471063,"byte_end":471083,"line_start":1067,"line_end":1067,"column_start":12,"column_end":32},"name":"volatile_copy_memory","qualname":"::intrinsics::::volatile_copy_memory","value":"fn <T> (dst: *mut T, src: *const T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\n a size of `count` * `size_of::<T>()` and an alignment of\n `min_align_of::<T>()`","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":643},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":471439,"byte_end":471458,"line_start":1074,"line_end":1074,"column_start":12,"column_end":31},"name":"volatile_set_memory","qualname":"::intrinsics::::volatile_set_memory","value":"fn <T> (dst: *mut T, val: u8, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\n size of `count` * `size_of::<T>()` and an alignment of\n `min_align_of::<T>()`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":647},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":471693,"byte_end":471706,"line_start":1079,"line_end":1079,"column_start":12,"column_end":25},"name":"volatile_load","qualname":"::intrinsics::::volatile_load","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Perform a volatile load from the `src` pointer.\n The stabilized version of this intrinsic is\n [`std::ptr::read_volatile`](../../std/ptr/fn.read_volatile.html).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":651},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":471925,"byte_end":471939,"line_start":1083,"line_end":1083,"column_start":12,"column_end":26},"name":"volatile_store","qualname":"::intrinsics::::volatile_store","value":"fn <T> (dst: *mut T, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a volatile store to the `dst` pointer.\n The stabilized version of this intrinsic is\n [`std::ptr::write_volatile`](../../std/ptr/fn.write_volatile.html).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":655},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":472021,"byte_end":472028,"line_start":1086,"line_end":1086,"column_start":12,"column_end":19},"name":"sqrtf32","qualname":"::intrinsics::::sqrtf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the square root of an `f32`\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":472100,"byte_end":472107,"line_start":1088,"line_end":1088,"column_start":12,"column_end":19},"name":"sqrtf64","qualname":"::intrinsics::::sqrtf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the square root of an `f64`\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":659},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":472181,"byte_end":472188,"line_start":1091,"line_end":1091,"column_start":12,"column_end":19},"name":"powif32","qualname":"::intrinsics::::powif32","value":"fn (a: f32, x: i32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Raises an `f32` to an integer power.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":661},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":472269,"byte_end":472276,"line_start":1093,"line_end":1093,"column_start":12,"column_end":19},"name":"powif64","qualname":"::intrinsics::::powif64","value":"fn (a: f64, x: i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Raises an `f64` to an integer power.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":663},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":472351,"byte_end":472357,"line_start":1096,"line_end":1096,"column_start":12,"column_end":18},"name":"sinf32","qualname":"::intrinsics::::sinf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the sine of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":665},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":472423,"byte_end":472429,"line_start":1098,"line_end":1098,"column_start":12,"column_end":18},"name":"sinf64","qualname":"::intrinsics::::sinf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the sine of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":667},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":472498,"byte_end":472504,"line_start":1101,"line_end":1101,"column_start":12,"column_end":18},"name":"cosf32","qualname":"::intrinsics::::cosf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the cosine of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":669},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":472572,"byte_end":472578,"line_start":1103,"line_end":1103,"column_start":12,"column_end":18},"name":"cosf64","qualname":"::intrinsics::::cosf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the cosine of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":671},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":472650,"byte_end":472656,"line_start":1106,"line_end":1106,"column_start":12,"column_end":18},"name":"powf32","qualname":"::intrinsics::::powf32","value":"fn (a: f32, x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Raises an `f32` to an `f32` power.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":673},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":472735,"byte_end":472741,"line_start":1108,"line_end":1108,"column_start":12,"column_end":18},"name":"powf64","qualname":"::intrinsics::::powf64","value":"fn (a: f64, x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Raises an `f64` to an `f64` power.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":675},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":472823,"byte_end":472829,"line_start":1111,"line_end":1111,"column_start":12,"column_end":18},"name":"expf32","qualname":"::intrinsics::::expf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the exponential of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":677},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":472902,"byte_end":472908,"line_start":1113,"line_end":1113,"column_start":12,"column_end":18},"name":"expf64","qualname":"::intrinsics::::expf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the exponential of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":679},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":472988,"byte_end":472995,"line_start":1116,"line_end":1116,"column_start":12,"column_end":19},"name":"exp2f32","qualname":"::intrinsics::::exp2f32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns 2 raised to the power of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":681},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":473074,"byte_end":473081,"line_start":1118,"line_end":1118,"column_start":12,"column_end":19},"name":"exp2f64","qualname":"::intrinsics::::exp2f64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns 2 raised to the power of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":683},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":473161,"byte_end":473167,"line_start":1121,"line_end":1121,"column_start":12,"column_end":18},"name":"logf32","qualname":"::intrinsics::::logf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the natural logarithm of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":685},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":473246,"byte_end":473252,"line_start":1123,"line_end":1123,"column_start":12,"column_end":18},"name":"logf64","qualname":"::intrinsics::::logf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the natural logarithm of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":687},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":473332,"byte_end":473340,"line_start":1126,"line_end":1126,"column_start":12,"column_end":20},"name":"log10f32","qualname":"::intrinsics::::log10f32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the base 10 logarithm of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":689},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":473419,"byte_end":473427,"line_start":1128,"line_end":1128,"column_start":12,"column_end":20},"name":"log10f64","qualname":"::intrinsics::::log10f64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the base 10 logarithm of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":691},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":473506,"byte_end":473513,"line_start":1131,"line_end":1131,"column_start":12,"column_end":19},"name":"log2f32","qualname":"::intrinsics::::log2f32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the base 2 logarithm of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":693},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":473591,"byte_end":473598,"line_start":1133,"line_end":1133,"column_start":12,"column_end":19},"name":"log2f64","qualname":"::intrinsics::::log2f64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the base 2 logarithm of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":473673,"byte_end":473679,"line_start":1136,"line_end":1136,"column_start":12,"column_end":18},"name":"fmaf32","qualname":"::intrinsics::::fmaf32","value":"fn (a: f32, b: f32, c: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns `a * b + c` for `f32` values.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":697},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":473769,"byte_end":473775,"line_start":1138,"line_end":1138,"column_start":12,"column_end":18},"name":"fmaf64","qualname":"::intrinsics::::fmaf64","value":"fn (a: f64, b: f64, c: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns `a * b + c` for `f64` values.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":699},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":473868,"byte_end":473875,"line_start":1141,"line_end":1141,"column_start":12,"column_end":19},"name":"fabsf32","qualname":"::intrinsics::::fabsf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the absolute value of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":701},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":473951,"byte_end":473958,"line_start":1143,"line_end":1143,"column_start":12,"column_end":19},"name":"fabsf64","qualname":"::intrinsics::::fabsf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the absolute value of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":703},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":474045,"byte_end":474056,"line_start":1146,"line_end":1146,"column_start":12,"column_end":23},"name":"copysignf32","qualname":"::intrinsics::::copysignf32","value":"fn (x: f32, y: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Copies the sign from `y` to `x` for `f32` values.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":705},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":474150,"byte_end":474161,"line_start":1148,"line_end":1148,"column_start":12,"column_end":23},"name":"copysignf64","qualname":"::intrinsics::::copysignf64","value":"fn (x: f64, y: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Copies the sign from `y` to `x` for `f64` values.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":707},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":474266,"byte_end":474274,"line_start":1151,"line_end":1151,"column_start":12,"column_end":20},"name":"floorf32","qualname":"::intrinsics::::floorf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":709},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":474370,"byte_end":474378,"line_start":1153,"line_end":1153,"column_start":12,"column_end":20},"name":"floorf64","qualname":"::intrinsics::::floorf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":711},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":474479,"byte_end":474486,"line_start":1156,"line_end":1156,"column_start":12,"column_end":19},"name":"ceilf32","qualname":"::intrinsics::::ceilf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":713},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":474586,"byte_end":474593,"line_start":1158,"line_end":1158,"column_start":12,"column_end":19},"name":"ceilf64","qualname":"::intrinsics::::ceilf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":715},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":474668,"byte_end":474676,"line_start":1161,"line_end":1161,"column_start":12,"column_end":20},"name":"truncf32","qualname":"::intrinsics::::truncf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the integer part of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":717},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":474750,"byte_end":474758,"line_start":1163,"line_end":1163,"column_start":12,"column_end":20},"name":"truncf64","qualname":"::intrinsics::::truncf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the integer part of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":719},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":474925,"byte_end":474932,"line_start":1167,"line_end":1167,"column_start":12,"column_end":19},"name":"rintf32","qualname":"::intrinsics::::rintf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\n if the argument is not an integer.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":721},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":475098,"byte_end":475105,"line_start":1170,"line_end":1170,"column_start":12,"column_end":19},"name":"rintf64","qualname":"::intrinsics::::rintf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\n if the argument is not an integer.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":723},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":475183,"byte_end":475195,"line_start":1173,"line_end":1173,"column_start":12,"column_end":24},"name":"nearbyintf32","qualname":"::intrinsics::::nearbyintf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":725},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":475272,"byte_end":475284,"line_start":1175,"line_end":1175,"column_start":12,"column_end":24},"name":"nearbyintf64","qualname":"::intrinsics::::nearbyintf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":727},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":475400,"byte_end":475408,"line_start":1178,"line_end":1178,"column_start":12,"column_end":20},"name":"roundf32","qualname":"::intrinsics::::roundf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":729},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":475523,"byte_end":475531,"line_start":1180,"line_end":1180,"column_start":12,"column_end":20},"name":"roundf64","qualname":"::intrinsics::::roundf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":731},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":475673,"byte_end":475682,"line_start":1184,"line_end":1184,"column_start":12,"column_end":21},"name":"fadd_fast","qualname":"::intrinsics::::fadd_fast","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Float addition that allows optimizations based on algebraic rules.\n May assume inputs are finite.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":735},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":475832,"byte_end":475841,"line_start":1188,"line_end":1188,"column_start":12,"column_end":21},"name":"fsub_fast","qualname":"::intrinsics::::fsub_fast","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Float subtraction that allows optimizations based on algebraic rules.\n May assume inputs are finite.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":739},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":475994,"byte_end":476003,"line_start":1192,"line_end":1192,"column_start":12,"column_end":21},"name":"fmul_fast","qualname":"::intrinsics::::fmul_fast","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Float multiplication that allows optimizations based on algebraic rules.\n May assume inputs are finite.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":743},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":476150,"byte_end":476159,"line_start":1196,"line_end":1196,"column_start":12,"column_end":21},"name":"fdiv_fast","qualname":"::intrinsics::::fdiv_fast","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Float division that allows optimizations based on algebraic rules.\n May assume inputs are finite.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":747},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":476307,"byte_end":476316,"line_start":1200,"line_end":1200,"column_start":12,"column_end":21},"name":"frem_fast","qualname":"::intrinsics::::frem_fast","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Float remainder that allows optimizations based on algebraic rules.\n May assume inputs are finite.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":751},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":476413,"byte_end":476418,"line_start":1204,"line_end":1204,"column_start":12,"column_end":17},"name":"ctpop","qualname":"::intrinsics::::ctpop","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits set in an integer type `T`\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":755},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":477086,"byte_end":477090,"line_start":1231,"line_end":1231,"column_start":12,"column_end":16},"name":"ctlz","qualname":"::intrinsics::::ctlz","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of leading unset bits (zeroes) in an integer type `T`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":759},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":477497,"byte_end":477509,"line_start":1247,"line_end":1247,"column_start":12,"column_end":24},"name":"ctlz_nonzero","qualname":"::intrinsics::::ctlz_nonzero","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Like `ctlz`, but extra-unsafe as it returns `undef` when\n given an `x` with value `0`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":763},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":478182,"byte_end":478186,"line_start":1274,"line_end":1274,"column_start":12,"column_end":16},"name":"cttz","qualname":"::intrinsics::::cttz","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of trailing unset bits (zeroes) in an integer type `T`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":767},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":478595,"byte_end":478607,"line_start":1290,"line_end":1290,"column_start":12,"column_end":24},"name":"cttz_nonzero","qualname":"::intrinsics::::cttz_nonzero","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Like `cttz`, but extra-unsafe as it returns `undef` when\n given an `x` with value `0`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":771},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":478686,"byte_end":478691,"line_start":1293,"line_end":1293,"column_start":12,"column_end":17},"name":"bswap","qualname":"::intrinsics::::bswap","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reverses the bytes in an integer type `T`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":775},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":478769,"byte_end":478779,"line_start":1296,"line_end":1296,"column_start":12,"column_end":22},"name":"bitreverse","qualname":"::intrinsics::::bitreverse","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reverses the bits in an integer type `T`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":779},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":479086,"byte_end":479103,"line_start":1302,"line_end":1302,"column_start":12,"column_end":29},"name":"add_with_overflow","qualname":"::intrinsics::::add_with_overflow","value":"fn <T> (x: T, y: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Performs checked integer addition.\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `overflowing_add` method. For example,\n [`std::u32::overflowing_add`](../../std/primitive.u32.html#method.overflowing_add)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":783},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":479426,"byte_end":479443,"line_start":1308,"line_end":1308,"column_start":12,"column_end":29},"name":"sub_with_overflow","qualname":"::intrinsics::::sub_with_overflow","value":"fn <T> (x: T, y: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Performs checked integer subtraction\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `overflowing_sub` method. For example,\n [`std::u32::overflowing_sub`](../../std/primitive.u32.html#method.overflowing_sub)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":787},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":479769,"byte_end":479786,"line_start":1314,"line_end":1314,"column_start":12,"column_end":29},"name":"mul_with_overflow","qualname":"::intrinsics::::mul_with_overflow","value":"fn <T> (x: T, y: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Performs checked integer multiplication\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `overflowing_mul` method. For example,\n [`std::u32::overflowing_mul`](../../std/primitive.u32.html#method.overflowing_mul)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":791},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":479971,"byte_end":479980,"line_start":1318,"line_end":1318,"column_start":12,"column_end":21},"name":"exact_div","qualname":"::intrinsics::::exact_div","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Performs an exact division, resulting in undefined behavior where\n `x % y != 0` or `y == 0` or `x == T::min_value() && y == -1`\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":795},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":480141,"byte_end":480154,"line_start":1322,"line_end":1322,"column_start":12,"column_end":25},"name":"unchecked_div","qualname":"::intrinsics::::unchecked_div","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Performs an unchecked division, resulting in undefined behavior\n where y = 0 or x = `T::min_value()` and y = -1\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":799},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":480330,"byte_end":480343,"line_start":1325,"line_end":1325,"column_start":12,"column_end":25},"name":"unchecked_rem","qualname":"::intrinsics::::unchecked_rem","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of an unchecked division, resulting in\n undefined behavior where y = 0 or x = `T::min_value()` and y = -1\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":803},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":480516,"byte_end":480529,"line_start":1329,"line_end":1329,"column_start":12,"column_end":25},"name":"unchecked_shl","qualname":"::intrinsics::::unchecked_shl","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Performs an unchecked left shift, resulting in undefined behavior when\n y < 0 or y >= N, where N is the width of T in bits.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":807},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":480702,"byte_end":480715,"line_start":1332,"line_end":1332,"column_start":12,"column_end":25},"name":"unchecked_shr","qualname":"::intrinsics::::unchecked_shr","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Performs an unchecked right shift, resulting in undefined behavior when\n y < 0 or y >= N, where N is the width of T in bits.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":811},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":481054,"byte_end":481069,"line_start":1338,"line_end":1338,"column_start":12,"column_end":27},"name":"overflowing_add","qualname":"::intrinsics::::overflowing_add","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `wrapping_add` method. For example,\n [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":815},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":481407,"byte_end":481422,"line_start":1343,"line_end":1343,"column_start":12,"column_end":27},"name":"overflowing_sub","qualname":"::intrinsics::::overflowing_sub","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `wrapping_sub` method. For example,\n [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":819},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":481760,"byte_end":481775,"line_start":1348,"line_end":1348,"column_start":12,"column_end":27},"name":"overflowing_mul","qualname":"::intrinsics::::overflowing_mul","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `wrapping_mul` method. For example,\n [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":823},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":481943,"byte_end":481961,"line_start":1352,"line_end":1352,"column_start":12,"column_end":30},"name":"discriminant_value","qualname":"::intrinsics::::discriminant_value","value":"fn <T> (v: &T) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the value of the discriminant for the variant in 'v',\n cast to a `u64`; if `T` has no discriminant, returns 0.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":827},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":482488,"byte_end":482491,"line_start":1362,"line_end":1362,"column_start":12,"column_end":15},"name":"try","qualname":"::intrinsics::::try","value":"fn (f: fn(*mut u8), data: *mut u8, local_ptr: *mut u8) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Rust's \"try catch\" construct which invokes the function pointer `f` with\n the data pointer `data`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":829},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":483786,"byte_end":483798,"line_start":1396,"line_end":1396,"column_start":12,"column_end":24},"name":"align_offset","qualname":"::intrinsics::::align_offset","value":"fn (ptr: *const (), align: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the byte offset that needs to be applied to `ptr` in order to\n make it aligned to `align`.\n If it is not possible to align `ptr`, the implementation returns\n `usize::max_value()`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":831},"span":{"file_name":[108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":483967,"byte_end":483984,"line_start":1400,"line_end":1400,"column_start":12,"column_end":29},"name":"nontemporal_store","qualname":"::intrinsics::::nontemporal_store","value":"fn <T> (ptr: *mut T, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits a `!nontemporal` store according to LLVM (see their docs).\n Probably will never become stable.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1206},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mem","qualname":"::mem","value":"libcore/mem.rs","parent":null,"children":[{"krate":0,"index":1208},{"krate":0,"index":1210},{"krate":0,"index":1212},{"krate":0,"index":1214},{"krate":0,"index":1216},{"krate":0,"index":1218},{"krate":0,"index":1230},{"krate":0,"index":1232},{"krate":0,"index":1240},{"krate":0,"index":1242},{"krate":0,"index":1244},{"krate":0,"index":1246},{"krate":0,"index":1248},{"krate":0,"index":1250},{"krate":0,"index":1252},{"krate":0,"index":1254},{"krate":0,"index":1256},{"krate":0,"index":1258},{"krate":0,"index":1260},{"krate":0,"index":1262},{"krate":0,"index":1264},{"krate":0,"index":1266},{"krate":0,"index":1268},{"krate":0,"index":1270},{"krate":0,"index":1272},{"krate":0,"index":1274},{"krate":0,"index":1278},{"krate":0,"index":1282},{"krate":0,"index":1284},{"krate":0,"index":1288},{"krate":0,"index":1292},{"krate":0,"index":19580},{"krate":0,"index":19582},{"krate":0,"index":1294},{"krate":0,"index":1302},{"krate":0,"index":1308},{"krate":0,"index":1312},{"krate":0,"index":1316},{"krate":0,"index":1322},{"krate":0,"index":1326},{"krate":0,"index":1332},{"krate":0,"index":1334},{"krate":0,"index":1346},{"krate":0,"index":1350},{"krate":0,"index":1354},{"krate":0,"index":1356},{"krate":0,"index":1358},{"krate":0,"index":1362},{"krate":0,"index":1372},{"krate":0,"index":1378},{"krate":0,"index":1382},{"krate":0,"index":1386},{"krate":0,"index":1390},{"krate":0,"index":1394},{"krate":0,"index":1396}],"decl_id":null,"docs":" Basic functions for dealing with memory.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":484658,"byte_end":484704,"line_start":16,"line_end":16,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":1242},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":489654,"byte_end":489660,"line_start":174,"line_end":174,"column_start":8,"column_end":14},"name":"forget","qualname":"::mem::forget","value":"fn <T> (t: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Leaks a value: takes ownership and \"forgets\" about the value **without running\n its destructor**.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":489591,"byte_end":489600,"line_start":172,"line_end":172,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":489601,"byte_end":489646,"line_start":173,"line_end":173,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1244},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":493955,"byte_end":493962,"line_start":315,"line_end":315,"column_start":14,"column_end":21},"name":"size_of","qualname":"::mem::size_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of a type in bytes.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":493886,"byte_end":493895,"line_start":313,"line_end":313,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":493896,"byte_end":493941,"line_start":314,"line_end":314,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1246},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":494685,"byte_end":494696,"line_start":341,"line_end":341,"column_start":8,"column_end":19},"name":"size_of_val","qualname":"::mem::size_of_val","value":"fn <T> (val: &T) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of the pointed-to value in bytes.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":494622,"byte_end":494631,"line_start":339,"line_end":339,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":494632,"byte_end":494677,"line_start":340,"line_end":340,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1248},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":495368,"byte_end":495380,"line_start":364,"line_end":364,"column_start":8,"column_end":20},"name":"min_align_of","qualname":"::mem::min_align_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the [ABI]-required minimum alignment of a type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":495233,"byte_end":495242,"line_start":361,"line_end":361,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":495243,"byte_end":495288,"line_start":362,"line_end":362,"column_start":1,"column_end":46}},{"value":"rustc_deprecated(reason = \"use `align_of` instead\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":495289,"byte_end":495360,"line_start":363,"line_end":363,"column_start":1,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":1250},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":495980,"byte_end":495996,"line_start":385,"line_end":385,"column_start":8,"column_end":24},"name":"min_align_of_val","qualname":"::mem::min_align_of_val","value":"fn <T> (val: &T) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":495841,"byte_end":495850,"line_start":382,"line_end":382,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":495851,"byte_end":495896,"line_start":383,"line_end":383,"column_start":1,"column_end":46}},{"value":"rustc_deprecated(reason = \"use `align_of_val` instead\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":495897,"byte_end":495972,"line_start":384,"line_end":384,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":1252},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":496575,"byte_end":496583,"line_start":406,"line_end":406,"column_start":14,"column_end":22},"name":"align_of","qualname":"::mem::align_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the [ABI]-required minimum alignment of a type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":496506,"byte_end":496515,"line_start":404,"line_end":404,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":496516,"byte_end":496561,"line_start":405,"line_end":405,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1254},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":497075,"byte_end":497087,"line_start":425,"line_end":425,"column_start":8,"column_end":20},"name":"align_of_val","qualname":"::mem::align_of_val","value":"fn <T> (val: &T) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":497012,"byte_end":497021,"line_start":423,"line_end":423,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":497022,"byte_end":497067,"line_start":424,"line_end":424,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1256},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":499303,"byte_end":499313,"line_start":485,"line_end":485,"column_start":8,"column_end":18},"name":"needs_drop","qualname":"::mem::needs_drop","value":"fn <T> () -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether dropping values of type `T` matters.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":499234,"byte_end":499243,"line_start":483,"line_end":483,"column_start":1,"column_end":10}},{"value":"stable(feature = \"needs_drop\", since = \"1.21.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":499244,"byte_end":499295,"line_start":484,"line_end":484,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":1258},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":500385,"byte_end":500391,"line_start":517,"line_end":517,"column_start":15,"column_end":21},"name":"zeroed","qualname":"::mem::zeroed","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Creates a value whose bytes are all zero.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":500315,"byte_end":500324,"line_start":515,"line_end":515,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":500325,"byte_end":500370,"line_start":516,"line_end":516,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1260},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":503978,"byte_end":503991,"line_start":611,"line_end":611,"column_start":15,"column_end":28},"name":"uninitialized","qualname":"::mem::uninitialized","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Bypasses Rust's normal memory-initialization checks by pretending to\n produce a value of type `T`, while doing nothing at all.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":503908,"byte_end":503917,"line_start":609,"line_end":609,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":503918,"byte_end":503963,"line_start":610,"line_end":610,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1262},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":504361,"byte_end":504365,"line_start":632,"line_end":632,"column_start":8,"column_end":12},"name":"swap","qualname":"::mem::swap","value":"fn <T> (x: &mut T, y: &mut T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Swaps the values at two mutable locations, without deinitializing either one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":504298,"byte_end":504307,"line_start":630,"line_end":630,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":504308,"byte_end":504353,"line_start":631,"line_end":631,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1264},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":505891,"byte_end":505898,"line_start":690,"line_end":690,"column_start":8,"column_end":15},"name":"replace","qualname":"::mem::replace","value":"fn <T> (dest: &mut T, mut src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Replaces the value at a mutable location with a new one, returning the old value, without\n deinitializing either one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":505828,"byte_end":505837,"line_start":688,"line_end":688,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":505838,"byte_end":505883,"line_start":689,"line_end":689,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1266},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":508333,"byte_end":508337,"line_start":787,"line_end":787,"column_start":8,"column_end":12},"name":"drop","qualname":"::mem::drop","value":"fn <T> (_x: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Disposes of a value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":508270,"byte_end":508279,"line_start":785,"line_end":785,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":508280,"byte_end":508325,"line_start":786,"line_end":786,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1268},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":509696,"byte_end":509710,"line_start":832,"line_end":832,"column_start":15,"column_end":29},"name":"transmute_copy","qualname":"::mem::transmute_copy","value":"fn <T, U> (src: &T) -> U","parent":null,"children":[],"decl_id":null,"docs":" Interprets `src` as having type `&U`, and then reads `src` without moving\n the contained value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":509626,"byte_end":509635,"line_start":830,"line_end":830,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":509636,"byte_end":509681,"line_start":831,"line_end":831,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1270},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":509985,"byte_end":509997,"line_start":840,"line_end":840,"column_start":12,"column_end":24},"name":"Discriminant","qualname":"::mem::Discriminant","value":"","parent":null,"children":[],"decl_id":null,"docs":" Opaque type representing the discriminant of an enum.","sig":null,"attributes":[{"value":"stable(feature = \"discriminant_value\", since = \"1.21.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":509914,"byte_end":509973,"line_start":839,"line_end":839,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":1292},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":512035,"byte_end":512047,"line_start":905,"line_end":905,"column_start":8,"column_end":20},"name":"discriminant","qualname":"::mem::discriminant","value":"fn <T> (v: &T) -> Discriminant<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a value uniquely identifying the enum variant in `v`.","sig":null,"attributes":[{"value":"stable(feature = \"discriminant_value\", since = \"1.21.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":511968,"byte_end":512027,"line_start":904,"line_end":904,"column_start":1,"column_end":60}}]},{"kind":"Union","id":{"krate":0,"index":19580},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":513592,"byte_end":513604,"line_start":950,"line_end":950,"column_start":11,"column_end":23},"name":"ManuallyDrop","qualname":"::mem::ManuallyDrop","value":"ManuallyDrop {  }","parent":null,"children":[{"krate":0,"index":8127}],"decl_id":null,"docs":" A wrapper to inhibit compiler from automatically calling `T`’s destructor.","sig":null,"attributes":[{"value":"stable(feature = \"manually_drop\", since = \"1.20.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":513477,"byte_end":513531,"line_start":947,"line_end":947,"column_start":1,"column_end":55}},{"value":"allow(unions_with_drop_fields)","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":513532,"byte_end":513565,"line_start":948,"line_end":948,"column_start":1,"column_end":34}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":513582,"byte_end":513619,"line_start":950,"line_end":950,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":513916,"byte_end":513919,"line_start":963,"line_end":963,"column_start":12,"column_end":15},"name":"new","qualname":"<ManuallyDrop<T>>::new","value":"fn (value: T) -> ManuallyDrop<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":514341,"byte_end":514351,"line_start":978,"line_end":978,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ManuallyDrop<T>>::into_inner","value":"fn (slot: ManuallyDrop<T>) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1300},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":514841,"byte_end":514845,"line_start":993,"line_end":993,"column_start":19,"column_end":23},"name":"drop","qualname":"<ManuallyDrop<T>>::drop","value":"fn (slot: &mut ManuallyDrop<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1354},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":517842,"byte_end":517853,"line_start":1105,"line_end":1105,"column_start":15,"column_end":26},"name":"unreachable","qualname":"::mem::unreachable","value":"fn () -> !","parent":null,"children":[],"decl_id":null,"docs":" Tells LLVM that this point in the code is not reachable, enabling further\n optimizations.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":517764,"byte_end":517773,"line_start":1103,"line_end":1103,"column_start":1,"column_end":10}},{"value":"unstable(feature = \"unreachable\", issue = \"43751\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":517774,"byte_end":517827,"line_start":1104,"line_end":1104,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1356},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":518191,"byte_end":518194,"line_start":1116,"line_end":1116,"column_start":12,"column_end":15},"name":"Pin","qualname":"::mem::Pin","value":"Pin {  }","parent":null,"children":[{"krate":0,"index":913}],"decl_id":null,"docs":" A pinned reference.","sig":null,"attributes":[{"value":"unstable(feature = \"pin\", issue = \"49150\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":518119,"byte_end":518164,"line_start":1114,"line_end":1114,"column_start":1,"column_end":46}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":518165,"byte_end":518179,"line_start":1115,"line_end":1115,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":518495,"byte_end":518498,"line_start":1125,"line_end":1125,"column_start":12,"column_end":15},"name":"new","qualname":"<Pin<'a, T>>::new","value":"fn (reference: &'a mut T) -> Pin<'a, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"pin\", issue = \"49150\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":518242,"byte_end":518287,"line_start":1120,"line_end":1120,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":519084,"byte_end":519097,"line_start":1140,"line_end":1140,"column_start":19,"column_end":32},"name":"new_unchecked","qualname":"<Pin<'a, T>>::new_unchecked","value":"fn (reference: &'a mut T) -> Pin<'a, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"pin\", issue = \"49150\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":518580,"byte_end":518625,"line_start":1131,"line_end":1131,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":519302,"byte_end":519308,"line_start":1146,"line_end":1146,"column_start":12,"column_end":18},"name":"borrow","qualname":"<Pin<'a, T>>::borrow","value":"fn <'b> (this: &'b mut Pin<'a, T>) -> Pin<'b, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"pin\", issue = \"49150\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":518580,"byte_end":518625,"line_start":1131,"line_end":1131,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":519710,"byte_end":519717,"line_start":1156,"line_end":1156,"column_start":19,"column_end":26},"name":"get_mut","qualname":"<Pin<'a, T>>::get_mut","value":"fn <'b> (this: &'b mut Pin<'a, T>) -> &'b mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"pin\", issue = \"49150\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":518580,"byte_end":518625,"line_start":1131,"line_end":1131,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":520393,"byte_end":520396,"line_start":1170,"line_end":1170,"column_start":19,"column_end":22},"name":"map","qualname":"<Pin<'a, T>>::map","value":"fn <'b, U, F> (this: &'b mut Pin<'a, T>, f: F) -> Pin<'b, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"pin\", issue = \"49150\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":518580,"byte_end":518625,"line_start":1131,"line_end":1131,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":1398},"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nonzero","qualname":"::nonzero","value":"libcore/nonzero.rs","parent":null,"children":[{"krate":0,"index":1400},{"krate":0,"index":1402},{"krate":0,"index":1406},{"krate":0,"index":1408},{"krate":0,"index":19584},{"krate":0,"index":19588},{"krate":0,"index":19592},{"krate":0,"index":19596},{"krate":0,"index":19600},{"krate":0,"index":19604},{"krate":0,"index":19608},{"krate":0,"index":19612},{"krate":0,"index":19616},{"krate":0,"index":19620},{"krate":0,"index":19624},{"krate":0,"index":19628},{"krate":0,"index":19632},{"krate":0,"index":19636},{"krate":0,"index":19640},{"krate":0,"index":19680},{"krate":0,"index":19676},{"krate":0,"index":19672},{"krate":0,"index":19666},{"krate":0,"index":19662},{"krate":0,"index":19650},{"krate":0,"index":19646},{"krate":0,"index":19642},{"krate":0,"index":1410},{"krate":0,"index":1418},{"krate":0,"index":1420},{"krate":0,"index":1424},{"krate":0,"index":1428}],"decl_id":null,"docs":" Exposes the NonZero lang item which provides optimization hints.\n","sig":null,"attributes":[{"value":"unstable(feature = \"nonzero\", reason = \"deprecated\", issue = \"49137\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":522307,"byte_end":522380,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"rustc_deprecated(reason =\n                       \"use `std::ptr::NonNull` or `std::num::NonZero*` instead\",\n                   since = \"1.26.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":522381,"byte_end":522507,"line_start":13,"line_end":14,"column_start":1,"column_end":39}},{"value":"allow(deprecated)","span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":522508,"byte_end":522529,"line_start":15,"line_end":15,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":1402},"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":522648,"byte_end":522656,"line_start":20,"line_end":20,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::nonzero::Zeroable","value":"Zeroable","parent":null,"children":[{"krate":0,"index":1404}],"decl_id":null,"docs":" Unsafe trait to indicate what types are usable with the NonZero struct\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":522701,"byte_end":522708,"line_start":22,"line_end":22,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::nonzero::Zeroable::is_zero","value":"fn (&self) -> bool","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":" Unsafe trait to indicate what types are usable with the NonZero struct\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":19640},"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":523791,"byte_end":523798,"line_start":66,"line_end":66,"column_start":12,"column_end":19},"name":"NonZero","qualname":"::nonzero::NonZero","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper type for raw pointers and integers that will never be\n NULL or 0 that might allow certain optimizations.\n","sig":null,"attributes":[{"value":"lang = \"non_zero\"","span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":523691,"byte_end":523711,"line_start":64,"line_end":64,"column_start":1,"column_end":21}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":523780,"byte_end":523826,"line_start":66,"line_end":66,"column_start":1,"column_end":47}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":523780,"byte_end":523826,"line_start":66,"line_end":66,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":524031,"byte_end":524044,"line_start":72,"line_end":72,"column_start":25,"column_end":38},"name":"new_unchecked","qualname":"<NonZero<T>>::new_unchecked","value":"fn (inner: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":524184,"byte_end":524187,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"new","qualname":"<NonZero<T>>::new","value":"fn (inner: T) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":524370,"byte_end":524373,"line_start":87,"line_end":87,"column_start":12,"column_end":15},"name":"get","qualname":"<NonZero<T>>::get","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1432},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ptr","qualname":"::ptr","value":"libcore/ptr.rs","parent":null,"children":[{"krate":0,"index":1434},{"krate":0,"index":1436},{"krate":0,"index":1438},{"krate":0,"index":1440},{"krate":0,"index":1442},{"krate":0,"index":1444},{"krate":0,"index":1450},{"krate":0,"index":1452},{"krate":0,"index":1454},{"krate":0,"index":1464},{"krate":0,"index":1466},{"krate":0,"index":1468},{"krate":0,"index":1470},{"krate":0,"index":1472},{"krate":0,"index":1474},{"krate":0,"index":1476},{"krate":0,"index":1478},{"krate":0,"index":1480},{"krate":0,"index":1486},{"krate":0,"index":1488},{"krate":0,"index":1490},{"krate":0,"index":1492},{"krate":0,"index":1494},{"krate":0,"index":1496},{"krate":0,"index":1498},{"krate":0,"index":1500},{"krate":0,"index":1536},{"krate":0,"index":1592},{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1602},{"krate":0,"index":1604},{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":19682},{"krate":0,"index":19686},{"krate":0,"index":19688},{"krate":0,"index":19692},{"krate":0,"index":19696},{"krate":0,"index":19700},{"krate":0,"index":19704},{"krate":0,"index":19708},{"krate":0,"index":19712},{"krate":0,"index":19714},{"krate":0,"index":19718},{"krate":0,"index":19722},{"krate":0,"index":19726},{"krate":0,"index":19730},{"krate":0,"index":19734},{"krate":0,"index":19738},{"krate":0,"index":19740},{"krate":0,"index":19744},{"krate":0,"index":19748},{"krate":0,"index":19752},{"krate":0,"index":19756},{"krate":0,"index":19760},{"krate":0,"index":19764},{"krate":0,"index":19766},{"krate":0,"index":19770},{"krate":0,"index":19774},{"krate":0,"index":19778},{"krate":0,"index":19782},{"krate":0,"index":19786},{"krate":0,"index":19790},{"krate":0,"index":19792},{"krate":0,"index":19796},{"krate":0,"index":19800},{"krate":0,"index":19804},{"krate":0,"index":19808},{"krate":0,"index":19812},{"krate":0,"index":19816},{"krate":0,"index":19818},{"krate":0,"index":19822},{"krate":0,"index":19826},{"krate":0,"index":19830},{"krate":0,"index":19834},{"krate":0,"index":19838},{"krate":0,"index":19842},{"krate":0,"index":19844},{"krate":0,"index":19848},{"krate":0,"index":19852},{"krate":0,"index":19856},{"krate":0,"index":19860},{"krate":0,"index":19864},{"krate":0,"index":19868},{"krate":0,"index":19870},{"krate":0,"index":19874},{"krate":0,"index":19878},{"krate":0,"index":19882},{"krate":0,"index":19886},{"krate":0,"index":19890},{"krate":0,"index":19894},{"krate":0,"index":19896},{"krate":0,"index":19900},{"krate":0,"index":19904},{"krate":0,"index":19908},{"krate":0,"index":19912},{"krate":0,"index":19916},{"krate":0,"index":19920},{"krate":0,"index":19922},{"krate":0,"index":19926},{"krate":0,"index":19930},{"krate":0,"index":19934},{"krate":0,"index":19938},{"krate":0,"index":19942},{"krate":0,"index":19946},{"krate":0,"index":19948},{"krate":0,"index":19952},{"krate":0,"index":19956},{"krate":0,"index":19960},{"krate":0,"index":19964},{"krate":0,"index":19968},{"krate":0,"index":19972},{"krate":0,"index":19974},{"krate":0,"index":19978},{"krate":0,"index":19982},{"krate":0,"index":19986},{"krate":0,"index":19990},{"krate":0,"index":19994},{"krate":0,"index":19998},{"krate":0,"index":20000},{"krate":0,"index":20004},{"krate":0,"index":20008},{"krate":0,"index":20012},{"krate":0,"index":20016},{"krate":0,"index":20020},{"krate":0,"index":20024},{"krate":0,"index":20026},{"krate":0,"index":20030},{"krate":0,"index":20034},{"krate":0,"index":20038},{"krate":0,"index":20042},{"krate":0,"index":20046},{"krate":0,"index":20050},{"krate":0,"index":20052},{"krate":0,"index":20056},{"krate":0,"index":20060},{"krate":0,"index":20064},{"krate":0,"index":20068},{"krate":0,"index":20072},{"krate":0,"index":20076},{"krate":0,"index":20078},{"krate":0,"index":20082},{"krate":0,"index":20086},{"krate":0,"index":20090},{"krate":0,"index":20094},{"krate":0,"index":20098},{"krate":0,"index":20102},{"krate":0,"index":20104},{"krate":0,"index":20108},{"krate":0,"index":20112},{"krate":0,"index":20116},{"krate":0,"index":20120},{"krate":0,"index":20124},{"krate":0,"index":20128},{"krate":0,"index":20130},{"krate":0,"index":20134},{"krate":0,"index":20138},{"krate":0,"index":20142},{"krate":0,"index":20146},{"krate":0,"index":20150},{"krate":0,"index":20154},{"krate":0,"index":20156},{"krate":0,"index":20160},{"krate":0,"index":20164},{"krate":0,"index":20168},{"krate":0,"index":20172},{"krate":0,"index":20176},{"krate":0,"index":20180},{"krate":0,"index":20182},{"krate":0,"index":20186},{"krate":0,"index":20190},{"krate":0,"index":20194},{"krate":0,"index":20198},{"krate":0,"index":20202},{"krate":0,"index":20206},{"krate":0,"index":20208},{"krate":0,"index":20212},{"krate":0,"index":20216},{"krate":0,"index":20220},{"krate":0,"index":20224},{"krate":0,"index":20228},{"krate":0,"index":20232},{"krate":0,"index":20234},{"krate":0,"index":20238},{"krate":0,"index":20242},{"krate":0,"index":20246},{"krate":0,"index":20250},{"krate":0,"index":20254},{"krate":0,"index":20258},{"krate":0,"index":20260},{"krate":0,"index":20264},{"krate":0,"index":20268},{"krate":0,"index":20272},{"krate":0,"index":20276},{"krate":0,"index":20280},{"krate":0,"index":20284},{"krate":0,"index":20286},{"krate":0,"index":20290},{"krate":0,"index":20294},{"krate":0,"index":20298},{"krate":0,"index":20302},{"krate":0,"index":20306},{"krate":0,"index":20310},{"krate":0,"index":20312},{"krate":0,"index":20316},{"krate":0,"index":20320},{"krate":0,"index":20324},{"krate":0,"index":20328},{"krate":0,"index":20332},{"krate":0,"index":20336},{"krate":0,"index":20338},{"krate":0,"index":20342},{"krate":0,"index":20346},{"krate":0,"index":20350},{"krate":0,"index":20354},{"krate":0,"index":20358},{"krate":0,"index":20362},{"krate":0,"index":20364},{"krate":0,"index":20368},{"krate":0,"index":20372},{"krate":0,"index":20376},{"krate":0,"index":20380},{"krate":0,"index":20384},{"krate":0,"index":20388},{"krate":0,"index":20390},{"krate":0,"index":20394},{"krate":0,"index":20398},{"krate":0,"index":20402},{"krate":0,"index":20406},{"krate":0,"index":20410},{"krate":0,"index":20414},{"krate":0,"index":20416},{"krate":0,"index":20420},{"krate":0,"index":20424},{"krate":0,"index":20428},{"krate":0,"index":20432},{"krate":0,"index":20436},{"krate":0,"index":20440},{"krate":0,"index":20442},{"krate":0,"index":20446},{"krate":0,"index":20450},{"krate":0,"index":20454},{"krate":0,"index":20458},{"krate":0,"index":20462},{"krate":0,"index":20466},{"krate":0,"index":20468},{"krate":0,"index":20472},{"krate":0,"index":20476},{"krate":0,"index":20480},{"krate":0,"index":20484},{"krate":0,"index":20488},{"krate":0,"index":20492},{"krate":0,"index":20494},{"krate":0,"index":20498},{"krate":0,"index":20502},{"krate":0,"index":20506},{"krate":0,"index":20510},{"krate":0,"index":20514},{"krate":0,"index":20518},{"krate":0,"index":20520},{"krate":0,"index":20524},{"krate":0,"index":20528},{"krate":0,"index":20532},{"krate":0,"index":20536},{"krate":0,"index":20540},{"krate":0,"index":20544},{"krate":0,"index":20546},{"krate":0,"index":20550},{"krate":0,"index":20554},{"krate":0,"index":20558},{"krate":0,"index":20562},{"krate":0,"index":20566},{"krate":0,"index":20570},{"krate":0,"index":20572},{"krate":0,"index":20576},{"krate":0,"index":20580},{"krate":0,"index":20584},{"krate":0,"index":20588},{"krate":0,"index":20592},{"krate":0,"index":20596},{"krate":0,"index":20598},{"krate":0,"index":20602},{"krate":0,"index":20606},{"krate":0,"index":20610},{"krate":0,"index":20614},{"krate":0,"index":20618},{"krate":0,"index":20622},{"krate":0,"index":20624},{"krate":0,"index":20628},{"krate":0,"index":20632},{"krate":0,"index":20636},{"krate":0,"index":20640},{"krate":0,"index":20644},{"krate":0,"index":20648},{"krate":0,"index":20650},{"krate":0,"index":20654},{"krate":0,"index":20658},{"krate":0,"index":20662},{"krate":0,"index":20666},{"krate":0,"index":20670},{"krate":0,"index":20674},{"krate":0,"index":20676},{"krate":0,"index":20680},{"krate":0,"index":20684},{"krate":0,"index":20688},{"krate":0,"index":20692},{"krate":0,"index":20696},{"krate":0,"index":20700},{"krate":0,"index":20702},{"krate":0,"index":20706},{"krate":0,"index":20710},{"krate":0,"index":20714},{"krate":0,"index":20718},{"krate":0,"index":20722},{"krate":0,"index":20726},{"krate":0,"index":20728},{"krate":0,"index":20732},{"krate":0,"index":20736},{"krate":0,"index":20740},{"krate":0,"index":20744},{"krate":0,"index":20748},{"krate":0,"index":20752},{"krate":0,"index":20754},{"krate":0,"index":20758},{"krate":0,"index":20762},{"krate":0,"index":20766},{"krate":0,"index":20770},{"krate":0,"index":20774},{"krate":0,"index":20778},{"krate":0,"index":20780},{"krate":0,"index":20784},{"krate":0,"index":20788},{"krate":0,"index":20792},{"krate":0,"index":20796},{"krate":0,"index":20800},{"krate":0,"index":20804},{"krate":0,"index":20806},{"krate":0,"index":20810},{"krate":0,"index":20814},{"krate":0,"index":20818},{"krate":0,"index":20822},{"krate":0,"index":20826},{"krate":0,"index":20830},{"krate":0,"index":20832},{"krate":0,"index":20836},{"krate":0,"index":20840},{"krate":0,"index":20844},{"krate":0,"index":20848},{"krate":0,"index":20852},{"krate":0,"index":20856},{"krate":0,"index":20858},{"krate":0,"index":20862},{"krate":0,"index":20866},{"krate":0,"index":20870},{"krate":0,"index":20874},{"krate":0,"index":20878},{"krate":0,"index":20882},{"krate":0,"index":20884},{"krate":0,"index":20888},{"krate":0,"index":20892},{"krate":0,"index":20896},{"krate":0,"index":20900},{"krate":0,"index":20904},{"krate":0,"index":20908},{"krate":0,"index":20910},{"krate":0,"index":20914},{"krate":0,"index":20918},{"krate":0,"index":20922},{"krate":0,"index":20926},{"krate":0,"index":20930},{"krate":0,"index":20934},{"krate":0,"index":20936},{"krate":0,"index":20940},{"krate":0,"index":20944},{"krate":0,"index":20948},{"krate":0,"index":20952},{"krate":0,"index":20956},{"krate":0,"index":20960},{"krate":0,"index":20962},{"krate":0,"index":20966},{"krate":0,"index":20970},{"krate":0,"index":20974},{"krate":0,"index":20978},{"krate":0,"index":20982},{"krate":0,"index":20986},{"krate":0,"index":20988},{"krate":0,"index":20992},{"krate":0,"index":20996},{"krate":0,"index":21000},{"krate":0,"index":21004},{"krate":0,"index":21008},{"krate":0,"index":21012},{"krate":0,"index":21014},{"krate":0,"index":21018},{"krate":0,"index":21022},{"krate":0,"index":21026},{"krate":0,"index":21030},{"krate":0,"index":21034},{"krate":0,"index":21038},{"krate":0,"index":21040},{"krate":0,"index":21044},{"krate":0,"index":21048},{"krate":0,"index":21052},{"krate":0,"index":21056},{"krate":0,"index":21060},{"krate":0,"index":21064},{"krate":0,"index":21066},{"krate":0,"index":21070},{"krate":0,"index":21074},{"krate":0,"index":21078},{"krate":0,"index":21082},{"krate":0,"index":21086},{"krate":0,"index":21090},{"krate":0,"index":21092},{"krate":0,"index":21096},{"krate":0,"index":21100},{"krate":0,"index":21104},{"krate":0,"index":21108},{"krate":0,"index":21112},{"krate":0,"index":21116},{"krate":0,"index":21118},{"krate":0,"index":21122},{"krate":0,"index":21126},{"krate":0,"index":21130},{"krate":0,"index":21134},{"krate":0,"index":21138},{"krate":0,"index":21142},{"krate":0,"index":21144},{"krate":0,"index":21148},{"krate":0,"index":21152},{"krate":0,"index":21156},{"krate":0,"index":21160},{"krate":0,"index":21164},{"krate":0,"index":21168},{"krate":0,"index":21170},{"krate":0,"index":21174},{"krate":0,"index":21178},{"krate":0,"index":21182},{"krate":0,"index":21186},{"krate":0,"index":21190},{"krate":0,"index":21194},{"krate":0,"index":21196},{"krate":0,"index":21200},{"krate":0,"index":21204},{"krate":0,"index":21208},{"krate":0,"index":21212},{"krate":0,"index":21216},{"krate":0,"index":21220},{"krate":0,"index":21222},{"krate":0,"index":21226},{"krate":0,"index":21230},{"krate":0,"index":21234},{"krate":0,"index":21238},{"krate":0,"index":21242},{"krate":0,"index":21246},{"krate":0,"index":21248},{"krate":0,"index":21252},{"krate":0,"index":21256},{"krate":0,"index":21260},{"krate":0,"index":21264},{"krate":0,"index":21268},{"krate":0,"index":21272},{"krate":0,"index":21274},{"krate":0,"index":21278},{"krate":0,"index":21282},{"krate":0,"index":21286},{"krate":0,"index":21290},{"krate":0,"index":21294},{"krate":0,"index":21298},{"krate":0,"index":21300},{"krate":0,"index":21304},{"krate":0,"index":21308},{"krate":0,"index":21312},{"krate":0,"index":21316},{"krate":0,"index":21320},{"krate":0,"index":21324},{"krate":0,"index":21326},{"krate":0,"index":21330},{"krate":0,"index":21334},{"krate":0,"index":21338},{"krate":0,"index":21342},{"krate":0,"index":21346},{"krate":0,"index":21350},{"krate":0,"index":21352},{"krate":0,"index":21356},{"krate":0,"index":21360},{"krate":0,"index":21364},{"krate":0,"index":21368},{"krate":0,"index":21372},{"krate":0,"index":21376},{"krate":0,"index":21378},{"krate":0,"index":21382},{"krate":0,"index":21386},{"krate":0,"index":21390},{"krate":0,"index":21394},{"krate":0,"index":21398},{"krate":0,"index":21402},{"krate":0,"index":21404},{"krate":0,"index":21408},{"krate":0,"index":21412},{"krate":0,"index":21416},{"krate":0,"index":21420},{"krate":0,"index":21424},{"krate":0,"index":21428},{"krate":0,"index":21430},{"krate":0,"index":21434},{"krate":0,"index":21438},{"krate":0,"index":21442},{"krate":0,"index":21446},{"krate":0,"index":21450},{"krate":0,"index":21454},{"krate":0,"index":21456},{"krate":0,"index":21460},{"krate":0,"index":21464},{"krate":0,"index":21468},{"krate":0,"index":21472},{"krate":0,"index":21476},{"krate":0,"index":21480},{"krate":0,"index":21482},{"krate":0,"index":21486},{"krate":0,"index":21490},{"krate":0,"index":21494},{"krate":0,"index":21498},{"krate":0,"index":21502},{"krate":0,"index":21506},{"krate":0,"index":21508},{"krate":0,"index":21512},{"krate":0,"index":21516},{"krate":0,"index":21520},{"krate":0,"index":21524},{"krate":0,"index":21528},{"krate":0,"index":21532},{"krate":0,"index":21534},{"krate":0,"index":21538},{"krate":0,"index":21542},{"krate":0,"index":21546},{"krate":0,"index":21550},{"krate":0,"index":21554},{"krate":0,"index":21558},{"krate":0,"index":21560},{"krate":0,"index":21564},{"krate":0,"index":21568},{"krate":0,"index":21572},{"krate":0,"index":21576},{"krate":0,"index":21580},{"krate":0,"index":21584},{"krate":0,"index":21586},{"krate":0,"index":21590},{"krate":0,"index":21594},{"krate":0,"index":21598},{"krate":0,"index":21602},{"krate":0,"index":21606},{"krate":0,"index":21610},{"krate":0,"index":21612},{"krate":0,"index":21616},{"krate":0,"index":21620},{"krate":0,"index":21624},{"krate":0,"index":21628},{"krate":0,"index":21632},{"krate":0,"index":21636},{"krate":0,"index":21638},{"krate":0,"index":21642},{"krate":0,"index":21646},{"krate":0,"index":21650},{"krate":0,"index":21654},{"krate":0,"index":1610},{"krate":0,"index":1614},{"krate":0,"index":1626},{"krate":0,"index":1630},{"krate":0,"index":1642},{"krate":0,"index":1644},{"krate":0,"index":1648},{"krate":0,"index":1650},{"krate":0,"index":1652},{"krate":0,"index":1656},{"krate":0,"index":1668},{"krate":0,"index":1672},{"krate":0,"index":1674},{"krate":0,"index":1676},{"krate":0,"index":1680},{"krate":0,"index":1684},{"krate":0,"index":1688},{"krate":0,"index":1692},{"krate":0,"index":1694},{"krate":0,"index":1696},{"krate":0,"index":1698},{"krate":0,"index":1702},{"krate":0,"index":1718},{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1730},{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1740},{"krate":0,"index":1744},{"krate":0,"index":1748},{"krate":0,"index":1752},{"krate":0,"index":1756},{"krate":0,"index":1760}],"decl_id":null,"docs":" Raw, unsafe pointers, `*const T`, and `*mut T`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":525624,"byte_end":525670,"line_start":17,"line_end":17,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":1470},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":526899,"byte_end":526912,"line_start":59,"line_end":59,"column_start":15,"column_end":28},"name":"drop_in_place","qualname":"::ptr::drop_in_place","value":"fn <T> (to_drop: *mut T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Executes the destructor (if any) of the pointed-to value.","sig":null,"attributes":[{"value":"stable(feature = \"drop_in_place\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":526771,"byte_end":526824,"line_start":56,"line_end":56,"column_start":1,"column_end":54}},{"value":"lang = \"drop_in_place\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":526825,"byte_end":526850,"line_start":57,"line_end":57,"column_start":1,"column_end":26}},{"value":"allow(unconditional_recursion)","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":526851,"byte_end":526884,"line_start":58,"line_end":58,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":1472},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":527297,"byte_end":527301,"line_start":77,"line_end":77,"column_start":14,"column_end":18},"name":"null","qualname":"::ptr::null","value":"fn <T> () -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Creates a null raw pointer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":527228,"byte_end":527237,"line_start":75,"line_end":75,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":527238,"byte_end":527283,"line_start":76,"line_end":76,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1474},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":527573,"byte_end":527581,"line_start":91,"line_end":91,"column_start":14,"column_end":22},"name":"null_mut","qualname":"::ptr::null_mut","value":"fn <T> () -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Creates a null mutable raw pointer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":527504,"byte_end":527513,"line_start":89,"line_end":89,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":527514,"byte_end":527559,"line_start":90,"line_end":90,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1476},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":528884,"byte_end":528888,"line_start":143,"line_end":143,"column_start":15,"column_end":19},"name":"swap","qualname":"::ptr::swap","value":"fn <T> (x: *mut T, y: *mut T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Swaps the values at two mutable locations of the same type, without\n deinitializing either.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":528814,"byte_end":528823,"line_start":141,"line_end":141,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":528824,"byte_end":528869,"line_start":142,"line_end":142,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1478},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":529972,"byte_end":529991,"line_start":185,"line_end":185,"column_start":15,"column_end":34},"name":"swap_nonoverlapping","qualname":"::ptr::swap_nonoverlapping","value":"fn <T> (x: *mut T, y: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Swaps a sequence of values at two mutable locations of the same type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":529886,"byte_end":529895,"line_start":183,"line_end":183,"column_start":1,"column_end":10}},{"value":"unstable(feature = \"swap_nonoverlapping\", issue = \"42818\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":529896,"byte_end":529957,"line_start":184,"line_end":184,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":1486},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":532597,"byte_end":532604,"line_start":253,"line_end":253,"column_start":15,"column_end":22},"name":"replace","qualname":"::ptr::replace","value":"fn <T> (dest: *mut T, mut src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Replaces the value at `dest` with `src`, returning the old\n value, without dropping either.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":532527,"byte_end":532536,"line_start":251,"line_end":251,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":532537,"byte_end":532582,"line_start":252,"line_end":252,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1488},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":533596,"byte_end":533600,"line_start":286,"line_end":286,"column_start":15,"column_end":19},"name":"read","qualname":"::ptr::read","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reads the value from `src` without moving it. This leaves the\n memory in `src` unchanged.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":533526,"byte_end":533535,"line_start":284,"line_end":284,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":533536,"byte_end":533581,"line_start":285,"line_end":285,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1490},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":534601,"byte_end":534615,"line_start":320,"line_end":320,"column_start":15,"column_end":29},"name":"read_unaligned","qualname":"::ptr::read_unaligned","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reads the value from `src` without moving it. This leaves the\n memory in `src` unchanged.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":534522,"byte_end":534531,"line_start":318,"line_end":318,"column_start":1,"column_end":10}},{"value":"stable(feature = \"ptr_unaligned\", since = \"1.17.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":534532,"byte_end":534586,"line_start":319,"line_end":319,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":1492},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":535844,"byte_end":535849,"line_start":363,"line_end":363,"column_start":15,"column_end":20},"name":"write","qualname":"::ptr::write","value":"fn <T> (dst: *mut T, src: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Overwrites a memory location with the given value without reading or\n dropping the old value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":535774,"byte_end":535783,"line_start":361,"line_end":361,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":535784,"byte_end":535829,"line_start":362,"line_end":362,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1494},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":536930,"byte_end":536945,"line_start":402,"line_end":402,"column_start":15,"column_end":30},"name":"write_unaligned","qualname":"::ptr::write_unaligned","value":"fn <T> (dst: *mut T, src: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Overwrites a memory location with the given value without reading or\n dropping the old value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":536851,"byte_end":536860,"line_start":400,"line_end":400,"column_start":1,"column_end":10}},{"value":"stable(feature = \"ptr_unaligned\", since = \"1.17.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":536861,"byte_end":536915,"line_start":401,"line_end":401,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":1496},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":538787,"byte_end":538800,"line_start":453,"line_end":453,"column_start":15,"column_end":28},"name":"read_volatile","qualname":"::ptr::read_volatile","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile read of the value from `src` without moving it. This\n leaves the memory in `src` unchanged.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":538714,"byte_end":538723,"line_start":451,"line_end":451,"column_start":1,"column_end":10}},{"value":"stable(feature = \"volatile\", since = \"1.9.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":538724,"byte_end":538772,"line_start":452,"line_end":452,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":1498},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540517,"byte_end":540531,"line_start":505,"line_end":505,"column_start":15,"column_end":29},"name":"write_volatile","qualname":"::ptr::write_volatile","value":"fn <T> (dst: *mut T, src: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile write of a memory location with the given value without\n reading or dropping the old value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540444,"byte_end":540453,"line_start":503,"line_end":503,"column_start":1,"column_end":10}},{"value":"stable(feature = \"volatile\", since = \"1.9.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540454,"byte_end":540502,"line_start":504,"line_end":504,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":541233,"byte_end":541240,"line_start":529,"line_end":529,"column_start":12,"column_end":19},"name":"is_null","qualname":"<*const T>::is_null","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540603,"byte_end":540624,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":542356,"byte_end":542362,"line_start":563,"line_end":563,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<*const T>::as_ref","value":"fn <'a> (self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540603,"byte_end":540624,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":544665,"byte_end":544671,"line_start":621,"line_end":621,"column_start":19,"column_end":25},"name":"offset","qualname":"<*const T>::offset","value":"fn (self, count: isize) -> *const T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540603,"byte_end":540624,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":545899,"byte_end":545914,"line_start":659,"line_end":659,"column_start":12,"column_end":27},"name":"wrapping_offset","qualname":"<*const T>::wrapping_offset","value":"fn (self, count: isize) -> *const T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540603,"byte_end":540624,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1510},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":547258,"byte_end":547267,"line_start":696,"line_end":696,"column_start":12,"column_end":21},"name":"offset_to","qualname":"<*const T>::offset_to","value":"fn (self, other: *const T) -> Option<isize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540603,"byte_end":540624,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1512},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":550138,"byte_end":550149,"line_start":768,"line_end":768,"column_start":19,"column_end":30},"name":"offset_from","qualname":"<*const T>::offset_from","value":"fn (self, origin: *const T) -> isize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540603,"byte_end":540624,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1514},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":552059,"byte_end":552079,"line_start":815,"line_end":815,"column_start":12,"column_end":32},"name":"wrapping_offset_from","qualname":"<*const T>::wrapping_offset_from","value":"fn (self, origin: *const T) -> isize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540603,"byte_end":540624,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1516},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":554565,"byte_end":554568,"line_start":873,"line_end":873,"column_start":19,"column_end":22},"name":"add","qualname":"<*const T>::add","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540603,"byte_end":540624,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1518},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":556908,"byte_end":556911,"line_start":930,"line_end":930,"column_start":19,"column_end":22},"name":"sub","qualname":"<*const T>::sub","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540603,"byte_end":540624,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":558206,"byte_end":558218,"line_start":971,"line_end":971,"column_start":12,"column_end":24},"name":"wrapping_add","qualname":"<*const T>::wrapping_add","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540603,"byte_end":540624,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1522},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":559569,"byte_end":559581,"line_start":1012,"line_end":1012,"column_start":12,"column_end":24},"name":"wrapping_sub","qualname":"<*const T>::wrapping_sub","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540603,"byte_end":540624,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":560723,"byte_end":560727,"line_start":1046,"line_end":1046,"column_start":19,"column_end":23},"name":"read","qualname":"<*const T>::read","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540603,"byte_end":540624,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1526},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":562630,"byte_end":562643,"line_start":1096,"line_end":1096,"column_start":19,"column_end":32},"name":"read_volatile","qualname":"<*const T>::read_volatile","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540603,"byte_end":540624,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1528},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":563714,"byte_end":563728,"line_start":1130,"line_end":1130,"column_start":19,"column_end":33},"name":"read_unaligned","qualname":"<*const T>::read_unaligned","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540603,"byte_end":540624,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":564851,"byte_end":564858,"line_start":1165,"line_end":1165,"column_start":19,"column_end":26},"name":"copy_to","qualname":"<*const T>::copy_to","value":"fn (self, dest: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540603,"byte_end":540624,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1532},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":566228,"byte_end":566250,"line_start":1202,"line_end":1202,"column_start":19,"column_end":41},"name":"copy_to_nonoverlapping","qualname":"<*const T>::copy_to_nonoverlapping","value":"fn (self, dest: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540603,"byte_end":540624,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1534},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567612,"byte_end":567624,"line_start":1240,"line_end":1240,"column_start":12,"column_end":24},"name":"align_offset","qualname":"<*const T>::align_offset","value":"fn (self, align: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540603,"byte_end":540624,"line_start":509,"line_end":509,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":568371,"byte_end":568378,"line_start":1267,"line_end":1267,"column_start":12,"column_end":19},"name":"is_null","qualname":"<*mut T>::is_null","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1540},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":569496,"byte_end":569502,"line_start":1301,"line_end":1301,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<*mut T>::as_ref","value":"fn <'a> (self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":571794,"byte_end":571800,"line_start":1359,"line_end":1359,"column_start":19,"column_end":25},"name":"offset","qualname":"<*mut T>::offset","value":"fn (self, count: isize) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":573027,"byte_end":573042,"line_start":1396,"line_end":1396,"column_start":12,"column_end":27},"name":"wrapping_offset","qualname":"<*mut T>::wrapping_offset","value":"fn (self, count: isize) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1546},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":573955,"byte_end":573961,"line_start":1424,"line_end":1424,"column_start":19,"column_end":25},"name":"as_mut","qualname":"<*mut T>::as_mut","value":"fn <'a> (self) -> Option<&'a mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1548},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":575321,"byte_end":575330,"line_start":1463,"line_end":1463,"column_start":12,"column_end":21},"name":"offset_to","qualname":"<*mut T>::offset_to","value":"fn (self, other: *const T) -> Option<isize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1550},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":578213,"byte_end":578224,"line_start":1535,"line_end":1535,"column_start":19,"column_end":30},"name":"offset_from","qualname":"<*mut T>::offset_from","value":"fn (self, origin: *const T) -> isize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1552},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":579705,"byte_end":579725,"line_start":1575,"line_end":1575,"column_start":12,"column_end":32},"name":"wrapping_offset_from","qualname":"<*mut T>::wrapping_offset_from","value":"fn (self, origin: *const T) -> isize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1554},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":581082,"byte_end":581094,"line_start":1611,"line_end":1611,"column_start":12,"column_end":24},"name":"align_offset","qualname":"<*mut T>::align_offset","value":"fn (self, align: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1556},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":583416,"byte_end":583419,"line_start":1667,"line_end":1667,"column_start":19,"column_end":22},"name":"add","qualname":"<*mut T>::add","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1558},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":585759,"byte_end":585762,"line_start":1724,"line_end":1724,"column_start":19,"column_end":22},"name":"sub","qualname":"<*mut T>::sub","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1560},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":587057,"byte_end":587069,"line_start":1765,"line_end":1765,"column_start":12,"column_end":24},"name":"wrapping_add","qualname":"<*mut T>::wrapping_add","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1562},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":588420,"byte_end":588432,"line_start":1806,"line_end":1806,"column_start":12,"column_end":24},"name":"wrapping_sub","qualname":"<*mut T>::wrapping_sub","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1564},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":589574,"byte_end":589578,"line_start":1840,"line_end":1840,"column_start":19,"column_end":23},"name":"read","qualname":"<*mut T>::read","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1566},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":591481,"byte_end":591494,"line_start":1890,"line_end":1890,"column_start":19,"column_end":32},"name":"read_volatile","qualname":"<*mut T>::read_volatile","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1568},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":592565,"byte_end":592579,"line_start":1924,"line_end":1924,"column_start":19,"column_end":33},"name":"read_unaligned","qualname":"<*mut T>::read_unaligned","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1570},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":593702,"byte_end":593709,"line_start":1959,"line_end":1959,"column_start":19,"column_end":26},"name":"copy_to","qualname":"<*mut T>::copy_to","value":"fn (self, dest: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1572},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":595079,"byte_end":595101,"line_start":1996,"line_end":1996,"column_start":19,"column_end":41},"name":"copy_to_nonoverlapping","qualname":"<*mut T>::copy_to_nonoverlapping","value":"fn (self, dest: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1574},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":596275,"byte_end":596284,"line_start":2031,"line_end":2031,"column_start":19,"column_end":28},"name":"copy_from","qualname":"<*mut T>::copy_from","value":"fn (self, src: *const T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1576},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":597664,"byte_end":597688,"line_start":2068,"line_end":2068,"column_start":19,"column_end":43},"name":"copy_from_nonoverlapping","qualname":"<*mut T>::copy_from_nonoverlapping","value":"fn (self, src: *const T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1578},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":598610,"byte_end":598623,"line_start":2093,"line_end":2093,"column_start":19,"column_end":32},"name":"drop_in_place","qualname":"<*mut T>::drop_in_place","value":"fn (self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1580},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":599817,"byte_end":599822,"line_start":2132,"line_end":2132,"column_start":19,"column_end":24},"name":"write","qualname":"<*mut T>::write","value":"fn (self, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1582},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":600378,"byte_end":600389,"line_start":2153,"line_end":2153,"column_start":19,"column_end":30},"name":"write_bytes","qualname":"<*mut T>::write_bytes","value":"fn (self, val: u8, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1584},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":602332,"byte_end":602346,"line_start":2207,"line_end":2207,"column_start":19,"column_end":33},"name":"write_volatile","qualname":"<*mut T>::write_volatile","value":"fn (self, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1586},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":603573,"byte_end":603588,"line_start":2248,"line_end":2248,"column_start":19,"column_end":34},"name":"write_unaligned","qualname":"<*mut T>::write_unaligned","value":"fn (self, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1588},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":604036,"byte_end":604043,"line_start":2263,"line_end":2263,"column_start":19,"column_end":26},"name":"replace","qualname":"<*mut T>::replace","value":"fn (self, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1590},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":604612,"byte_end":604616,"line_start":2281,"line_end":2281,"column_start":19,"column_end":23},"name":"swap","qualname":"<*mut T>::swap","value":"fn (self, with: *mut T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":567754,"byte_end":567773,"line_start":1247,"line_end":1247,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1604},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":606100,"byte_end":606102,"line_start":2336,"line_end":2336,"column_start":8,"column_end":10},"name":"eq","qualname":"::ptr::eq","value":"fn <T> (a: *const T, b: *const T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compare raw pointers for equality.","sig":null,"attributes":[{"value":"stable(feature = \"ptr_eq\", since = \"1.17.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":606035,"byte_end":606082,"line_start":2334,"line_end":2334,"column_start":1,"column_end":48}},{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":606083,"byte_end":606092,"line_start":2335,"line_end":2335,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":1642},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":612414,"byte_end":612420,"line_start":2518,"line_end":2518,"column_start":12,"column_end":18},"name":"Unique","qualname":"::ptr::Unique","value":"Unique {  }","parent":null,"children":[{"krate":0,"index":1057},{"krate":0,"index":1059}],"decl_id":null,"docs":" A wrapper around a raw non-null `*mut T` that indicates that the possessor\n of this wrapper owns the referent. Useful for building abstractions like\n `Box<T>`, `Vec<T>`, `String`, and `HashMap<K, V>`.","sig":null,"attributes":[{"value":"unstable(feature = \"ptr_internals\",\n           issue = \"0\",\n           reason =\n               \"use NonNull instead and consider PhantomData<T> (if you also use #[may_dangle]), Send, and/or Sync\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":612185,"byte_end":612381,"line_start":2514,"line_end":2516,"column_start":1,"column_end":75}},{"value":"allow(deprecated)","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":612382,"byte_end":612402,"line_start":2517,"line_end":2517,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1654},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":613958,"byte_end":613963,"line_start":2556,"line_end":2556,"column_start":12,"column_end":17},"name":"empty","qualname":"<Unique<T>>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"ptr_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":613641,"byte_end":613692,"line_start":2549,"line_end":2549,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1658},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":614327,"byte_end":614340,"line_start":2572,"line_end":2572,"column_start":25,"column_end":38},"name":"new_unchecked","qualname":"<Unique<T>>::new_unchecked","value":"fn (ptr: *mut T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"ptr_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":614105,"byte_end":614156,"line_start":2564,"line_end":2564,"column_start":1,"column_end":52}},{"value":"allow(deprecated)","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":614157,"byte_end":614177,"line_start":2565,"line_end":2565,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1660},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":614503,"byte_end":614506,"line_start":2577,"line_end":2577,"column_start":12,"column_end":15},"name":"new","qualname":"<Unique<T>>::new","value":"fn (ptr: *mut T) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"ptr_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":614105,"byte_end":614156,"line_start":2564,"line_end":2564,"column_start":1,"column_end":52}},{"value":"allow(deprecated)","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":614157,"byte_end":614177,"line_start":2565,"line_end":2565,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1662},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":614754,"byte_end":614760,"line_start":2586,"line_end":2586,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<Unique<T>>::as_ptr","value":"fn (self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"ptr_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":614105,"byte_end":614156,"line_start":2564,"line_end":2564,"column_start":1,"column_end":52}},{"value":"allow(deprecated)","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":614157,"byte_end":614177,"line_start":2565,"line_end":2565,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1664},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":615094,"byte_end":615100,"line_start":2595,"line_end":2595,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<Unique<T>>::as_ref","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"ptr_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":614105,"byte_end":614156,"line_start":2564,"line_end":2564,"column_start":1,"column_end":52}},{"value":"allow(deprecated)","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":614157,"byte_end":614177,"line_start":2565,"line_end":2565,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1666},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":615434,"byte_end":615440,"line_start":2604,"line_end":2604,"column_start":19,"column_end":25},"name":"as_mut","qualname":"<Unique<T>>::as_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"ptr_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":614105,"byte_end":614156,"line_start":2564,"line_end":2564,"column_start":1,"column_end":52}},{"value":"allow(deprecated)","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":614157,"byte_end":614177,"line_start":2565,"line_end":2565,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1692},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":617941,"byte_end":617948,"line_start":2670,"line_end":2670,"column_start":12,"column_end":19},"name":"NonNull","qualname":"::ptr::NonNull","value":"NonNull {  }","parent":null,"children":[{"krate":0,"index":1095}],"decl_id":null,"docs":" `*mut T` but non-zero and covariant.","sig":null,"attributes":[{"value":"stable(feature = \"nonnull\", since = \"1.25.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":617881,"byte_end":617929,"line_start":2669,"line_end":2669,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1700},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":618789,"byte_end":618797,"line_start":2690,"line_end":2690,"column_start":12,"column_end":20},"name":"dangling","qualname":"<NonNull<T>>::dangling","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1704},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":619165,"byte_end":619178,"line_start":2706,"line_end":2706,"column_start":25,"column_end":38},"name":"new_unchecked","qualname":"<NonNull<T>>::new_unchecked","value":"fn (ptr: *mut T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":618940,"byte_end":618960,"line_start":2698,"line_end":2698,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":619374,"byte_end":619377,"line_start":2712,"line_end":2712,"column_start":12,"column_end":15},"name":"new","qualname":"<NonNull<T>>::new","value":"fn (ptr: *mut T) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":618940,"byte_end":618960,"line_start":2698,"line_end":2698,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1708},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":619657,"byte_end":619663,"line_start":2722,"line_end":2722,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<NonNull<T>>::as_ptr","value":"fn (self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":618940,"byte_end":618960,"line_start":2698,"line_end":2698,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1710},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":620050,"byte_end":620056,"line_start":2732,"line_end":2732,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<NonNull<T>>::as_ref","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":618940,"byte_end":618960,"line_start":2698,"line_end":2698,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1712},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":620443,"byte_end":620449,"line_start":2742,"line_end":2742,"column_start":19,"column_end":25},"name":"as_mut","qualname":"<NonNull<T>>::as_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":618940,"byte_end":618960,"line_start":2698,"line_end":2698,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1714},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":620620,"byte_end":620624,"line_start":2748,"line_end":2748,"column_start":12,"column_end":16},"name":"cast","qualname":"<NonNull<T>>::cast","value":"fn <U> (self) -> NonNull<U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":618940,"byte_end":618960,"line_start":2698,"line_end":2698,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1716},"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":620851,"byte_end":620860,"line_start":2756,"line_end":2756,"column_start":12,"column_end":21},"name":"as_opaque","qualname":"<NonNull<T>>::as_opaque","value":"fn (self) -> NonNull<::alloc::Opaque>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":618940,"byte_end":618960,"line_start":2698,"line_end":2698,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":1764},"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"marker","qualname":"::marker","value":"libcore/marker.rs","parent":null,"children":[{"krate":0,"index":1766},{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1772},{"krate":0,"index":1774},{"krate":0,"index":1776},{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1782},{"krate":0,"index":1784},{"krate":0,"index":1786},{"krate":0,"index":1788},{"krate":0,"index":1790},{"krate":0,"index":1792},{"krate":0,"index":1794},{"krate":0,"index":21658},{"krate":0,"index":21662},{"krate":0,"index":21666},{"krate":0,"index":21668},{"krate":0,"index":21672},{"krate":0,"index":21676},{"krate":0,"index":21678},{"krate":0,"index":21682},{"krate":0,"index":1796},{"krate":0,"index":1802},{"krate":0,"index":1804},{"krate":0,"index":1806},{"krate":0,"index":1808},{"krate":0,"index":1810},{"krate":0,"index":1812},{"krate":0,"index":1814},{"krate":0,"index":1816},{"krate":0,"index":1818}],"decl_id":null,"docs":" Primitive traits and types representing basic properties of types.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":623986,"byte_end":624032,"line_start":17,"line_end":17,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":1774},"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":625075,"byte_end":625079,"line_start":43,"line_end":43,"column_start":23,"column_end":27},"name":"Send","qualname":"::marker::Send","value":"Send","parent":null,"children":[],"decl_id":null,"docs":" Types that can be transferred across thread boundaries.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":624930,"byte_end":624975,"line_start":41,"line_end":41,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":624976,"byte_end":625052,"line_start":42,"line_end":42,"column_start":1,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":1780},"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":626744,"byte_end":626749,"line_start":93,"line_end":93,"column_start":11,"column_end":16},"name":"Sized","qualname":"::marker::Sized","value":"Sized","parent":null,"children":[],"decl_id":null,"docs":" Types with a constant size known at compile time.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":626484,"byte_end":626529,"line_start":89,"line_end":89,"column_start":1,"column_end":46}},{"value":"lang = \"sized\"","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":626530,"byte_end":626547,"line_start":90,"line_end":90,"column_start":1,"column_end":18}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` does not have a constant size known at compile-time\"","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":626548,"byte_end":626638,"line_start":91,"line_end":91,"column_start":1,"column_end":91}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":626639,"byte_end":626653,"line_start":92,"line_end":92,"column_start":1,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":1782},"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":628038,"byte_end":628044,"line_start":126,"line_end":126,"column_start":11,"column_end":17},"name":"Unsize","qualname":"::marker::Unsize","value":"Unsize<T: ?Sized>","parent":null,"children":[],"decl_id":null,"docs":" Types that can be \"unsized\" to a dynamically-sized type.","sig":null,"attributes":[{"value":"unstable(feature = \"unsize\", issue = \"27732\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":627960,"byte_end":628008,"line_start":124,"line_end":124,"column_start":1,"column_end":49}},{"value":"lang = \"unsize\"","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":628009,"byte_end":628027,"line_start":125,"line_end":125,"column_start":1,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":1784},"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":633594,"byte_end":633598,"line_start":288,"line_end":288,"column_start":11,"column_end":15},"name":"Copy","qualname":"::marker::Copy","value":"Copy: Clone","parent":null,"children":[],"decl_id":null,"docs":" Types whose values can be duplicated simply by copying bits.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":633521,"byte_end":633566,"line_start":286,"line_end":286,"column_start":1,"column_end":46}},{"value":"lang = \"copy\"","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":633567,"byte_end":633583,"line_start":287,"line_end":287,"column_start":1,"column_end":17}}]},{"kind":"Trait","id":{"krate":0,"index":1786},"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":637249,"byte_end":637253,"line_start":366,"line_end":366,"column_start":23,"column_end":27},"name":"Sync","qualname":"::marker::Sync","value":"Sync","parent":null,"children":[],"decl_id":null,"docs":" Types for which it is safe to share references between threads.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":637010,"byte_end":637055,"line_start":360,"line_end":360,"column_start":1,"column_end":46}},{"value":"lang = \"sync\"","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":637056,"byte_end":637072,"line_start":361,"line_end":361,"column_start":1,"column_end":17}},{"value":"rustc_on_unimplemented(message =\n                             \"`{Self}` cannot be shared between threads safely\",\n                         label =\n                             \"`{Self}` cannot be shared between threads safely\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":637073,"byte_end":637226,"line_start":362,"line_end":365,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1794},"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":644060,"byte_end":644071,"line_start":573,"line_end":573,"column_start":12,"column_end":23},"name":"PhantomData","qualname":"::marker::PhantomData","value":"","parent":null,"children":[],"decl_id":null,"docs":" Zero-sized type used to mark things that \"act like\" they own a `T`.","sig":null,"attributes":[{"value":"lang = \"phantom_data\"","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":643978,"byte_end":644002,"line_start":571,"line_end":571,"column_start":1,"column_end":25}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":644003,"byte_end":644048,"line_start":572,"line_end":572,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1816},"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":645306,"byte_end":645311,"line_start":606,"line_end":606,"column_start":23,"column_end":28},"name":"Unpin","qualname":"::marker::Unpin","value":"Unpin","parent":null,"children":[],"decl_id":null,"docs":" Types which can be moved out of a `Pin`.","sig":null,"attributes":[{"value":"unstable(feature = \"pin\", issue = \"49150\")","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":645238,"byte_end":645283,"line_start":605,"line_end":605,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":1832},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"libcore/ops/mod.rs","parent":null,"children":[{"krate":0,"index":1834},{"krate":0,"index":1922},{"krate":0,"index":2010},{"krate":0,"index":2038},{"krate":0,"index":2044},{"krate":0,"index":2086},{"krate":0,"index":2104},{"krate":0,"index":2116},{"krate":0,"index":2260},{"krate":0,"index":2274},{"krate":0,"index":2298},{"krate":0,"index":2312},{"krate":0,"index":2324},{"krate":0,"index":2338},{"krate":0,"index":2350},{"krate":0,"index":2356},{"krate":0,"index":2358},{"krate":0,"index":2366},{"krate":0,"index":2372},{"krate":0,"index":2382},{"krate":0,"index":2392},{"krate":0,"index":2394},{"krate":0,"index":2400}],"decl_id":null,"docs":" Overloadable operators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":651748,"byte_end":651794,"line_start":155,"line_end":155,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":1836},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":655716,"byte_end":655719,"line_start":90,"line_end":90,"column_start":11,"column_end":14},"name":"Add","qualname":"::ops::arith::Add","value":"Add<RHS = Self>","parent":null,"children":[{"krate":0,"index":1838},{"krate":0,"index":1840}],"decl_id":null,"docs":" The addition operator `+`.","sig":null,"attributes":[{"value":"lang = \"add\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":655289,"byte_end":655304,"line_start":76,"line_end":76,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":655305,"byte_end":655350,"line_start":77,"line_end":77,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(all(_Self = \"{integer}\", RHS = \"{float}\"),\n                            message = \"cannot add a float to an integer\"),\n                         on(all(_Self = \"{float}\", RHS = \"{integer}\"),\n                            message = \"cannot add an integer to a float\"),\n                         message = \"cannot add `{RHS}` to `{Self}`\",\n                         label = \"no implementation for `{Self} + {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":655351,"byte_end":655705,"line_start":78,"line_end":89,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":1838},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":655851,"byte_end":655857,"line_start":93,"line_end":93,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Add::Output","value":"type Output;","parent":{"krate":0,"index":1836},"children":[],"decl_id":null,"docs":" The resulting type after applying the `+` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":655796,"byte_end":655841,"line_start":92,"line_end":92,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1840},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":655953,"byte_end":655956,"line_start":97,"line_end":97,"column_start":8,"column_end":11},"name":"add","qualname":"::ops::arith::Add::add","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1836},"children":[],"decl_id":null,"docs":" The addition operator `+`.","sig":null,"attributes":[{"value":"lang = \"add\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":655289,"byte_end":655304,"line_start":76,"line_end":76,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":655305,"byte_end":655350,"line_start":77,"line_end":77,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(all(_Self = \"{integer}\", RHS = \"{float}\"),\n                            message = \"cannot add a float to an integer\"),\n                         on(all(_Self = \"{float}\", RHS = \"{integer}\"),\n                            message = \"cannot add an integer to a float\"),\n                         message = \"cannot add `{RHS}` to `{Self}`\",\n                         label = \"no implementation for `{Self} + {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":655351,"byte_end":655705,"line_start":78,"line_end":89,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":1844},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":658221,"byte_end":658224,"line_start":186,"line_end":186,"column_start":11,"column_end":14},"name":"Sub","qualname":"::ops::arith::Sub","value":"Sub<RHS = Self>","parent":null,"children":[{"krate":0,"index":1846},{"krate":0,"index":1848}],"decl_id":null,"docs":" The subtraction operator `-`.","sig":null,"attributes":[{"value":"lang = \"sub\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":658001,"byte_end":658016,"line_start":182,"line_end":182,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":658017,"byte_end":658062,"line_start":183,"line_end":183,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"cannot subtract `{RHS}` from `{Self}`\",\n                         label = \"no implementation for `{Self} - {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":658063,"byte_end":658210,"line_start":184,"line_end":185,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":1846},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":658356,"byte_end":658362,"line_start":189,"line_end":189,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Sub::Output","value":"type Output;","parent":{"krate":0,"index":1844},"children":[],"decl_id":null,"docs":" The resulting type after applying the `-` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":658301,"byte_end":658346,"line_start":188,"line_end":188,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1848},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":658458,"byte_end":658461,"line_start":193,"line_end":193,"column_start":8,"column_end":11},"name":"sub","qualname":"::ops::arith::Sub::sub","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1844},"children":[],"decl_id":null,"docs":" The subtraction operator `-`.","sig":null,"attributes":[{"value":"lang = \"sub\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":658001,"byte_end":658016,"line_start":182,"line_end":182,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":658017,"byte_end":658062,"line_start":183,"line_end":183,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"cannot subtract `{RHS}` from `{Self}`\",\n                         label = \"no implementation for `{Self} - {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":658063,"byte_end":658210,"line_start":184,"line_end":185,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":1852},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":661595,"byte_end":661598,"line_start":304,"line_end":304,"column_start":11,"column_end":14},"name":"Mul","qualname":"::ops::arith::Mul","value":"Mul<RHS = Self>","parent":null,"children":[{"krate":0,"index":1854},{"krate":0,"index":1856}],"decl_id":null,"docs":" The multiplication operator `*`.","sig":null,"attributes":[{"value":"lang = \"mul\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":661377,"byte_end":661392,"line_start":300,"line_end":300,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":661393,"byte_end":661438,"line_start":301,"line_end":301,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"cannot multiply `{RHS}` to `{Self}`\",\n                         label = \"no implementation for `{Self} * {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":661439,"byte_end":661584,"line_start":302,"line_end":303,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":1854},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":661730,"byte_end":661736,"line_start":307,"line_end":307,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Mul::Output","value":"type Output;","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" The resulting type after applying the `*` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":661675,"byte_end":661720,"line_start":306,"line_end":306,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1856},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":661832,"byte_end":661835,"line_start":311,"line_end":311,"column_start":8,"column_end":11},"name":"mul","qualname":"::ops::arith::Mul::mul","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" The multiplication operator `*`.","sig":null,"attributes":[{"value":"lang = \"mul\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":661377,"byte_end":661392,"line_start":300,"line_end":300,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":661393,"byte_end":661438,"line_start":301,"line_end":301,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"cannot multiply `{RHS}` to `{Self}`\",\n                         label = \"no implementation for `{Self} * {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":661439,"byte_end":661584,"line_start":302,"line_end":303,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":1860},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":665086,"byte_end":665089,"line_start":426,"line_end":426,"column_start":11,"column_end":14},"name":"Div","qualname":"::ops::arith::Div","value":"Div<RHS = Self>","parent":null,"children":[{"krate":0,"index":1862},{"krate":0,"index":1864}],"decl_id":null,"docs":" The division operator `/`.","sig":null,"attributes":[{"value":"lang = \"div\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":664870,"byte_end":664885,"line_start":422,"line_end":422,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":664886,"byte_end":664931,"line_start":423,"line_end":423,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"cannot divide `{Self}` by `{RHS}`\",\n                         label = \"no implementation for `{Self} / {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":664932,"byte_end":665075,"line_start":424,"line_end":425,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":1862},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":665221,"byte_end":665227,"line_start":429,"line_end":429,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Div::Output","value":"type Output;","parent":{"krate":0,"index":1860},"children":[],"decl_id":null,"docs":" The resulting type after applying the `/` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":665166,"byte_end":665211,"line_start":428,"line_end":428,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1864},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":665323,"byte_end":665326,"line_start":433,"line_end":433,"column_start":8,"column_end":11},"name":"div","qualname":"::ops::arith::Div::div","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1860},"children":[],"decl_id":null,"docs":" The division operator `/`.","sig":null,"attributes":[{"value":"lang = \"div\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":664870,"byte_end":664885,"line_start":422,"line_end":422,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":664886,"byte_end":664931,"line_start":423,"line_end":423,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"cannot divide `{Self}` by `{RHS}`\",\n                         label = \"no implementation for `{Self} / {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":664932,"byte_end":665075,"line_start":424,"line_end":425,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":1870},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":667522,"byte_end":667525,"line_start":509,"line_end":509,"column_start":11,"column_end":14},"name":"Rem","qualname":"::ops::arith::Rem","value":"Rem<RHS = Self>","parent":null,"children":[{"krate":0,"index":1872},{"krate":0,"index":1874}],"decl_id":null,"docs":" The remainder operator `%`.","sig":null,"attributes":[{"value":"lang = \"rem\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":667309,"byte_end":667324,"line_start":505,"line_end":505,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":667325,"byte_end":667370,"line_start":506,"line_end":506,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"cannot mod `{Self}` by `{RHS}`\",\n                         label = \"no implementation for `{Self} % {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":667371,"byte_end":667511,"line_start":507,"line_end":508,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":1872},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":667657,"byte_end":667663,"line_start":512,"line_end":512,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Rem::Output","value":"type Output = Self;","parent":{"krate":0,"index":1870},"children":[],"decl_id":null,"docs":" The resulting type after applying the `%` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":667602,"byte_end":667647,"line_start":511,"line_end":511,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1874},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":667766,"byte_end":667769,"line_start":516,"line_end":516,"column_start":8,"column_end":11},"name":"rem","qualname":"::ops::arith::Rem::rem","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1870},"children":[],"decl_id":null,"docs":" The remainder operator `%`.","sig":null,"attributes":[{"value":"lang = \"rem\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":667309,"byte_end":667324,"line_start":505,"line_end":505,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":667325,"byte_end":667370,"line_start":506,"line_end":506,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"cannot mod `{Self}` by `{RHS}`\",\n                         label = \"no implementation for `{Self} % {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":667371,"byte_end":667511,"line_start":507,"line_end":508,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":1880},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":669612,"byte_end":669615,"line_start":592,"line_end":592,"column_start":11,"column_end":14},"name":"Neg","qualname":"::ops::arith::Neg","value":"Neg","parent":null,"children":[{"krate":0,"index":1882},{"krate":0,"index":1884}],"decl_id":null,"docs":" The unary negation operator `-`.","sig":null,"attributes":[{"value":"lang = \"neg\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":669540,"byte_end":669555,"line_start":590,"line_end":590,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":669556,"byte_end":669601,"line_start":591,"line_end":591,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1882},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":669737,"byte_end":669743,"line_start":595,"line_end":595,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Neg::Output","value":"type Output;","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" The resulting type after applying the `-` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":669682,"byte_end":669727,"line_start":594,"line_end":594,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1884},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":669845,"byte_end":669848,"line_start":599,"line_end":599,"column_start":8,"column_end":11},"name":"neg","qualname":"::ops::arith::Neg::neg","value":"fn (self) -> Self::Output","parent":{"krate":0,"index":1880},"children":[],"decl_id":null,"docs":" The unary negation operator `-`.","sig":null,"attributes":[{"value":"lang = \"neg\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":669540,"byte_end":669555,"line_start":590,"line_end":590,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":669556,"byte_end":669601,"line_start":591,"line_end":591,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1892},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":671554,"byte_end":671563,"line_start":667,"line_end":667,"column_start":11,"column_end":20},"name":"AddAssign","qualname":"::ops::arith::AddAssign","value":"AddAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":1894}],"decl_id":null,"docs":" The addition assignment operator `+=`.","sig":null,"attributes":[{"value":"lang = \"add_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":671315,"byte_end":671337,"line_start":663,"line_end":663,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":671338,"byte_end":671394,"line_start":664,"line_end":664,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message = \"cannot add-assign `{Rhs}` to `{Self}`\",\n                         label = \"no implementation for `{Self} += {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":671395,"byte_end":671543,"line_start":665,"line_end":666,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1894},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":671681,"byte_end":671691,"line_start":670,"line_end":670,"column_start":8,"column_end":18},"name":"add_assign","qualname":"::ops::arith::AddAssign::add_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1892},"children":[],"decl_id":null,"docs":" The addition assignment operator `+=`.","sig":null,"attributes":[{"value":"lang = \"add_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":671315,"byte_end":671337,"line_start":663,"line_end":663,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":671338,"byte_end":671394,"line_start":664,"line_end":664,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message = \"cannot add-assign `{Rhs}` to `{Self}`\",\n                         label = \"no implementation for `{Self} += {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":671395,"byte_end":671543,"line_start":665,"line_end":666,"column_start":1,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1898},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":673120,"byte_end":673129,"line_start":721,"line_end":721,"column_start":11,"column_end":20},"name":"SubAssign","qualname":"::ops::arith::SubAssign","value":"SubAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":1900}],"decl_id":null,"docs":" The subtraction assignment operator `-=`.","sig":null,"attributes":[{"value":"lang = \"sub_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":672874,"byte_end":672896,"line_start":717,"line_end":717,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":672897,"byte_end":672953,"line_start":718,"line_end":718,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message =\n                             \"cannot subtract-assign `{Rhs}` from `{Self}`\",\n                         label = \"no implementation for `{Self} -= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":672954,"byte_end":673109,"line_start":719,"line_end":720,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1900},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":673247,"byte_end":673257,"line_start":724,"line_end":724,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"::ops::arith::SubAssign::sub_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1898},"children":[],"decl_id":null,"docs":" The subtraction assignment operator `-=`.","sig":null,"attributes":[{"value":"lang = \"sub_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":672874,"byte_end":672896,"line_start":717,"line_end":717,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":672897,"byte_end":672953,"line_start":718,"line_end":718,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message =\n                             \"cannot subtract-assign `{Rhs}` from `{Self}`\",\n                         label = \"no implementation for `{Self} -= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":672954,"byte_end":673109,"line_start":719,"line_end":720,"column_start":1,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1904},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":674446,"byte_end":674455,"line_start":766,"line_end":766,"column_start":11,"column_end":20},"name":"MulAssign","qualname":"::ops::arith::MulAssign","value":"MulAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":1906}],"decl_id":null,"docs":" The multiplication assignment operator `*=`.","sig":null,"attributes":[{"value":"lang = \"mul_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":674202,"byte_end":674224,"line_start":762,"line_end":762,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":674225,"byte_end":674281,"line_start":763,"line_end":763,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message =\n                             \"cannot multiply-assign `{Rhs}` to `{Self}`\",\n                         label = \"no implementation for `{Self} *= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":674282,"byte_end":674435,"line_start":764,"line_end":765,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1906},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":674573,"byte_end":674583,"line_start":769,"line_end":769,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"::ops::arith::MulAssign::mul_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1904},"children":[],"decl_id":null,"docs":" The multiplication assignment operator `*=`.","sig":null,"attributes":[{"value":"lang = \"mul_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":674202,"byte_end":674224,"line_start":762,"line_end":762,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":674225,"byte_end":674281,"line_start":763,"line_end":763,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message =\n                             \"cannot multiply-assign `{Rhs}` to `{Self}`\",\n                         label = \"no implementation for `{Self} *= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":674282,"byte_end":674435,"line_start":764,"line_end":765,"column_start":1,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1910},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":675764,"byte_end":675773,"line_start":811,"line_end":811,"column_start":11,"column_end":20},"name":"DivAssign","qualname":"::ops::arith::DivAssign","value":"DivAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":1912}],"decl_id":null,"docs":" The division assignment operator `/=`.","sig":null,"attributes":[{"value":"lang = \"div_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":675522,"byte_end":675544,"line_start":807,"line_end":807,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":675545,"byte_end":675601,"line_start":808,"line_end":808,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message = \"cannot divide-assign `{Self}` by `{Rhs}`\",\n                         label = \"no implementation for `{Self} /= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":675602,"byte_end":675753,"line_start":809,"line_end":810,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1912},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":675891,"byte_end":675901,"line_start":814,"line_end":814,"column_start":8,"column_end":18},"name":"div_assign","qualname":"::ops::arith::DivAssign::div_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" The division assignment operator `/=`.","sig":null,"attributes":[{"value":"lang = \"div_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":675522,"byte_end":675544,"line_start":807,"line_end":807,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":675545,"byte_end":675601,"line_start":808,"line_end":808,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message = \"cannot divide-assign `{Self}` by `{Rhs}`\",\n                         label = \"no implementation for `{Self} /= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":675602,"byte_end":675753,"line_start":809,"line_end":810,"column_start":1,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1916},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":677126,"byte_end":677135,"line_start":859,"line_end":859,"column_start":11,"column_end":20},"name":"RemAssign","qualname":"::ops::arith::RemAssign","value":"RemAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":1918}],"decl_id":null,"docs":" The remainder assignment operator `%=`.","sig":null,"attributes":[{"value":"lang = \"rem_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":676886,"byte_end":676908,"line_start":855,"line_end":855,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":676909,"byte_end":676965,"line_start":856,"line_end":856,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message = \"cannot mod-assign `{Self}` by `{Rhs}``\",\n                         label = \"no implementation for `{Self} %= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":676966,"byte_end":677115,"line_start":857,"line_end":858,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1918},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":677253,"byte_end":677263,"line_start":862,"line_end":862,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"::ops::arith::RemAssign::rem_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1916},"children":[],"decl_id":null,"docs":" The remainder assignment operator `%=`.","sig":null,"attributes":[{"value":"lang = \"rem_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":676886,"byte_end":676908,"line_start":855,"line_end":855,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":676909,"byte_end":676965,"line_start":856,"line_end":856,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message = \"cannot mod-assign `{Self}` by `{Rhs}``\",\n                         label = \"no implementation for `{Self} %= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":676966,"byte_end":677115,"line_start":857,"line_end":858,"column_start":1,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1924},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":678865,"byte_end":678868,"line_start":43,"line_end":43,"column_start":11,"column_end":14},"name":"Not","qualname":"::ops::bit::Not","value":"Not","parent":null,"children":[{"krate":0,"index":1926},{"krate":0,"index":1928}],"decl_id":null,"docs":" The unary logical negation operator `!`.","sig":null,"attributes":[{"value":"lang = \"not\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":678793,"byte_end":678808,"line_start":41,"line_end":41,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":678809,"byte_end":678854,"line_start":42,"line_end":42,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1926},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":678990,"byte_end":678996,"line_start":46,"line_end":46,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::Not::Output","value":"type Output;","parent":{"krate":0,"index":1924},"children":[],"decl_id":null,"docs":" The resulting type after applying the `!` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":678935,"byte_end":678980,"line_start":45,"line_end":45,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1928},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":679098,"byte_end":679101,"line_start":50,"line_end":50,"column_start":8,"column_end":11},"name":"not","qualname":"::ops::bit::Not::not","value":"fn (self) -> Self::Output","parent":{"krate":0,"index":1924},"children":[],"decl_id":null,"docs":" The unary logical negation operator `!`.","sig":null,"attributes":[{"value":"lang = \"not\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":678793,"byte_end":678808,"line_start":41,"line_end":41,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":678809,"byte_end":678854,"line_start":42,"line_end":42,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1932},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":681237,"byte_end":681243,"line_start":125,"line_end":125,"column_start":11,"column_end":17},"name":"BitAnd","qualname":"::ops::bit::BitAnd","value":"BitAnd<RHS = Self>","parent":null,"children":[{"krate":0,"index":1934},{"krate":0,"index":1936}],"decl_id":null,"docs":" The bitwise AND operator `&`.","sig":null,"attributes":[{"value":"lang = \"bitand\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":681013,"byte_end":681031,"line_start":121,"line_end":121,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":681032,"byte_end":681077,"line_start":122,"line_end":122,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} & {RHS}`\",\n                         label = \"no implementation for `{Self} & {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":681078,"byte_end":681226,"line_start":123,"line_end":124,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":1934},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":681375,"byte_end":681381,"line_start":128,"line_end":128,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::BitAnd::Output","value":"type Output;","parent":{"krate":0,"index":1932},"children":[],"decl_id":null,"docs":" The resulting type after applying the `&` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":681320,"byte_end":681365,"line_start":127,"line_end":127,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1936},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":681477,"byte_end":681483,"line_start":132,"line_end":132,"column_start":8,"column_end":14},"name":"bitand","qualname":"::ops::bit::BitAnd::bitand","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1932},"children":[],"decl_id":null,"docs":" The bitwise AND operator `&`.","sig":null,"attributes":[{"value":"lang = \"bitand\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":681013,"byte_end":681031,"line_start":121,"line_end":121,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":681032,"byte_end":681077,"line_start":122,"line_end":122,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} & {RHS}`\",\n                         label = \"no implementation for `{Self} & {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":681078,"byte_end":681226,"line_start":123,"line_end":124,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":1940},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":683652,"byte_end":683657,"line_start":207,"line_end":207,"column_start":11,"column_end":16},"name":"BitOr","qualname":"::ops::bit::BitOr","value":"BitOr<RHS = Self>","parent":null,"children":[{"krate":0,"index":1942},{"krate":0,"index":1944}],"decl_id":null,"docs":" The bitwise OR operator `|`.","sig":null,"attributes":[{"value":"lang = \"bitor\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":683429,"byte_end":683446,"line_start":203,"line_end":203,"column_start":1,"column_end":18}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":683447,"byte_end":683492,"line_start":204,"line_end":204,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} | {RHS}`\",\n                         label = \"no implementation for `{Self} | {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":683493,"byte_end":683641,"line_start":205,"line_end":206,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":1942},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":683789,"byte_end":683795,"line_start":210,"line_end":210,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::BitOr::Output","value":"type Output;","parent":{"krate":0,"index":1940},"children":[],"decl_id":null,"docs":" The resulting type after applying the `|` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":683734,"byte_end":683779,"line_start":209,"line_end":209,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1944},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":683891,"byte_end":683896,"line_start":214,"line_end":214,"column_start":8,"column_end":13},"name":"bitor","qualname":"::ops::bit::BitOr::bitor","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1940},"children":[],"decl_id":null,"docs":" The bitwise OR operator `|`.","sig":null,"attributes":[{"value":"lang = \"bitor\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":683429,"byte_end":683446,"line_start":203,"line_end":203,"column_start":1,"column_end":18}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":683447,"byte_end":683492,"line_start":204,"line_end":204,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} | {RHS}`\",\n                         label = \"no implementation for `{Self} | {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":683493,"byte_end":683641,"line_start":205,"line_end":206,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":1948},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":686198,"byte_end":686204,"line_start":292,"line_end":292,"column_start":11,"column_end":17},"name":"BitXor","qualname":"::ops::bit::BitXor","value":"BitXor<RHS = Self>","parent":null,"children":[{"krate":0,"index":1950},{"krate":0,"index":1952}],"decl_id":null,"docs":" The bitwise XOR operator `^`.","sig":null,"attributes":[{"value":"lang = \"bitxor\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":685974,"byte_end":685992,"line_start":288,"line_end":288,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":685993,"byte_end":686038,"line_start":289,"line_end":289,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} ^ {RHS}`\",\n                         label = \"no implementation for `{Self} ^ {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":686039,"byte_end":686187,"line_start":290,"line_end":291,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":1950},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":686336,"byte_end":686342,"line_start":295,"line_end":295,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::BitXor::Output","value":"type Output;","parent":{"krate":0,"index":1948},"children":[],"decl_id":null,"docs":" The resulting type after applying the `^` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":686281,"byte_end":686326,"line_start":294,"line_end":294,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1952},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":686438,"byte_end":686444,"line_start":299,"line_end":299,"column_start":8,"column_end":14},"name":"bitxor","qualname":"::ops::bit::BitXor::bitxor","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1948},"children":[],"decl_id":null,"docs":" The bitwise XOR operator `^`.","sig":null,"attributes":[{"value":"lang = \"bitxor\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":685974,"byte_end":685992,"line_start":288,"line_end":288,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":685993,"byte_end":686038,"line_start":289,"line_end":289,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} ^ {RHS}`\",\n                         label = \"no implementation for `{Self} ^ {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":686039,"byte_end":686187,"line_start":290,"line_end":291,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":1956},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":688843,"byte_end":688846,"line_start":378,"line_end":378,"column_start":11,"column_end":14},"name":"Shl","qualname":"::ops::bit::Shl","value":"Shl<RHS>","parent":null,"children":[{"krate":0,"index":1958},{"krate":0,"index":1960}],"decl_id":null,"docs":" The left shift operator `<<`. Note that because this trait is implemented\n for all integer types with multiple right-hand-side types, Rust's type\n checker has special handling for `_ << _`, setting the result type for\n integer operations to the type of the left-hand-side operand. This means\n that though `a << b` and `a.shl(b)` are one and the same from an evaluation\n standpoint, they are different when it comes to type inference.","sig":null,"attributes":[{"value":"lang = \"shl\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":688620,"byte_end":688635,"line_start":374,"line_end":374,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":688636,"byte_end":688681,"line_start":375,"line_end":375,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} << {RHS}`\",\n                         label = \"no implementation for `{Self} << {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":688682,"byte_end":688832,"line_start":376,"line_end":377,"column_start":1,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":1958},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":688974,"byte_end":688980,"line_start":381,"line_end":381,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::Shl::Output","value":"type Output;","parent":{"krate":0,"index":1956},"children":[],"decl_id":null,"docs":" The resulting type after applying the `<<` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":688919,"byte_end":688964,"line_start":380,"line_end":380,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1960},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":689077,"byte_end":689080,"line_start":385,"line_end":385,"column_start":8,"column_end":11},"name":"shl","qualname":"::ops::bit::Shl::shl","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1956},"children":[],"decl_id":null,"docs":" The left shift operator `<<`. Note that because this trait is implemented\n for all integer types with multiple right-hand-side types, Rust's type\n checker has special handling for `_ << _`, setting the result type for\n integer operations to the type of the left-hand-side operand. This means\n that though `a << b` and `a.shl(b)` are one and the same from an evaluation\n standpoint, they are different when it comes to type inference.","sig":null,"attributes":[{"value":"lang = \"shl\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":688620,"byte_end":688635,"line_start":374,"line_end":374,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":688636,"byte_end":688681,"line_start":375,"line_end":375,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} << {RHS}`\",\n                         label = \"no implementation for `{Self} << {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":688682,"byte_end":688832,"line_start":376,"line_end":377,"column_start":1,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1966},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":691983,"byte_end":691986,"line_start":485,"line_end":485,"column_start":11,"column_end":14},"name":"Shr","qualname":"::ops::bit::Shr","value":"Shr<RHS>","parent":null,"children":[{"krate":0,"index":1968},{"krate":0,"index":1970}],"decl_id":null,"docs":" The right shift operator `>>`. Note that because this trait is implemented\n for all integer types with multiple right-hand-side types, Rust's type\n checker has special handling for `_ >> _`, setting the result type for\n integer operations to the type of the left-hand-side operand. This means\n that though `a >> b` and `a.shr(b)` are one and the same from an evaluation\n standpoint, they are different when it comes to type inference.","sig":null,"attributes":[{"value":"lang = \"shr\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":691760,"byte_end":691775,"line_start":481,"line_end":481,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":691776,"byte_end":691821,"line_start":482,"line_end":482,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} >> {RHS}`\",\n                         label = \"no implementation for `{Self} >> {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":691822,"byte_end":691972,"line_start":483,"line_end":484,"column_start":1,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":1968},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":692114,"byte_end":692120,"line_start":488,"line_end":488,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::Shr::Output","value":"type Output;","parent":{"krate":0,"index":1966},"children":[],"decl_id":null,"docs":" The resulting type after applying the `>>` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":692059,"byte_end":692104,"line_start":487,"line_end":487,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1970},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":692217,"byte_end":692220,"line_start":492,"line_end":492,"column_start":8,"column_end":11},"name":"shr","qualname":"::ops::bit::Shr::shr","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1966},"children":[],"decl_id":null,"docs":" The right shift operator `>>`. Note that because this trait is implemented\n for all integer types with multiple right-hand-side types, Rust's type\n checker has special handling for `_ >> _`, setting the result type for\n integer operations to the type of the left-hand-side operand. This means\n that though `a >> b` and `a.shr(b)` are one and the same from an evaluation\n standpoint, they are different when it comes to type inference.","sig":null,"attributes":[{"value":"lang = \"shr\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":691760,"byte_end":691775,"line_start":481,"line_end":481,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":691776,"byte_end":691821,"line_start":482,"line_end":482,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} >> {RHS}`\",\n                         label = \"no implementation for `{Self} >> {RHS}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":691822,"byte_end":691972,"line_start":483,"line_end":484,"column_start":1,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1976},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":695245,"byte_end":695257,"line_start":599,"line_end":599,"column_start":11,"column_end":23},"name":"BitAndAssign","qualname":"::ops::bit::BitAndAssign","value":"BitAndAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":1978}],"decl_id":null,"docs":" The bitwise AND assignment operator `&=`.","sig":null,"attributes":[{"value":"lang = \"bitand_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":695001,"byte_end":695026,"line_start":595,"line_end":595,"column_start":1,"column_end":26}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":695027,"byte_end":695083,"line_start":596,"line_end":596,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} &= {Rhs}`\",\n                         label = \"no implementation for `{Self} &= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":695084,"byte_end":695234,"line_start":597,"line_end":598,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1978},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":695375,"byte_end":695388,"line_start":602,"line_end":602,"column_start":8,"column_end":21},"name":"bitand_assign","qualname":"::ops::bit::BitAndAssign::bitand_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1976},"children":[],"decl_id":null,"docs":" The bitwise AND assignment operator `&=`.","sig":null,"attributes":[{"value":"lang = \"bitand_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":695001,"byte_end":695026,"line_start":595,"line_end":595,"column_start":1,"column_end":26}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":695027,"byte_end":695083,"line_start":596,"line_end":596,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} &= {Rhs}`\",\n                         label = \"no implementation for `{Self} &= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":695084,"byte_end":695234,"line_start":597,"line_end":598,"column_start":1,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1982},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":696782,"byte_end":696793,"line_start":647,"line_end":647,"column_start":11,"column_end":22},"name":"BitOrAssign","qualname":"::ops::bit::BitOrAssign","value":"BitOrAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":1984}],"decl_id":null,"docs":" The bitwise OR assignment operator `|=`.","sig":null,"attributes":[{"value":"lang = \"bitor_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":696539,"byte_end":696563,"line_start":643,"line_end":643,"column_start":1,"column_end":25}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":696564,"byte_end":696620,"line_start":644,"line_end":644,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} |= {Rhs}`\",\n                         label = \"no implementation for `{Self} |= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":696621,"byte_end":696771,"line_start":645,"line_end":646,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1984},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":696911,"byte_end":696923,"line_start":650,"line_end":650,"column_start":8,"column_end":20},"name":"bitor_assign","qualname":"::ops::bit::BitOrAssign::bitor_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1982},"children":[],"decl_id":null,"docs":" The bitwise OR assignment operator `|=`.","sig":null,"attributes":[{"value":"lang = \"bitor_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":696539,"byte_end":696563,"line_start":643,"line_end":643,"column_start":1,"column_end":25}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":696564,"byte_end":696620,"line_start":644,"line_end":644,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} |= {Rhs}`\",\n                         label = \"no implementation for `{Self} |= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":696621,"byte_end":696771,"line_start":645,"line_end":646,"column_start":1,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1988},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":698305,"byte_end":698317,"line_start":695,"line_end":695,"column_start":11,"column_end":23},"name":"BitXorAssign","qualname":"::ops::bit::BitXorAssign","value":"BitXorAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":1990}],"decl_id":null,"docs":" The bitwise XOR assignment operator `^=`.","sig":null,"attributes":[{"value":"lang = \"bitxor_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":698061,"byte_end":698086,"line_start":691,"line_end":691,"column_start":1,"column_end":26}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":698087,"byte_end":698143,"line_start":692,"line_end":692,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} ^= {Rhs}`\",\n                         label = \"no implementation for `{Self} ^= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":698144,"byte_end":698294,"line_start":693,"line_end":694,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1990},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":698435,"byte_end":698448,"line_start":698,"line_end":698,"column_start":8,"column_end":21},"name":"bitxor_assign","qualname":"::ops::bit::BitXorAssign::bitxor_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1988},"children":[],"decl_id":null,"docs":" The bitwise XOR assignment operator `^=`.","sig":null,"attributes":[{"value":"lang = \"bitxor_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":698061,"byte_end":698086,"line_start":691,"line_end":691,"column_start":1,"column_end":26}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":698087,"byte_end":698143,"line_start":692,"line_end":692,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} ^= {Rhs}`\",\n                         label = \"no implementation for `{Self} ^= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":698144,"byte_end":698294,"line_start":693,"line_end":694,"column_start":1,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1994},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":699620,"byte_end":699629,"line_start":741,"line_end":741,"column_start":11,"column_end":20},"name":"ShlAssign","qualname":"::ops::bit::ShlAssign","value":"ShlAssign<Rhs>","parent":null,"children":[{"krate":0,"index":1996}],"decl_id":null,"docs":" The left shift assignment operator `<<=`.","sig":null,"attributes":[{"value":"lang = \"shl_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":699377,"byte_end":699399,"line_start":737,"line_end":737,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":699400,"byte_end":699456,"line_start":738,"line_end":738,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} <<= {Rhs}`\",\n                         label = \"no implementation for `{Self} <<= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":699457,"byte_end":699609,"line_start":739,"line_end":740,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1996},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":699743,"byte_end":699753,"line_start":744,"line_end":744,"column_start":8,"column_end":18},"name":"shl_assign","qualname":"::ops::bit::ShlAssign::shl_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":1994},"children":[],"decl_id":null,"docs":" The left shift assignment operator `<<=`.","sig":null,"attributes":[{"value":"lang = \"shl_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":699377,"byte_end":699399,"line_start":737,"line_end":737,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":699400,"byte_end":699456,"line_start":738,"line_end":738,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} <<= {Rhs}`\",\n                         label = \"no implementation for `{Self} <<= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":699457,"byte_end":699609,"line_start":739,"line_end":740,"column_start":1,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":2002},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":701502,"byte_end":701511,"line_start":808,"line_end":808,"column_start":11,"column_end":20},"name":"ShrAssign","qualname":"::ops::bit::ShrAssign","value":"ShrAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":2004}],"decl_id":null,"docs":" The right shift assignment operator `>>=`.","sig":null,"attributes":[{"value":"lang = \"shr_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":701259,"byte_end":701281,"line_start":804,"line_end":804,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":701282,"byte_end":701338,"line_start":805,"line_end":805,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} >>= {Rhs}`\",\n                         label = \"no implementation for `{Self} >>= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":701339,"byte_end":701491,"line_start":806,"line_end":807,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2004},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":701630,"byte_end":701640,"line_start":811,"line_end":811,"column_start":8,"column_end":18},"name":"shr_assign","qualname":"::ops::bit::ShrAssign::shr_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":2002},"children":[],"decl_id":null,"docs":" The right shift assignment operator `>>=`.","sig":null,"attributes":[{"value":"lang = \"shr_assign\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":701259,"byte_end":701281,"line_start":804,"line_end":804,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":701282,"byte_end":701338,"line_start":805,"line_end":805,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented(message = \"no implementation for `{Self} >>= {Rhs}`\",\n                         label = \"no implementation for `{Self} >>= {Rhs}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":701339,"byte_end":701491,"line_start":806,"line_end":807,"column_start":1,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":2012},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":705469,"byte_end":705474,"line_start":72,"line_end":72,"column_start":11,"column_end":16},"name":"Deref","qualname":"::ops::deref::Deref","value":"Deref","parent":null,"children":[{"krate":0,"index":2014},{"krate":0,"index":2016}],"decl_id":null,"docs":" Used for immutable dereferencing operations, like `*v`.","sig":null,"attributes":[{"value":"lang = \"deref\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":705395,"byte_end":705412,"line_start":70,"line_end":70,"column_start":1,"column_end":18}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":705413,"byte_end":705458,"line_start":71,"line_end":71,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":2014},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":705584,"byte_end":705590,"line_start":75,"line_end":75,"column_start":10,"column_end":16},"name":"Target","qualname":"::ops::deref::Deref::Target","value":"type Target: ?Sized;","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" The resulting type after dereferencing.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":705529,"byte_end":705574,"line_start":74,"line_end":74,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2016},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":705690,"byte_end":705695,"line_start":79,"line_end":79,"column_start":8,"column_end":13},"name":"deref","qualname":"::ops::deref::Deref::deref","value":"fn (&self) -> &Self::Target","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Used for immutable dereferencing operations, like `*v`.","sig":null,"attributes":[{"value":"lang = \"deref\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":705395,"byte_end":705412,"line_start":70,"line_end":70,"column_start":1,"column_end":18}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":705413,"byte_end":705458,"line_start":71,"line_end":71,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2030},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":708553,"byte_end":708561,"line_start":166,"line_end":166,"column_start":11,"column_end":19},"name":"DerefMut","qualname":"::ops::deref::DerefMut","value":"DerefMut: Deref","parent":null,"children":[{"krate":0,"index":2032}],"decl_id":null,"docs":" Used for mutable dereferencing operations, like in `*v = 1;`.","sig":null,"attributes":[{"value":"lang = \"deref_mut\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":708475,"byte_end":708496,"line_start":164,"line_end":164,"column_start":1,"column_end":22}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":708497,"byte_end":708542,"line_start":165,"line_end":165,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2032},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":708668,"byte_end":708677,"line_start":169,"line_end":169,"column_start":8,"column_end":17},"name":"deref_mut","qualname":"::ops::deref::DerefMut::deref_mut","value":"fn (&mut self) -> &mut Self::Target","parent":{"krate":0,"index":2030},"children":[],"decl_id":null,"docs":" Used for mutable dereferencing operations, like in `*v = 1;`.","sig":null,"attributes":[{"value":"lang = \"deref_mut\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":708475,"byte_end":708496,"line_start":164,"line_end":164,"column_start":1,"column_end":22}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":708497,"byte_end":708542,"line_start":165,"line_end":165,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2040},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":711456,"byte_end":711460,"line_start":95,"line_end":95,"column_start":11,"column_end":15},"name":"Drop","qualname":"::ops::drop::Drop","value":"Drop","parent":null,"children":[{"krate":0,"index":2042}],"decl_id":null,"docs":" Used to run some code when a value goes out of scope.\n This is sometimes called a 'destructor'.","sig":null,"attributes":[{"value":"lang = \"drop\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":711383,"byte_end":711399,"line_start":93,"line_end":93,"column_start":1,"column_end":17}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":711400,"byte_end":711445,"line_start":94,"line_end":94,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2042},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":712379,"byte_end":712383,"line_start":116,"line_end":116,"column_start":8,"column_end":12},"name":"drop","qualname":"::ops::drop::Drop::drop","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":2040},"children":[],"decl_id":null,"docs":" Used to run some code when a value goes out of scope.\n This is sometimes called a 'destructor'.","sig":null,"attributes":[{"value":"lang = \"drop\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":711383,"byte_end":711399,"line_start":93,"line_end":93,"column_start":1,"column_end":17}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":711400,"byte_end":711445,"line_start":94,"line_end":94,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2046},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":714970,"byte_end":714972,"line_start":70,"line_end":70,"column_start":11,"column_end":13},"name":"Fn","qualname":"::ops::function::Fn","value":"Fn<Args>: FnMut<Args>","parent":null,"children":[{"krate":0,"index":2048}],"decl_id":null,"docs":" The version of the call operator that takes an immutable receiver.","sig":null,"attributes":[{"value":"lang = \"fn\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":714817,"byte_end":714831,"line_start":66,"line_end":66,"column_start":1,"column_end":15}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":714832,"byte_end":714877,"line_start":67,"line_end":67,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":714878,"byte_end":714898,"line_start":68,"line_end":68,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":714899,"byte_end":714913,"line_start":69,"line_end":69,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":2048},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":715114,"byte_end":715118,"line_start":73,"line_end":73,"column_start":27,"column_end":31},"name":"call","qualname":"::ops::function::Fn::call","value":"fn (&self, args: Args) -> Self::Output","parent":{"krate":0,"index":2046},"children":[],"decl_id":null,"docs":" The version of the call operator that takes an immutable receiver.","sig":null,"attributes":[{"value":"lang = \"fn\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":714817,"byte_end":714831,"line_start":66,"line_end":66,"column_start":1,"column_end":15}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":714832,"byte_end":714877,"line_start":67,"line_end":67,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":714878,"byte_end":714898,"line_start":68,"line_end":68,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":714899,"byte_end":714913,"line_start":69,"line_end":69,"column_start":1,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":2050},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":717381,"byte_end":717386,"line_start":143,"line_end":143,"column_start":11,"column_end":16},"name":"FnMut","qualname":"::ops::function::FnMut","value":"FnMut<Args>: FnOnce<Args>","parent":null,"children":[{"krate":0,"index":2052}],"decl_id":null,"docs":" The version of the call operator that takes a mutable receiver.","sig":null,"attributes":[{"value":"lang = \"fn_mut\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":717224,"byte_end":717242,"line_start":139,"line_end":139,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":717243,"byte_end":717288,"line_start":140,"line_end":140,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":717289,"byte_end":717309,"line_start":141,"line_end":141,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":717310,"byte_end":717324,"line_start":142,"line_end":142,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":2052},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":717529,"byte_end":717537,"line_start":146,"line_end":146,"column_start":27,"column_end":35},"name":"call_mut","qualname":"::ops::function::FnMut::call_mut","value":"fn (&mut self, args: Args) -> Self::Output","parent":{"krate":0,"index":2050},"children":[],"decl_id":null,"docs":" The version of the call operator that takes a mutable receiver.","sig":null,"attributes":[{"value":"lang = \"fn_mut\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":717224,"byte_end":717242,"line_start":139,"line_end":139,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":717243,"byte_end":717288,"line_start":140,"line_end":140,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":717289,"byte_end":717309,"line_start":141,"line_end":141,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":717310,"byte_end":717324,"line_start":142,"line_end":142,"column_start":1,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":2054},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":720004,"byte_end":720010,"line_start":216,"line_end":216,"column_start":11,"column_end":17},"name":"FnOnce","qualname":"::ops::function::FnOnce","value":"FnOnce<Args>","parent":null,"children":[{"krate":0,"index":2056},{"krate":0,"index":2058}],"decl_id":null,"docs":" The version of the call operator that takes a by-value receiver.","sig":null,"attributes":[{"value":"lang = \"fn_once\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":719846,"byte_end":719865,"line_start":212,"line_end":212,"column_start":1,"column_end":20}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":719866,"byte_end":719911,"line_start":213,"line_end":213,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":719912,"byte_end":719932,"line_start":214,"line_end":214,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":719933,"byte_end":719947,"line_start":215,"line_end":215,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":2056},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":720147,"byte_end":720153,"line_start":219,"line_end":219,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::function::FnOnce::Output","value":"type Output;","parent":{"krate":0,"index":2054},"children":[],"decl_id":null,"docs":" The returned type after the call operator is used.\n","sig":null,"attributes":[{"value":"stable(feature = \"fn_once_output\", since = \"1.12.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":720082,"byte_end":720137,"line_start":218,"line_end":218,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2058},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":720275,"byte_end":720284,"line_start":223,"line_end":223,"column_start":27,"column_end":36},"name":"call_once","qualname":"::ops::function::FnOnce::call_once","value":"fn (self, args: Args) -> Self::Output","parent":{"krate":0,"index":2054},"children":[],"decl_id":null,"docs":" The version of the call operator that takes a by-value receiver.","sig":null,"attributes":[{"value":"lang = \"fn_once\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":719846,"byte_end":719865,"line_start":212,"line_end":212,"column_start":1,"column_end":20}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":719866,"byte_end":719911,"line_start":213,"line_end":213,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":719912,"byte_end":719932,"line_start":214,"line_end":214,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":719933,"byte_end":719947,"line_start":215,"line_end":215,"column_start":1,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":19959},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":722911,"byte_end":722918,"line_start":26,"line_end":26,"column_start":5,"column_end":12},"name":"Yielded","qualname":"::ops::generator::GeneratorState::Yielded","value":"GeneratorState::Yielded(Y)","parent":{"krate":0,"index":34674},"children":[],"decl_id":null,"docs":" The generator suspended with a value.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":19963},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":723200,"byte_end":723208,"line_start":33,"line_end":33,"column_start":5,"column_end":13},"name":"Complete","qualname":"::ops::generator::GeneratorState::Complete","value":"GeneratorState::Complete(R)","parent":{"krate":0,"index":34674},"children":[],"decl_id":null,"docs":" The generator completed with a return value.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":34674},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":722544,"byte_end":722558,"line_start":19,"line_end":19,"column_start":10,"column_end":24},"name":"GeneratorState","qualname":"::ops::generator::GeneratorState","value":"GeneratorState::{Yielded, Complete}","parent":null,"children":[{"krate":0,"index":19959},{"krate":0,"index":19963}],"decl_id":null,"docs":" The result of a generator resumption.","sig":null,"attributes":[{"value":"lang = \"generator_state\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":722449,"byte_end":722476,"line_start":17,"line_end":17,"column_start":1,"column_end":28}},{"value":"unstable(feature = \"generator_trait\", issue = \"43122\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":722477,"byte_end":722534,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":722535,"byte_end":723214,"line_start":19,"line_end":34,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":722535,"byte_end":723214,"line_start":19,"line_end":34,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":2088},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":724595,"byte_end":724604,"line_start":76,"line_end":76,"column_start":11,"column_end":20},"name":"Generator","qualname":"::ops::generator::Generator","value":"Generator","parent":null,"children":[{"krate":0,"index":2090},{"krate":0,"index":2092},{"krate":0,"index":2094}],"decl_id":null,"docs":" The trait implemented by builtin generator types.","sig":null,"attributes":[{"value":"lang = \"generator\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":724490,"byte_end":724511,"line_start":73,"line_end":73,"column_start":1,"column_end":22}},{"value":"unstable(feature = \"generator_trait\", issue = \"43122\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":724512,"byte_end":724569,"line_start":74,"line_end":74,"column_start":1,"column_end":58}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":724570,"byte_end":724584,"line_start":75,"line_end":75,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":2090},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":724947,"byte_end":724952,"line_start":83,"line_end":83,"column_start":10,"column_end":15},"name":"Yield","qualname":"::ops::generator::Generator::Yield","value":"type Yield;","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" The type of value this generator yields.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2092},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":725293,"byte_end":725299,"line_start":91,"line_end":91,"column_start":10,"column_end":16},"name":"Return","qualname":"::ops::generator::Generator::Return","value":"type Return;","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" The type of value this generator returns.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2094},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":726842,"byte_end":726848,"line_start":123,"line_end":123,"column_start":15,"column_end":21},"name":"resume","qualname":"::ops::generator::Generator::resume","value":"fn (&mut self) -> GeneratorState<Self::Yield, Self::Return>","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":" The trait implemented by builtin generator types.","sig":null,"attributes":[{"value":"lang = \"generator\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":724490,"byte_end":724511,"line_start":73,"line_end":73,"column_start":1,"column_end":22}},{"value":"unstable(feature = \"generator_trait\", issue = \"43122\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":724512,"byte_end":724569,"line_start":74,"line_end":74,"column_start":1,"column_end":58}},{"value":"fundamental","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":724570,"byte_end":724584,"line_start":75,"line_end":75,"column_start":1,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":2106},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":729379,"byte_end":729384,"line_start":65,"line_end":65,"column_start":11,"column_end":16},"name":"Index","qualname":"::ops::index::Index","value":"Index<Idx: ?Sized>","parent":null,"children":[{"krate":0,"index":2108},{"krate":0,"index":2110}],"decl_id":null,"docs":" Used for indexing operations (`container[index]`) in immutable contexts.","sig":null,"attributes":[{"value":"lang = \"index\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":729228,"byte_end":729245,"line_start":62,"line_end":62,"column_start":1,"column_end":18}},{"value":"rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":729246,"byte_end":729322,"line_start":63,"line_end":63,"column_start":1,"column_end":77}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":729323,"byte_end":729368,"line_start":64,"line_end":64,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":2108},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":729501,"byte_end":729507,"line_start":68,"line_end":68,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::index::Index::Output","value":"type Output: ?Sized;","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":" The returned type after indexing.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":729446,"byte_end":729491,"line_start":67,"line_end":67,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2110},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":729637,"byte_end":729642,"line_start":72,"line_end":72,"column_start":8,"column_end":13},"name":"index","qualname":"::ops::index::Index::index","value":"fn (&self, index: Idx) -> &Self::Output","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":" Used for indexing operations (`container[index]`) in immutable contexts.","sig":null,"attributes":[{"value":"lang = \"index\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":729228,"byte_end":729245,"line_start":62,"line_end":62,"column_start":1,"column_end":18}},{"value":"rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":729246,"byte_end":729322,"line_start":63,"line_end":63,"column_start":1,"column_end":77}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":729323,"byte_end":729368,"line_start":64,"line_end":64,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2112},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":731949,"byte_end":731957,"line_start":149,"line_end":149,"column_start":11,"column_end":19},"name":"IndexMut","qualname":"::ops::index::IndexMut","value":"IndexMut<Idx: ?Sized>: Index<Idx>","parent":null,"children":[{"krate":0,"index":2114}],"decl_id":null,"docs":" Used for indexing operations (`container[index]`) in mutable contexts.","sig":null,"attributes":[{"value":"lang = \"index_mut\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":731786,"byte_end":731807,"line_start":146,"line_end":146,"column_start":1,"column_end":22}},{"value":"rustc_on_unimplemented =\n      \"the type `{Self}` cannot be mutably indexed by `{Idx}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":731808,"byte_end":731892,"line_start":147,"line_end":147,"column_start":1,"column_end":85}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":731893,"byte_end":731938,"line_start":148,"line_end":148,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2114},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":732112,"byte_end":732121,"line_start":152,"line_end":152,"column_start":8,"column_end":17},"name":"index_mut","qualname":"::ops::index::IndexMut::index_mut","value":"fn (&mut self, index: Idx) -> &mut Self::Output","parent":{"krate":0,"index":2112},"children":[],"decl_id":null,"docs":" Used for indexing operations (`container[index]`) in mutable contexts.","sig":null,"attributes":[{"value":"lang = \"index_mut\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":731786,"byte_end":731807,"line_start":146,"line_end":146,"column_start":1,"column_end":22}},{"value":"rustc_on_unimplemented =\n      \"the type `{Self}` cannot be mutably indexed by `{Idx}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":731808,"byte_end":731892,"line_start":147,"line_end":147,"column_start":1,"column_end":85}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":731893,"byte_end":731938,"line_start":148,"line_end":148,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":34716},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":733727,"byte_end":733736,"line_start":50,"line_end":50,"column_start":12,"column_end":21},"name":"RangeFull","qualname":"::ops::range::RangeFull","value":"","parent":null,"children":[],"decl_id":null,"docs":" An unbounded range (`..`).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":733670,"byte_end":733715,"line_start":49,"line_end":49,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":733716,"byte_end":733737,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":733716,"byte_end":733737,"line_start":50,"line_end":50,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":34736},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":734640,"byte_end":734645,"line_start":79,"line_end":79,"column_start":12,"column_end":17},"name":"Range","qualname":"::ops::range::Range","value":"Range { start, end }","parent":null,"children":[{"krate":0,"index":20009},{"krate":0,"index":20011}],"decl_id":null,"docs":" A (half-open) range bounded inclusively below and exclusively above\n (`start..end`).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":734583,"byte_end":734628,"line_start":78,"line_end":78,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":734629,"byte_end":734892,"line_start":79,"line_end":86,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":20009},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":734761,"byte_end":734766,"line_start":82,"line_end":82,"column_start":9,"column_end":14},"name":"start","qualname":"::ops::range::Range::start","value":"Idx","parent":{"krate":0,"index":34736},"children":[],"decl_id":null,"docs":" The lower bound of the range (inclusive).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":734707,"byte_end":734752,"line_start":81,"line_end":81,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":20011},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":734881,"byte_end":734884,"line_start":85,"line_end":85,"column_start":9,"column_end":12},"name":"end","qualname":"::ops::range::Range::end","value":"Idx","parent":{"krate":0,"index":34736},"children":[],"decl_id":null,"docs":" The upper bound of the range (exclusive).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":734827,"byte_end":734872,"line_start":84,"line_end":84,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2130},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":735665,"byte_end":735673,"line_start":112,"line_end":112,"column_start":12,"column_end":20},"name":"contains","qualname":"<Range<Idx>>::contains","value":"fn (&self, item: Idx) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2132},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":736420,"byte_end":736428,"line_start":139,"line_end":139,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Range<Idx>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":34756},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":737422,"byte_end":737431,"line_start":169,"line_end":169,"column_start":12,"column_end":21},"name":"RangeFrom","qualname":"::ops::range::RangeFrom","value":"RangeFrom { start }","parent":null,"children":[{"krate":0,"index":20025}],"decl_id":null,"docs":" A range only bounded inclusively below (`start..`).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":737365,"byte_end":737410,"line_start":168,"line_end":168,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":737411,"byte_end":737560,"line_start":169,"line_end":173,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":20025},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":737547,"byte_end":737552,"line_start":172,"line_end":172,"column_start":9,"column_end":14},"name":"start","qualname":"::ops::range::RangeFrom::start","value":"Idx","parent":{"krate":0,"index":34756},"children":[],"decl_id":null,"docs":" The lower bound of the range (inclusive).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":737493,"byte_end":737538,"line_start":171,"line_end":171,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2140},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":738210,"byte_end":738218,"line_start":195,"line_end":195,"column_start":12,"column_end":20},"name":"contains","qualname":"<RangeFrom<Idx>>::contains","value":"fn (&self, item: Idx) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"range_contains\",\n           reason = \"recently added as per RFC\",\n           issue = \"32311\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":737774,"byte_end":737868,"line_start":182,"line_end":182,"column_start":1,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":34776},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":739542,"byte_end":739549,"line_start":240,"line_end":240,"column_start":12,"column_end":19},"name":"RangeTo","qualname":"::ops::range::RangeTo","value":"RangeTo { end }","parent":null,"children":[{"krate":0,"index":20039}],"decl_id":null,"docs":" A range only bounded exclusively above (`..end`).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":739485,"byte_end":739530,"line_start":239,"line_end":239,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":739531,"byte_end":739676,"line_start":240,"line_end":244,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":739531,"byte_end":739676,"line_start":240,"line_end":244,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":20039},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":739665,"byte_end":739668,"line_start":243,"line_end":243,"column_start":9,"column_end":12},"name":"end","qualname":"::ops::range::RangeTo::end","value":"Idx","parent":{"krate":0,"index":34776},"children":[],"decl_id":null,"docs":" The upper bound of the range (exclusive).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":739611,"byte_end":739656,"line_start":242,"line_end":242,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2148},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":740321,"byte_end":740329,"line_start":266,"line_end":266,"column_start":12,"column_end":20},"name":"contains","qualname":"<RangeTo<Idx>>::contains","value":"fn (&self, item: Idx) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"range_contains\",\n           reason = \"recently added as per RFC\",\n           issue = \"32311\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":739886,"byte_end":739980,"line_start":253,"line_end":253,"column_start":1,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":34798},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":741368,"byte_end":741382,"line_start":297,"line_end":297,"column_start":12,"column_end":26},"name":"RangeInclusive","qualname":"::ops::range::RangeInclusive","value":"RangeInclusive { start, end }","parent":null,"children":[{"krate":0,"index":20055},{"krate":0,"index":20057}],"decl_id":null,"docs":" An range bounded inclusively below and above (`start..=end`).","sig":null,"attributes":[{"value":"stable(feature = \"inclusive_range\", since = \"1.26.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":741300,"byte_end":741356,"line_start":296,"line_end":296,"column_start":1,"column_end":57}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":741357,"byte_end":741667,"line_start":297,"line_end":304,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":20055},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":741517,"byte_end":741522,"line_start":300,"line_end":300,"column_start":9,"column_end":14},"name":"start","qualname":"::ops::range::RangeInclusive::start","value":"Idx","parent":{"krate":0,"index":34798},"children":[],"decl_id":null,"docs":" The lower bound of the range (inclusive).\n","sig":null,"attributes":[{"value":"unstable(feature = \"inclusive_range_fields\", issue = \"49022\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":741444,"byte_end":741508,"line_start":299,"line_end":299,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":20057},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":741656,"byte_end":741659,"line_start":303,"line_end":303,"column_start":9,"column_end":12},"name":"end","qualname":"::ops::range::RangeInclusive::end","value":"Idx","parent":{"krate":0,"index":34798},"children":[],"decl_id":null,"docs":" The upper bound of the range (inclusive).\n","sig":null,"attributes":[{"value":"unstable(feature = \"inclusive_range_fields\", issue = \"49022\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":741583,"byte_end":741647,"line_start":302,"line_end":302,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2156},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":742515,"byte_end":742523,"line_start":331,"line_end":331,"column_start":12,"column_end":20},"name":"contains","qualname":"<RangeInclusive<Idx>>::contains","value":"fn (&self, item: Idx) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2158},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":743564,"byte_end":743572,"line_start":369,"line_end":369,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<RangeInclusive<Idx>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":34818},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":744899,"byte_end":744915,"line_start":412,"line_end":412,"column_start":12,"column_end":28},"name":"RangeToInclusive","qualname":"::ops::range::RangeToInclusive","value":"RangeToInclusive { end }","parent":null,"children":[{"krate":0,"index":20071}],"decl_id":null,"docs":" A range only bounded inclusively above (`..=end`).","sig":null,"attributes":[{"value":"stable(feature = \"inclusive_range\", since = \"1.26.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":744831,"byte_end":744887,"line_start":411,"line_end":411,"column_start":1,"column_end":57}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":744888,"byte_end":745052,"line_start":412,"line_end":416,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":744888,"byte_end":745052,"line_start":412,"line_end":416,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":20071},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":745041,"byte_end":745044,"line_start":415,"line_end":415,"column_start":9,"column_end":12},"name":"end","qualname":"::ops::range::RangeToInclusive::end","value":"Idx","parent":{"krate":0,"index":34818},"children":[],"decl_id":null,"docs":" The upper bound of the range (inclusive)\n","sig":null,"attributes":[{"value":"stable(feature = \"inclusive_range\", since = \"1.26.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":744976,"byte_end":745032,"line_start":414,"line_end":414,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2166},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":745730,"byte_end":745738,"line_start":438,"line_end":438,"column_start":12,"column_end":20},"name":"contains","qualname":"<RangeToInclusive<Idx>>::contains","value":"fn (&self, item: Idx) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"range_contains\",\n           reason = \"recently added as per RFC\",\n           issue = \"32311\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":745283,"byte_end":745377,"line_start":425,"line_end":425,"column_start":1,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20087},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":747162,"byte_end":747170,"line_start":488,"line_end":488,"column_start":5,"column_end":13},"name":"Included","qualname":"::ops::range::Bound::Included","value":"Bound::Included(T)","parent":{"krate":0,"index":34840},"children":[],"decl_id":null,"docs":" An inclusive bound.\n","sig":null,"attributes":[{"value":"stable(feature = \"collections_bound\", since = \"1.17.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":747099,"byte_end":747157,"line_start":487,"line_end":487,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20091},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":747329,"byte_end":747337,"line_start":491,"line_end":491,"column_start":5,"column_end":13},"name":"Excluded","qualname":"::ops::range::Bound::Excluded","value":"Bound::Excluded(T)","parent":{"krate":0,"index":34840},"children":[],"decl_id":null,"docs":" An exclusive bound.\n","sig":null,"attributes":[{"value":"stable(feature = \"collections_bound\", since = \"1.17.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":747266,"byte_end":747324,"line_start":490,"line_end":490,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20095},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":747550,"byte_end":747559,"line_start":494,"line_end":494,"column_start":5,"column_end":14},"name":"Unbounded","qualname":"::ops::range::Bound::Unbounded","value":"Bound::Unbounded","parent":{"krate":0,"index":34840},"children":[],"decl_id":null,"docs":" An infinite endpoint. Indicates that there is no bound in this direction.\n","sig":null,"attributes":[{"value":"stable(feature = \"collections_bound\", since = \"1.17.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":747487,"byte_end":747545,"line_start":493,"line_end":493,"column_start":5,"column_end":63}}]},{"kind":"Enum","id":{"krate":0,"index":34840},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":747056,"byte_end":747061,"line_start":485,"line_end":485,"column_start":10,"column_end":15},"name":"Bound","qualname":"::ops::range::Bound","value":"Bound::{Included, Excluded, Unbounded}","parent":null,"children":[{"krate":0,"index":20087},{"krate":0,"index":20091},{"krate":0,"index":20095}],"decl_id":null,"docs":" An endpoint of a range of keys.","sig":null,"attributes":[{"value":"stable(feature = \"collections_bound\", since = \"1.17.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":746937,"byte_end":746995,"line_start":483,"line_end":483,"column_start":1,"column_end":59}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":747047,"byte_end":747562,"line_start":485,"line_end":495,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":747047,"byte_end":747562,"line_start":485,"line_end":495,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":2168},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":747871,"byte_end":747882,"line_start":502,"line_end":502,"column_start":11,"column_end":22},"name":"RangeBounds","qualname":"::ops::range::RangeBounds","value":"RangeBounds<T: ?Sized>","parent":null,"children":[{"krate":0,"index":2170},{"krate":0,"index":2172}],"decl_id":null,"docs":" `RangeBounds` is implemented by Rust's built-in range types, produced\n by range syntax like `..`, `a..`, `..b` or `c..d`.\n","sig":null,"attributes":[{"value":"unstable(feature = \"collections_range\",\n           reason =\n               \"might be replaced with `Into<_>` and a type containing two `Bound` values\",\n           issue = \"30877\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":747564,"byte_end":747731,"line_start":497,"line_end":499,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2170},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":748297,"byte_end":748302,"line_start":520,"line_end":520,"column_start":8,"column_end":13},"name":"start","qualname":"::ops::range::RangeBounds::start","value":"fn (&self) -> Bound<&T>","parent":{"krate":0,"index":2168},"children":[],"decl_id":null,"docs":" `RangeBounds` is implemented by Rust's built-in range types, produced\n by range syntax like `..`, `a..`, `..b` or `c..d`.\n","sig":null,"attributes":[{"value":"unstable(feature = \"collections_range\",\n           reason =\n               \"might be replaced with `Into<_>` and a type containing two `Bound` values\",\n           issue = \"30877\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":747564,"byte_end":747731,"line_start":497,"line_end":499,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2172},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":748718,"byte_end":748721,"line_start":539,"line_end":539,"column_start":8,"column_end":11},"name":"end","qualname":"::ops::range::RangeBounds::end","value":"fn (&self) -> Bound<&T>","parent":{"krate":0,"index":2168},"children":[],"decl_id":null,"docs":" `RangeBounds` is implemented by Rust's built-in range types, produced\n by range syntax like `..`, `a..`, `..b` or `c..d`.\n","sig":null,"attributes":[{"value":"unstable(feature = \"collections_range\",\n           reason =\n               \"might be replaced with `Into<_>` and a type containing two `Bound` values\",\n           issue = \"30877\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":747564,"byte_end":747731,"line_start":497,"line_end":499,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":2262},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":755151,"byte_end":755154,"line_start":31,"line_end":31,"column_start":11,"column_end":14},"name":"Try","qualname":"::ops::try::Try","value":"Try","parent":null,"children":[{"krate":0,"index":2264},{"krate":0,"index":2266},{"krate":0,"index":2268},{"krate":0,"index":2270},{"krate":0,"index":2272}],"decl_id":null,"docs":" A trait for customizing the behavior of the `?` operator.","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":754474,"byte_end":754525,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"rustc_on_unimplemented(on(all(any(from_method = \"from_error\",\n                                    from_method = \"from_ok\"),\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `{Try}`)\",\n                            label =\n                                \"cannot use the `?` operator in a function that returns `{Self}`\"),\n                         on(all(from_method = \"into_result\",\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be applied to values that implement `{Try}`\",\n                            label =\n                                \"the `?` operator cannot be applied to type `{Self}`\"))","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":754526,"byte_end":755140,"line_start":18,"line_end":30,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":2264},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":755280,"byte_end":755282,"line_start":34,"line_end":34,"column_start":10,"column_end":12},"name":"Ok","qualname":"::ops::try::Try::Ok","value":"type Ok;","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" The type of this value when viewed as successful.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":755219,"byte_end":755270,"line_start":33,"line_end":33,"column_start":5,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":2266},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":755403,"byte_end":755408,"line_start":37,"line_end":37,"column_start":10,"column_end":15},"name":"Error","qualname":"::ops::try::Try::Error","value":"type Error;","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" The type of this value when viewed as failed.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":755342,"byte_end":755393,"line_start":36,"line_end":36,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2268},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":756074,"byte_end":756085,"line_start":49,"line_end":49,"column_start":8,"column_end":19},"name":"into_result","qualname":"::ops::try::Try::into_result","value":"fn (self) -> Result<Self::Ok, Self::Error>","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" A trait for customizing the behavior of the `?` operator.","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":754474,"byte_end":754525,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"rustc_on_unimplemented(on(all(any(from_method = \"from_error\",\n                                    from_method = \"from_ok\"),\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `{Try}`)\",\n                            label =\n                                \"cannot use the `?` operator in a function that returns `{Self}`\"),\n                         on(all(from_method = \"into_result\",\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be applied to values that implement `{Try}`\",\n                            label =\n                                \"the `?` operator cannot be applied to type `{Self}`\"))","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":754526,"byte_end":755140,"line_start":18,"line_end":30,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":2270},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":756335,"byte_end":756345,"line_start":54,"line_end":54,"column_start":8,"column_end":18},"name":"from_error","qualname":"::ops::try::Try::from_error","value":"fn (v: Self::Error) -> Self","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" A trait for customizing the behavior of the `?` operator.","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":754474,"byte_end":754525,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"rustc_on_unimplemented(on(all(any(from_method = \"from_error\",\n                                    from_method = \"from_ok\"),\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `{Try}`)\",\n                            label =\n                                \"cannot use the `?` operator in a function that returns `{Self}`\"),\n                         on(all(from_method = \"into_result\",\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be applied to values that implement `{Try}`\",\n                            label =\n                                \"the `?` operator cannot be applied to type `{Self}`\"))","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":754526,"byte_end":755140,"line_start":18,"line_end":30,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":2272},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":756573,"byte_end":756580,"line_start":59,"line_end":59,"column_start":8,"column_end":15},"name":"from_ok","qualname":"::ops::try::Try::from_ok","value":"fn (v: Self::Ok) -> Self","parent":{"krate":0,"index":2262},"children":[],"decl_id":null,"docs":" A trait for customizing the behavior of the `?` operator.","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":754474,"byte_end":754525,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"rustc_on_unimplemented(on(all(any(from_method = \"from_error\",\n                                    from_method = \"from_ok\"),\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `{Try}`)\",\n                            label =\n                                \"cannot use the `?` operator in a function that returns `{Self}`\"),\n                         on(all(from_method = \"into_result\",\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be applied to values that implement `{Try}`\",\n                            label =\n                                \"the `?` operator cannot be applied to type `{Self}`\"))","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":754526,"byte_end":755140,"line_start":18,"line_end":30,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":2278},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,117,110,115,105,122,101,46,114,115],"byte_start":758932,"byte_end":758945,"line_start":46,"line_end":46,"column_start":11,"column_end":24},"name":"CoerceUnsized","qualname":"::ops::unsize::CoerceUnsized","value":"CoerceUnsized<T>","parent":null,"children":[],"decl_id":null,"docs":" Trait that indicates that this is a pointer or a wrapper for one,\n where unsizing can be performed on the pointee.","sig":null,"attributes":[{"value":"unstable(feature = \"coerce_unsized\", issue = \"27732\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,117,110,115,105,122,101,46,114,115],"byte_start":758838,"byte_end":758894,"line_start":44,"line_end":44,"column_start":1,"column_end":57}},{"value":"lang = \"coerce_unsized\"","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,117,110,115,105,122,101,46,114,115],"byte_start":758895,"byte_end":758921,"line_start":45,"line_end":45,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":2402},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cmp","qualname":"::cmp","value":"libcore/cmp.rs","parent":null,"children":[{"krate":0,"index":2404},{"krate":0,"index":2406},{"krate":0,"index":2412},{"krate":0,"index":2416},{"krate":0,"index":34866},{"krate":0,"index":34882},{"krate":0,"index":34880},{"krate":0,"index":34876},{"krate":0,"index":34872},{"krate":0,"index":34868},{"krate":0,"index":2418},{"krate":0,"index":34886},{"krate":0,"index":34910},{"krate":0,"index":34906},{"krate":0,"index":34902},{"krate":0,"index":34900},{"krate":0,"index":34896},{"krate":0,"index":34892},{"krate":0,"index":34888},{"krate":0,"index":2426},{"krate":0,"index":2438},{"krate":0,"index":2442},{"krate":0,"index":2450},{"krate":0,"index":2452},{"krate":0,"index":2456},{"krate":0,"index":2460},{"krate":0,"index":2472},{"krate":0,"index":2474},{"krate":0,"index":2476}],"decl_id":null,"docs":" Functionality for ordering and comparison.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":761595,"byte_end":761641,"line_start":36,"line_end":36,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":2406},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":764184,"byte_end":764193,"line_start":110,"line_end":110,"column_start":11,"column_end":20},"name":"PartialEq","qualname":"::cmp::PartialEq","value":"PartialEq<Rhs: ?Sized = Self>","parent":null,"children":[{"krate":0,"index":2408},{"krate":0,"index":2410}],"decl_id":null,"docs":" Trait for equality comparisons which are [partial equivalence\n relations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).","sig":null,"attributes":[{"value":"lang = \"eq\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":764047,"byte_end":764061,"line_start":107,"line_end":107,"column_start":1,"column_end":15}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":764062,"byte_end":764107,"line_start":108,"line_end":108,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":764108,"byte_end":764173,"line_start":109,"line_end":109,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2408},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":764387,"byte_end":764389,"line_start":115,"line_end":115,"column_start":8,"column_end":10},"name":"eq","qualname":"::cmp::PartialEq::eq","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":2406},"children":[],"decl_id":null,"docs":" Trait for equality comparisons which are [partial equivalence\n relations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).","sig":null,"attributes":[{"value":"lang = \"eq\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":764047,"byte_end":764061,"line_start":107,"line_end":107,"column_start":1,"column_end":15}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":764062,"byte_end":764107,"line_start":108,"line_end":108,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":764108,"byte_end":764173,"line_start":109,"line_end":109,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2410},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":764543,"byte_end":764545,"line_start":121,"line_end":121,"column_start":8,"column_end":10},"name":"ne","qualname":"::cmp::PartialEq::ne","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":2406},"children":[],"decl_id":null,"docs":" Trait for equality comparisons which are [partial equivalence\n relations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).","sig":null,"attributes":[{"value":"lang = \"eq\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":764047,"byte_end":764061,"line_start":107,"line_end":107,"column_start":1,"column_end":15}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":764062,"byte_end":764107,"line_start":108,"line_end":108,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":764108,"byte_end":764173,"line_start":109,"line_end":109,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":2412},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":765969,"byte_end":765971,"line_start":164,"line_end":164,"column_start":11,"column_end":13},"name":"Eq","qualname":"::cmp::Eq","value":"Eq: PartialEq<Self>","parent":null,"children":[{"krate":0,"index":2414}],"decl_id":null,"docs":" Trait for equality comparisons which are [equivalence relations](\n https://en.wikipedia.org/wiki/Equivalence_relation).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":765913,"byte_end":765958,"line_start":163,"line_end":163,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2414},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":766408,"byte_end":766435,"line_start":175,"line_end":175,"column_start":8,"column_end":35},"name":"assert_receiver_is_total_eq","qualname":"::cmp::Eq::assert_receiver_is_total_eq","value":"fn (&self) -> ()","parent":{"krate":0,"index":2412},"children":[],"decl_id":null,"docs":" Trait for equality comparisons which are [equivalence relations](\n https://en.wikipedia.org/wiki/Equivalence_relation).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":765913,"byte_end":765958,"line_start":163,"line_end":163,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2416},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":766794,"byte_end":766809,"line_start":187,"line_end":187,"column_start":12,"column_end":27},"name":"AssertParamIsEq","qualname":"::cmp::AssertParamIsEq","value":"AssertParamIsEq {  }","parent":null,"children":[{"krate":0,"index":1401}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":766625,"byte_end":766664,"line_start":183,"line_end":183,"column_start":1,"column_end":40}},{"value":"unstable(feature = \"derive_eq\",\n           reason = \"deriving hack, should not be public\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":766665,"byte_end":766782,"line_start":184,"line_end":186,"column_start":1,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20113},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":767453,"byte_end":767457,"line_start":210,"line_end":210,"column_start":5,"column_end":9},"name":"Less","qualname":"::cmp::Ordering::Less","value":"Ordering::Less","parent":{"krate":0,"index":34866},"children":[],"decl_id":null,"docs":" An ordering where a compared value is less [than another].\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":767403,"byte_end":767448,"line_start":209,"line_end":209,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20117},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":767584,"byte_end":767589,"line_start":213,"line_end":213,"column_start":5,"column_end":10},"name":"Equal","qualname":"::cmp::Ordering::Equal","value":"Ordering::Equal","parent":{"krate":0,"index":34866},"children":[],"decl_id":null,"docs":" An ordering where a compared value is equal [to another].\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":767534,"byte_end":767579,"line_start":212,"line_end":212,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20121},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":767719,"byte_end":767726,"line_start":216,"line_end":216,"column_start":5,"column_end":12},"name":"Greater","qualname":"::cmp::Ordering::Greater","value":"Ordering::Greater","parent":{"krate":0,"index":34866},"children":[],"decl_id":null,"docs":" An ordering where a compared value is greater [than another].\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":767669,"byte_end":767714,"line_start":215,"line_end":215,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":34866},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":767321,"byte_end":767329,"line_start":207,"line_end":207,"column_start":10,"column_end":18},"name":"Ordering","qualname":"::cmp::Ordering","value":"Ordering::{Less, Equal, Greater}","parent":null,"children":[{"krate":0,"index":20113},{"krate":0,"index":20117},{"krate":0,"index":20121}],"decl_id":null,"docs":" An `Ordering` is the result of a comparison between two values.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":767266,"byte_end":767311,"line_start":206,"line_end":206,"column_start":1,"column_end":46}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":767312,"byte_end":767733,"line_start":207,"line_end":217,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":2420},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":768640,"byte_end":768647,"line_start":251,"line_end":251,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Ordering>::reverse","value":"fn (self) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2422},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":769746,"byte_end":769750,"line_start":287,"line_end":287,"column_start":12,"column_end":16},"name":"then","qualname":"<Ordering>::then","value":"fn (self, other: Ordering) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2424},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":770936,"byte_end":770945,"line_start":324,"line_end":324,"column_start":12,"column_end":21},"name":"then_with","qualname":"<Ordering>::then_with","value":"fn <F> (self, f: F) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":34886},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":771600,"byte_end":771607,"line_start":348,"line_end":348,"column_start":12,"column_end":19},"name":"Reverse","qualname":"::cmp::Reverse","value":"","parent":null,"children":[],"decl_id":null,"docs":" A helper struct for reverse ordering.","sig":null,"attributes":[{"value":"stable(feature = \"reverse_cmp_key\", since = \"1.19.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":771532,"byte_end":771588,"line_start":347,"line_end":347,"column_start":1,"column_end":57}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":771589,"byte_end":771675,"line_start":348,"line_end":348,"column_start":1,"column_end":87}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":771589,"byte_end":771675,"line_start":348,"line_end":348,"column_start":1,"column_end":87}}]},{"kind":"Trait","id":{"krate":0,"index":2442},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":774299,"byte_end":774302,"line_start":432,"line_end":432,"column_start":11,"column_end":14},"name":"Ord","qualname":"::cmp::Ord","value":"Ord: Eq + PartialOrd<Self>","parent":null,"children":[{"krate":0,"index":2444},{"krate":0,"index":2446},{"krate":0,"index":2448}],"decl_id":null,"docs":" Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).","sig":null,"attributes":[{"value":"lang = \"ord\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":774227,"byte_end":774242,"line_start":430,"line_end":430,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":774243,"byte_end":774288,"line_start":431,"line_end":431,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2444},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":774837,"byte_end":774840,"line_start":448,"line_end":448,"column_start":8,"column_end":11},"name":"cmp","qualname":"::cmp::Ord::cmp","value":"fn (&self, other: &Self) -> Ordering","parent":{"krate":0,"index":2442},"children":[],"decl_id":null,"docs":" Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).","sig":null,"attributes":[{"value":"lang = \"ord\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":774227,"byte_end":774242,"line_start":430,"line_end":430,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":774243,"byte_end":774288,"line_start":431,"line_end":431,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2446},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":775212,"byte_end":775215,"line_start":461,"line_end":461,"column_start":8,"column_end":11},"name":"max","qualname":"::cmp::Ord::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":2442},"children":[],"decl_id":null,"docs":" Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).","sig":null,"attributes":[{"value":"lang = \"ord\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":774227,"byte_end":774242,"line_start":430,"line_end":430,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":774243,"byte_end":774288,"line_start":431,"line_end":431,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2448},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":775658,"byte_end":775661,"line_start":477,"line_end":477,"column_start":8,"column_end":11},"name":"min","qualname":"::cmp::Ord::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":2442},"children":[],"decl_id":null,"docs":" Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).","sig":null,"attributes":[{"value":"lang = \"ord\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":774227,"byte_end":774242,"line_start":430,"line_end":430,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":774243,"byte_end":774288,"line_start":431,"line_end":431,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2460},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779413,"byte_end":779423,"line_start":603,"line_end":603,"column_start":11,"column_end":21},"name":"PartialOrd","qualname":"::cmp::PartialOrd","value":"PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs>","parent":null,"children":[{"krate":0,"index":2462},{"krate":0,"index":2464},{"krate":0,"index":2466},{"krate":0,"index":2468},{"krate":0,"index":2470}],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"partial_ord\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779267,"byte_end":779290,"line_start":600,"line_end":600,"column_start":1,"column_end":24}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779291,"byte_end":779336,"line_start":601,"line_end":601,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779337,"byte_end":779402,"line_start":602,"line_end":602,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2462},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":780192,"byte_end":780203,"line_start":629,"line_end":629,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"::cmp::PartialOrd::partial_cmp","value":"fn (&self, other: &Rhs) -> Option<Ordering>","parent":{"krate":0,"index":2460},"children":[],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"partial_ord\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779267,"byte_end":779290,"line_start":600,"line_end":600,"column_start":1,"column_end":24}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779291,"byte_end":779336,"line_start":601,"line_end":601,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779337,"byte_end":779402,"line_start":602,"line_end":602,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2464},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":780627,"byte_end":780629,"line_start":645,"line_end":645,"column_start":8,"column_end":10},"name":"lt","qualname":"::cmp::PartialOrd::lt","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":2460},"children":[],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"partial_ord\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779267,"byte_end":779290,"line_start":600,"line_end":600,"column_start":1,"column_end":24}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779291,"byte_end":779336,"line_start":601,"line_end":601,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779337,"byte_end":779402,"line_start":602,"line_end":602,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2466},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":781176,"byte_end":781178,"line_start":667,"line_end":667,"column_start":8,"column_end":10},"name":"le","qualname":"::cmp::PartialOrd::le","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":2460},"children":[],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"partial_ord\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779267,"byte_end":779290,"line_start":600,"line_end":600,"column_start":1,"column_end":24}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779291,"byte_end":779336,"line_start":601,"line_end":601,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779337,"byte_end":779402,"line_start":602,"line_end":602,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2468},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":781721,"byte_end":781723,"line_start":688,"line_end":688,"column_start":8,"column_end":10},"name":"gt","qualname":"::cmp::PartialOrd::gt","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":2460},"children":[],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"partial_ord\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779267,"byte_end":779290,"line_start":600,"line_end":600,"column_start":1,"column_end":24}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779291,"byte_end":779336,"line_start":601,"line_end":601,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779337,"byte_end":779402,"line_start":602,"line_end":602,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2470},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":782276,"byte_end":782278,"line_start":710,"line_end":710,"column_start":8,"column_end":10},"name":"ge","qualname":"::cmp::PartialOrd::ge","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":2460},"children":[],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"partial_ord\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779267,"byte_end":779290,"line_start":600,"line_end":600,"column_start":1,"column_end":24}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779291,"byte_end":779336,"line_start":601,"line_end":601,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779337,"byte_end":779402,"line_start":602,"line_end":602,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":2472},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":782817,"byte_end":782820,"line_start":734,"line_end":734,"column_start":8,"column_end":11},"name":"min","qualname":"::cmp::min","value":"fn <T> (v1: T, v2: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compares and returns the minimum of two values.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":782754,"byte_end":782763,"line_start":732,"line_end":732,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":782764,"byte_end":782809,"line_start":733,"line_end":733,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":2474},"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":783245,"byte_end":783248,"line_start":754,"line_end":754,"column_start":8,"column_end":11},"name":"max","qualname":"::cmp::max","value":"fn <T> (v1: T, v2: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compares and returns the maximum of two values.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":783182,"byte_end":783191,"line_start":752,"line_end":752,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":783192,"byte_end":783237,"line_start":753,"line_end":753,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2592},"span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"clone","qualname":"::clone","value":"libcore/clone.rs","parent":null,"children":[{"krate":0,"index":2594},{"krate":0,"index":2600},{"krate":0,"index":2602},{"krate":0,"index":2604}],"decl_id":null,"docs":" The `Clone` trait for types that cannot be 'implicitly copied'.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":793129,"byte_end":793175,"line_start":49,"line_end":49,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":2594},"span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":795662,"byte_end":795667,"line_start":109,"line_end":109,"column_start":11,"column_end":16},"name":"Clone","qualname":"::clone::Clone","value":"Clone: Sized","parent":null,"children":[{"krate":0,"index":2596},{"krate":0,"index":2598}],"decl_id":null,"docs":" A common trait for the ability to explicitly duplicate an object.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":795588,"byte_end":795633,"line_start":107,"line_end":107,"column_start":1,"column_end":46}},{"value":"lang = \"clone\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":795634,"byte_end":795651,"line_start":108,"line_end":108,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":2596},"span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":796025,"byte_end":796030,"line_start":121,"line_end":121,"column_start":8,"column_end":13},"name":"clone","qualname":"::clone::Clone::clone","value":"fn (&self) -> Self","parent":{"krate":0,"index":2594},"children":[],"decl_id":null,"docs":" A common trait for the ability to explicitly duplicate an object.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":795588,"byte_end":795633,"line_start":107,"line_end":107,"column_start":1,"column_end":46}},{"value":"lang = \"clone\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":795634,"byte_end":795651,"line_start":108,"line_end":108,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":2598},"span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":796355,"byte_end":796365,"line_start":130,"line_end":130,"column_start":8,"column_end":18},"name":"clone_from","qualname":"::clone::Clone::clone_from","value":"fn (&mut self, source: &Self) -> ()","parent":{"krate":0,"index":2594},"children":[],"decl_id":null,"docs":" A common trait for the ability to explicitly duplicate an object.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":795588,"byte_end":795633,"line_start":107,"line_end":107,"column_start":1,"column_end":46}},{"value":"lang = \"clone\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":795634,"byte_end":795651,"line_start":108,"line_end":108,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":2600},"span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":796811,"byte_end":796829,"line_start":144,"line_end":144,"column_start":12,"column_end":30},"name":"AssertParamIsClone","qualname":"::clone::AssertParamIsClone","value":"AssertParamIsClone {  }","parent":null,"children":[{"krate":0,"index":1481}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":796634,"byte_end":796673,"line_start":140,"line_end":140,"column_start":1,"column_end":40}},{"value":"unstable(feature = \"derive_clone_copy\",\n           reason = \"deriving hack, should not be public\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":796674,"byte_end":796799,"line_start":141,"line_end":143,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":2602},"span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":797078,"byte_end":797095,"line_start":150,"line_end":150,"column_start":12,"column_end":29},"name":"AssertParamIsCopy","qualname":"::clone::AssertParamIsCopy","value":"AssertParamIsCopy {  }","parent":null,"children":[{"krate":0,"index":1485}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":796901,"byte_end":796940,"line_start":146,"line_end":146,"column_start":1,"column_end":40}},{"value":"unstable(feature = \"derive_clone_copy\",\n           reason = \"deriving hack, should not be public\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":796941,"byte_end":797066,"line_start":147,"line_end":149,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":2626},"span":{"file_name":[108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"default","qualname":"::default","value":"libcore/default.rs","parent":null,"children":[{"krate":0,"index":2628},{"krate":0,"index":2632},{"krate":0,"index":35338},{"krate":0,"index":35342},{"krate":0,"index":35346},{"krate":0,"index":35350},{"krate":0,"index":35354},{"krate":0,"index":35358},{"krate":0,"index":35362},{"krate":0,"index":35366},{"krate":0,"index":35370},{"krate":0,"index":35374},{"krate":0,"index":35378},{"krate":0,"index":35382},{"krate":0,"index":35386},{"krate":0,"index":35390},{"krate":0,"index":35394},{"krate":0,"index":35398},{"krate":0,"index":35402}],"decl_id":null,"docs":" The `Default` trait for types which may have meaningful default values.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":799189,"byte_end":799235,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":2628},"span":{"file_name":[108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":801061,"byte_end":801068,"line_start":94,"line_end":94,"column_start":11,"column_end":18},"name":"Default","qualname":"::default::Default","value":"Default: Sized","parent":null,"children":[{"krate":0,"index":2630}],"decl_id":null,"docs":" A trait for giving a type a useful default value.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":801005,"byte_end":801050,"line_start":93,"line_end":93,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2630},"span":{"file_name":[108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":801877,"byte_end":801884,"line_start":125,"line_end":125,"column_start":8,"column_end":15},"name":"default","qualname":"::default::Default::default","value":"fn () -> Self","parent":{"krate":0,"index":2628},"children":[],"decl_id":null,"docs":" A trait for giving a type a useful default value.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":801005,"byte_end":801050,"line_start":93,"line_end":93,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2634},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"convert","qualname":"::convert","value":"libcore/convert.rs","parent":null,"children":[{"krate":0,"index":2636},{"krate":0,"index":2640},{"krate":0,"index":2644},{"krate":0,"index":2648},{"krate":0,"index":2652},{"krate":0,"index":2658},{"krate":0,"index":2664},{"krate":0,"index":2668},{"krate":0,"index":2672},{"krate":0,"index":2676},{"krate":0,"index":2680},{"krate":0,"index":2684},{"krate":0,"index":2690},{"krate":0,"index":2696},{"krate":0,"index":2700},{"krate":0,"index":2704}],"decl_id":null,"docs":" Traits for conversions between types.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":805393,"byte_end":805439,"line_start":49,"line_end":49,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":2636},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":807314,"byte_end":807319,"line_start":106,"line_end":106,"column_start":11,"column_end":16},"name":"AsRef","qualname":"::convert::AsRef","value":"AsRef<T: ?Sized>","parent":null,"children":[{"krate":0,"index":2638}],"decl_id":null,"docs":" A cheap reference-to-reference conversion. Used to convert a value to a\n reference value within generic code.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":807258,"byte_end":807303,"line_start":105,"line_end":105,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2638},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":807423,"byte_end":807429,"line_start":109,"line_end":109,"column_start":8,"column_end":14},"name":"as_ref","qualname":"::convert::AsRef::as_ref","value":"fn (&self) -> &T","parent":{"krate":0,"index":2636},"children":[],"decl_id":null,"docs":" A cheap reference-to-reference conversion. Used to convert a value to a\n reference value within generic code.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":807258,"byte_end":807303,"line_start":105,"line_end":105,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2640},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":808464,"byte_end":808469,"line_start":147,"line_end":147,"column_start":11,"column_end":16},"name":"AsMut","qualname":"::convert::AsMut","value":"AsMut<T: ?Sized>","parent":null,"children":[{"krate":0,"index":2642}],"decl_id":null,"docs":" A cheap, mutable reference-to-mutable reference conversion.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":808408,"byte_end":808453,"line_start":146,"line_end":146,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2642},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":808573,"byte_end":808579,"line_start":150,"line_end":150,"column_start":8,"column_end":14},"name":"as_mut","qualname":"::convert::AsMut::as_mut","value":"fn (&mut self) -> &mut T","parent":{"krate":0,"index":2640},"children":[],"decl_id":null,"docs":" A cheap, mutable reference-to-mutable reference conversion.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":808408,"byte_end":808453,"line_start":146,"line_end":146,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2644},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":810943,"byte_end":810947,"line_start":225,"line_end":225,"column_start":11,"column_end":15},"name":"Into","qualname":"::convert::Into","value":"Into<T>: Sized","parent":null,"children":[{"krate":0,"index":2646}],"decl_id":null,"docs":" A conversion that consumes `self`, which may or may not be expensive. The\n reciprocal of [`From`][From].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":810887,"byte_end":810932,"line_start":224,"line_end":224,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2646},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":811050,"byte_end":811054,"line_start":228,"line_end":228,"column_start":8,"column_end":12},"name":"into","qualname":"::convert::Into::into","value":"fn (self) -> T","parent":{"krate":0,"index":2644},"children":[],"decl_id":null,"docs":" A conversion that consumes `self`, which may or may not be expensive. The\n reciprocal of [`From`][From].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":810887,"byte_end":810932,"line_start":224,"line_end":224,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2648},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":813546,"byte_end":813550,"line_start":308,"line_end":308,"column_start":11,"column_end":15},"name":"From","qualname":"::convert::From","value":"From<T>: Sized","parent":null,"children":[{"krate":0,"index":2650}],"decl_id":null,"docs":" Simple and safe type conversions in to `Self`. It is the reciprocal of\n `Into`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":813490,"byte_end":813535,"line_start":307,"line_end":307,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2650},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":813653,"byte_end":813657,"line_start":311,"line_end":311,"column_start":8,"column_end":12},"name":"from","qualname":"::convert::From::from","value":"fn (_: T) -> Self","parent":{"krate":0,"index":2648},"children":[],"decl_id":null,"docs":" Simple and safe type conversions in to `Self`. It is the reciprocal of\n `Into`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":813490,"byte_end":813535,"line_start":307,"line_end":307,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2652},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":814252,"byte_end":814259,"line_start":326,"line_end":326,"column_start":11,"column_end":18},"name":"TryInto","qualname":"::convert::TryInto","value":"TryInto<T>: Sized","parent":null,"children":[{"krate":0,"index":2654},{"krate":0,"index":2656}],"decl_id":null,"docs":" An attempted conversion that consumes `self`, which may or may not be\n expensive.","sig":null,"attributes":[{"value":"stable(feature = \"try_from\", since = \"1.26.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":814192,"byte_end":814241,"line_start":325,"line_end":325,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":2654},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":814397,"byte_end":814402,"line_start":329,"line_end":329,"column_start":10,"column_end":15},"name":"Error","qualname":"::convert::TryInto::Error","value":"type Error;","parent":{"krate":0,"index":2652},"children":[],"decl_id":null,"docs":" The type returned in the event of a conversion error.\n","sig":null,"attributes":[{"value":"stable(feature = \"try_from\", since = \"1.26.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":814338,"byte_end":814387,"line_start":328,"line_end":328,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2656},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":814499,"byte_end":814507,"line_start":333,"line_end":333,"column_start":8,"column_end":16},"name":"try_into","qualname":"::convert::TryInto::try_into","value":"fn (self) -> Result<T, Self::Error>","parent":{"krate":0,"index":2652},"children":[],"decl_id":null,"docs":" An attempted conversion that consumes `self`, which may or may not be\n expensive.","sig":null,"attributes":[{"value":"stable(feature = \"try_from\", since = \"1.26.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":814192,"byte_end":814241,"line_start":325,"line_end":325,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":2658},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":814654,"byte_end":814661,"line_start":338,"line_end":338,"column_start":11,"column_end":18},"name":"TryFrom","qualname":"::convert::TryFrom","value":"TryFrom<T>: Sized","parent":null,"children":[{"krate":0,"index":2660},{"krate":0,"index":2662}],"decl_id":null,"docs":" Attempt to construct `Self` via a conversion.\n","sig":null,"attributes":[{"value":"stable(feature = \"try_from\", since = \"1.26.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":814594,"byte_end":814643,"line_start":337,"line_end":337,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":2660},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":814799,"byte_end":814804,"line_start":341,"line_end":341,"column_start":10,"column_end":15},"name":"Error","qualname":"::convert::TryFrom::Error","value":"type Error;","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" The type returned in the event of a conversion error.\n","sig":null,"attributes":[{"value":"stable(feature = \"try_from\", since = \"1.26.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":814740,"byte_end":814789,"line_start":340,"line_end":340,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2662},"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":814901,"byte_end":814909,"line_start":345,"line_end":345,"column_start":8,"column_end":16},"name":"try_from","qualname":"::convert::TryFrom::try_from","value":"fn (value: T) -> Result<Self, Self::Error>","parent":{"krate":0,"index":2658},"children":[],"decl_id":null,"docs":" Attempt to construct `Self` via a conversion.\n","sig":null,"attributes":[{"value":"stable(feature = \"try_from\", since = \"1.26.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":814594,"byte_end":814643,"line_start":337,"line_end":337,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":2708},"span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"borrow","qualname":"::borrow","value":"libcore/borrow.rs","parent":null,"children":[{"krate":0,"index":2710},{"krate":0,"index":2714},{"krate":0,"index":2718},{"krate":0,"index":2722},{"krate":0,"index":2726},{"krate":0,"index":2730},{"krate":0,"index":2734}],"decl_id":null,"docs":" A module for working with borrowed data.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":818316,"byte_end":818362,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":2710},"span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":824904,"byte_end":824910,"line_start":166,"line_end":166,"column_start":11,"column_end":17},"name":"Borrow","qualname":"::borrow::Borrow","value":"Borrow<Borrowed: ?Sized>","parent":null,"children":[{"krate":0,"index":2712}],"decl_id":null,"docs":" A trait for borrowing data.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":824848,"byte_end":824893,"line_start":165,"line_end":165,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2712},"span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":825361,"byte_end":825367,"line_start":187,"line_end":187,"column_start":8,"column_end":14},"name":"borrow","qualname":"::borrow::Borrow::borrow","value":"fn (&self) -> &Borrowed","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" A trait for borrowing data.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":824848,"byte_end":824893,"line_start":165,"line_end":165,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":2714},"span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":825737,"byte_end":825746,"line_start":198,"line_end":198,"column_start":11,"column_end":20},"name":"BorrowMut","qualname":"::borrow::BorrowMut","value":"BorrowMut<Borrowed: ?Sized>: Borrow<Borrowed>","parent":null,"children":[{"krate":0,"index":2716}],"decl_id":null,"docs":" A trait for mutably borrowing data.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":825681,"byte_end":825726,"line_start":197,"line_end":197,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2716},"span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":826172,"byte_end":826182,"line_start":215,"line_end":215,"column_start":8,"column_end":18},"name":"borrow_mut","qualname":"::borrow::BorrowMut::borrow_mut","value":"fn (&mut self) -> &mut Borrowed","parent":{"krate":0,"index":2714},"children":[],"decl_id":null,"docs":" A trait for mutably borrowing data.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":825681,"byte_end":825726,"line_start":197,"line_end":197,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2738},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"any","qualname":"::any","value":"libcore/any.rs","parent":null,"children":[{"krate":0,"index":2740},{"krate":0,"index":2742},{"krate":0,"index":2744},{"krate":0,"index":2748},{"krate":0,"index":2752},{"krate":0,"index":2756},{"krate":0,"index":2760},{"krate":0,"index":2768},{"krate":0,"index":35406},{"krate":0,"index":35444},{"krate":0,"index":35442},{"krate":0,"index":35436},{"krate":0,"index":35432},{"krate":0,"index":35420},{"krate":0,"index":35416},{"krate":0,"index":35412},{"krate":0,"index":35408},{"krate":0,"index":2776}],"decl_id":null,"docs":" This module implements the `Any` trait, which enables dynamic typing\n of any `'static` type through runtime reflection.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":829738,"byte_end":829784,"line_start":72,"line_end":72,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":2744},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":830275,"byte_end":830278,"line_start":88,"line_end":88,"column_start":11,"column_end":14},"name":"Any","qualname":"::any::Any","value":"Any: 'static","parent":null,"children":[{"krate":0,"index":2746}],"decl_id":null,"docs":" A type to emulate dynamic typing.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":830219,"byte_end":830264,"line_start":87,"line_end":87,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2746},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":830899,"byte_end":830910,"line_start":110,"line_end":110,"column_start":8,"column_end":19},"name":"get_type_id","qualname":"::any::Any::get_type_id","value":"fn (&self) -> TypeId","parent":{"krate":0,"index":2744},"children":[],"decl_id":null,"docs":" A type to emulate dynamic typing.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":830219,"byte_end":830264,"line_start":87,"line_end":87,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2762},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":832343,"byte_end":832345,"line_start":162,"line_end":162,"column_start":12,"column_end":14},"name":"is","qualname":"<Any>::is","value":"fn <T> (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2764},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":833310,"byte_end":833322,"line_start":196,"line_end":196,"column_start":12,"column_end":24},"name":"downcast_ref","qualname":"<Any>::downcast_ref","value":"fn <T> (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2766},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":834227,"byte_end":834239,"line_start":233,"line_end":233,"column_start":12,"column_end":24},"name":"downcast_mut","qualname":"<Any>::downcast_mut","value":"fn <T> (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2770},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":835023,"byte_end":835025,"line_start":267,"line_end":267,"column_start":12,"column_end":14},"name":"is","qualname":"<Any + Send>::is","value":"fn <T> (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2772},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":835718,"byte_end":835730,"line_start":293,"line_end":293,"column_start":12,"column_end":24},"name":"downcast_ref","qualname":"<Any + Send>::downcast_ref","value":"fn <T> (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2774},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":836463,"byte_end":836475,"line_start":323,"line_end":323,"column_start":12,"column_end":24},"name":"downcast_mut","qualname":"<Any + Send>::downcast_mut","value":"fn <T> (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":35406},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":837467,"byte_end":837473,"line_start":347,"line_end":347,"column_start":12,"column_end":18},"name":"TypeId","qualname":"::any::TypeId","value":"TypeId {  }","parent":null,"children":[{"krate":0,"index":20149}],"decl_id":null,"docs":" A `TypeId` represents a globally unique identifier for a type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":837410,"byte_end":837455,"line_start":346,"line_end":346,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":837456,"byte_end":837489,"line_start":347,"line_end":349,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":837456,"byte_end":837489,"line_start":347,"line_end":349,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":2778},"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":838106,"byte_end":838108,"line_start":371,"line_end":371,"column_start":18,"column_end":20},"name":"of","qualname":"<TypeId>::of","value":"fn <T> () -> TypeId","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2780},"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array","qualname":"::array","value":"libcore/array.rs","parent":null,"children":[{"krate":0,"index":2782},{"krate":0,"index":2788},{"krate":0,"index":2790},{"krate":0,"index":2792},{"krate":0,"index":2794},{"krate":0,"index":2800},{"krate":0,"index":2802},{"krate":0,"index":2808},{"krate":0,"index":2814},{"krate":0,"index":35448},{"krate":0,"index":35456},{"krate":0,"index":35454},{"krate":0,"index":35450},{"krate":0,"index":2820},{"krate":0,"index":2824},{"krate":0,"index":2828},{"krate":0,"index":2830},{"krate":0,"index":2832},{"krate":0,"index":35460},{"krate":0,"index":35464},{"krate":0,"index":35468},{"krate":0,"index":35472},{"krate":0,"index":35476},{"krate":0,"index":35482},{"krate":0,"index":35488},{"krate":0,"index":35492},{"krate":0,"index":35496},{"krate":0,"index":35504},{"krate":0,"index":37770},{"krate":0,"index":37782},{"krate":0,"index":37776},{"krate":0,"index":37794},{"krate":0,"index":37788},{"krate":0,"index":37806},{"krate":0,"index":37800},{"krate":0,"index":35512},{"krate":0,"index":35514},{"krate":0,"index":35526},{"krate":0,"index":35530},{"krate":0,"index":35534},{"krate":0,"index":35538},{"krate":0,"index":35542},{"krate":0,"index":35546},{"krate":0,"index":35552},{"krate":0,"index":35558},{"krate":0,"index":35562},{"krate":0,"index":35566},{"krate":0,"index":35574},{"krate":0,"index":37812},{"krate":0,"index":37824},{"krate":0,"index":37818},{"krate":0,"index":37836},{"krate":0,"index":37830},{"krate":0,"index":37848},{"krate":0,"index":37842},{"krate":0,"index":35582},{"krate":0,"index":35584},{"krate":0,"index":35596},{"krate":0,"index":35600},{"krate":0,"index":35604},{"krate":0,"index":35608},{"krate":0,"index":35612},{"krate":0,"index":35616},{"krate":0,"index":35622},{"krate":0,"index":35628},{"krate":0,"index":35632},{"krate":0,"index":35636},{"krate":0,"index":35644},{"krate":0,"index":37854},{"krate":0,"index":37866},{"krate":0,"index":37860},{"krate":0,"index":37878},{"krate":0,"index":37872},{"krate":0,"index":37890},{"krate":0,"index":37884},{"krate":0,"index":35652},{"krate":0,"index":35654},{"krate":0,"index":35666},{"krate":0,"index":35670},{"krate":0,"index":35674},{"krate":0,"index":35678},{"krate":0,"index":35682},{"krate":0,"index":35686},{"krate":0,"index":35692},{"krate":0,"index":35698},{"krate":0,"index":35702},{"krate":0,"index":35706},{"krate":0,"index":35714},{"krate":0,"index":37896},{"krate":0,"index":37908},{"krate":0,"index":37902},{"krate":0,"index":37920},{"krate":0,"index":37914},{"krate":0,"index":37932},{"krate":0,"index":37926},{"krate":0,"index":35722},{"krate":0,"index":35724},{"krate":0,"index":35736},{"krate":0,"index":35740},{"krate":0,"index":35744},{"krate":0,"index":35748},{"krate":0,"index":35752},{"krate":0,"index":35756},{"krate":0,"index":35762},{"krate":0,"index":35768},{"krate":0,"index":35772},{"krate":0,"index":35776},{"krate":0,"index":35784},{"krate":0,"index":37938},{"krate":0,"index":37950},{"krate":0,"index":37944},{"krate":0,"index":37962},{"krate":0,"index":37956},{"krate":0,"index":37974},{"krate":0,"index":37968},{"krate":0,"index":35792},{"krate":0,"index":35794},{"krate":0,"index":35806},{"krate":0,"index":35810},{"krate":0,"index":35814},{"krate":0,"index":35818},{"krate":0,"index":35822},{"krate":0,"index":35826},{"krate":0,"index":35832},{"krate":0,"index":35838},{"krate":0,"index":35842},{"krate":0,"index":35846},{"krate":0,"index":35854},{"krate":0,"index":37980},{"krate":0,"index":37992},{"krate":0,"index":37986},{"krate":0,"index":38004},{"krate":0,"index":37998},{"krate":0,"index":38016},{"krate":0,"index":38010},{"krate":0,"index":35862},{"krate":0,"index":35864},{"krate":0,"index":35876},{"krate":0,"index":35880},{"krate":0,"index":35884},{"krate":0,"index":35888},{"krate":0,"index":35892},{"krate":0,"index":35896},{"krate":0,"index":35902},{"krate":0,"index":35908},{"krate":0,"index":35912},{"krate":0,"index":35916},{"krate":0,"index":35924},{"krate":0,"index":38022},{"krate":0,"index":38034},{"krate":0,"index":38028},{"krate":0,"index":38046},{"krate":0,"index":38040},{"krate":0,"index":38058},{"krate":0,"index":38052},{"krate":0,"index":35932},{"krate":0,"index":35934},{"krate":0,"index":35946},{"krate":0,"index":35950},{"krate":0,"index":35954},{"krate":0,"index":35958},{"krate":0,"index":35962},{"krate":0,"index":35966},{"krate":0,"index":35972},{"krate":0,"index":35978},{"krate":0,"index":35982},{"krate":0,"index":35986},{"krate":0,"index":35994},{"krate":0,"index":38064},{"krate":0,"index":38076},{"krate":0,"index":38070},{"krate":0,"index":38088},{"krate":0,"index":38082},{"krate":0,"index":38100},{"krate":0,"index":38094},{"krate":0,"index":36002},{"krate":0,"index":36004},{"krate":0,"index":36016},{"krate":0,"index":36020},{"krate":0,"index":36024},{"krate":0,"index":36028},{"krate":0,"index":36032},{"krate":0,"index":36036},{"krate":0,"index":36042},{"krate":0,"index":36048},{"krate":0,"index":36052},{"krate":0,"index":36056},{"krate":0,"index":36064},{"krate":0,"index":38106},{"krate":0,"index":38118},{"krate":0,"index":38112},{"krate":0,"index":38130},{"krate":0,"index":38124},{"krate":0,"index":38142},{"krate":0,"index":38136},{"krate":0,"index":36072},{"krate":0,"index":36074},{"krate":0,"index":36086},{"krate":0,"index":36090},{"krate":0,"index":36094},{"krate":0,"index":36098},{"krate":0,"index":36102},{"krate":0,"index":36106},{"krate":0,"index":36112},{"krate":0,"index":36118},{"krate":0,"index":36122},{"krate":0,"index":36126},{"krate":0,"index":36134},{"krate":0,"index":38148},{"krate":0,"index":38160},{"krate":0,"index":38154},{"krate":0,"index":38172},{"krate":0,"index":38166},{"krate":0,"index":38184},{"krate":0,"index":38178},{"krate":0,"index":36142},{"krate":0,"index":36144},{"krate":0,"index":36156},{"krate":0,"index":36160},{"krate":0,"index":36164},{"krate":0,"index":36168},{"krate":0,"index":36172},{"krate":0,"index":36176},{"krate":0,"index":36182},{"krate":0,"index":36188},{"krate":0,"index":36192},{"krate":0,"index":36196},{"krate":0,"index":36204},{"krate":0,"index":38190},{"krate":0,"index":38202},{"krate":0,"index":38196},{"krate":0,"index":38214},{"krate":0,"index":38208},{"krate":0,"index":38226},{"krate":0,"index":38220},{"krate":0,"index":36212},{"krate":0,"index":36214},{"krate":0,"index":36226},{"krate":0,"index":36230},{"krate":0,"index":36234},{"krate":0,"index":36238},{"krate":0,"index":36242},{"krate":0,"index":36246},{"krate":0,"index":36252},{"krate":0,"index":36258},{"krate":0,"index":36262},{"krate":0,"index":36266},{"krate":0,"index":36274},{"krate":0,"index":38232},{"krate":0,"index":38244},{"krate":0,"index":38238},{"krate":0,"index":38256},{"krate":0,"index":38250},{"krate":0,"index":38268},{"krate":0,"index":38262},{"krate":0,"index":36282},{"krate":0,"index":36284},{"krate":0,"index":36296},{"krate":0,"index":36300},{"krate":0,"index":36304},{"krate":0,"index":36308},{"krate":0,"index":36312},{"krate":0,"index":36316},{"krate":0,"index":36322},{"krate":0,"index":36328},{"krate":0,"index":36332},{"krate":0,"index":36336},{"krate":0,"index":36344},{"krate":0,"index":38274},{"krate":0,"index":38286},{"krate":0,"index":38280},{"krate":0,"index":38298},{"krate":0,"index":38292},{"krate":0,"index":38310},{"krate":0,"index":38304},{"krate":0,"index":36352},{"krate":0,"index":36354},{"krate":0,"index":36366},{"krate":0,"index":36370},{"krate":0,"index":36374},{"krate":0,"index":36378},{"krate":0,"index":36382},{"krate":0,"index":36386},{"krate":0,"index":36392},{"krate":0,"index":36398},{"krate":0,"index":36402},{"krate":0,"index":36406},{"krate":0,"index":36414},{"krate":0,"index":38316},{"krate":0,"index":38328},{"krate":0,"index":38322},{"krate":0,"index":38340},{"krate":0,"index":38334},{"krate":0,"index":38352},{"krate":0,"index":38346},{"krate":0,"index":36422},{"krate":0,"index":36424},{"krate":0,"index":36436},{"krate":0,"index":36440},{"krate":0,"index":36444},{"krate":0,"index":36448},{"krate":0,"index":36452},{"krate":0,"index":36456},{"krate":0,"index":36462},{"krate":0,"index":36468},{"krate":0,"index":36472},{"krate":0,"index":36476},{"krate":0,"index":36484},{"krate":0,"index":38358},{"krate":0,"index":38370},{"krate":0,"index":38364},{"krate":0,"index":38382},{"krate":0,"index":38376},{"krate":0,"index":38394},{"krate":0,"index":38388},{"krate":0,"index":36492},{"krate":0,"index":36494},{"krate":0,"index":36506},{"krate":0,"index":36510},{"krate":0,"index":36514},{"krate":0,"index":36518},{"krate":0,"index":36522},{"krate":0,"index":36526},{"krate":0,"index":36532},{"krate":0,"index":36538},{"krate":0,"index":36542},{"krate":0,"index":36546},{"krate":0,"index":36554},{"krate":0,"index":38400},{"krate":0,"index":38412},{"krate":0,"index":38406},{"krate":0,"index":38424},{"krate":0,"index":38418},{"krate":0,"index":38436},{"krate":0,"index":38430},{"krate":0,"index":36562},{"krate":0,"index":36564},{"krate":0,"index":36576},{"krate":0,"index":36580},{"krate":0,"index":36584},{"krate":0,"index":36588},{"krate":0,"index":36592},{"krate":0,"index":36596},{"krate":0,"index":36602},{"krate":0,"index":36608},{"krate":0,"index":36612},{"krate":0,"index":36616},{"krate":0,"index":36624},{"krate":0,"index":38442},{"krate":0,"index":38454},{"krate":0,"index":38448},{"krate":0,"index":38466},{"krate":0,"index":38460},{"krate":0,"index":38478},{"krate":0,"index":38472},{"krate":0,"index":36632},{"krate":0,"index":36634},{"krate":0,"index":36646},{"krate":0,"index":36650},{"krate":0,"index":36654},{"krate":0,"index":36658},{"krate":0,"index":36662},{"krate":0,"index":36666},{"krate":0,"index":36672},{"krate":0,"index":36678},{"krate":0,"index":36682},{"krate":0,"index":36686},{"krate":0,"index":36694},{"krate":0,"index":38484},{"krate":0,"index":38496},{"krate":0,"index":38490},{"krate":0,"index":38508},{"krate":0,"index":38502},{"krate":0,"index":38520},{"krate":0,"index":38514},{"krate":0,"index":36702},{"krate":0,"index":36704},{"krate":0,"index":36716},{"krate":0,"index":36720},{"krate":0,"index":36724},{"krate":0,"index":36728},{"krate":0,"index":36732},{"krate":0,"index":36736},{"krate":0,"index":36742},{"krate":0,"index":36748},{"krate":0,"index":36752},{"krate":0,"index":36756},{"krate":0,"index":36764},{"krate":0,"index":38526},{"krate":0,"index":38538},{"krate":0,"index":38532},{"krate":0,"index":38550},{"krate":0,"index":38544},{"krate":0,"index":38562},{"krate":0,"index":38556},{"krate":0,"index":36772},{"krate":0,"index":36774},{"krate":0,"index":36786},{"krate":0,"index":36790},{"krate":0,"index":36794},{"krate":0,"index":36798},{"krate":0,"index":36802},{"krate":0,"index":36806},{"krate":0,"index":36812},{"krate":0,"index":36818},{"krate":0,"index":36822},{"krate":0,"index":36826},{"krate":0,"index":36834},{"krate":0,"index":38568},{"krate":0,"index":38580},{"krate":0,"index":38574},{"krate":0,"index":38592},{"krate":0,"index":38586},{"krate":0,"index":38604},{"krate":0,"index":38598},{"krate":0,"index":36842},{"krate":0,"index":36844},{"krate":0,"index":36856},{"krate":0,"index":36860},{"krate":0,"index":36864},{"krate":0,"index":36868},{"krate":0,"index":36872},{"krate":0,"index":36876},{"krate":0,"index":36882},{"krate":0,"index":36888},{"krate":0,"index":36892},{"krate":0,"index":36896},{"krate":0,"index":36904},{"krate":0,"index":38610},{"krate":0,"index":38622},{"krate":0,"index":38616},{"krate":0,"index":38634},{"krate":0,"index":38628},{"krate":0,"index":38646},{"krate":0,"index":38640},{"krate":0,"index":36912},{"krate":0,"index":36914},{"krate":0,"index":36926},{"krate":0,"index":36930},{"krate":0,"index":36934},{"krate":0,"index":36938},{"krate":0,"index":36942},{"krate":0,"index":36946},{"krate":0,"index":36952},{"krate":0,"index":36958},{"krate":0,"index":36962},{"krate":0,"index":36966},{"krate":0,"index":36974},{"krate":0,"index":38652},{"krate":0,"index":38664},{"krate":0,"index":38658},{"krate":0,"index":38676},{"krate":0,"index":38670},{"krate":0,"index":38688},{"krate":0,"index":38682},{"krate":0,"index":36982},{"krate":0,"index":36984},{"krate":0,"index":36996},{"krate":0,"index":37000},{"krate":0,"index":37004},{"krate":0,"index":37008},{"krate":0,"index":37012},{"krate":0,"index":37016},{"krate":0,"index":37022},{"krate":0,"index":37028},{"krate":0,"index":37032},{"krate":0,"index":37036},{"krate":0,"index":37044},{"krate":0,"index":38694},{"krate":0,"index":38706},{"krate":0,"index":38700},{"krate":0,"index":38718},{"krate":0,"index":38712},{"krate":0,"index":38730},{"krate":0,"index":38724},{"krate":0,"index":37052},{"krate":0,"index":37054},{"krate":0,"index":37066},{"krate":0,"index":37070},{"krate":0,"index":37074},{"krate":0,"index":37078},{"krate":0,"index":37082},{"krate":0,"index":37086},{"krate":0,"index":37092},{"krate":0,"index":37098},{"krate":0,"index":37102},{"krate":0,"index":37106},{"krate":0,"index":37114},{"krate":0,"index":38736},{"krate":0,"index":38748},{"krate":0,"index":38742},{"krate":0,"index":38760},{"krate":0,"index":38754},{"krate":0,"index":38772},{"krate":0,"index":38766},{"krate":0,"index":37122},{"krate":0,"index":37124},{"krate":0,"index":37136},{"krate":0,"index":37140},{"krate":0,"index":37144},{"krate":0,"index":37148},{"krate":0,"index":37152},{"krate":0,"index":37156},{"krate":0,"index":37162},{"krate":0,"index":37168},{"krate":0,"index":37172},{"krate":0,"index":37176},{"krate":0,"index":37184},{"krate":0,"index":38778},{"krate":0,"index":38790},{"krate":0,"index":38784},{"krate":0,"index":38802},{"krate":0,"index":38796},{"krate":0,"index":38814},{"krate":0,"index":38808},{"krate":0,"index":37192},{"krate":0,"index":37194},{"krate":0,"index":37206},{"krate":0,"index":37210},{"krate":0,"index":37214},{"krate":0,"index":37218},{"krate":0,"index":37222},{"krate":0,"index":37226},{"krate":0,"index":37232},{"krate":0,"index":37238},{"krate":0,"index":37242},{"krate":0,"index":37246},{"krate":0,"index":37254},{"krate":0,"index":38820},{"krate":0,"index":38832},{"krate":0,"index":38826},{"krate":0,"index":38844},{"krate":0,"index":38838},{"krate":0,"index":38856},{"krate":0,"index":38850},{"krate":0,"index":37262},{"krate":0,"index":37264},{"krate":0,"index":37276},{"krate":0,"index":37280},{"krate":0,"index":37284},{"krate":0,"index":37288},{"krate":0,"index":37292},{"krate":0,"index":37296},{"krate":0,"index":37302},{"krate":0,"index":37308},{"krate":0,"index":37312},{"krate":0,"index":37316},{"krate":0,"index":37324},{"krate":0,"index":38862},{"krate":0,"index":38874},{"krate":0,"index":38868},{"krate":0,"index":38886},{"krate":0,"index":38880},{"krate":0,"index":38898},{"krate":0,"index":38892},{"krate":0,"index":37332},{"krate":0,"index":37334},{"krate":0,"index":37346},{"krate":0,"index":37350},{"krate":0,"index":37354},{"krate":0,"index":37358},{"krate":0,"index":37362},{"krate":0,"index":37366},{"krate":0,"index":37372},{"krate":0,"index":37378},{"krate":0,"index":37382},{"krate":0,"index":37386},{"krate":0,"index":37394},{"krate":0,"index":38904},{"krate":0,"index":38916},{"krate":0,"index":38910},{"krate":0,"index":38928},{"krate":0,"index":38922},{"krate":0,"index":38940},{"krate":0,"index":38934},{"krate":0,"index":37402},{"krate":0,"index":37404},{"krate":0,"index":37416},{"krate":0,"index":37420},{"krate":0,"index":37424},{"krate":0,"index":37428},{"krate":0,"index":37432},{"krate":0,"index":37436},{"krate":0,"index":37442},{"krate":0,"index":37448},{"krate":0,"index":37452},{"krate":0,"index":37456},{"krate":0,"index":37464},{"krate":0,"index":38946},{"krate":0,"index":38958},{"krate":0,"index":38952},{"krate":0,"index":38970},{"krate":0,"index":38964},{"krate":0,"index":38982},{"krate":0,"index":38976},{"krate":0,"index":37472},{"krate":0,"index":37474},{"krate":0,"index":37486},{"krate":0,"index":37490},{"krate":0,"index":37494},{"krate":0,"index":37498},{"krate":0,"index":37502},{"krate":0,"index":37506},{"krate":0,"index":37512},{"krate":0,"index":37518},{"krate":0,"index":37522},{"krate":0,"index":37526},{"krate":0,"index":37534},{"krate":0,"index":38988},{"krate":0,"index":39000},{"krate":0,"index":38994},{"krate":0,"index":39012},{"krate":0,"index":39006},{"krate":0,"index":39024},{"krate":0,"index":39018},{"krate":0,"index":37542},{"krate":0,"index":37544},{"krate":0,"index":37556},{"krate":0,"index":37560},{"krate":0,"index":37564},{"krate":0,"index":37568},{"krate":0,"index":37572},{"krate":0,"index":37576},{"krate":0,"index":37582},{"krate":0,"index":37588},{"krate":0,"index":37592},{"krate":0,"index":37596},{"krate":0,"index":37604},{"krate":0,"index":39030},{"krate":0,"index":39042},{"krate":0,"index":39036},{"krate":0,"index":39054},{"krate":0,"index":39048},{"krate":0,"index":39066},{"krate":0,"index":39060},{"krate":0,"index":37612},{"krate":0,"index":37614},{"krate":0,"index":37626},{"krate":0,"index":37630},{"krate":0,"index":37634},{"krate":0,"index":37638},{"krate":0,"index":37642},{"krate":0,"index":37646},{"krate":0,"index":37652},{"krate":0,"index":37658},{"krate":0,"index":37662},{"krate":0,"index":37666},{"krate":0,"index":37674},{"krate":0,"index":39072},{"krate":0,"index":39084},{"krate":0,"index":39078},{"krate":0,"index":39096},{"krate":0,"index":39090},{"krate":0,"index":39108},{"krate":0,"index":39102},{"krate":0,"index":37682},{"krate":0,"index":37684},{"krate":0,"index":37696},{"krate":0,"index":37700},{"krate":0,"index":37704},{"krate":0,"index":37708},{"krate":0,"index":37712},{"krate":0,"index":37716},{"krate":0,"index":37722},{"krate":0,"index":37728},{"krate":0,"index":37732},{"krate":0,"index":37736},{"krate":0,"index":37744},{"krate":0,"index":39114},{"krate":0,"index":39126},{"krate":0,"index":39120},{"krate":0,"index":39138},{"krate":0,"index":39132},{"krate":0,"index":39150},{"krate":0,"index":39144},{"krate":0,"index":37752},{"krate":0,"index":37754},{"krate":0,"index":37766},{"krate":0,"index":2834},{"krate":0,"index":39156},{"krate":0,"index":39160},{"krate":0,"index":39164},{"krate":0,"index":39168},{"krate":0,"index":39172},{"krate":0,"index":39176},{"krate":0,"index":39180},{"krate":0,"index":39184},{"krate":0,"index":39188},{"krate":0,"index":39192},{"krate":0,"index":39196},{"krate":0,"index":39200},{"krate":0,"index":39204},{"krate":0,"index":39208},{"krate":0,"index":39212},{"krate":0,"index":39216},{"krate":0,"index":39220},{"krate":0,"index":39224},{"krate":0,"index":39228},{"krate":0,"index":39232},{"krate":0,"index":39236},{"krate":0,"index":39240},{"krate":0,"index":39244},{"krate":0,"index":39248},{"krate":0,"index":39252},{"krate":0,"index":39256},{"krate":0,"index":39260},{"krate":0,"index":39264},{"krate":0,"index":39268},{"krate":0,"index":39272},{"krate":0,"index":39276},{"krate":0,"index":39280},{"krate":0,"index":39284}],"decl_id":null,"docs":" Implementations of things like `Eq` for fixed-length arrays\n up to a certain length. Eventually we should able to generalize\n to all lengths.","sig":null,"attributes":[{"value":"unstable(feature = \"fixed_size_array\",\n           reason =\n               \"traits and impls are better expressed through generic integer constants\",\n           issue = \"27778\")","span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":838933,"byte_end":839124,"line_start":17,"line_end":20,"column_start":1,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":2808},"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":839895,"byte_end":839909,"line_start":43,"line_end":43,"column_start":18,"column_end":32},"name":"FixedSizeArray","qualname":"::array::FixedSizeArray","value":"FixedSizeArray<T>","parent":null,"children":[{"krate":0,"index":2810},{"krate":0,"index":2812}],"decl_id":null,"docs":" Utility trait implemented only on arrays of fixed size","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2810},"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":839968,"byte_end":839976,"line_start":45,"line_end":45,"column_start":8,"column_end":16},"name":"as_slice","qualname":"::array::FixedSizeArray::as_slice","value":"fn (&self) -> &[T]","parent":{"krate":0,"index":2808},"children":[],"decl_id":null,"docs":" Utility trait implemented only on arrays of fixed size","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2812},"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":840044,"byte_end":840056,"line_start":47,"line_end":47,"column_start":8,"column_end":20},"name":"as_mut_slice","qualname":"::array::FixedSizeArray::as_mut_slice","value":"fn (&mut self) -> &mut [T]","parent":{"krate":0,"index":2808},"children":[],"decl_id":null,"docs":" Utility trait implemented only on arrays of fixed size","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":35448},"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":840457,"byte_end":840474,"line_start":64,"line_end":64,"column_start":12,"column_end":29},"name":"TryFromSliceError","qualname":"::array::TryFromSliceError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type returned when a conversion from a slice to an array fails.\n","sig":null,"attributes":[{"value":"stable(feature = \"try_from\", since = \"1.26.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":840366,"byte_end":840415,"line_start":62,"line_end":62,"column_start":1,"column_end":50}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":840446,"byte_end":840479,"line_start":64,"line_end":64,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2826},"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":840923,"byte_end":840936,"line_start":80,"line_end":80,"column_start":12,"column_end":25},"name":"__description","qualname":"<TryFromSliceError>::__description","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2836},"span":{"file_name":[108,105,98,99,111,114,101,47,97,115,99,105,105,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ascii","qualname":"::ascii","value":"libcore/ascii.rs","parent":null,"children":[{"krate":0,"index":2838},{"krate":0,"index":2840},{"krate":0,"index":2842},{"krate":0,"index":2844},{"krate":0,"index":2846},{"krate":0,"index":2850},{"krate":0,"index":2858},{"krate":0,"index":2862},{"krate":0,"index":2864},{"krate":0,"index":2866}],"decl_id":null,"docs":" Operations on ASCII strings and characters.","sig":null,"attributes":[{"value":"stable(feature = \"core_ascii\", since = \"1.26.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,97,115,99,105,105,46,114,115],"byte_start":848899,"byte_end":848951,"line_start":22,"line_end":22,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":2844},"span":{"file_name":[108,105,98,99,111,114,101,47,97,115,99,105,105,46,114,115],"byte_start":849269,"byte_end":849282,"line_start":35,"line_end":35,"column_start":12,"column_end":25},"name":"EscapeDefault","qualname":"::ascii::EscapeDefault","value":"EscapeDefault {  }","parent":null,"children":[{"krate":0,"index":1587},{"krate":0,"index":1589}],"decl_id":null,"docs":" An iterator over the escaped version of a byte.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,97,115,99,105,105,46,114,115],"byte_start":849212,"byte_end":849257,"line_start":34,"line_end":34,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":2846},"span":{"file_name":[108,105,98,99,111,114,101,47,97,115,99,105,105,46,114,115],"byte_start":851429,"byte_end":851443,"line_start":103,"line_end":103,"column_start":8,"column_end":22},"name":"escape_default","qualname":"::ascii::escape_default","value":"fn (c: u8) -> EscapeDefault","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that produces an escaped version of a `u8`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,97,115,99,105,105,46,114,115],"byte_start":851376,"byte_end":851421,"line_start":102,"line_end":102,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2870},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sync","qualname":"::sync","value":"libcore/sync/mod.rs","parent":null,"children":[{"krate":0,"index":2872}],"decl_id":null,"docs":" Synchronization primitives\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,109,111,100,46,114,115],"byte_start":853393,"byte_end":853439,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":2872},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"atomic","qualname":"::sync::atomic","value":"libcore/sync/atomic.rs","parent":null,"children":[{"krate":0,"index":2874},{"krate":0,"index":2876},{"krate":0,"index":2878},{"krate":0,"index":2880},{"krate":0,"index":2882},{"krate":0,"index":2884},{"krate":0,"index":2886},{"krate":0,"index":2890},{"krate":0,"index":2892},{"krate":0,"index":2894},{"krate":0,"index":2898},{"krate":0,"index":2900},{"krate":0,"index":39288},{"krate":0,"index":39298},{"krate":0,"index":39294},{"krate":0,"index":39290},{"krate":0,"index":2902},{"krate":0,"index":2904},{"krate":0,"index":2932},{"krate":0,"index":2952},{"krate":0,"index":2956},{"krate":0,"index":2960},{"krate":0,"index":39300},{"krate":0,"index":39302},{"krate":0,"index":39304},{"krate":0,"index":39308},{"krate":0,"index":39312},{"krate":0,"index":39316},{"krate":0,"index":39318},{"krate":0,"index":39356},{"krate":0,"index":39358},{"krate":0,"index":39360},{"krate":0,"index":39364},{"krate":0,"index":39368},{"krate":0,"index":39372},{"krate":0,"index":39374},{"krate":0,"index":39412},{"krate":0,"index":39414},{"krate":0,"index":39416},{"krate":0,"index":39420},{"krate":0,"index":39424},{"krate":0,"index":39428},{"krate":0,"index":39430},{"krate":0,"index":39468},{"krate":0,"index":39470},{"krate":0,"index":39472},{"krate":0,"index":39476},{"krate":0,"index":39480},{"krate":0,"index":39484},{"krate":0,"index":39486},{"krate":0,"index":39524},{"krate":0,"index":39526},{"krate":0,"index":39528},{"krate":0,"index":39532},{"krate":0,"index":39536},{"krate":0,"index":39540},{"krate":0,"index":39542},{"krate":0,"index":39580},{"krate":0,"index":39582},{"krate":0,"index":39584},{"krate":0,"index":39588},{"krate":0,"index":39592},{"krate":0,"index":39596},{"krate":0,"index":39598},{"krate":0,"index":39636},{"krate":0,"index":39638},{"krate":0,"index":39640},{"krate":0,"index":39644},{"krate":0,"index":39648},{"krate":0,"index":39652},{"krate":0,"index":39654},{"krate":0,"index":39692},{"krate":0,"index":39694},{"krate":0,"index":39696},{"krate":0,"index":39700},{"krate":0,"index":39704},{"krate":0,"index":39708},{"krate":0,"index":39710},{"krate":0,"index":39748},{"krate":0,"index":39750},{"krate":0,"index":39752},{"krate":0,"index":39756},{"krate":0,"index":39760},{"krate":0,"index":39764},{"krate":0,"index":39766},{"krate":0,"index":39804},{"krate":0,"index":39806},{"krate":0,"index":39808},{"krate":0,"index":39812},{"krate":0,"index":39816},{"krate":0,"index":39820},{"krate":0,"index":39822},{"krate":0,"index":2962},{"krate":0,"index":2964},{"krate":0,"index":2966},{"krate":0,"index":2968},{"krate":0,"index":2970},{"krate":0,"index":2972},{"krate":0,"index":2974},{"krate":0,"index":2976},{"krate":0,"index":2978},{"krate":0,"index":2980},{"krate":0,"index":2982},{"krate":0,"index":2984},{"krate":0,"index":2986},{"krate":0,"index":2988},{"krate":0,"index":2990},{"krate":0,"index":2992},{"krate":0,"index":2994},{"krate":0,"index":2996},{"krate":0,"index":2998},{"krate":0,"index":3002},{"krate":0,"index":3006}],"decl_id":null,"docs":" Atomic types","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":856608,"byte_end":856654,"line_start":87,"line_end":87,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":2882},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":857361,"byte_end":857375,"line_start":108,"line_end":108,"column_start":8,"column_end":22},"name":"spin_loop_hint","qualname":"::sync::atomic::spin_loop_hint","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" Save power or switch hyperthreads in a busy-wait spin-loop.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":857288,"byte_end":857297,"line_start":106,"line_end":106,"column_start":1,"column_end":10}},{"value":"stable(feature = \"spin_loop_hint\", since = \"1.24.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":857298,"byte_end":857353,"line_start":107,"line_end":107,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":2884},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":857891,"byte_end":857901,"line_start":127,"line_end":127,"column_start":12,"column_end":22},"name":"AtomicBool","qualname":"::sync::atomic::AtomicBool","value":"AtomicBool {  }","parent":null,"children":[{"krate":0,"index":1597}],"decl_id":null,"docs":" A boolean type which can be safely shared between threads.","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":857802,"byte_end":857833,"line_start":125,"line_end":125,"column_start":1,"column_end":32}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":857834,"byte_end":857879,"line_start":126,"line_end":126,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2892},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":858548,"byte_end":858557,"line_start":150,"line_end":150,"column_start":12,"column_end":21},"name":"AtomicPtr","qualname":"::sync::atomic::AtomicPtr","value":"AtomicPtr {  }","parent":null,"children":[{"krate":0,"index":1599}],"decl_id":null,"docs":" A raw pointer type which can be safely shared between threads.","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":858457,"byte_end":858490,"line_start":148,"line_end":148,"column_start":1,"column_end":34}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":858491,"byte_end":858536,"line_start":149,"line_end":149,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":25965},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":860022,"byte_end":860029,"line_start":193,"line_end":193,"column_start":5,"column_end":12},"name":"Relaxed","qualname":"::sync::atomic::Ordering::Relaxed","value":"Ordering::Relaxed","parent":{"krate":0,"index":39288},"children":[],"decl_id":null,"docs":" No ordering constraints, only atomic operations.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":859972,"byte_end":860017,"line_start":192,"line_end":192,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":25967},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":860328,"byte_end":860335,"line_start":200,"line_end":200,"column_start":5,"column_end":12},"name":"Release","qualname":"::sync::atomic::Ordering::Release","value":"Ordering::Release","parent":{"krate":0,"index":39288},"children":[],"decl_id":null,"docs":" When coupled with a store, all previous writes become visible\n to the other threads that perform a load with [`Acquire`] ordering\n on the same value.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":860278,"byte_end":860323,"line_start":199,"line_end":199,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":25969},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":860632,"byte_end":860639,"line_start":207,"line_end":207,"column_start":5,"column_end":12},"name":"Acquire","qualname":"::sync::atomic::Ordering::Acquire","value":"Ordering::Acquire","parent":{"krate":0,"index":39288},"children":[],"decl_id":null,"docs":" When coupled with a load, all subsequent loads will see data\n written before a store with [`Release`] ordering on the same value\n in other threads.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":860582,"byte_end":860627,"line_start":206,"line_end":206,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":25971},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861100,"byte_end":861106,"line_start":217,"line_end":217,"column_start":5,"column_end":11},"name":"AcqRel","qualname":"::sync::atomic::Ordering::AcqRel","value":"Ordering::AcqRel","parent":{"krate":0,"index":39288},"children":[],"decl_id":null,"docs":" Has the effects of both [`Acquire`] and [`Release`] together.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861050,"byte_end":861095,"line_start":216,"line_end":216,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":25973},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861301,"byte_end":861307,"line_start":221,"line_end":221,"column_start":5,"column_end":11},"name":"SeqCst","qualname":"::sync::atomic::Ordering::SeqCst","value":"Ordering::SeqCst","parent":{"krate":0,"index":39288},"children":[],"decl_id":null,"docs":" Like `AcqRel` with the additional guarantee that all threads see all\n sequentially consistent operations in the same order.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861251,"byte_end":861296,"line_start":220,"line_end":220,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":25975},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861463,"byte_end":861478,"line_start":225,"line_end":225,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::sync::atomic::Ordering::__Nonexhaustive","value":"Ordering::__Nonexhaustive","parent":{"krate":0,"index":39288},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"future_atomic_orderings\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861397,"byte_end":861458,"line_start":224,"line_end":224,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":39288},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":859763,"byte_end":859771,"line_start":186,"line_end":186,"column_start":10,"column_end":18},"name":"Ordering","qualname":"::sync::atomic::Ordering","value":"Ordering::{Relaxed, Release, Acquire, AcqRel, SeqCst, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":25965},{"krate":0,"index":25967},{"krate":0,"index":25969},{"krate":0,"index":25971},{"krate":0,"index":25973},{"krate":0,"index":25975}],"decl_id":null,"docs":" Atomic memory orderings","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":859678,"byte_end":859723,"line_start":184,"line_end":184,"column_start":1,"column_end":46}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":859754,"byte_end":861481,"line_start":186,"line_end":226,"column_start":1,"column_end":2}}]},{"kind":"Const","id":{"krate":0,"index":2902},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861664,"byte_end":861680,"line_start":233,"line_end":233,"column_start":11,"column_end":27},"name":"ATOMIC_BOOL_INIT","qualname":"::sync::atomic::ATOMIC_BOOL_INIT","value":"AtomicBool","parent":null,"children":[],"decl_id":null,"docs":" An [`AtomicBool`] initialized to `false`.","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861576,"byte_end":861607,"line_start":231,"line_end":231,"column_start":1,"column_end":32}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861608,"byte_end":861653,"line_start":232,"line_end":232,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2906},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":862098,"byte_end":862101,"line_start":249,"line_end":249,"column_start":18,"column_end":21},"name":"new","qualname":"<AtomicBool>::new","value":"fn (v: bool) -> AtomicBool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861720,"byte_end":861751,"line_start":235,"line_end":235,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2908},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":862856,"byte_end":862863,"line_start":272,"line_end":272,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AtomicBool>::get_mut","value":"fn (&mut self) -> &mut bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861720,"byte_end":861751,"line_start":235,"line_end":235,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2910},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":863448,"byte_end":863458,"line_start":291,"line_end":291,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<AtomicBool>::into_inner","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861720,"byte_end":861751,"line_start":235,"line_end":235,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2912},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":864230,"byte_end":864234,"line_start":319,"line_end":319,"column_start":12,"column_end":16},"name":"load","qualname":"<AtomicBool>::load","value":"fn (&self, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861720,"byte_end":861751,"line_start":235,"line_end":235,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2914},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":865110,"byte_end":865115,"line_start":349,"line_end":349,"column_start":12,"column_end":17},"name":"store","qualname":"<AtomicBool>::store","value":"fn (&self, val: bool, order: Ordering) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861720,"byte_end":861751,"line_start":235,"line_end":235,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2916},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":865861,"byte_end":865865,"line_start":374,"line_end":374,"column_start":12,"column_end":16},"name":"swap","qualname":"<AtomicBool>::swap","value":"fn (&self, val: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861720,"byte_end":861751,"line_start":235,"line_end":235,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2918},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":867002,"byte_end":867018,"line_start":404,"line_end":404,"column_start":12,"column_end":28},"name":"compare_and_swap","qualname":"<AtomicBool>::compare_and_swap","value":"fn (&self, current: bool, new: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861720,"byte_end":861751,"line_start":235,"line_end":235,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2920},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":869044,"byte_end":869060,"line_start":449,"line_end":449,"column_start":12,"column_end":28},"name":"compare_exchange","qualname":"<AtomicBool>::compare_exchange","value":"fn (&self, current: bool, new: bool, success: Ordering, failure: Ordering) -> Result<bool, bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861720,"byte_end":861751,"line_start":235,"line_end":235,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2922},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":871147,"byte_end":871168,"line_start":500,"line_end":500,"column_start":12,"column_end":33},"name":"compare_exchange_weak","qualname":"<AtomicBool>::compare_exchange_weak","value":"fn (&self, current: bool, new: bool, success: Ordering, failure: Ordering) -> Result<bool, bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861720,"byte_end":861751,"line_start":235,"line_end":235,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2924},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":872577,"byte_end":872586,"line_start":540,"line_end":540,"column_start":12,"column_end":21},"name":"fetch_and","qualname":"<AtomicBool>::fetch_and","value":"fn (&self, val: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861720,"byte_end":861751,"line_start":235,"line_end":235,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2926},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":873699,"byte_end":873709,"line_start":571,"line_end":571,"column_start":12,"column_end":22},"name":"fetch_nand","qualname":"<AtomicBool>::fetch_nand","value":"fn (&self, val: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861720,"byte_end":861751,"line_start":235,"line_end":235,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2928},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":875247,"byte_end":875255,"line_start":613,"line_end":613,"column_start":12,"column_end":20},"name":"fetch_or","qualname":"<AtomicBool>::fetch_or","value":"fn (&self, val: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861720,"byte_end":861751,"line_start":235,"line_end":235,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2930},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":876303,"byte_end":876312,"line_start":643,"line_end":643,"column_start":12,"column_end":21},"name":"fetch_xor","qualname":"<AtomicBool>::fetch_xor","value":"fn (&self, val: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861720,"byte_end":861751,"line_start":235,"line_end":235,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2934},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":876789,"byte_end":876792,"line_start":662,"line_end":662,"column_start":18,"column_end":21},"name":"new","qualname":"<AtomicPtr<T>>::new","value":"fn (p: *mut T) -> AtomicPtr<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":876434,"byte_end":876467,"line_start":648,"line_end":648,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2936},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":877449,"byte_end":877456,"line_start":682,"line_end":682,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AtomicPtr<T>>::get_mut","value":"fn (&mut self) -> &mut *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":876434,"byte_end":876467,"line_start":648,"line_end":648,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2938},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":878039,"byte_end":878049,"line_start":701,"line_end":701,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<AtomicPtr<T>>::into_inner","value":"fn (self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":876434,"byte_end":876467,"line_start":648,"line_end":648,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2940},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":878837,"byte_end":878841,"line_start":730,"line_end":730,"column_start":12,"column_end":16},"name":"load","qualname":"<AtomicPtr<T>>::load","value":"fn (&self, order: Ordering) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":876434,"byte_end":876467,"line_start":648,"line_end":648,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2942},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":879746,"byte_end":879751,"line_start":762,"line_end":762,"column_start":12,"column_end":17},"name":"store","qualname":"<AtomicPtr<T>>::store","value":"fn (&self, ptr: *mut T, order: Ordering) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":876434,"byte_end":876467,"line_start":648,"line_end":648,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2944},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":880518,"byte_end":880522,"line_start":789,"line_end":789,"column_start":12,"column_end":16},"name":"swap","qualname":"<AtomicPtr<T>>::swap","value":"fn (&self, ptr: *mut T, order: Ordering) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":876434,"byte_end":876467,"line_start":648,"line_end":648,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2946},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":881520,"byte_end":881536,"line_start":818,"line_end":818,"column_start":12,"column_end":28},"name":"compare_and_swap","qualname":"<AtomicPtr<T>>::compare_and_swap","value":"fn (&self, current: *mut T, new: *mut T, order: Ordering) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":876434,"byte_end":876467,"line_start":648,"line_end":648,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2948},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":883152,"byte_end":883168,"line_start":856,"line_end":856,"column_start":12,"column_end":28},"name":"compare_exchange","qualname":"<AtomicPtr<T>>::compare_exchange","value":"fn (&self, current: *mut T, new: *mut T, success: Ordering, failure: Ordering) -> Result<*mut T, *mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":876434,"byte_end":876467,"line_start":648,"line_end":648,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2950},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":885480,"byte_end":885501,"line_start":911,"line_end":911,"column_start":12,"column_end":33},"name":"compare_exchange_weak","qualname":"<AtomicPtr<T>>::compare_exchange_weak","value":"fn (&self, current: *mut T, new: *mut T, success: Ordering, failure: Ordering) -> Result<*mut T, *mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":876434,"byte_end":876467,"line_start":648,"line_end":648,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":2994},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":924814,"byte_end":924819,"line_start":1986,"line_end":1986,"column_start":8,"column_end":13},"name":"fence","qualname":"::sync::atomic::fence","value":"fn (order: Ordering) -> ()","parent":null,"children":[],"decl_id":null,"docs":" An atomic fence.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":924751,"byte_end":924760,"line_start":1984,"line_end":1984,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":924761,"byte_end":924806,"line_start":1985,"line_end":1985,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":2996},"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":928806,"byte_end":928820,"line_start":2076,"line_end":2076,"column_start":8,"column_end":22},"name":"compiler_fence","qualname":"::sync::atomic::compiler_fence","value":"fn (order: Ordering) -> ()","parent":null,"children":[],"decl_id":null,"docs":" A compiler memory fence.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":928732,"byte_end":928741,"line_start":2074,"line_end":2074,"column_start":1,"column_end":10}},{"value":"stable(feature = \"compiler_fences\", since = \"1.21.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":928742,"byte_end":928798,"line_start":2075,"line_end":2075,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":3010},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cell","qualname":"::cell","value":"libcore/cell.rs","parent":null,"children":[{"krate":0,"index":3012},{"krate":0,"index":3014},{"krate":0,"index":3022},{"krate":0,"index":3024},{"krate":0,"index":3026},{"krate":0,"index":3034},{"krate":0,"index":3036},{"krate":0,"index":3038},{"krate":0,"index":3042},{"krate":0,"index":3044},{"krate":0,"index":3046},{"krate":0,"index":3050},{"krate":0,"index":3054},{"krate":0,"index":3058},{"krate":0,"index":3060},{"krate":0,"index":3072},{"krate":0,"index":3076},{"krate":0,"index":3080},{"krate":0,"index":3096},{"krate":0,"index":3100},{"krate":0,"index":3102},{"krate":0,"index":3104},{"krate":0,"index":3106},{"krate":0,"index":3110},{"krate":0,"index":3114},{"krate":0,"index":3116},{"krate":0,"index":3120},{"krate":0,"index":3124},{"krate":0,"index":3126},{"krate":0,"index":3128},{"krate":0,"index":3130},{"krate":0,"index":3142},{"krate":0,"index":3156},{"krate":0,"index":3158},{"krate":0,"index":3160},{"krate":0,"index":3164},{"krate":0,"index":3168},{"krate":0,"index":3172},{"krate":0,"index":3174},{"krate":0,"index":3186},{"krate":0,"index":3190},{"krate":0,"index":3194},{"krate":0,"index":3196},{"krate":0,"index":3198},{"krate":0,"index":3202},{"krate":0,"index":3206},{"krate":0,"index":3210},{"krate":0,"index":3212},{"krate":0,"index":3218},{"krate":0,"index":3224},{"krate":0,"index":3226},{"krate":0,"index":3230},{"krate":0,"index":3234},{"krate":0,"index":3236},{"krate":0,"index":3240},{"krate":0,"index":3244},{"krate":0,"index":3246},{"krate":0,"index":3252},{"krate":0,"index":3256},{"krate":0,"index":3258},{"krate":0,"index":3262},{"krate":0,"index":3264},{"krate":0,"index":3266},{"krate":0,"index":3272},{"krate":0,"index":3276},{"krate":0,"index":3280},{"krate":0,"index":3284},{"krate":0,"index":3286}],"decl_id":null,"docs":" Shareable mutable containers.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":938536,"byte_end":938582,"line_start":197,"line_end":197,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":3036},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":939614,"byte_end":939618,"line_start":238,"line_end":238,"column_start":12,"column_end":16},"name":"Cell","qualname":"::cell::Cell","value":"Cell {  }","parent":null,"children":[{"krate":0,"index":1647}],"decl_id":null,"docs":" A mutable memory location.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":939557,"byte_end":939602,"line_start":237,"line_end":237,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3040},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":939960,"byte_end":939963,"line_start":256,"line_end":256,"column_start":12,"column_end":15},"name":"get","qualname":"<Cell<T>>::get","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3082},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":942125,"byte_end":942128,"line_start":350,"line_end":350,"column_start":18,"column_end":21},"name":"new","qualname":"<Cell<T>>::new","value":"fn (value: T) -> Cell<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3084},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":942540,"byte_end":942546,"line_start":369,"line_end":369,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<Cell<T>>::as_ptr","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3086},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":943066,"byte_end":943073,"line_start":390,"line_end":390,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Cell<T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3088},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":943428,"byte_end":943431,"line_start":409,"line_end":409,"column_start":12,"column_end":15},"name":"set","qualname":"<Cell<T>>::set","value":"fn (&self, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3090},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":943982,"byte_end":943986,"line_start":430,"line_end":430,"column_start":12,"column_end":16},"name":"swap","qualname":"<Cell<T>>::swap","value":"fn (&self, other: &Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3092},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":944529,"byte_end":944536,"line_start":452,"line_end":452,"column_start":12,"column_end":19},"name":"replace","qualname":"<Cell<T>>::replace","value":"fn (&self, val: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3094},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":944918,"byte_end":944928,"line_start":469,"line_end":469,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Cell<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3098},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":945387,"byte_end":945391,"line_start":489,"line_end":489,"column_start":12,"column_end":16},"name":"take","qualname":"<Cell<T>>::take","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3102},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":945773,"byte_end":945780,"line_start":501,"line_end":501,"column_start":12,"column_end":19},"name":"RefCell","qualname":"::cell::RefCell","value":"RefCell {  }","parent":null,"children":[{"krate":0,"index":1679},{"krate":0,"index":1681}],"decl_id":null,"docs":" A mutable memory location with dynamically checked borrow rules","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":945716,"byte_end":945761,"line_start":500,"line_end":500,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":3104},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":946005,"byte_end":946016,"line_start":508,"line_end":508,"column_start":12,"column_end":23},"name":"BorrowError","qualname":"::cell::BorrowError","value":"BorrowError {  }","parent":null,"children":[{"krate":0,"index":1685}],"decl_id":null,"docs":" An error returned by [`RefCell::try_borrow`](struct.RefCell.html#method.try_borrow).\n","sig":null,"attributes":[{"value":"stable(feature = \"try_borrow\", since = \"1.13.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":945942,"byte_end":945993,"line_start":507,"line_end":507,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":3114},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":946599,"byte_end":946613,"line_start":528,"line_end":528,"column_start":12,"column_end":26},"name":"BorrowMutError","qualname":"::cell::BorrowMutError","value":"BorrowMutError {  }","parent":null,"children":[{"krate":0,"index":1687}],"decl_id":null,"docs":" An error returned by [`RefCell::try_borrow_mut`](struct.RefCell.html#method.try_borrow_mut).\n","sig":null,"attributes":[{"value":"stable(feature = \"try_borrow\", since = \"1.13.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":946536,"byte_end":946587,"line_start":527,"line_end":527,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":3132},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":947548,"byte_end":947551,"line_start":564,"line_end":564,"column_start":18,"column_end":21},"name":"new","qualname":"<RefCell<T>>::new","value":"fn (value: T) -> RefCell<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3134},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":948006,"byte_end":948016,"line_start":584,"line_end":584,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RefCell<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3136},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":948966,"byte_end":948973,"line_start":612,"line_end":612,"column_start":12,"column_end":19},"name":"replace","qualname":"<RefCell<T>>::replace","value":"fn (&self, t: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3138},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":949762,"byte_end":949774,"line_start":637,"line_end":637,"column_start":12,"column_end":24},"name":"replace_with","qualname":"<RefCell<T>>::replace_with","value":"fn <F> (&self, f: F) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3140},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":950611,"byte_end":950615,"line_start":664,"line_end":664,"column_start":12,"column_end":16},"name":"swap","qualname":"<RefCell<T>>::swap","value":"fn (&self, other: &Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3144},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":951770,"byte_end":951776,"line_start":708,"line_end":708,"column_start":12,"column_end":18},"name":"borrow","qualname":"<RefCell<T>>::borrow","value":"fn (&self) -> Ref<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3146},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":952630,"byte_end":952640,"line_start":739,"line_end":739,"column_start":12,"column_end":22},"name":"try_borrow","qualname":"<RefCell<T>>::try_borrow","value":"fn (&self) -> Result<Ref<T>, BorrowError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3148},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":953940,"byte_end":953950,"line_start":788,"line_end":788,"column_start":12,"column_end":22},"name":"borrow_mut","qualname":"<RefCell<T>>::borrow_mut","value":"fn (&self) -> RefMut<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3150},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":954740,"byte_end":954754,"line_start":815,"line_end":815,"column_start":12,"column_end":26},"name":"try_borrow_mut","qualname":"<RefCell<T>>::try_borrow_mut","value":"fn (&self) -> Result<RefMut<T>, BorrowMutError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3152},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":955379,"byte_end":955385,"line_start":838,"line_end":838,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<RefCell<T>>::as_ptr","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3154},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":956362,"byte_end":956369,"line_start":868,"line_end":868,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RefCell<T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3210},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":960619,"byte_end":960622,"line_start":1024,"line_end":1024,"column_start":12,"column_end":15},"name":"Ref","qualname":"::cell::Ref","value":"Ref {  }","parent":null,"children":[{"krate":0,"index":1727},{"krate":0,"index":1729}],"decl_id":null,"docs":" Wraps a borrowed reference to a value in a `RefCell` box.\n A wrapper type for an immutably borrowed value from a `RefCell<T>`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":960562,"byte_end":960607,"line_start":1023,"line_end":1023,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3220},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":961350,"byte_end":961355,"line_start":1050,"line_end":1050,"column_start":12,"column_end":17},"name":"clone","qualname":"<Ref<'b, T>>::clone","value":"fn (orig: &Ref<'b, T>) -> Ref<'b, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3222},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":962201,"byte_end":962204,"line_start":1077,"line_end":1077,"column_start":12,"column_end":15},"name":"map","qualname":"<Ref<'b, T>>::map","value":"fn <U, F> (orig: Ref<'b, T>, f: F) -> Ref<'b, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3232},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":963659,"byte_end":963662,"line_start":1123,"line_end":1123,"column_start":12,"column_end":15},"name":"map","qualname":"<RefMut<'b, T>>::map","value":"fn <U, F> (orig: RefMut<'b, T>, f: F) -> RefMut<'b, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3244},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":964724,"byte_end":964730,"line_start":1165,"line_end":1165,"column_start":12,"column_end":18},"name":"RefMut","qualname":"::cell::RefMut","value":"RefMut {  }","parent":null,"children":[{"krate":0,"index":1773},{"krate":0,"index":1775}],"decl_id":null,"docs":" A wrapper type for a mutably borrowed value from a `RefCell<T>`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":964667,"byte_end":964712,"line_start":1164,"line_end":1164,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":3262},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":968691,"byte_end":968701,"line_start":1257,"line_end":1257,"column_start":12,"column_end":22},"name":"UnsafeCell","qualname":"::cell::UnsafeCell","value":"UnsafeCell {  }","parent":null,"children":[{"krate":0,"index":1799}],"decl_id":null,"docs":" The core primitive for interior mutability in Rust.","sig":null,"attributes":[{"value":"lang = \"unsafe_cell\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":968610,"byte_end":968633,"line_start":1255,"line_end":1255,"column_start":1,"column_end":24}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":968634,"byte_end":968679,"line_start":1256,"line_end":1256,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3268},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":969236,"byte_end":969239,"line_start":1279,"line_end":1279,"column_start":18,"column_end":21},"name":"new","qualname":"<UnsafeCell<T>>::new","value":"fn (value: T) -> UnsafeCell<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3270},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":969597,"byte_end":969607,"line_start":1296,"line_end":1296,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<UnsafeCell<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3274},"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":970254,"byte_end":970257,"line_start":1320,"line_end":1320,"column_start":12,"column_end":15},"name":"get","qualname":"<UnsafeCell<T>>::get","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3288},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"char","qualname":"::char","value":"libcore/char/mod.rs","parent":null,"children":[{"krate":0,"index":3290},{"krate":0,"index":3340},{"krate":0,"index":3382},{"krate":0,"index":3476},{"krate":0,"index":3482},{"krate":0,"index":3484},{"krate":0,"index":3486},{"krate":0,"index":3488},{"krate":0,"index":3496},{"krate":0,"index":3498},{"krate":0,"index":3500},{"krate":0,"index":3508},{"krate":0,"index":3514},{"krate":0,"index":3516},{"krate":0,"index":3518},{"krate":0,"index":3520},{"krate":0,"index":3522},{"krate":0,"index":3524},{"krate":0,"index":3526},{"krate":0,"index":3528},{"krate":0,"index":3530},{"krate":0,"index":3532},{"krate":0,"index":39978},{"krate":0,"index":39984},{"krate":0,"index":39980},{"krate":0,"index":39988},{"krate":0,"index":39994},{"krate":0,"index":39990},{"krate":0,"index":3534},{"krate":0,"index":3546},{"krate":0,"index":3550},{"krate":0,"index":3552},{"krate":0,"index":39998},{"krate":0,"index":40004},{"krate":0,"index":40000},{"krate":0,"index":40008},{"krate":0,"index":40014},{"krate":0,"index":40010},{"krate":0,"index":3556},{"krate":0,"index":3570},{"krate":0,"index":3574},{"krate":0,"index":3576},{"krate":0,"index":40018},{"krate":0,"index":40024},{"krate":0,"index":40020},{"krate":0,"index":3580},{"krate":0,"index":3588},{"krate":0,"index":3590},{"krate":0,"index":3592},{"krate":0,"index":40028},{"krate":0,"index":40034},{"krate":0,"index":40030},{"krate":0,"index":3596},{"krate":0,"index":3602},{"krate":0,"index":40038},{"krate":0,"index":40044},{"krate":0,"index":40040},{"krate":0,"index":3604},{"krate":0,"index":3610},{"krate":0,"index":40048},{"krate":0,"index":40054},{"krate":0,"index":40050},{"krate":0,"index":3612},{"krate":0,"index":3616},{"krate":0,"index":3622},{"krate":0,"index":3626},{"krate":0,"index":3630}],"decl_id":null,"docs":" A character type.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":972367,"byte_end":972392,"line_start":29,"line_end":29,"column_start":1,"column_end":26}},{"value":"stable(feature = \"core_char\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":972393,"byte_end":972443,"line_start":30,"line_end":30,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":3302},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":989694,"byte_end":989702,"line_start":67,"line_end":67,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::char::convert::from_u32","value":"fn (i: u32) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `u32` to a `char`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":989631,"byte_end":989640,"line_start":65,"line_end":65,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":989641,"byte_end":989686,"line_start":66,"line_end":66,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":3304},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":990815,"byte_end":990833,"line_start":112,"line_end":112,"column_start":15,"column_end":33},"name":"from_u32_unchecked","qualname":"::char::convert::from_u32_unchecked","value":"fn (i: u32) -> char","parent":null,"children":[],"decl_id":null,"docs":" Converts a `u32` to a `char`, ignoring validity.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":990731,"byte_end":990740,"line_start":110,"line_end":110,"column_start":1,"column_end":10}},{"value":"stable(feature = \"char_from_unchecked\", since = \"1.5.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":990741,"byte_end":990800,"line_start":111,"line_end":111,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":39860},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":992333,"byte_end":992347,"line_start":154,"line_end":154,"column_start":12,"column_end":26},"name":"ParseCharError","qualname":"::char::convert::ParseCharError","value":"ParseCharError {  }","parent":null,"children":[{"krate":0,"index":26017}],"decl_id":null,"docs":" An error which can be returned when parsing a char.\n","sig":null,"attributes":[{"value":"stable(feature = \"char_from_str\", since = \"1.20.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":992228,"byte_end":992282,"line_start":152,"line_end":152,"column_start":1,"column_end":55}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":992322,"byte_end":992376,"line_start":154,"line_end":156,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":3316},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":992580,"byte_end":992593,"line_start":163,"line_end":163,"column_start":12,"column_end":25},"name":"__description","qualname":"<ParseCharError>::__description","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":39900},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":994231,"byte_end":994247,"line_start":224,"line_end":224,"column_start":12,"column_end":28},"name":"CharTryFromError","qualname":"::char::convert::CharTryFromError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type returned when a conversion from u32 to char fails.\n","sig":null,"attributes":[{"value":"stable(feature = \"try_from\", since = \"1.26.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":994125,"byte_end":994174,"line_start":222,"line_end":222,"column_start":1,"column_end":50}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":994220,"byte_end":994252,"line_start":224,"line_end":224,"column_start":1,"column_end":33}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":994220,"byte_end":994252,"line_start":224,"line_end":224,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":3338},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":995686,"byte_end":995696,"line_start":289,"line_end":289,"column_start":8,"column_end":18},"name":"from_digit","qualname":"::char::convert::from_digit","value":"fn (num: u32, radix: u32) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Converts a digit in the given radix to a `char`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":995623,"byte_end":995632,"line_start":287,"line_end":287,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":995633,"byte_end":995678,"line_start":288,"line_end":288,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":39922},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":996804,"byte_end":996814,"line_start":21,"line_end":21,"column_start":12,"column_end":22},"name":"DecodeUtf8","qualname":"::char::decode::DecodeUtf8","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over an iterator of bytes of the characters the bytes represent\n as UTF-8\n","sig":null,"attributes":[{"value":"unstable(feature = \"decode_utf8\", issue = \"33906\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":996715,"byte_end":996768,"line_start":19,"line_end":19,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":3348},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":996978,"byte_end":996989,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"decode_utf8","qualname":"::char::decode::decode_utf8","value":"fn <I> (i: I) -> DecodeUtf8<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Decodes an `Iterator` of bytes as UTF-8.\n","sig":null,"attributes":[{"value":"unstable(feature = \"decode_utf8\", issue = \"33906\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":996907,"byte_end":996960,"line_start":24,"line_end":24,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":996961,"byte_end":996970,"line_start":25,"line_end":25,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":39932},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":997275,"byte_end":997290,"line_start":33,"line_end":33,"column_start":12,"column_end":27},"name":"InvalidSequence","qualname":"::char::decode::InvalidSequence","value":"","parent":null,"children":[],"decl_id":null,"docs":" `<DecodeUtf8 as Iterator>::next` returns this for an invalid input sequence.\n","sig":null,"attributes":[{"value":"unstable(feature = \"decode_utf8\", issue = \"33906\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":997178,"byte_end":997231,"line_start":31,"line_end":31,"column_start":1,"column_end":54}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":997264,"byte_end":997295,"line_start":33,"line_end":33,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":39948},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":1001113,"byte_end":1001124,"line_start":135,"line_end":135,"column_start":12,"column_end":23},"name":"DecodeUtf16","qualname":"::char::decode::DecodeUtf16","value":"DecodeUtf16 {  }","parent":null,"children":[{"krate":0,"index":26041},{"krate":0,"index":26043}],"decl_id":null,"docs":" An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.\n","sig":null,"attributes":[{"value":"stable(feature = \"decode_utf16\", since = \"1.9.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":1001025,"byte_end":1001077,"line_start":133,"line_end":133,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":39958},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":1001373,"byte_end":1001389,"line_start":145,"line_end":145,"column_start":12,"column_end":28},"name":"DecodeUtf16Error","qualname":"::char::decode::DecodeUtf16Error","value":"DecodeUtf16Error {  }","parent":null,"children":[{"krate":0,"index":26051}],"decl_id":null,"docs":" An error that can be returned when decoding UTF-16 code points.\n","sig":null,"attributes":[{"value":"stable(feature = \"decode_utf16\", since = \"1.9.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":1001270,"byte_end":1001322,"line_start":143,"line_end":143,"column_start":1,"column_end":53}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":1001362,"byte_end":1001408,"line_start":145,"line_end":147,"column_start":1,"column_end":2}}]},{"kind":"Function","id":{"krate":0,"index":3364},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":1002842,"byte_end":1002854,"line_start":195,"line_end":195,"column_start":8,"column_end":20},"name":"decode_utf16","qualname":"::char::decode::decode_utf16","value":"fn <I> (iter: I) -> DecodeUtf16<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator over the UTF-16 encoded code points in `iter`,\n returning unpaired surrogates as `Err`s.","sig":null,"attributes":[{"value":"stable(feature = \"decode_utf16\", since = \"1.9.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":1002772,"byte_end":1002824,"line_start":193,"line_end":193,"column_start":1,"column_end":53}},{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":1002825,"byte_end":1002834,"line_start":194,"line_end":194,"column_start":1,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":3376},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":1004736,"byte_end":1004754,"line_start":249,"line_end":249,"column_start":12,"column_end":30},"name":"unpaired_surrogate","qualname":"<DecodeUtf16Error>::unpaired_surrogate","value":"fn (&self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3404},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1007061,"byte_end":1007069,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"name":"is_digit","qualname":"<char>::is_digit","value":"fn (self, radix: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3406},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1008467,"byte_end":1008475,"line_start":123,"line_end":123,"column_start":12,"column_end":20},"name":"to_digit","qualname":"<char>::to_digit","value":"fn (self, radix: u32) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3408},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1009791,"byte_end":1009805,"line_start":173,"line_end":173,"column_start":12,"column_end":26},"name":"escape_unicode","qualname":"<char>::escape_unicode","value":"fn (self) -> EscapeUnicode","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3410},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1011168,"byte_end":1011180,"line_start":226,"line_end":226,"column_start":12,"column_end":24},"name":"escape_debug","qualname":"<char>::escape_debug","value":"fn (self) -> EscapeDebug","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3412},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1013148,"byte_end":1013162,"line_start":289,"line_end":289,"column_start":12,"column_end":26},"name":"escape_default","qualname":"<char>::escape_default","value":"fn (self) -> EscapeDefault","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3414},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1015046,"byte_end":1015054,"line_start":348,"line_end":348,"column_start":12,"column_end":20},"name":"len_utf8","qualname":"<char>::len_utf8","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3416},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1015906,"byte_end":1015915,"line_start":382,"line_end":382,"column_start":12,"column_end":21},"name":"len_utf16","qualname":"<char>::len_utf16","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3418},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1017038,"byte_end":1017049,"line_start":425,"line_end":425,"column_start":12,"column_end":23},"name":"encode_utf8","qualname":"<char>::encode_utf8","value":"fn (self, dst: &mut [u8]) -> &mut str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3420},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1019536,"byte_end":1019548,"line_start":493,"line_end":493,"column_start":12,"column_end":24},"name":"encode_utf16","qualname":"<char>::encode_utf16","value":"fn (self, dst: &mut [u16]) -> &mut [u16]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3422},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1020965,"byte_end":1020978,"line_start":531,"line_end":531,"column_start":12,"column_end":25},"name":"is_alphabetic","qualname":"<char>::is_alphabetic","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3424},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1021656,"byte_end":1021668,"line_start":549,"line_end":549,"column_start":12,"column_end":24},"name":"is_xid_start","qualname":"<char>::is_xid_start","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3426},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1022233,"byte_end":1022248,"line_start":563,"line_end":563,"column_start":12,"column_end":27},"name":"is_xid_continue","qualname":"<char>::is_xid_continue","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3428},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1022936,"byte_end":1022948,"line_start":587,"line_end":587,"column_start":12,"column_end":24},"name":"is_lowercase","qualname":"<char>::is_lowercase","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3430},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1023740,"byte_end":1023752,"line_start":615,"line_end":615,"column_start":12,"column_end":24},"name":"is_uppercase","qualname":"<char>::is_uppercase","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3432},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1024453,"byte_end":1024466,"line_start":642,"line_end":642,"column_start":12,"column_end":25},"name":"is_whitespace","qualname":"<char>::is_whitespace","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3434},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1025372,"byte_end":1025387,"line_start":671,"line_end":671,"column_start":12,"column_end":27},"name":"is_alphanumeric","qualname":"<char>::is_alphanumeric","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3436},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1025918,"byte_end":1025928,"line_start":691,"line_end":691,"column_start":12,"column_end":22},"name":"is_control","qualname":"<char>::is_control","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3438},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1026624,"byte_end":1026634,"line_start":716,"line_end":716,"column_start":12,"column_end":22},"name":"is_numeric","qualname":"<char>::is_numeric","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3440},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1028635,"byte_end":1028647,"line_start":781,"line_end":781,"column_start":12,"column_end":24},"name":"to_lowercase","qualname":"<char>::to_lowercase","value":"fn (self) -> ToLowercase","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3442},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1031365,"byte_end":1031377,"line_start":867,"line_end":867,"column_start":12,"column_end":24},"name":"to_uppercase","qualname":"<char>::to_uppercase","value":"fn (self) -> ToUppercase","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3444},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1031830,"byte_end":1031838,"line_start":884,"line_end":884,"column_start":12,"column_end":20},"name":"is_ascii","qualname":"<char>::is_ascii","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3446},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1032717,"byte_end":1032735,"line_start":912,"line_end":912,"column_start":12,"column_end":30},"name":"to_ascii_uppercase","qualname":"<char>::to_ascii_uppercase","value":"fn (&self) -> char","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3448},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1033714,"byte_end":1033732,"line_start":944,"line_end":944,"column_start":12,"column_end":30},"name":"to_ascii_lowercase","qualname":"<char>::to_ascii_lowercase","value":"fn (&self) -> char","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3450},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1034452,"byte_end":1034472,"line_start":969,"line_end":969,"column_start":12,"column_end":32},"name":"eq_ignore_ascii_case","qualname":"<char>::eq_ignore_ascii_case","value":"fn (&self, other: &char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3452},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1035219,"byte_end":1035239,"line_start":994,"line_end":994,"column_start":12,"column_end":32},"name":"make_ascii_uppercase","qualname":"<char>::make_ascii_uppercase","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3454},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1035947,"byte_end":1035967,"line_start":1019,"line_end":1019,"column_start":12,"column_end":32},"name":"make_ascii_lowercase","qualname":"<char>::make_ascii_lowercase","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3456},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1037044,"byte_end":1037063,"line_start":1055,"line_end":1055,"column_start":12,"column_end":31},"name":"is_ascii_alphabetic","qualname":"<char>::is_ascii_alphabetic","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3458},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1038106,"byte_end":1038124,"line_start":1089,"line_end":1089,"column_start":12,"column_end":30},"name":"is_ascii_uppercase","qualname":"<char>::is_ascii_uppercase","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3460},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1039166,"byte_end":1039184,"line_start":1123,"line_end":1123,"column_start":12,"column_end":30},"name":"is_ascii_lowercase","qualname":"<char>::is_ascii_lowercase","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3462},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1040343,"byte_end":1040364,"line_start":1160,"line_end":1160,"column_start":12,"column_end":33},"name":"is_ascii_alphanumeric","qualname":"<char>::is_ascii_alphanumeric","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3464},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1041368,"byte_end":1041382,"line_start":1194,"line_end":1194,"column_start":12,"column_end":26},"name":"is_ascii_digit","qualname":"<char>::is_ascii_digit","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3466},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1042498,"byte_end":1042515,"line_start":1231,"line_end":1231,"column_start":12,"column_end":29},"name":"is_ascii_hexdigit","qualname":"<char>::is_ascii_hexdigit","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3468},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1043749,"byte_end":1043769,"line_start":1269,"line_end":1269,"column_start":12,"column_end":32},"name":"is_ascii_punctuation","qualname":"<char>::is_ascii_punctuation","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3470},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1044789,"byte_end":1044805,"line_start":1303,"line_end":1303,"column_start":12,"column_end":28},"name":"is_ascii_graphic","qualname":"<char>::is_ascii_graphic","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3472},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1046873,"byte_end":1046892,"line_start":1354,"line_end":1354,"column_start":12,"column_end":31},"name":"is_ascii_whitespace","qualname":"<char>::is_ascii_whitespace","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3474},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1048045,"byte_end":1048061,"line_start":1390,"line_end":1390,"column_start":12,"column_end":28},"name":"is_ascii_control","qualname":"<char>::is_ascii_control","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"char\"","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,101,116,104,111,100,115,46,114,115],"byte_start":1005693,"byte_end":1005709,"line_start":19,"line_end":19,"column_start":1,"column_end":17}}]},{"kind":"Const","id":{"krate":0,"index":3530},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":976150,"byte_end":976153,"line_start":111,"line_end":111,"column_start":11,"column_end":14},"name":"MAX","qualname":"::char::MAX","value":"char","parent":null,"children":[],"decl_id":null,"docs":" The highest valid code point a `char` can have.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":976094,"byte_end":976139,"line_start":110,"line_end":110,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":3532},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":976501,"byte_end":976522,"line_start":119,"line_end":119,"column_start":11,"column_end":32},"name":"REPLACEMENT_CHARACTER","qualname":"::char::REPLACEMENT_CHARACTER","value":"char","parent":null,"children":[],"decl_id":null,"docs":" `U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a\n decoding error.","sig":null,"attributes":[{"value":"stable(feature = \"decode_utf16\", since = \"1.9.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":976438,"byte_end":976490,"line_start":118,"line_end":118,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":39978},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":976963,"byte_end":976976,"line_start":131,"line_end":131,"column_start":12,"column_end":25},"name":"EscapeUnicode","qualname":"::char::EscapeUnicode","value":"EscapeUnicode {  }","parent":null,"children":[{"krate":0,"index":26053},{"krate":0,"index":26055},{"krate":0,"index":26057}],"decl_id":null,"docs":" Returns an iterator that yields the hexadecimal Unicode escape of a\n character, as `char`s.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":976906,"byte_end":976951,"line_start":130,"line_end":130,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":39998},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":980632,"byte_end":980645,"line_start":252,"line_end":252,"column_start":12,"column_end":25},"name":"EscapeDefault","qualname":"::char::EscapeDefault","value":"EscapeDefault {  }","parent":null,"children":[{"krate":0,"index":26071}],"decl_id":null,"docs":" An iterator that yields the literal escape code of a `char`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":980575,"byte_end":980620,"line_start":251,"line_end":251,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":40018},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":983898,"byte_end":983909,"line_start":365,"line_end":365,"column_start":12,"column_end":23},"name":"EscapeDebug","qualname":"::char::EscapeDebug","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields the literal escape code of a `char`.","sig":null,"attributes":[{"value":"stable(feature = \"char_escape_debug\", since = \"1.20.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":983804,"byte_end":983862,"line_start":363,"line_end":363,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":40028},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":984951,"byte_end":984962,"line_start":396,"line_end":396,"column_start":12,"column_end":23},"name":"ToLowercase","qualname":"::char::ToLowercase","value":"","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that yields the lowercase equivalent of a `char`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":984870,"byte_end":984915,"line_start":394,"line_end":394,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":40038},"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":985628,"byte_end":985639,"line_start":418,"line_end":418,"column_start":12,"column_end":23},"name":"ToUppercase","qualname":"::char::ToUppercase","value":"","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that yields the uppercase equivalent of a `char`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":985547,"byte_end":985592,"line_start":416,"line_end":416,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":3634},"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"panic","qualname":"::panic","value":"libcore/panic.rs","parent":null,"children":[{"krate":0,"index":3636},{"krate":0,"index":3638},{"krate":0,"index":40058},{"krate":0,"index":40060},{"krate":0,"index":3640},{"krate":0,"index":3650},{"krate":0,"index":40064},{"krate":0,"index":40066},{"krate":0,"index":3654},{"krate":0,"index":3664}],"decl_id":null,"docs":" Panic support in the standard library.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_panic_info\",\n           reason = \"newly available in libcore\",\n           issue = \"44489\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1048659,"byte_end":1048780,"line_start":13,"line_end":15,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":40058},"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1049342,"byte_end":1049351,"line_start":40,"line_end":40,"column_start":12,"column_end":21},"name":"PanicInfo","qualname":"::panic::PanicInfo","value":"PanicInfo {  }","parent":null,"children":[{"krate":0,"index":26119},{"krate":0,"index":26121},{"krate":0,"index":26123}],"decl_id":null,"docs":" A struct providing information about a panic.","sig":null,"attributes":[{"value":"stable(feature = \"panic_hooks\", since = \"1.10.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1049261,"byte_end":1049313,"line_start":38,"line_end":38,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3642},"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1049725,"byte_end":1049745,"line_start":52,"line_end":52,"column_start":12,"column_end":32},"name":"internal_constructor","qualname":"<PanicInfo<'a>>::internal_constructor","value":"fn (payload: &'a (Any + Send), message: Option<&'a fmt::Arguments<'a>>, location: Location<'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"panic_internals\",\n           reason =\n               \"internal details of the implementation of the `panic!` and related macros\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1049494,"byte_end":1049694,"line_start":47,"line_end":50,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3644},"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1050578,"byte_end":1050585,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"payload","qualname":"<PanicInfo<'a>>::payload","value":"fn (&self) -> &(Any + Send)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"panic_internals\",\n           reason =\n               \"internal details of the implementation of the `panic!` and related macros\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1049494,"byte_end":1049694,"line_start":47,"line_end":50,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3646},"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1050989,"byte_end":1050996,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"message","qualname":"<PanicInfo<'a>>::message","value":"fn (&self) -> Option<&fmt::Arguments>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"panic_internals\",\n           reason =\n               \"internal details of the implementation of the `panic!` and related macros\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1049494,"byte_end":1049694,"line_start":47,"line_end":50,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3648},"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1051922,"byte_end":1051930,"line_start":116,"line_end":116,"column_start":12,"column_end":20},"name":"location","qualname":"<PanicInfo<'a>>::location","value":"fn (&self) -> Option<&Location>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"panic_internals\",\n           reason =\n               \"internal details of the implementation of the `panic!` and related macros\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1049494,"byte_end":1049694,"line_start":47,"line_end":50,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":40064},"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1053668,"byte_end":1053676,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"Location","qualname":"::panic::Location","value":"Location {  }","parent":null,"children":[{"krate":0,"index":26129},{"krate":0,"index":26131},{"krate":0,"index":26133}],"decl_id":null,"docs":" A struct containing information about the location of a panic.","sig":null,"attributes":[{"value":"stable(feature = \"panic_hooks\", since = \"1.10.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1053604,"byte_end":1053656,"line_start":164,"line_end":164,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3656},"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1053993,"byte_end":1054013,"line_start":177,"line_end":177,"column_start":12,"column_end":32},"name":"internal_constructor","qualname":"<Location<'a>>::internal_constructor","value":"fn (file: &'a str, line: u32, col: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"panic_internals\",\n           reason =\n               \"internal details of the implementation of the `panic!` and related macros\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1053762,"byte_end":1053962,"line_start":172,"line_end":175,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3658},"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1054704,"byte_end":1054708,"line_start":199,"line_end":199,"column_start":12,"column_end":16},"name":"file","qualname":"<Location<'a>>::file","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"panic_internals\",\n           reason =\n               \"internal details of the implementation of the `panic!` and related macros\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1053762,"byte_end":1053962,"line_start":172,"line_end":175,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3660},"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1055337,"byte_end":1055341,"line_start":221,"line_end":221,"column_start":12,"column_end":16},"name":"line","qualname":"<Location<'a>>::line","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"panic_internals\",\n           reason =\n               \"internal details of the implementation of the `panic!` and related macros\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1053762,"byte_end":1053962,"line_start":172,"line_end":175,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3662},"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1055966,"byte_end":1055972,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"column","qualname":"<Location<'a>>::column","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"panic_internals\",\n           reason =\n               \"internal details of the implementation of the `panic!` and related macros\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1053762,"byte_end":1053962,"line_start":172,"line_end":175,"column_start":5,"column_end":30}}]},{"kind":"Mod","id":{"krate":0,"index":3668},"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"panicking","qualname":"::panicking","value":"libcore/panicking.rs","parent":null,"children":[{"krate":0,"index":3670},{"krate":0,"index":3672},{"krate":0,"index":3674},{"krate":0,"index":3676}],"decl_id":null,"docs":" Panic support for libcore","sig":null,"attributes":[{"value":"allow(dead_code, missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":1057688,"byte_end":1057722,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"unstable(feature = \"core_panic\",\n           reason =\n               \"internal details of the implementation of the `panic!` and related macros\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":1057723,"byte_end":1057906,"line_start":34,"line_end":37,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":3672},"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":1058001,"byte_end":1058006,"line_start":43,"line_end":43,"column_start":8,"column_end":13},"name":"panic","qualname":"::panicking::panic","value":"fn (expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> !","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cold","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":1057918,"byte_end":1057925,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"inline(never)","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":1057926,"byte_end":1057942,"line_start":41,"line_end":41,"column_start":9,"column_end":25}},{"value":"lang = \"panic\"","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":1057976,"byte_end":1057993,"line_start":42,"line_end":42,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":3676},"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":1058992,"byte_end":1059001,"line_start":63,"line_end":63,"column_start":8,"column_end":17},"name":"panic_fmt","qualname":"::panicking::panic_fmt","value":"fn (fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> !","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cold","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":1058960,"byte_end":1058967,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"inline(never)","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":1058968,"byte_end":1058984,"line_start":62,"line_end":62,"column_start":9,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":3680},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iter","qualname":"::iter","value":"libcore/iter/mod.rs","parent":null,"children":[{"krate":0,"index":3682},{"krate":0,"index":3684},{"krate":0,"index":3686},{"krate":0,"index":3688},{"krate":0,"index":3690},{"krate":0,"index":3692},{"krate":0,"index":3694},{"krate":0,"index":3696},{"krate":0,"index":3698},{"krate":0,"index":3704},{"krate":0,"index":3710},{"krate":0,"index":3716},{"krate":0,"index":3722},{"krate":0,"index":3732},{"krate":0,"index":3740},{"krate":0,"index":3742},{"krate":0,"index":3744},{"krate":0,"index":3946},{"krate":0,"index":4080},{"krate":0,"index":4188},{"krate":0,"index":4302},{"krate":0,"index":4304},{"krate":0,"index":40778},{"krate":0,"index":40780},{"krate":0,"index":4316},{"krate":0,"index":4328},{"krate":0,"index":4332},{"krate":0,"index":40786},{"krate":0,"index":40792},{"krate":0,"index":40788},{"krate":0,"index":4338},{"krate":0,"index":4354},{"krate":0,"index":4364},{"krate":0,"index":4370},{"krate":0,"index":4372},{"krate":0,"index":40796},{"krate":0,"index":40802},{"krate":0,"index":40798},{"krate":0,"index":4374},{"krate":0,"index":4386},{"krate":0,"index":4394},{"krate":0,"index":4400},{"krate":0,"index":4402},{"krate":0,"index":4408},{"krate":0,"index":4414},{"krate":0,"index":40806},{"krate":0,"index":40812},{"krate":0,"index":40808},{"krate":0,"index":4416},{"krate":0,"index":4424},{"krate":0,"index":40816},{"krate":0,"index":40822},{"krate":0,"index":40818},{"krate":0,"index":4426},{"krate":0,"index":4436},{"krate":0,"index":40826},{"krate":0,"index":40832},{"krate":0,"index":40828},{"krate":0,"index":40836},{"krate":0,"index":40842},{"krate":0,"index":40838},{"krate":0,"index":4438},{"krate":0,"index":4458},{"krate":0,"index":4466},{"krate":0,"index":4468},{"krate":0,"index":40846},{"krate":0,"index":40852},{"krate":0,"index":40848},{"krate":0,"index":4470},{"krate":0,"index":4480},{"krate":0,"index":4484},{"krate":0,"index":4500},{"krate":0,"index":4514},{"krate":0,"index":4526},{"krate":0,"index":4528},{"krate":0,"index":4534},{"krate":0,"index":4536},{"krate":0,"index":40856},{"krate":0,"index":40858},{"krate":0,"index":4538},{"krate":0,"index":4542},{"krate":0,"index":4554},{"krate":0,"index":4562},{"krate":0,"index":4568},{"krate":0,"index":4570},{"krate":0,"index":4572},{"krate":0,"index":40862},{"krate":0,"index":40864},{"krate":0,"index":4578},{"krate":0,"index":4582},{"krate":0,"index":4596},{"krate":0,"index":4604},{"krate":0,"index":40868},{"krate":0,"index":40870},{"krate":0,"index":4606},{"krate":0,"index":4610},{"krate":0,"index":4622},{"krate":0,"index":4630},{"krate":0,"index":40874},{"krate":0,"index":40880},{"krate":0,"index":40876},{"krate":0,"index":4632},{"krate":0,"index":4648},{"krate":0,"index":4656},{"krate":0,"index":4662},{"krate":0,"index":4668},{"krate":0,"index":4670},{"krate":0,"index":40884},{"krate":0,"index":40890},{"krate":0,"index":40886},{"krate":0,"index":4672},{"krate":0,"index":4690},{"krate":0,"index":4692},{"krate":0,"index":4694},{"krate":0,"index":40894},{"krate":0,"index":40896},{"krate":0,"index":4698},{"krate":0,"index":4702},{"krate":0,"index":4714},{"krate":0,"index":40900},{"krate":0,"index":40902},{"krate":0,"index":4716},{"krate":0,"index":4720},{"krate":0,"index":4730},{"krate":0,"index":40906},{"krate":0,"index":40912},{"krate":0,"index":40908},{"krate":0,"index":4732},{"krate":0,"index":4750},{"krate":0,"index":4752},{"krate":0,"index":4758},{"krate":0,"index":40916},{"krate":0,"index":40922},{"krate":0,"index":40918},{"krate":0,"index":4760},{"krate":0,"index":4772},{"krate":0,"index":4774},{"krate":0,"index":4776},{"krate":0,"index":40926},{"krate":0,"index":40928},{"krate":0,"index":4778},{"krate":0,"index":4782},{"krate":0,"index":4792},{"krate":0,"index":4794},{"krate":0,"index":4798},{"krate":0,"index":4802},{"krate":0,"index":4814},{"krate":0,"index":4822},{"krate":0,"index":4824},{"krate":0,"index":4826},{"krate":0,"index":4830},{"krate":0,"index":4834},{"krate":0,"index":4846},{"krate":0,"index":4854},{"krate":0,"index":4856},{"krate":0,"index":40932},{"krate":0,"index":40938},{"krate":0,"index":40934},{"krate":0,"index":4858},{"krate":0,"index":4870},{"krate":0,"index":40942},{"krate":0,"index":40948},{"krate":0,"index":40944},{"krate":0,"index":4878},{"krate":0,"index":4880},{"krate":0,"index":4898},{"krate":0,"index":4906},{"krate":0,"index":4912},{"krate":0,"index":4928},{"krate":0,"index":4936},{"krate":0,"index":40952},{"krate":0,"index":40954},{"krate":0,"index":4942},{"krate":0,"index":4946},{"krate":0,"index":4950},{"krate":0,"index":4962},{"krate":0,"index":4970},{"krate":0,"index":4976}],"decl_id":null,"docs":" Composable external iteration.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1069863,"byte_end":1069909,"line_start":317,"line_end":317,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":3820},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151781,"byte_end":1151789,"line_start":40,"line_end":40,"column_start":11,"column_end":19},"name":"Iterator","qualname":"::iter::iterator::Iterator","value":"Iterator","parent":null,"children":[{"krate":0,"index":3822},{"krate":0,"index":3824},{"krate":0,"index":3826},{"krate":0,"index":3828},{"krate":0,"index":3830},{"krate":0,"index":3832},{"krate":0,"index":3834},{"krate":0,"index":3836},{"krate":0,"index":3838},{"krate":0,"index":3840},{"krate":0,"index":3842},{"krate":0,"index":3844},{"krate":0,"index":3846},{"krate":0,"index":3848},{"krate":0,"index":3850},{"krate":0,"index":3852},{"krate":0,"index":3854},{"krate":0,"index":3856},{"krate":0,"index":3858},{"krate":0,"index":3860},{"krate":0,"index":3862},{"krate":0,"index":3864},{"krate":0,"index":3866},{"krate":0,"index":3868},{"krate":0,"index":3870},{"krate":0,"index":3872},{"krate":0,"index":3874},{"krate":0,"index":3876},{"krate":0,"index":3878},{"krate":0,"index":3880},{"krate":0,"index":3882},{"krate":0,"index":3884},{"krate":0,"index":3886},{"krate":0,"index":3888},{"krate":0,"index":3890},{"krate":0,"index":3892},{"krate":0,"index":3894},{"krate":0,"index":3896},{"krate":0,"index":3898},{"krate":0,"index":3900},{"krate":0,"index":3902},{"krate":0,"index":3904},{"krate":0,"index":3906},{"krate":0,"index":3908},{"krate":0,"index":3910},{"krate":0,"index":3912},{"krate":0,"index":3914},{"krate":0,"index":3916},{"krate":0,"index":3918},{"krate":0,"index":3920},{"krate":0,"index":3922},{"krate":0,"index":3924},{"krate":0,"index":3926},{"krate":0,"index":3928},{"krate":0,"index":3930},{"krate":0,"index":3932}],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":3822},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151905,"byte_end":1151909,"line_start":43,"line_end":43,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::iterator::Iterator::Item","value":"type Item;","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" The type of the elements being iterated over.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151850,"byte_end":1151895,"line_start":42,"line_end":42,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3824},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1153031,"byte_end":1153035,"line_start":77,"line_end":77,"column_start":8,"column_end":12},"name":"next","qualname":"::iter::iterator::Iterator::next","value":"fn (&mut self) -> Option<Self::Item>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3826},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1155706,"byte_end":1155715,"line_start":149,"line_end":149,"column_start":8,"column_end":17},"name":"size_hint","qualname":"::iter::iterator::Iterator::size_hint","value":"fn (&self) -> (usize, Option<usize>)","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3828},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1156989,"byte_end":1156994,"line_start":188,"line_end":188,"column_start":8,"column_end":13},"name":"count","qualname":"::iter::iterator::Iterator::count","value":"fn (self) -> usize","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3830},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1157788,"byte_end":1157792,"line_start":214,"line_end":214,"column_start":8,"column_end":12},"name":"last","qualname":"::iter::iterator::Iterator::last","value":"fn (self) -> Option<Self::Item>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3832},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1159300,"byte_end":1159303,"line_start":263,"line_end":263,"column_start":8,"column_end":11},"name":"nth","qualname":"::iter::iterator::Iterator::nth","value":"fn (&mut self, mut n: usize) -> Option<Self::Item>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3834},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1160346,"byte_end":1160353,"line_start":299,"line_end":299,"column_start":8,"column_end":15},"name":"step_by","qualname":"::iter::iterator::Iterator::step_by","value":"fn (self, step: usize) -> StepBy<Self>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3836},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1162262,"byte_end":1162267,"line_start":355,"line_end":355,"column_start":8,"column_end":13},"name":"chain","qualname":"::iter::iterator::Iterator::chain","value":"fn <U> (self, other: U) -> Chain<Self, U::IntoIter>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3838},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1165046,"byte_end":1165049,"line_start":432,"line_end":432,"column_start":8,"column_end":11},"name":"zip","qualname":"::iter::iterator::Iterator::zip","value":"fn <U> (self, other: U) -> Zip<Self, U::IntoIter>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3840},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1167029,"byte_end":1167032,"line_start":488,"line_end":488,"column_start":8,"column_end":11},"name":"map","qualname":"::iter::iterator::Iterator::map","value":"fn <B, F> (self, f: F) -> Map<Self, F>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3842},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1168555,"byte_end":1168563,"line_start":531,"line_end":531,"column_start":8,"column_end":16},"name":"for_each","qualname":"::iter::iterator::Iterator::for_each","value":"fn <F> (self, mut f: F) -> ()","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3844},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1170620,"byte_end":1170626,"line_start":599,"line_end":599,"column_start":8,"column_end":14},"name":"filter","qualname":"::iter::iterator::Iterator::filter","value":"fn <P> (self, predicate: P) -> Filter<Self, P>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3846},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1172787,"byte_end":1172797,"line_start":656,"line_end":656,"column_start":8,"column_end":18},"name":"filter_map","qualname":"::iter::iterator::Iterator::filter_map","value":"fn <B, F> (self, f: F) -> FilterMap<Self, F>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3848},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1174370,"byte_end":1174379,"line_start":702,"line_end":702,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::iter::iterator::Iterator::enumerate","value":"fn (self) -> Enumerate<Self>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3850},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1175959,"byte_end":1175967,"line_start":748,"line_end":748,"column_start":8,"column_end":16},"name":"peekable","qualname":"::iter::iterator::Iterator::peekable","value":"fn (self) -> Peekable<Self>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3852},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1177898,"byte_end":1177908,"line_start":809,"line_end":809,"column_start":8,"column_end":18},"name":"skip_while","qualname":"::iter::iterator::Iterator::skip_while","value":"fn <P> (self, predicate: P) -> SkipWhile<Self, P>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3854},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1180552,"byte_end":1180562,"line_start":889,"line_end":889,"column_start":8,"column_end":18},"name":"take_while","qualname":"::iter::iterator::Iterator::take_while","value":"fn <P> (self, predicate: P) -> TakeWhile<Self, P>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3856},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1181217,"byte_end":1181221,"line_start":913,"line_end":913,"column_start":8,"column_end":12},"name":"skip","qualname":"::iter::iterator::Iterator::skip","value":"fn (self, n: usize) -> Skip<Self>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3858},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1182070,"byte_end":1182074,"line_start":945,"line_end":945,"column_start":8,"column_end":12},"name":"take","qualname":"::iter::iterator::Iterator::take","value":"fn (self, n: usize) -> Take<Self>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3860},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1183532,"byte_end":1183536,"line_start":988,"line_end":988,"column_start":8,"column_end":12},"name":"scan","qualname":"::iter::iterator::Iterator::scan","value":"fn <St, B, F> (self, initial_state: St, f: F) -> Scan<Self, St, F>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3862},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1184948,"byte_end":1184956,"line_start":1026,"line_end":1026,"column_start":8,"column_end":16},"name":"flat_map","qualname":"::iter::iterator::Iterator::flat_map","value":"fn <U, F> (self, f: F) -> FlatMap<Self, U, F>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3864},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1187511,"byte_end":1187518,"line_start":1099,"line_end":1099,"column_start":8,"column_end":15},"name":"flatten","qualname":"::iter::iterator::Iterator::flatten","value":"fn (self) -> Flatten<Self>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3866},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1189436,"byte_end":1189440,"line_start":1160,"line_end":1160,"column_start":8,"column_end":12},"name":"fuse","qualname":"::iter::iterator::Iterator::fuse","value":"fn (self) -> Fuse<Self>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3868},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1191050,"byte_end":1191057,"line_start":1214,"line_end":1214,"column_start":8,"column_end":15},"name":"inspect","qualname":"::iter::iterator::Iterator::inspect","value":"fn <F> (self, f: F) -> Inspect<Self, F>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3870},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1192272,"byte_end":1192278,"line_start":1257,"line_end":1257,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::iter::iterator::Iterator::by_ref","value":"fn (&mut self) -> &mut Self","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3872},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1196321,"byte_end":1196328,"line_start":1372,"line_end":1372,"column_start":8,"column_end":15},"name":"collect","qualname":"::iter::iterator::Iterator::collect","value":"fn <B> (self) -> B","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3874},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1197110,"byte_end":1197119,"line_start":1397,"line_end":1397,"column_start":8,"column_end":17},"name":"partition","qualname":"::iter::iterator::Iterator::partition","value":"fn <B, F> (self, mut f: F) -> (B, B)","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3876},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1200044,"byte_end":1200052,"line_start":1475,"line_end":1475,"column_start":8,"column_end":16},"name":"try_fold","qualname":"::iter::iterator::Iterator::try_fold","value":"fn <B, F, R> (&mut self, init: B, mut f: F) -> R","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3878},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1201450,"byte_end":1201462,"line_start":1514,"line_end":1514,"column_start":8,"column_end":20},"name":"try_for_each","qualname":"::iter::iterator::Iterator::try_for_each","value":"fn <F, R> (&mut self, mut f: F) -> R","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3880},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1203895,"byte_end":1203899,"line_start":1589,"line_end":1589,"column_start":8,"column_end":12},"name":"fold","qualname":"::iter::iterator::Iterator::fold","value":"fn <B, F> (mut self, init: B, mut f: F) -> B","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3882},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1205255,"byte_end":1205258,"line_start":1634,"line_end":1634,"column_start":8,"column_end":11},"name":"all","qualname":"::iter::iterator::Iterator::all","value":"fn <F> (&mut self, mut f: F) -> bool","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3884},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1206700,"byte_end":1206703,"line_start":1682,"line_end":1682,"column_start":8,"column_end":11},"name":"any","qualname":"::iter::iterator::Iterator::any","value":"fn <F> (&mut self, mut f: F) -> bool","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3886},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1208514,"byte_end":1208518,"line_start":1736,"line_end":1736,"column_start":8,"column_end":12},"name":"find","qualname":"::iter::iterator::Iterator::find","value":"fn <P> (&mut self, mut predicate: P) -> Option<Self::Item>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3888},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1209414,"byte_end":1209422,"line_start":1766,"line_end":1766,"column_start":8,"column_end":16},"name":"find_map","qualname":"::iter::iterator::Iterator::find_map","value":"fn <B, F> (&mut self, mut f: F) -> Option<B>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3890},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1211679,"byte_end":1211687,"line_start":1835,"line_end":1835,"column_start":8,"column_end":16},"name":"position","qualname":"::iter::iterator::Iterator::position","value":"fn <P> (&mut self, mut predicate: P) -> Option<usize>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3892},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1213356,"byte_end":1213365,"line_start":1886,"line_end":1886,"column_start":8,"column_end":17},"name":"rposition","qualname":"::iter::iterator::Iterator::rposition","value":"fn <P> (&mut self, mut predicate: P) -> Option<usize>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3894},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1214481,"byte_end":1214484,"line_start":1920,"line_end":1920,"column_start":8,"column_end":11},"name":"max","qualname":"::iter::iterator::Iterator::max","value":"fn (self) -> Option<Self::Item>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3896},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1215388,"byte_end":1215391,"line_start":1950,"line_end":1950,"column_start":8,"column_end":11},"name":"min","qualname":"::iter::iterator::Iterator::min","value":"fn (self) -> Option<Self::Item>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3898},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1216270,"byte_end":1216280,"line_start":1976,"line_end":1976,"column_start":8,"column_end":18},"name":"max_by_key","qualname":"::iter::iterator::Iterator::max_by_key","value":"fn <B, F> (self, f: F) -> Option<Self::Item>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3900},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1217209,"byte_end":1217215,"line_start":2003,"line_end":2003,"column_start":8,"column_end":14},"name":"max_by","qualname":"::iter::iterator::Iterator::max_by","value":"fn <F> (self, mut compare: F) -> Option<Self::Item>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3902},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1218159,"byte_end":1218169,"line_start":2029,"line_end":2029,"column_start":8,"column_end":18},"name":"min_by_key","qualname":"::iter::iterator::Iterator::min_by_key","value":"fn <B, F> (self, f: F) -> Option<Self::Item>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3904},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1219106,"byte_end":1219112,"line_start":2056,"line_end":2056,"column_start":8,"column_end":14},"name":"min_by","qualname":"::iter::iterator::Iterator::min_by","value":"fn <F> (self, mut compare: F) -> Option<Self::Item>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3906},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1220291,"byte_end":1220294,"line_start":2093,"line_end":2093,"column_start":8,"column_end":11},"name":"rev","qualname":"::iter::iterator::Iterator::rev","value":"fn (self) -> Rev<Self>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3908},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1221081,"byte_end":1221086,"line_start":2120,"line_end":2120,"column_start":8,"column_end":13},"name":"unzip","qualname":"::iter::iterator::Iterator::unzip","value":"fn <A, B, FromA, FromB> (self) -> (FromA, FromB)","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3910},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1222206,"byte_end":1222212,"line_start":2159,"line_end":2159,"column_start":8,"column_end":14},"name":"cloned","qualname":"::iter::iterator::Iterator::cloned","value":"fn <'a, T> (self) -> Cloned<Self>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3912},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1223202,"byte_end":1223207,"line_start":2192,"line_end":2192,"column_start":8,"column_end":13},"name":"cycle","qualname":"::iter::iterator::Iterator::cycle","value":"fn (self) -> Cycle<Self>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3914},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1223967,"byte_end":1223970,"line_start":2219,"line_end":2219,"column_start":8,"column_end":11},"name":"sum","qualname":"::iter::iterator::Iterator::sum","value":"fn <S> (self) -> S","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3916},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1224769,"byte_end":1224776,"line_start":2247,"line_end":2247,"column_start":8,"column_end":15},"name":"product","qualname":"::iter::iterator::Iterator::product","value":"fn <P> (self) -> P","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3918},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1225060,"byte_end":1225063,"line_start":2257,"line_end":2257,"column_start":8,"column_end":11},"name":"cmp","qualname":"::iter::iterator::Iterator::cmp","value":"fn <I> (mut self, other: I) -> Ordering","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3920},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1225973,"byte_end":1225984,"line_start":2289,"line_end":2289,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"::iter::iterator::Iterator::partial_cmp","value":"fn <I> (mut self, other: I) -> Option<Ordering>","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3922},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1226926,"byte_end":1226928,"line_start":2321,"line_end":2321,"column_start":8,"column_end":10},"name":"eq","qualname":"::iter::iterator::Iterator::eq","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3924},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1227604,"byte_end":1227606,"line_start":2346,"line_end":2346,"column_start":8,"column_end":10},"name":"ne","qualname":"::iter::iterator::Iterator::ne","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3926},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1228297,"byte_end":1228299,"line_start":2371,"line_end":2371,"column_start":8,"column_end":10},"name":"lt","qualname":"::iter::iterator::Iterator::lt","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3928},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1229206,"byte_end":1229208,"line_start":2401,"line_end":2401,"column_start":8,"column_end":10},"name":"le","qualname":"::iter::iterator::Iterator::le","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3930},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1230112,"byte_end":1230114,"line_start":2431,"line_end":2431,"column_start":8,"column_end":10},"name":"gt","qualname":"::iter::iterator::Iterator::gt","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":3932},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1231030,"byte_end":1231032,"line_start":2461,"line_end":2461,"column_start":8,"column_end":10},"name":"ge","qualname":"::iter::iterator::Iterator::ge","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":3820},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151470,"byte_end":1151515,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(_Self = \"&str\",\n                            label =\n                                \"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"),\n                         label =\n                             \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1151516,"byte_end":1151752,"line_start":32,"line_end":38,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":3970},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1234086,"byte_end":1234090,"line_start":25,"line_end":25,"column_start":11,"column_end":15},"name":"Step","qualname":"::iter::range::Step","value":"Step: Clone + PartialOrd + Sized","parent":null,"children":[{"krate":0,"index":3972},{"krate":0,"index":3974},{"krate":0,"index":3976},{"krate":0,"index":3978},{"krate":0,"index":3980},{"krate":0,"index":3982}],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1233943,"byte_end":1234075,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3972},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1234364,"byte_end":1234377,"line_start":31,"line_end":31,"column_start":8,"column_end":21},"name":"steps_between","qualname":"::iter::range::Step::steps_between","value":"fn (start: &Self, end: &Self) -> Option<usize>","parent":{"krate":0,"index":3970},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1233943,"byte_end":1234075,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3974},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1234484,"byte_end":1234495,"line_start":34,"line_end":34,"column_start":8,"column_end":19},"name":"replace_one","qualname":"::iter::range::Step::replace_one","value":"fn (&mut self) -> Self","parent":{"krate":0,"index":3970},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1233943,"byte_end":1234075,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3976},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1234578,"byte_end":1234590,"line_start":37,"line_end":37,"column_start":8,"column_end":20},"name":"replace_zero","qualname":"::iter::range::Step::replace_zero","value":"fn (&mut self) -> Self","parent":{"krate":0,"index":3970},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1233943,"byte_end":1234075,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3978},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1234671,"byte_end":1234678,"line_start":40,"line_end":40,"column_start":8,"column_end":15},"name":"add_one","qualname":"::iter::range::Step::add_one","value":"fn (&self) -> Self","parent":{"krate":0,"index":3970},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1233943,"byte_end":1234075,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3980},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1234760,"byte_end":1234767,"line_start":43,"line_end":43,"column_start":8,"column_end":15},"name":"sub_one","qualname":"::iter::range::Step::sub_one","value":"fn (&self) -> Self","parent":{"krate":0,"index":3970},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1233943,"byte_end":1234075,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3982},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1234841,"byte_end":1234850,"line_start":46,"line_end":46,"column_start":8,"column_end":17},"name":"add_usize","qualname":"::iter::range::Step::add_usize","value":"fn (&self, n: usize) -> Option<Self>","parent":{"krate":0,"index":3970},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1233943,"byte_end":1234075,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4066},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1247380,"byte_end":1247396,"line_start":468,"line_end":468,"column_start":8,"column_end":24},"name":"private_try_from","qualname":"::iter::range::PrivateTryFromUsize::private_try_from","value":"fn (n: usize) -> Result<Self, ()>","parent":{"krate":0,"index":4064},"children":[],"decl_id":null,"docs":" Compensate removal of some impls per\n https://github.com/rust-lang/rust/pull/49305#issuecomment-376293243\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":40330},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1249919,"byte_end":1249925,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Repeat","qualname":"::iter::sources::Repeat","value":"Repeat {  }","parent":null,"children":[{"krate":0,"index":26139}],"decl_id":null,"docs":" An iterator that repeats an element endlessly.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1249862,"byte_end":1249907,"line_start":23,"line_end":23,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":4110},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1252141,"byte_end":1252147,"line_start":104,"line_end":104,"column_start":8,"column_end":14},"name":"repeat","qualname":"::iter::sources::repeat","value":"fn <T> (elt: T) -> Repeat<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that endlessly repeats a single element.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1252078,"byte_end":1252087,"line_start":102,"line_end":102,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1252088,"byte_end":1252133,"line_start":103,"line_end":103,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":40340},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1252576,"byte_end":1252586,"line_start":117,"line_end":117,"column_start":12,"column_end":22},"name":"RepeatWith","qualname":"::iter::sources::RepeatWith","value":"RepeatWith {  }","parent":null,"children":[{"krate":0,"index":26147}],"decl_id":null,"docs":" An iterator that repeats elements of type `A` endlessly by\n applying the provided closure `F: FnMut() -> A`.","sig":null,"attributes":[{"value":"unstable(feature = \"iterator_repeat_with\", issue = \"48169\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1252502,"byte_end":1252564,"line_start":116,"line_end":116,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1252565,"byte_end":1252609,"line_start":117,"line_end":119,"column_start":1,"column_end":2}}]},{"kind":"Function","id":{"krate":0,"index":4128},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1255616,"byte_end":1255627,"line_start":213,"line_end":213,"column_start":8,"column_end":19},"name":"repeat_with","qualname":"::iter::sources::repeat_with","value":"fn <A, F> (repeater: F) -> RepeatWith<F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that repeats elements of type `A` endlessly by\n applying the provided closure, the repeater, `F: FnMut() -> A`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1255536,"byte_end":1255545,"line_start":211,"line_end":211,"column_start":1,"column_end":10}},{"value":"unstable(feature = \"iterator_repeat_with\", issue = \"48169\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1255546,"byte_end":1255608,"line_start":212,"line_end":212,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":4130},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1255935,"byte_end":1255940,"line_start":223,"line_end":223,"column_start":12,"column_end":17},"name":"Empty","qualname":"::iter::sources::Empty","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields nothing.","sig":null,"attributes":[{"value":"stable(feature = \"iter_empty\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1255873,"byte_end":1255923,"line_start":222,"line_end":222,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":4164},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1257695,"byte_end":1257700,"line_start":298,"line_end":298,"column_start":8,"column_end":13},"name":"empty","qualname":"::iter::sources::empty","value":"fn <T> () -> Empty<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator that yields nothing.","sig":null,"attributes":[{"value":"stable(feature = \"iter_empty\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1257637,"byte_end":1257687,"line_start":297,"line_end":297,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":40352},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1258014,"byte_end":1258018,"line_start":309,"line_end":309,"column_start":12,"column_end":16},"name":"Once","qualname":"::iter::sources::Once","value":"Once {  }","parent":null,"children":[{"krate":0,"index":26157}],"decl_id":null,"docs":" An iterator that yields an element exactly once.","sig":null,"attributes":[{"value":"stable(feature = \"iter_once\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1257953,"byte_end":1258002,"line_start":308,"line_end":308,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":4186},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1260380,"byte_end":1260384,"line_start":398,"line_end":398,"column_start":8,"column_end":12},"name":"once","qualname":"::iter::sources::once","value":"fn <T> (value: T) -> Once<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator that yields an element exactly once.","sig":null,"attributes":[{"value":"stable(feature = \"iter_once\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1260323,"byte_end":1260372,"line_start":397,"line_end":397,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":4206},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1263487,"byte_end":1263499,"line_start":109,"line_end":109,"column_start":11,"column_end":23},"name":"FromIterator","qualname":"::iter::traits::FromIterator","value":"FromIterator<A>: Sized","parent":null,"children":[{"krate":0,"index":4208}],"decl_id":null,"docs":" Conversion from an `Iterator`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1263284,"byte_end":1263329,"line_start":106,"line_end":106,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"a collection of type `{Self}` cannot be built from an iterator over elements of type `{A}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1263330,"byte_end":1263476,"line_start":107,"line_end":108,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":4208},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1264023,"byte_end":1264032,"line_start":130,"line_end":130,"column_start":8,"column_end":17},"name":"from_iter","qualname":"::iter::traits::FromIterator::from_iter","value":"fn <T> (iter: T) -> Self","parent":{"krate":0,"index":4206},"children":[],"decl_id":null,"docs":" Conversion from an `Iterator`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1263284,"byte_end":1263329,"line_start":106,"line_end":106,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"a collection of type `{Self}` cannot be built from an iterator over elements of type `{A}`\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1263330,"byte_end":1263476,"line_start":107,"line_end":108,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":4210},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1266392,"byte_end":1266404,"line_start":219,"line_end":219,"column_start":11,"column_end":23},"name":"IntoIterator","qualname":"::iter::traits::IntoIterator","value":"IntoIterator","parent":null,"children":[{"krate":0,"index":4212},{"krate":0,"index":4214},{"krate":0,"index":4216}],"decl_id":null,"docs":" Conversion into an `Iterator`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1266336,"byte_end":1266381,"line_start":218,"line_end":218,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":4212},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1266520,"byte_end":1266524,"line_start":222,"line_end":222,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::traits::IntoIterator::Item","value":"type Item;","parent":{"krate":0,"index":4210},"children":[],"decl_id":null,"docs":" The type of the elements being iterated over.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1266465,"byte_end":1266510,"line_start":221,"line_end":221,"column_start":5,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":4214},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1266643,"byte_end":1266651,"line_start":226,"line_end":226,"column_start":10,"column_end":18},"name":"IntoIter","qualname":"::iter::traits::IntoIterator::IntoIter","value":"type IntoIter: Iterator<Item=Self::Item>;","parent":{"krate":0,"index":4210},"children":[],"decl_id":null,"docs":" Which kind of iterator are we turning this into?\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1266588,"byte_end":1266633,"line_start":225,"line_end":225,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4216},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1267230,"byte_end":1267239,"line_start":248,"line_end":248,"column_start":8,"column_end":17},"name":"into_iter","qualname":"::iter::traits::IntoIterator::into_iter","value":"fn (self) -> Self::IntoIter","parent":{"krate":0,"index":4210},"children":[],"decl_id":null,"docs":" Conversion into an `Iterator`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1266336,"byte_end":1266381,"line_start":218,"line_end":218,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":4226},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1269662,"byte_end":1269668,"line_start":331,"line_end":331,"column_start":11,"column_end":17},"name":"Extend","qualname":"::iter::traits::Extend","value":"Extend<A>","parent":null,"children":[{"krate":0,"index":4228}],"decl_id":null,"docs":" Extend a collection with the contents of an iterator.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1269606,"byte_end":1269651,"line_start":330,"line_end":330,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4228},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1270246,"byte_end":1270252,"line_start":352,"line_end":352,"column_start":8,"column_end":14},"name":"extend","qualname":"::iter::traits::Extend::extend","value":"fn <T> (&mut self, iter: T) -> ()","parent":{"krate":0,"index":4226},"children":[],"decl_id":null,"docs":" Extend a collection with the contents of an iterator.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1269606,"byte_end":1269651,"line_start":330,"line_end":330,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":4230},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1271534,"byte_end":1271553,"line_start":390,"line_end":390,"column_start":11,"column_end":30},"name":"DoubleEndedIterator","qualname":"::iter::traits::DoubleEndedIterator","value":"DoubleEndedIterator: Iterator","parent":null,"children":[{"krate":0,"index":4232},{"krate":0,"index":4234},{"krate":0,"index":4236},{"krate":0,"index":4238}],"decl_id":null,"docs":" An iterator able to yield elements from both ends.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1271478,"byte_end":1271523,"line_start":389,"line_end":389,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4232},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1272419,"byte_end":1272428,"line_start":418,"line_end":418,"column_start":8,"column_end":17},"name":"next_back","qualname":"::iter::traits::DoubleEndedIterator::next_back","value":"fn (&mut self) -> Option<Self::Item>","parent":{"krate":0,"index":4230},"children":[],"decl_id":null,"docs":" An iterator able to yield elements from both ends.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1271478,"byte_end":1271523,"line_start":389,"line_end":389,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4234},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1273505,"byte_end":1273514,"line_start":454,"line_end":454,"column_start":8,"column_end":17},"name":"try_rfold","qualname":"::iter::traits::DoubleEndedIterator::try_rfold","value":"fn <B, F, R> (&mut self, init: B, mut f: F) -> R","parent":{"krate":0,"index":4230},"children":[],"decl_id":null,"docs":" An iterator able to yield elements from both ends.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1271478,"byte_end":1271523,"line_start":389,"line_end":389,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4236},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1275574,"byte_end":1275579,"line_start":517,"line_end":517,"column_start":8,"column_end":13},"name":"rfold","qualname":"::iter::traits::DoubleEndedIterator::rfold","value":"fn <B, F> (mut self, accum: B, mut f: F) -> B","parent":{"krate":0,"index":4230},"children":[],"decl_id":null,"docs":" An iterator able to yield elements from both ends.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1271478,"byte_end":1271523,"line_start":389,"line_end":389,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4238},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1277350,"byte_end":1277355,"line_start":567,"line_end":567,"column_start":8,"column_end":13},"name":"rfind","qualname":"::iter::traits::DoubleEndedIterator::rfind","value":"fn <P> (&mut self, mut predicate: P) -> Option<Self::Item>","parent":{"krate":0,"index":4230},"children":[],"decl_id":null,"docs":" An iterator able to yield elements from both ends.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1271478,"byte_end":1271523,"line_start":389,"line_end":389,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":4244},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1279930,"byte_end":1279947,"line_start":653,"line_end":653,"column_start":11,"column_end":28},"name":"ExactSizeIterator","qualname":"::iter::traits::ExactSizeIterator","value":"ExactSizeIterator: Iterator","parent":null,"children":[{"krate":0,"index":4246},{"krate":0,"index":4248}],"decl_id":null,"docs":" An iterator that knows its exact length.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1279874,"byte_end":1279919,"line_start":652,"line_end":652,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4246},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1280797,"byte_end":1280800,"line_start":679,"line_end":679,"column_start":8,"column_end":11},"name":"len","qualname":"::iter::traits::ExactSizeIterator::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":4244},"children":[],"decl_id":null,"docs":" An iterator that knows its exact length.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1279874,"byte_end":1279919,"line_start":652,"line_end":652,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4248},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1281829,"byte_end":1281837,"line_start":711,"line_end":711,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::iter::traits::ExactSizeIterator::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":4244},"children":[],"decl_id":null,"docs":" An iterator that knows its exact length.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1279874,"byte_end":1279919,"line_start":652,"line_end":652,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":4256},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1282749,"byte_end":1282752,"line_start":737,"line_end":737,"column_start":11,"column_end":14},"name":"Sum","qualname":"::iter::traits::Sum","value":"Sum<A = Self>: Sized","parent":null,"children":[{"krate":0,"index":4258}],"decl_id":null,"docs":" Trait to represent types that can be created by summing up an iterator.","sig":null,"attributes":[{"value":"stable(feature = \"iter_arith_traits\", since = \"1.12.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1282680,"byte_end":1282738,"line_start":736,"line_end":736,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":4258},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1282955,"byte_end":1282958,"line_start":741,"line_end":741,"column_start":8,"column_end":11},"name":"sum","qualname":"::iter::traits::Sum::sum","value":"fn <I> (iter: I) -> Self","parent":{"krate":0,"index":4256},"children":[],"decl_id":null,"docs":" Trait to represent types that can be created by summing up an iterator.","sig":null,"attributes":[{"value":"stable(feature = \"iter_arith_traits\", since = \"1.12.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1282680,"byte_end":1282738,"line_start":736,"line_end":736,"column_start":1,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":4260},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1283663,"byte_end":1283670,"line_start":756,"line_end":756,"column_start":11,"column_end":18},"name":"Product","qualname":"::iter::traits::Product","value":"Product<A = Self>: Sized","parent":null,"children":[{"krate":0,"index":4262}],"decl_id":null,"docs":" Trait to represent types that can be created by multiplying elements of an\n iterator.","sig":null,"attributes":[{"value":"stable(feature = \"iter_arith_traits\", since = \"1.12.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1283594,"byte_end":1283652,"line_start":755,"line_end":755,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":4262},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1283872,"byte_end":1283879,"line_start":760,"line_end":760,"column_start":8,"column_end":15},"name":"product","qualname":"::iter::traits::Product::product","value":"fn <I> (iter: I) -> Self","parent":{"krate":0,"index":4260},"children":[],"decl_id":null,"docs":" Trait to represent types that can be created by multiplying elements of an\n iterator.","sig":null,"attributes":[{"value":"stable(feature = \"iter_arith_traits\", since = \"1.12.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1283594,"byte_end":1283652,"line_start":755,"line_end":755,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":4272},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1286869,"byte_end":1286876,"line_start":855,"line_end":855,"column_start":12,"column_end":19},"name":"process","qualname":"<ResultShunt<I, E>>::process","value":"fn <F, U> (iter: I, mut f: F) -> Result<U, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":4294},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1290355,"byte_end":1290368,"line_start":964,"line_end":964,"column_start":11,"column_end":24},"name":"FusedIterator","qualname":"::iter::traits::FusedIterator","value":"FusedIterator: Iterator","parent":null,"children":[],"decl_id":null,"docs":" An iterator that always continues to yield `None` when exhausted.","sig":null,"attributes":[{"value":"stable(feature = \"fused\", since = \"1.26.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1290298,"byte_end":1290344,"line_start":963,"line_end":963,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":4298},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1291466,"byte_end":1291476,"line_start":989,"line_end":989,"column_start":18,"column_end":28},"name":"TrustedLen","qualname":"::iter::traits::TrustedLen","value":"TrustedLen: Iterator","parent":null,"children":[],"decl_id":null,"docs":" An iterator that reports an accurate length using size_hint.","sig":null,"attributes":[{"value":"unstable(feature = \"trusted_len\", issue = \"37572\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1291395,"byte_end":1291448,"line_start":988,"line_end":988,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":40786},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1073151,"byte_end":1073154,"line_start":432,"line_end":432,"column_start":12,"column_end":15},"name":"Rev","qualname":"::iter::Rev","value":"Rev {  }","parent":null,"children":[{"krate":0,"index":26509}],"decl_id":null,"docs":" A double-ended iterator with the direction inverted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1073020,"byte_end":1073093,"line_start":430,"line_end":430,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1073094,"byte_end":1073139,"line_start":431,"line_end":431,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":40796},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1075831,"byte_end":1075837,"line_start":527,"line_end":527,"column_start":12,"column_end":18},"name":"Cloned","qualname":"::iter::Cloned","value":"Cloned {  }","parent":null,"children":[{"krate":0,"index":26517}],"decl_id":null,"docs":" An iterator that clones the elements of an underlying iterator.","sig":null,"attributes":[{"value":"stable(feature = \"iter_cloned\", since = \"1.1.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1075670,"byte_end":1075721,"line_start":524,"line_end":524,"column_start":1,"column_end":52}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1075722,"byte_end":1075795,"line_start":525,"line_end":525,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":40806},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1078837,"byte_end":1078842,"line_start":637,"line_end":637,"column_start":12,"column_end":17},"name":"Cycle","qualname":"::iter::Cycle","value":"Cycle {  }","parent":null,"children":[{"krate":0,"index":26525},{"krate":0,"index":26527}],"decl_id":null,"docs":" An iterator that repeats endlessly.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1078706,"byte_end":1078779,"line_start":635,"line_end":635,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1078780,"byte_end":1078825,"line_start":636,"line_end":636,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":40816},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1080139,"byte_end":1080145,"line_start":680,"line_end":680,"column_start":12,"column_end":18},"name":"StepBy","qualname":"::iter::StepBy","value":"StepBy {  }","parent":null,"children":[{"krate":0,"index":26535},{"krate":0,"index":26537},{"krate":0,"index":26539}],"decl_id":null,"docs":" An iterator for stepping iterators by a custom amount.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1079898,"byte_end":1079971,"line_start":675,"line_end":675,"column_start":1,"column_end":74}},{"value":"unstable(feature = \"iterator_step_by\",\n           reason = \"unstable replacement of Range::step_by\",\n           issue = \"27741\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1079972,"byte_end":1080103,"line_start":676,"line_end":678,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":40826},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1083154,"byte_end":1083159,"line_start":775,"line_end":775,"column_start":12,"column_end":17},"name":"Chain","qualname":"::iter::Chain","value":"Chain {  }","parent":null,"children":[{"krate":0,"index":26547},{"krate":0,"index":26549},{"krate":0,"index":26551}],"decl_id":null,"docs":" An iterator that strings two iterators together.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1083023,"byte_end":1083096,"line_start":773,"line_end":773,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1083097,"byte_end":1083142,"line_start":774,"line_end":774,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":40846},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1090495,"byte_end":1090498,"line_start":1026,"line_end":1026,"column_start":12,"column_end":15},"name":"Zip","qualname":"::iter::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":26571},{"krate":0,"index":26573},{"krate":0,"index":26575},{"krate":0,"index":26577}],"decl_id":null,"docs":" An iterator that iterates two other iterators simultaneously.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1090364,"byte_end":1090437,"line_start":1024,"line_end":1024,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1090438,"byte_end":1090483,"line_start":1025,"line_end":1025,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":4486},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1091479,"byte_end":1091483,"line_start":1069,"line_end":1069,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::ZipImpl::Item","value":"type Item;","parent":{"krate":0,"index":4484},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4488},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1091492,"byte_end":1091495,"line_start":1070,"line_end":1070,"column_start":8,"column_end":11},"name":"new","qualname":"::iter::ZipImpl::new","value":"fn (a: A, b: B) -> Self","parent":{"krate":0,"index":4484},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4490},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1091524,"byte_end":1091528,"line_start":1071,"line_end":1071,"column_start":8,"column_end":12},"name":"next","qualname":"::iter::ZipImpl::next","value":"fn (&mut self) -> Option<Self::Item>","parent":{"krate":0,"index":4484},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4492},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1091570,"byte_end":1091579,"line_start":1072,"line_end":1072,"column_start":8,"column_end":17},"name":"size_hint","qualname":"::iter::ZipImpl::size_hint","value":"fn (&self) -> (usize, Option<usize>)","parent":{"krate":0,"index":4484},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4494},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1091621,"byte_end":1091624,"line_start":1073,"line_end":1073,"column_start":8,"column_end":11},"name":"nth","qualname":"::iter::ZipImpl::nth","value":"fn (&mut self, n: usize) -> Option<Self::Item>","parent":{"krate":0,"index":4484},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4496},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1091676,"byte_end":1091685,"line_start":1074,"line_end":1074,"column_start":8,"column_end":17},"name":"super_nth","qualname":"::iter::ZipImpl::super_nth","value":"fn (&mut self, mut n: usize) -> Option<Self::Item>","parent":{"krate":0,"index":4484},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4498},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1091874,"byte_end":1091883,"line_start":1081,"line_end":1081,"column_start":8,"column_end":17},"name":"next_back","qualname":"::iter::ZipImpl::next_back","value":"fn (&mut self) -> Option<Self::Item>","parent":{"krate":0,"index":4484},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":40856},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1099041,"byte_end":1099044,"line_start":1327,"line_end":1327,"column_start":12,"column_end":15},"name":"Map","qualname":"::iter::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":26591},{"krate":0,"index":26593}],"decl_id":null,"docs":" An iterator that maps the values of `iter` with `f`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1098893,"byte_end":1098966,"line_start":1324,"line_end":1324,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1098967,"byte_end":1099012,"line_start":1325,"line_end":1325,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":40862},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1102181,"byte_end":1102187,"line_start":1438,"line_end":1438,"column_start":12,"column_end":18},"name":"Filter","qualname":"::iter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":26603},{"krate":0,"index":26605}],"decl_id":null,"docs":" An iterator that filters the elements of `iter` with `predicate`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1102033,"byte_end":1102106,"line_start":1435,"line_end":1435,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1102107,"byte_end":1102152,"line_start":1436,"line_end":1436,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":40868},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1106311,"byte_end":1106320,"line_start":1570,"line_end":1570,"column_start":12,"column_end":21},"name":"FilterMap","qualname":"::iter::FilterMap","value":"FilterMap {  }","parent":null,"children":[{"krate":0,"index":26615},{"krate":0,"index":26617}],"decl_id":null,"docs":" An iterator that uses `f` to both filter and map elements from `iter`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1106163,"byte_end":1106236,"line_start":1567,"line_end":1567,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1106237,"byte_end":1106282,"line_start":1568,"line_end":1568,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":40874},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1109515,"byte_end":1109524,"line_start":1680,"line_end":1680,"column_start":12,"column_end":21},"name":"Enumerate","qualname":"::iter::Enumerate","value":"Enumerate {  }","parent":null,"children":[{"krate":0,"index":26627},{"krate":0,"index":26629}],"decl_id":null,"docs":" An iterator that yields the current count and the element during iteration.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1109384,"byte_end":1109457,"line_start":1678,"line_end":1678,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1109458,"byte_end":1109503,"line_start":1679,"line_end":1679,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":40884},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1114276,"byte_end":1114284,"line_start":1841,"line_end":1841,"column_start":12,"column_end":20},"name":"Peekable","qualname":"::iter::Peekable","value":"Peekable {  }","parent":null,"children":[{"krate":0,"index":26637},{"krate":0,"index":26639}],"decl_id":null,"docs":" An iterator with a `peek()` that returns an optional reference to the next\n element.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1114145,"byte_end":1114218,"line_start":1839,"line_end":1839,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1114219,"byte_end":1114264,"line_start":1840,"line_end":1840,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4696},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1118645,"byte_end":1118649,"line_start":1984,"line_end":1984,"column_start":12,"column_end":16},"name":"peek","qualname":"<Peekable<I>>::peek","value":"fn (&mut self) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":40894},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1119368,"byte_end":1119377,"line_start":2006,"line_end":2006,"column_start":12,"column_end":21},"name":"SkipWhile","qualname":"::iter::SkipWhile","value":"SkipWhile {  }","parent":null,"children":[{"krate":0,"index":26647},{"krate":0,"index":26649},{"krate":0,"index":26651}],"decl_id":null,"docs":" An iterator that rejects elements while `predicate` is true.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1119220,"byte_end":1119293,"line_start":2003,"line_end":2003,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1119294,"byte_end":1119339,"line_start":2004,"line_end":2004,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":40900},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1121768,"byte_end":1121777,"line_start":2089,"line_end":2089,"column_start":12,"column_end":21},"name":"TakeWhile","qualname":"::iter::TakeWhile","value":"TakeWhile {  }","parent":null,"children":[{"krate":0,"index":26661},{"krate":0,"index":26663},{"krate":0,"index":26665}],"decl_id":null,"docs":" An iterator that only accepts elements while `predicate` is true.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1121620,"byte_end":1121693,"line_start":2086,"line_end":2086,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1121694,"byte_end":1121739,"line_start":2087,"line_end":2087,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":40906},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1124061,"byte_end":1124065,"line_start":2168,"line_end":2168,"column_start":12,"column_end":16},"name":"Skip","qualname":"::iter::Skip","value":"Skip {  }","parent":null,"children":[{"krate":0,"index":26675},{"krate":0,"index":26677}],"decl_id":null,"docs":" An iterator that skips over `n` elements of `iter`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1123930,"byte_end":1124003,"line_start":2166,"line_end":2166,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1124004,"byte_end":1124049,"line_start":2167,"line_end":2167,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":40916},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1127855,"byte_end":1127859,"line_start":2306,"line_end":2306,"column_start":12,"column_end":16},"name":"Take","qualname":"::iter::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":26685},{"krate":0,"index":26687}],"decl_id":null,"docs":" An iterator that only iterates over the first `n` iterations of `iter`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1127724,"byte_end":1127797,"line_start":2304,"line_end":2304,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1127798,"byte_end":1127843,"line_start":2305,"line_end":2305,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":40926},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1130140,"byte_end":1130144,"line_start":2390,"line_end":2390,"column_start":12,"column_end":16},"name":"Scan","qualname":"::iter::Scan","value":"Scan {  }","parent":null,"children":[{"krate":0,"index":26695},{"krate":0,"index":26697},{"krate":0,"index":26699}],"decl_id":null,"docs":" An iterator to maintain state while iterating another iterator.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1129992,"byte_end":1130065,"line_start":2387,"line_end":2387,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1130066,"byte_end":1130111,"line_start":2388,"line_end":2388,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4792},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1131964,"byte_end":1131971,"line_start":2449,"line_end":2449,"column_start":12,"column_end":19},"name":"FlatMap","qualname":"::iter::FlatMap","value":"FlatMap {  }","parent":null,"children":[{"krate":0,"index":2773}],"decl_id":null,"docs":" An iterator that maps each element to an iterator, and yields the elements\n of the produced iterators.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1131833,"byte_end":1131906,"line_start":2447,"line_end":2447,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1131907,"byte_end":1131952,"line_start":2448,"line_end":2448,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4824},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1134692,"byte_end":1134699,"line_start":2534,"line_end":2534,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::iter::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":2831}],"decl_id":null,"docs":" An iterator that flattens one level of nesting in an iterator of things\n that can be turned into iterators.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1134548,"byte_end":1134621,"line_start":2532,"line_end":2532,"column_start":1,"column_end":74}},{"value":"unstable(feature = \"iterator_flatten\", issue = \"48213\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1134622,"byte_end":1134680,"line_start":2533,"line_end":2533,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":40942},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1142032,"byte_end":1142036,"line_start":2763,"line_end":2763,"column_start":12,"column_end":16},"name":"Fuse","qualname":"::iter::Fuse","value":"Fuse {  }","parent":null,"children":[{"krate":0,"index":26731},{"krate":0,"index":26733}],"decl_id":null,"docs":" An iterator that yields `None` forever after the underlying iterator\n yields `None` once.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1141901,"byte_end":1141974,"line_start":2761,"line_end":2761,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1141975,"byte_end":1142020,"line_start":2762,"line_end":2762,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":40952},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1147518,"byte_end":1147525,"line_start":2988,"line_end":2988,"column_start":12,"column_end":19},"name":"Inspect","qualname":"::iter::Inspect","value":"Inspect {  }","parent":null,"children":[{"krate":0,"index":26741},{"krate":0,"index":26743}],"decl_id":null,"docs":" An iterator that calls a function with a reference to each element before\n yielding it.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1147370,"byte_end":1147443,"line_start":2985,"line_end":2985,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1147444,"byte_end":1147489,"line_start":2986,"line_end":2986,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":4978},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"option","qualname":"::option","value":"libcore/option.rs","parent":null,"children":[{"krate":0,"index":4980},{"krate":0,"index":4988},{"krate":0,"index":40958},{"krate":0,"index":40996},{"krate":0,"index":40994},{"krate":0,"index":40988},{"krate":0,"index":40976},{"krate":0,"index":40972},{"krate":0,"index":40968},{"krate":0,"index":40964},{"krate":0,"index":40960},{"krate":0,"index":4994},{"krate":0,"index":5042},{"krate":0,"index":5046},{"krate":0,"index":5050},{"krate":0,"index":5054},{"krate":0,"index":5058},{"krate":0,"index":5060},{"krate":0,"index":5064},{"krate":0,"index":5072},{"krate":0,"index":5080},{"krate":0,"index":5088},{"krate":0,"index":41000},{"krate":0,"index":41006},{"krate":0,"index":41002},{"krate":0,"index":5092},{"krate":0,"index":5100},{"krate":0,"index":5104},{"krate":0,"index":5106},{"krate":0,"index":5108},{"krate":0,"index":41010},{"krate":0,"index":41012},{"krate":0,"index":5110},{"krate":0,"index":5118},{"krate":0,"index":5122},{"krate":0,"index":5124},{"krate":0,"index":5126},{"krate":0,"index":5128},{"krate":0,"index":41016},{"krate":0,"index":41018},{"krate":0,"index":5132},{"krate":0,"index":5140},{"krate":0,"index":5144},{"krate":0,"index":5146},{"krate":0,"index":5148},{"krate":0,"index":41022},{"krate":0,"index":41028},{"krate":0,"index":41024},{"krate":0,"index":5150},{"krate":0,"index":5158},{"krate":0,"index":5162},{"krate":0,"index":5164},{"krate":0,"index":5166},{"krate":0,"index":5168},{"krate":0,"index":41032},{"krate":0,"index":41060},{"krate":0,"index":41058},{"krate":0,"index":41054},{"krate":0,"index":41050},{"krate":0,"index":41046},{"krate":0,"index":41042},{"krate":0,"index":41038},{"krate":0,"index":41034},{"krate":0,"index":5182}],"decl_id":null,"docs":" Optional values.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1296561,"byte_end":1296607,"line_start":146,"line_end":146,"column_start":1,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":26753},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1297243,"byte_end":1297247,"line_start":162,"line_end":162,"column_start":5,"column_end":9},"name":"None","qualname":"::option::Option::None","value":"Option::None","parent":{"krate":0,"index":40958},"children":[],"decl_id":null,"docs":" No value\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1297193,"byte_end":1297238,"line_start":161,"line_end":161,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":26755},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1297326,"byte_end":1297330,"line_start":165,"line_end":165,"column_start":5,"column_end":9},"name":"Some","qualname":"::option::Option::Some","value":"Option::Some(T)","parent":{"krate":0,"index":40958},"children":[],"decl_id":null,"docs":" Some value `T`\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1297276,"byte_end":1297321,"line_start":164,"line_end":164,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":40958},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1297160,"byte_end":1297166,"line_start":159,"line_end":159,"column_start":10,"column_end":16},"name":"Option","qualname":"::option::Option","value":"Option::{None, Some}","parent":null,"children":[{"krate":0,"index":26753},{"krate":0,"index":26755}],"decl_id":null,"docs":" The `Option` type. See [the module level documentation](index.html) for more.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1297105,"byte_end":1297150,"line_start":158,"line_end":158,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1297151,"byte_end":1297382,"line_start":159,"line_end":166,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1297151,"byte_end":1297382,"line_start":159,"line_end":166,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":4996},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1298170,"byte_end":1298177,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"is_some","qualname":"<Option<T>>::is_some","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4998},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1298682,"byte_end":1298689,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Option<T>>::is_none","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5000},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1299943,"byte_end":1299949,"line_start":244,"line_end":244,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<Option<T>>::as_ref","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5002},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1300418,"byte_end":1300424,"line_start":265,"line_end":265,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<Option<T>>::as_mut","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5004},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1301406,"byte_end":1301412,"line_start":299,"line_end":299,"column_start":12,"column_end":18},"name":"expect","qualname":"<Option<T>>::expect","value":"fn (self, msg: &str) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5006},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1302291,"byte_end":1302297,"line_start":332,"line_end":332,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<Option<T>>::unwrap","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5008},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1303016,"byte_end":1303025,"line_start":355,"line_end":355,"column_start":12,"column_end":21},"name":"unwrap_or","qualname":"<Option<T>>::unwrap_or","value":"fn (self, def: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5010},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1303469,"byte_end":1303483,"line_start":373,"line_end":373,"column_start":12,"column_end":26},"name":"unwrap_or_else","qualname":"<Option<T>>::unwrap_or_else","value":"fn <F> (self, f: F) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5012},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1304511,"byte_end":1304514,"line_start":402,"line_end":402,"column_start":12,"column_end":15},"name":"map","qualname":"<Option<T>>::map","value":"fn <U, F> (self, f: F) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5014},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1305081,"byte_end":1305087,"line_start":423,"line_end":423,"column_start":12,"column_end":18},"name":"map_or","qualname":"<Option<T>>::map_or","value":"fn <U, F> (self, default: U, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5016},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1305695,"byte_end":1305706,"line_start":446,"line_end":446,"column_start":12,"column_end":23},"name":"map_or_else","qualname":"<Option<T>>::map_or_else","value":"fn <U, D, F> (self, default: D, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5018},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1306808,"byte_end":1306813,"line_start":478,"line_end":478,"column_start":12,"column_end":17},"name":"ok_or","qualname":"<Option<T>>::ok_or","value":"fn <E> (self, err: E) -> Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5020},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1307655,"byte_end":1307665,"line_start":505,"line_end":505,"column_start":12,"column_end":22},"name":"ok_or_else","qualname":"<Option<T>>::ok_or_else","value":"fn <E, F> (self, err: F) -> Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5022},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1308360,"byte_end":1308364,"line_start":529,"line_end":529,"column_start":12,"column_end":16},"name":"iter","qualname":"<Option<T>>::iter","value":"fn (&self) -> Iter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5024},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1308906,"byte_end":1308914,"line_start":550,"line_end":550,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Option<T>>::iter_mut","value":"fn (&mut self) -> IterMut<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5026},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1309894,"byte_end":1309897,"line_start":583,"line_end":583,"column_start":12,"column_end":15},"name":"and","qualname":"<Option<T>>::and","value":"fn <U> (self, optb: Option<U>) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5028},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1310751,"byte_end":1310759,"line_start":610,"line_end":610,"column_start":12,"column_end":20},"name":"and_then","qualname":"<Option<T>>::and_then","value":"fn <U, F> (self, f: F) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5030},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1311777,"byte_end":1311783,"line_start":641,"line_end":641,"column_start":12,"column_end":18},"name":"filter","qualname":"<Option<T>>::filter","value":"fn <P> (self, predicate: P) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5032},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1312806,"byte_end":1312808,"line_start":679,"line_end":679,"column_start":12,"column_end":14},"name":"or","qualname":"<Option<T>>::or","value":"fn (self, optb: Option<T>) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5034},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1313488,"byte_end":1313495,"line_start":701,"line_end":701,"column_start":12,"column_end":19},"name":"or_else","qualname":"<Option<T>>::or_else","value":"fn <F> (self, f: F) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5036},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1314373,"byte_end":1314386,"line_start":733,"line_end":733,"column_start":12,"column_end":25},"name":"get_or_insert","qualname":"<Option<T>>::get_or_insert","value":"fn (&mut self, v: T) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5038},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1315148,"byte_end":1315166,"line_start":766,"line_end":766,"column_start":12,"column_end":30},"name":"get_or_insert_with","qualname":"<Option<T>>::get_or_insert_with","value":"fn <F> (&mut self, f: F) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5040},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1316002,"byte_end":1316006,"line_start":799,"line_end":799,"column_start":12,"column_end":16},"name":"take","qualname":"<Option<T>>::take","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5044},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1316487,"byte_end":1316493,"line_start":818,"line_end":818,"column_start":12,"column_end":18},"name":"cloned","qualname":"<Option<&'a T>>::cloned","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5048},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1317005,"byte_end":1317011,"line_start":837,"line_end":837,"column_start":12,"column_end":18},"name":"cloned","qualname":"<Option<&'a mut T>>::cloned","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5052},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1318290,"byte_end":1318307,"line_start":873,"line_end":873,"column_start":12,"column_end":29},"name":"unwrap_or_default","qualname":"<Option<T>>::unwrap_or_default","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5056},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1319099,"byte_end":1319108,"line_start":901,"line_end":901,"column_start":12,"column_end":21},"name":"transpose","qualname":"<Option<Result<T, E>>>::transpose","value":"fn (self) -> Result<Option<T>, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":41010},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1322297,"byte_end":1322301,"line_start":1030,"line_end":1030,"column_start":12,"column_end":16},"name":"Iter","qualname":"::option::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":26787}],"decl_id":null,"docs":" An iterator over a reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1322223,"byte_end":1322268,"line_start":1028,"line_end":1028,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":41016},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1323720,"byte_end":1323727,"line_start":1075,"line_end":1075,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::option::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":26797}],"decl_id":null,"docs":" An iterator over a mutable reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1323646,"byte_end":1323691,"line_start":1073,"line_end":1073,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":41022},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1325001,"byte_end":1325009,"line_start":1112,"line_end":1112,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::option::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":26807}],"decl_id":null,"docs":" An iterator over the value in [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1324944,"byte_end":1324989,"line_start":1111,"line_end":1111,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":41032},"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1328621,"byte_end":1328630,"line_start":1218,"line_end":1218,"column_start":12,"column_end":21},"name":"NoneError","qualname":"::option::NoneError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type that results from applying the try operator (`?`) to a `None` value. If you wish\n to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can\n implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that\n returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1328490,"byte_end":1328541,"line_start":1216,"line_end":1216,"column_start":1,"column_end":52}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1328610,"byte_end":1328631,"line_start":1218,"line_end":1218,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1328610,"byte_end":1328631,"line_start":1218,"line_end":1218,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":5194},"span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"raw","qualname":"::raw","value":"libcore/raw.rs","parent":null,"children":[{"krate":0,"index":41064},{"krate":0,"index":41070},{"krate":0,"index":41066}],"decl_id":null,"docs":" Contains struct definitions for the layout of compiler built-in types.","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1329437,"byte_end":1329460,"line_start":11,"line_end":11,"column_start":1,"column_end":24}},{"value":"unstable(feature = \"raw\", issue = \"27751\")","span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1329461,"byte_end":1329507,"line_start":12,"line_end":12,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":41064},"span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1332286,"byte_end":1332297,"line_start":96,"line_end":96,"column_start":12,"column_end":23},"name":"TraitObject","qualname":"::raw::TraitObject","value":"TraitObject { data, vtable }","parent":null,"children":[{"krate":0,"index":26819},{"krate":0,"index":26821}],"decl_id":null,"docs":" The representation of a trait object like `&SomeTrait`.","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1332201,"byte_end":1332211,"line_start":93,"line_end":93,"column_start":1,"column_end":11}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1332235,"byte_end":1332274,"line_start":95,"line_end":95,"column_start":1,"column_end":40}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1332275,"byte_end":1332349,"line_start":96,"line_end":99,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":26819},"span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1332308,"byte_end":1332312,"line_start":97,"line_end":97,"column_start":9,"column_end":13},"name":"data","qualname":"::raw::TraitObject::data","value":"*mut ()","parent":{"krate":0,"index":41064},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":26821},"span":{"file_name":[108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1332331,"byte_end":1332337,"line_start":98,"line_end":98,"column_start":9,"column_end":15},"name":"vtable","qualname":"::raw::TraitObject::vtable","value":"*mut ()","parent":{"krate":0,"index":41064},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":5196},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"result","qualname":"::result","value":"libcore/result.rs","parent":null,"children":[{"krate":0,"index":5198},{"krate":0,"index":5200},{"krate":0,"index":5208},{"krate":0,"index":41072},{"krate":0,"index":41110},{"krate":0,"index":41108},{"krate":0,"index":41102},{"krate":0,"index":41090},{"krate":0,"index":41086},{"krate":0,"index":41082},{"krate":0,"index":41078},{"krate":0,"index":41074},{"krate":0,"index":5210},{"krate":0,"index":5244},{"krate":0,"index":5250},{"krate":0,"index":5256},{"krate":0,"index":5260},{"krate":0,"index":5264},{"krate":0,"index":5266},{"krate":0,"index":5274},{"krate":0,"index":5282},{"krate":0,"index":41114},{"krate":0,"index":41116},{"krate":0,"index":5290},{"krate":0,"index":5298},{"krate":0,"index":5302},{"krate":0,"index":5304},{"krate":0,"index":5306},{"krate":0,"index":5308},{"krate":0,"index":41120},{"krate":0,"index":41122},{"krate":0,"index":5312},{"krate":0,"index":5320},{"krate":0,"index":5324},{"krate":0,"index":5326},{"krate":0,"index":5328},{"krate":0,"index":41126},{"krate":0,"index":41132},{"krate":0,"index":41128},{"krate":0,"index":5330},{"krate":0,"index":5338},{"krate":0,"index":5342},{"krate":0,"index":5344},{"krate":0,"index":5346},{"krate":0,"index":5348},{"krate":0,"index":5362}],"decl_id":null,"docs":" Error handling with the `Result` type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1340222,"byte_end":1340268,"line_start":241,"line_end":241,"column_start":1,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":26823},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1340830,"byte_end":1340832,"line_start":259,"line_end":259,"column_start":5,"column_end":7},"name":"Ok","qualname":"::result::Result::Ok","value":"Result::Ok(T)","parent":{"krate":0,"index":41072},"children":[],"decl_id":null,"docs":" Contains the success value\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1340780,"byte_end":1340825,"line_start":258,"line_end":258,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":26827},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1340971,"byte_end":1340974,"line_start":263,"line_end":263,"column_start":5,"column_end":8},"name":"Err","qualname":"::result::Result::Err","value":"Result::Err(E)","parent":{"krate":0,"index":41072},"children":[],"decl_id":null,"docs":" Contains the error value\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1340921,"byte_end":1340966,"line_start":262,"line_end":262,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":41072},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1340726,"byte_end":1340732,"line_start":256,"line_end":256,"column_start":10,"column_end":16},"name":"Result","qualname":"::result::Result","value":"Result::{Ok, Err}","parent":null,"children":[{"krate":0,"index":26823},{"krate":0,"index":26827}],"decl_id":null,"docs":" `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1340659,"byte_end":1340670,"line_start":254,"line_end":254,"column_start":1,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1340671,"byte_end":1340716,"line_start":255,"line_end":255,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1340717,"byte_end":1341026,"line_start":256,"line_end":264,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1340717,"byte_end":1341026,"line_start":256,"line_end":264,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":5212},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1341879,"byte_end":1341884,"line_start":292,"line_end":292,"column_start":12,"column_end":17},"name":"is_ok","qualname":"<Result<T, E>>::is_ok","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5214},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1342452,"byte_end":1342458,"line_start":316,"line_end":316,"column_start":12,"column_end":18},"name":"is_err","qualname":"<Result<T, E>>::is_err","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5216},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1343269,"byte_end":1343271,"line_start":344,"line_end":344,"column_start":12,"column_end":14},"name":"ok","qualname":"<Result<T, E>>::ok","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5218},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1343988,"byte_end":1343991,"line_start":371,"line_end":371,"column_start":12,"column_end":15},"name":"err","qualname":"<Result<T, E>>::err","value":"fn (self) -> Option<E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5220},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1344839,"byte_end":1344845,"line_start":400,"line_end":400,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<Result<T, E>>::as_ref","value":"fn (&self) -> Result<&T, &E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5222},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1345607,"byte_end":1345613,"line_start":431,"line_end":431,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<Result<T, E>>::as_mut","value":"fn (&mut self) -> Result<&mut T, &mut E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5224},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1346726,"byte_end":1346729,"line_start":466,"line_end":466,"column_start":12,"column_end":15},"name":"map","qualname":"<Result<T, E>>::map","value":"fn <U, F> (self, op: F) -> Result<U, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5226},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1347695,"byte_end":1347702,"line_start":497,"line_end":497,"column_start":12,"column_end":19},"name":"map_err","qualname":"<Result<T, E>>::map_err","value":"fn <F, O> (self, op: O) -> Result<T, F>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5228},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1348597,"byte_end":1348601,"line_start":527,"line_end":527,"column_start":12,"column_end":16},"name":"iter","qualname":"<Result<T, E>>::iter","value":"fn (&self) -> Iter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5230},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1349334,"byte_end":1349342,"line_start":554,"line_end":554,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Result<T, E>>::iter_mut","value":"fn (&mut self) -> IterMut<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5232},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1350630,"byte_end":1350633,"line_start":590,"line_end":590,"column_start":12,"column_end":15},"name":"and","qualname":"<Result<T, E>>::and","value":"fn <U> (self, res: Result<U, E>) -> Result<U, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5234},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1351576,"byte_end":1351584,"line_start":619,"line_end":619,"column_start":12,"column_end":20},"name":"and_then","qualname":"<Result<T, E>>::and_then","value":"fn <U, F> (self, op: F) -> Result<U, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5236},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1352896,"byte_end":1352898,"line_start":659,"line_end":659,"column_start":12,"column_end":14},"name":"or","qualname":"<Result<T, E>>::or","value":"fn <F> (self, res: Result<T, F>) -> Result<T, F>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5238},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1353830,"byte_end":1353837,"line_start":688,"line_end":688,"column_start":12,"column_end":19},"name":"or_else","qualname":"<Result<T, E>>::or_else","value":"fn <F, O> (self, op: O) -> Result<T, F>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5240},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1354820,"byte_end":1354829,"line_start":720,"line_end":720,"column_start":12,"column_end":21},"name":"unwrap_or","qualname":"<Result<T, E>>::unwrap_or","value":"fn (self, optb: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5242},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1355497,"byte_end":1355511,"line_start":745,"line_end":745,"column_start":12,"column_end":26},"name":"unwrap_or_else","qualname":"<Result<T, E>>::unwrap_or_else","value":"fn <F> (self, op: F) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5246},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1356381,"byte_end":1356387,"line_start":779,"line_end":779,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<Result<T, E>>::unwrap","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5248},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1357210,"byte_end":1357216,"line_start":806,"line_end":806,"column_start":12,"column_end":18},"name":"expect","qualname":"<Result<T, E>>::expect","value":"fn (self, msg: &str) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5252},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1358083,"byte_end":1358093,"line_start":839,"line_end":839,"column_start":12,"column_end":22},"name":"unwrap_err","qualname":"<Result<T, E>>::unwrap_err","value":"fn (self) -> E","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5254},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1358902,"byte_end":1358912,"line_start":866,"line_end":866,"column_start":12,"column_end":22},"name":"expect_err","qualname":"<Result<T, E>>::expect_err","value":"fn (self, msg: &str) -> E","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5258},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1360229,"byte_end":1360246,"line_start":904,"line_end":904,"column_start":12,"column_end":29},"name":"unwrap_or_default","qualname":"<Result<T, E>>::unwrap_or_default","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5262},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1361038,"byte_end":1361047,"line_start":932,"line_end":932,"column_start":12,"column_end":21},"name":"transpose","qualname":"<Result<Option<T>, E>>::transpose","value":"fn (self) -> Option<Result<T, E>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":41114},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1363449,"byte_end":1363453,"line_start":1017,"line_end":1017,"column_start":12,"column_end":16},"name":"Iter","qualname":"::result::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":26869}],"decl_id":null,"docs":" An iterator over a reference to the [`Ok`] variant of a [`Result`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1363392,"byte_end":1363437,"line_start":1016,"line_end":1016,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":41120},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1364781,"byte_end":1364788,"line_start":1061,"line_end":1061,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::result::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":26879}],"decl_id":null,"docs":" An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1364724,"byte_end":1364769,"line_start":1060,"line_end":1060,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":41126},"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1366223,"byte_end":1366231,"line_start":1104,"line_end":1104,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::result::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":26889}],"decl_id":null,"docs":" An iterator over the value in a [`Ok`] variant of a [`Result`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1366166,"byte_end":1366211,"line_start":1103,"line_end":1103,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":5374},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"libcore/slice/mod.rs","parent":null,"children":[{"krate":0,"index":5376},{"krate":0,"index":5386},{"krate":0,"index":5388},{"krate":0,"index":5390},{"krate":0,"index":5392},{"krate":0,"index":5394},{"krate":0,"index":5402},{"krate":0,"index":5404},{"krate":0,"index":5410},{"krate":0,"index":5412},{"krate":0,"index":5418},{"krate":0,"index":5420},{"krate":0,"index":5422},{"krate":0,"index":5434},{"krate":0,"index":5436},{"krate":0,"index":5458},{"krate":0,"index":5478},{"krate":0,"index":5534},{"krate":0,"index":5536},{"krate":0,"index":5638},{"krate":0,"index":5640},{"krate":0,"index":5642},{"krate":0,"index":5644},{"krate":0,"index":5744},{"krate":0,"index":5750},{"krate":0,"index":5754},{"krate":0,"index":5756},{"krate":0,"index":5758},{"krate":0,"index":5774},{"krate":0,"index":5790},{"krate":0,"index":5806},{"krate":0,"index":5822},{"krate":0,"index":5838},{"krate":0,"index":5854},{"krate":0,"index":5870},{"krate":0,"index":5886},{"krate":0,"index":5890},{"krate":0,"index":5894},{"krate":0,"index":5902},{"krate":0,"index":5910},{"krate":0,"index":5912},{"krate":0,"index":5914},{"krate":0,"index":5916},{"krate":0,"index":5918},{"krate":0,"index":5920},{"krate":0,"index":5924},{"krate":0,"index":5926},{"krate":0,"index":5928},{"krate":0,"index":41136},{"krate":0,"index":41158},{"krate":0,"index":5934},{"krate":0,"index":5938},{"krate":0,"index":5940},{"krate":0,"index":5942},{"krate":0,"index":5946},{"krate":0,"index":5950},{"krate":0,"index":5952},{"krate":0,"index":5956},{"krate":0,"index":5958},{"krate":0,"index":5960},{"krate":0,"index":41166},{"krate":0,"index":41188},{"krate":0,"index":5966},{"krate":0,"index":5970},{"krate":0,"index":5972},{"krate":0,"index":5974},{"krate":0,"index":5976},{"krate":0,"index":5984},{"krate":0,"index":5988},{"krate":0,"index":5992},{"krate":0,"index":5996},{"krate":0,"index":5998},{"krate":0,"index":6002},{"krate":0,"index":6006},{"krate":0,"index":6014},{"krate":0,"index":6018},{"krate":0,"index":6022},{"krate":0,"index":6024},{"krate":0,"index":6026},{"krate":0,"index":6030},{"krate":0,"index":6034},{"krate":0,"index":6042},{"krate":0,"index":6046},{"krate":0,"index":41196},{"krate":0,"index":41198},{"krate":0,"index":6048},{"krate":0,"index":6052},{"krate":0,"index":6060},{"krate":0,"index":6064},{"krate":0,"index":6068},{"krate":0,"index":6070},{"krate":0,"index":6072},{"krate":0,"index":6076},{"krate":0,"index":6080},{"krate":0,"index":6088},{"krate":0,"index":6092},{"krate":0,"index":41202},{"krate":0,"index":41204},{"krate":0,"index":6094},{"krate":0,"index":6102},{"krate":0,"index":6104},{"krate":0,"index":6108},{"krate":0,"index":6110},{"krate":0,"index":6114},{"krate":0,"index":6116},{"krate":0,"index":6120},{"krate":0,"index":6122},{"krate":0,"index":6126},{"krate":0,"index":41208},{"krate":0,"index":41216},{"krate":0,"index":41218},{"krate":0,"index":41226},{"krate":0,"index":41228},{"krate":0,"index":41236},{"krate":0,"index":41238},{"krate":0,"index":41246},{"krate":0,"index":41248},{"krate":0,"index":41250},{"krate":0,"index":6128},{"krate":0,"index":6132},{"krate":0,"index":6146},{"krate":0,"index":6150},{"krate":0,"index":6152},{"krate":0,"index":6154},{"krate":0,"index":41254},{"krate":0,"index":41256},{"krate":0,"index":6160},{"krate":0,"index":6164},{"krate":0,"index":6178},{"krate":0,"index":6182},{"krate":0,"index":6184},{"krate":0,"index":6186},{"krate":0,"index":41260},{"krate":0,"index":41262},{"krate":0,"index":6192},{"krate":0,"index":6206},{"krate":0,"index":6210},{"krate":0,"index":6212},{"krate":0,"index":6214},{"krate":0,"index":41266},{"krate":0,"index":41268},{"krate":0,"index":6220},{"krate":0,"index":6224},{"krate":0,"index":6238},{"krate":0,"index":6242},{"krate":0,"index":6246},{"krate":0,"index":6248},{"krate":0,"index":41272},{"krate":0,"index":41274},{"krate":0,"index":6254},{"krate":0,"index":6268},{"krate":0,"index":6272},{"krate":0,"index":6276},{"krate":0,"index":6278},{"krate":0,"index":6284},{"krate":0,"index":6286},{"krate":0,"index":6288},{"krate":0,"index":6290},{"krate":0,"index":6292},{"krate":0,"index":6294},{"krate":0,"index":6296},{"krate":0,"index":6302},{"krate":0,"index":6304},{"krate":0,"index":6308},{"krate":0,"index":6312},{"krate":0,"index":6318},{"krate":0,"index":6322},{"krate":0,"index":6326},{"krate":0,"index":6330},{"krate":0,"index":6334},{"krate":0,"index":6338},{"krate":0,"index":6342},{"krate":0,"index":6346},{"krate":0,"index":6350},{"krate":0,"index":6352},{"krate":0,"index":41278},{"krate":0,"index":41280},{"krate":0,"index":41282},{"krate":0,"index":41284},{"krate":0,"index":41286},{"krate":0,"index":41288},{"krate":0,"index":41290},{"krate":0,"index":41292},{"krate":0,"index":41294},{"krate":0,"index":41296},{"krate":0,"index":41298},{"krate":0,"index":41300},{"krate":0,"index":6354},{"krate":0,"index":6360},{"krate":0,"index":6366},{"krate":0,"index":6370},{"krate":0,"index":6374},{"krate":0,"index":6378}],"decl_id":null,"docs":" Slice management and manipulation","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1370001,"byte_end":1370047,"line_start":17,"line_end":17,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":5436},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,101,109,99,104,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"memchr","qualname":"::slice::memchr","value":"libcore/slice/memchr.rs","parent":null,"children":[{"krate":0,"index":5438},{"krate":0,"index":5440},{"krate":0,"index":5442},{"krate":0,"index":5444},{"krate":0,"index":5446},{"krate":0,"index":5448},{"krate":0,"index":5450},{"krate":0,"index":5452},{"krate":0,"index":5454},{"krate":0,"index":5456}],"decl_id":null,"docs":" Pure rust memchr implementation, taken from rust-memchr\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_internals\",\n           issue = \"0\",\n           reason =\n               \"exposed from core to be reused in std; use the memchr crate\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371115,"byte_end":1371251,"line_start":53,"line_end":54,"column_start":1,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":5454},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,101,109,99,104,114,46,114,115],"byte_start":1459875,"byte_end":1459881,"line_start":60,"line_end":60,"column_start":8,"column_end":14},"name":"memchr","qualname":"::slice::memchr::memchr","value":"fn (x: u8, text: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return the first index matching the byte `x` in `text`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5456},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,101,109,99,104,114,46,114,115],"byte_start":1461445,"byte_end":1461452,"line_start":105,"line_end":105,"column_start":8,"column_end":15},"name":"memrchr","qualname":"::slice::memchr::memrchr","value":"fn (x: u8, text: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return the last index matching the byte `x` in `text`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5476},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,114,111,116,97,116,101,46,114,115],"byte_start":1467028,"byte_end":1467038,"line_start":72,"line_end":72,"column_start":15,"column_end":25},"name":"ptr_rotate","qualname":"::slice::rotate::ptr_rotate","value":"fn <T> (mut left: usize, mid: *mut T, mut right: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Rotates the range `[mid-left, mid+right)` such that the element at `mid`\n becomes the first element.  Equivalently, rotates the range `left`\n elements to the left or `right` elements to the right.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5504},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,115,111,114,116,46,114,115],"byte_start":1473593,"byte_end":1473601,"line_start":156,"line_end":156,"column_start":8,"column_end":16},"name":"heapsort","qualname":"::slice::sort::heapsort","value":"fn <T, F> (v: &mut [T], is_less: &mut F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts `v` using heapsort, which guarantees `O(n log n)` worst-case.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,115,111,114,116,46,114,115],"byte_start":1473578,"byte_end":1473585,"line_start":155,"line_end":155,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":5532},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,115,111,114,116,46,114,115],"byte_start":1493060,"byte_end":1493069,"line_start":691,"line_end":691,"column_start":8,"column_end":17},"name":"quicksort","qualname":"::slice::sort::quicksort","value":"fn <T, F> (v: &mut [T], mut is_less: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts `v` using pattern-defeating quicksort, which is `O(n log n)` worst-case.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3417},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371388,"byte_end":1371392,"line_start":63,"line_end":63,"column_start":9,"column_end":13},"name":"data","qualname":"::slice::Repr::data","value":"*const T","parent":{"krate":0,"index":5534},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3419},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371412,"byte_end":1371415,"line_start":64,"line_end":64,"column_start":9,"column_end":12},"name":"len","qualname":"::slice::Repr::len","value":"usize","parent":{"krate":0,"index":5534},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5536},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371692,"byte_end":1371700,"line_start":76,"line_end":76,"column_start":11,"column_end":19},"name":"SliceExt","qualname":"::slice::SliceExt","value":"SliceExt","parent":null,"children":[{"krate":0,"index":5538},{"krate":0,"index":5540},{"krate":0,"index":5542},{"krate":0,"index":5544},{"krate":0,"index":5546},{"krate":0,"index":5548},{"krate":0,"index":5550},{"krate":0,"index":5552},{"krate":0,"index":5554},{"krate":0,"index":5556},{"krate":0,"index":5558},{"krate":0,"index":5560},{"krate":0,"index":5562},{"krate":0,"index":5564},{"krate":0,"index":5566},{"krate":0,"index":5568},{"krate":0,"index":5570},{"krate":0,"index":5572},{"krate":0,"index":5574},{"krate":0,"index":5576},{"krate":0,"index":5578},{"krate":0,"index":5580},{"krate":0,"index":5582},{"krate":0,"index":5584},{"krate":0,"index":5586},{"krate":0,"index":5588},{"krate":0,"index":5590},{"krate":0,"index":5592},{"krate":0,"index":5594},{"krate":0,"index":5596},{"krate":0,"index":5598},{"krate":0,"index":5600},{"krate":0,"index":5602},{"krate":0,"index":5604},{"krate":0,"index":5606},{"krate":0,"index":5608},{"krate":0,"index":5610},{"krate":0,"index":5612},{"krate":0,"index":5614},{"krate":0,"index":5616},{"krate":0,"index":5618},{"krate":0,"index":5620},{"krate":0,"index":5622},{"krate":0,"index":5624},{"krate":0,"index":5626},{"krate":0,"index":5628},{"krate":0,"index":5630},{"krate":0,"index":5632},{"krate":0,"index":5634},{"krate":0,"index":5636}],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":5538},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371712,"byte_end":1371716,"line_start":77,"line_end":77,"column_start":10,"column_end":14},"name":"Item","qualname":"::slice::SliceExt::Item","value":"type Item;","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5540},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371775,"byte_end":1371783,"line_start":80,"line_end":80,"column_start":8,"column_end":16},"name":"split_at","qualname":"::slice::SliceExt::split_at","value":"fn (&self, mid: usize) -> (&[Self::Item], &[Self::Item])","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5542},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371895,"byte_end":1371899,"line_start":83,"line_end":83,"column_start":8,"column_end":12},"name":"iter","qualname":"::slice::SliceExt::iter","value":"fn (&self) -> Iter<Self::Item>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5544},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371985,"byte_end":1371990,"line_start":86,"line_end":86,"column_start":8,"column_end":13},"name":"split","qualname":"::slice::SliceExt::split","value":"fn <P> (&self, pred: P) -> Split<Self::Item, P>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5546},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1372146,"byte_end":1372152,"line_start":90,"line_end":90,"column_start":8,"column_end":14},"name":"rsplit","qualname":"::slice::SliceExt::rsplit","value":"fn <P> (&self, pred: P) -> RSplit<Self::Item, P>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5548},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1372299,"byte_end":1372305,"line_start":94,"line_end":94,"column_start":8,"column_end":14},"name":"splitn","qualname":"::slice::SliceExt::splitn","value":"fn <P> (&self, n: usize, pred: P) -> SplitN<Self::Item, P>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5550},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1372462,"byte_end":1372469,"line_start":98,"line_end":98,"column_start":8,"column_end":15},"name":"rsplitn","qualname":"::slice::SliceExt::rsplitn","value":"fn <P> (&self, n: usize, pred: P) -> RSplitN<Self::Item, P>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5552},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1372628,"byte_end":1372635,"line_start":102,"line_end":102,"column_start":8,"column_end":15},"name":"windows","qualname":"::slice::SliceExt::windows","value":"fn (&self, size: usize) -> Windows<Self::Item>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5554},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1372737,"byte_end":1372743,"line_start":105,"line_end":105,"column_start":8,"column_end":14},"name":"chunks","qualname":"::slice::SliceExt::chunks","value":"fn (&self, size: usize) -> Chunks<Self::Item>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5556},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1372854,"byte_end":1372866,"line_start":108,"line_end":108,"column_start":8,"column_end":20},"name":"exact_chunks","qualname":"::slice::SliceExt::exact_chunks","value":"fn (&self, size: usize) -> ExactChunks<Self::Item>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5558},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1372972,"byte_end":1372975,"line_start":111,"line_end":111,"column_start":8,"column_end":11},"name":"get","qualname":"::slice::SliceExt::get","value":"fn <I> (&self, index: I) -> Option<&I::Output>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5560},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1373109,"byte_end":1373114,"line_start":114,"line_end":114,"column_start":8,"column_end":13},"name":"first","qualname":"::slice::SliceExt::first","value":"fn (&self) -> Option<&Self::Item>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5562},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1373203,"byte_end":1373214,"line_start":117,"line_end":117,"column_start":8,"column_end":19},"name":"split_first","qualname":"::slice::SliceExt::split_first","value":"fn (&self) -> Option<(&Self::Item, &[Self::Item])>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5564},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1373320,"byte_end":1373330,"line_start":120,"line_end":120,"column_start":8,"column_end":18},"name":"split_last","qualname":"::slice::SliceExt::split_last","value":"fn (&self) -> Option<(&Self::Item, &[Self::Item])>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5566},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1373436,"byte_end":1373440,"line_start":123,"line_end":123,"column_start":8,"column_end":12},"name":"last","qualname":"::slice::SliceExt::last","value":"fn (&self) -> Option<&Self::Item>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5568},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1373536,"byte_end":1373549,"line_start":126,"line_end":126,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::slice::SliceExt::get_unchecked","value":"fn <I> (&self, index: I) -> &I::Output","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5570},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1373675,"byte_end":1373681,"line_start":129,"line_end":129,"column_start":8,"column_end":14},"name":"as_ptr","qualname":"::slice::SliceExt::as_ptr","value":"fn (&self) -> *const Self::Item","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5572},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1373768,"byte_end":1373781,"line_start":132,"line_end":132,"column_start":8,"column_end":21},"name":"binary_search","qualname":"::slice::SliceExt::binary_search","value":"fn (&self, x: &Self::Item) -> Result<usize, usize>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5574},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1373917,"byte_end":1373933,"line_start":136,"line_end":136,"column_start":8,"column_end":24},"name":"binary_search_by","qualname":"::slice::SliceExt::binary_search_by","value":"fn <'a, F> (&'a self, f: F) -> Result<usize, usize>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5576},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1374113,"byte_end":1374133,"line_start":140,"line_end":140,"column_start":8,"column_end":28},"name":"binary_search_by_key","qualname":"::slice::SliceExt::binary_search_by_key","value":"fn <'a, B, F> (&'a self, b: &B, f: F) -> Result<usize, usize>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5578},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1374315,"byte_end":1374318,"line_start":145,"line_end":145,"column_start":8,"column_end":11},"name":"len","qualname":"::slice::SliceExt::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5580},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1374393,"byte_end":1374401,"line_start":148,"line_end":148,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::slice::SliceExt::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5582},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1374494,"byte_end":1374501,"line_start":151,"line_end":151,"column_start":8,"column_end":15},"name":"get_mut","qualname":"::slice::SliceExt::get_mut","value":"fn <I> (&mut self, index: I) -> Option<&mut I::Output>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5584},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1374643,"byte_end":1374651,"line_start":154,"line_end":154,"column_start":8,"column_end":16},"name":"iter_mut","qualname":"::slice::SliceExt::iter_mut","value":"fn (&mut self) -> IterMut<Self::Item>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5586},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1374744,"byte_end":1374753,"line_start":157,"line_end":157,"column_start":8,"column_end":17},"name":"first_mut","qualname":"::slice::SliceExt::first_mut","value":"fn (&mut self) -> Option<&mut Self::Item>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5588},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1374850,"byte_end":1374865,"line_start":160,"line_end":160,"column_start":8,"column_end":23},"name":"split_first_mut","qualname":"::slice::SliceExt::split_first_mut","value":"fn (&mut self) -> Option<(&mut Self::Item, &mut [Self::Item])>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5590},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1374983,"byte_end":1374997,"line_start":163,"line_end":163,"column_start":8,"column_end":22},"name":"split_last_mut","qualname":"::slice::SliceExt::split_last_mut","value":"fn (&mut self) -> Option<(&mut Self::Item, &mut [Self::Item])>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5592},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1375115,"byte_end":1375123,"line_start":166,"line_end":166,"column_start":8,"column_end":16},"name":"last_mut","qualname":"::slice::SliceExt::last_mut","value":"fn (&mut self) -> Option<&mut Self::Item>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5594},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1375220,"byte_end":1375229,"line_start":169,"line_end":169,"column_start":8,"column_end":17},"name":"split_mut","qualname":"::slice::SliceExt::split_mut","value":"fn <P> (&mut self, pred: P) -> SplitMut<Self::Item, P>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5596},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1375392,"byte_end":1375402,"line_start":173,"line_end":173,"column_start":8,"column_end":18},"name":"rsplit_mut","qualname":"::slice::SliceExt::rsplit_mut","value":"fn <P> (&mut self, pred: P) -> RSplitMut<Self::Item, P>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5598},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1375556,"byte_end":1375566,"line_start":177,"line_end":177,"column_start":8,"column_end":18},"name":"splitn_mut","qualname":"::slice::SliceExt::splitn_mut","value":"fn <P> (&mut self, n: usize, pred: P) -> SplitNMut<Self::Item, P>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5600},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1375730,"byte_end":1375741,"line_start":181,"line_end":181,"column_start":8,"column_end":19},"name":"rsplitn_mut","qualname":"::slice::SliceExt::rsplitn_mut","value":"fn <P> (&mut self, n: usize, pred: P) -> RSplitNMut<Self::Item, P>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5602},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1375907,"byte_end":1375917,"line_start":185,"line_end":185,"column_start":8,"column_end":18},"name":"chunks_mut","qualname":"::slice::SliceExt::chunks_mut","value":"fn (&mut self, chunk_size: usize) -> ChunksMut<Self::Item>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5604},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1376041,"byte_end":1376057,"line_start":188,"line_end":188,"column_start":8,"column_end":24},"name":"exact_chunks_mut","qualname":"::slice::SliceExt::exact_chunks_mut","value":"fn (&mut self, size: usize) -> ExactChunksMut<Self::Item>","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5606},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1376170,"byte_end":1376174,"line_start":191,"line_end":191,"column_start":8,"column_end":12},"name":"swap","qualname":"::slice::SliceExt::swap","value":"fn (&mut self, a: usize, b: usize) -> ()","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5608},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1376264,"byte_end":1376276,"line_start":194,"line_end":194,"column_start":8,"column_end":20},"name":"split_at_mut","qualname":"::slice::SliceExt::split_at_mut","value":"fn (&mut self, mid: usize) -> (&mut [Self::Item], &mut [Self::Item])","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5610},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1376400,"byte_end":1376407,"line_start":197,"line_end":197,"column_start":8,"column_end":15},"name":"reverse","qualname":"::slice::SliceExt::reverse","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5612},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1376484,"byte_end":1376501,"line_start":200,"line_end":200,"column_start":15,"column_end":32},"name":"get_unchecked_mut","qualname":"::slice::SliceExt::get_unchecked_mut","value":"fn <I> (&mut self, index: I) -> &mut I::Output","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5614},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1376635,"byte_end":1376645,"line_start":203,"line_end":203,"column_start":8,"column_end":18},"name":"as_mut_ptr","qualname":"::slice::SliceExt::as_mut_ptr","value":"fn (&mut self) -> *mut Self::Item","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5616},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1376734,"byte_end":1376742,"line_start":206,"line_end":206,"column_start":8,"column_end":16},"name":"contains","qualname":"::slice::SliceExt::contains","value":"fn (&self, x: &Self::Item) -> bool","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5618},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1376860,"byte_end":1376871,"line_start":209,"line_end":209,"column_start":8,"column_end":19},"name":"starts_with","qualname":"::slice::SliceExt::starts_with","value":"fn (&self, needle: &[Self::Item]) -> bool","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5620},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1376996,"byte_end":1377005,"line_start":212,"line_end":212,"column_start":8,"column_end":17},"name":"ends_with","qualname":"::slice::SliceExt::ends_with","value":"fn (&self, needle: &[Self::Item]) -> bool","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5622},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1377139,"byte_end":1377150,"line_start":215,"line_end":215,"column_start":8,"column_end":19},"name":"rotate_left","qualname":"::slice::SliceExt::rotate_left","value":"fn (&mut self, mid: usize) -> ()","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5624},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1377241,"byte_end":1377253,"line_start":218,"line_end":218,"column_start":8,"column_end":20},"name":"rotate_right","qualname":"::slice::SliceExt::rotate_right","value":"fn (&mut self, k: usize) -> ()","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5626},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1377345,"byte_end":1377361,"line_start":221,"line_end":221,"column_start":8,"column_end":24},"name":"clone_from_slice","qualname":"::slice::SliceExt::clone_from_slice","value":"fn (&mut self, src: &[Self::Item]) -> ()","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5628},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1377486,"byte_end":1377501,"line_start":224,"line_end":224,"column_start":8,"column_end":23},"name":"copy_from_slice","qualname":"::slice::SliceExt::copy_from_slice","value":"fn (&mut self, src: &[Self::Item]) -> ()","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5630},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1377627,"byte_end":1377642,"line_start":227,"line_end":227,"column_start":8,"column_end":23},"name":"swap_with_slice","qualname":"::slice::SliceExt::swap_with_slice","value":"fn (&mut self, src: &mut [Self::Item]) -> ()","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5632},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1377746,"byte_end":1377759,"line_start":230,"line_end":230,"column_start":8,"column_end":21},"name":"sort_unstable","qualname":"::slice::SliceExt::sort_unstable","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5634},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1377869,"byte_end":1377885,"line_start":234,"line_end":234,"column_start":8,"column_end":24},"name":"sort_unstable_by","qualname":"::slice::SliceExt::sort_unstable_by","value":"fn <F> (&mut self, compare: F) -> ()","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":5636},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1378041,"byte_end":1378061,"line_start":238,"line_end":238,"column_start":8,"column_end":28},"name":"sort_unstable_by_key","qualname":"::slice::SliceExt::sort_unstable_by_key","value":"fn <B, F> (&mut self, f: F) -> ()","parent":{"krate":0,"index":5536},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371488,"byte_end":1371634,"line_start":72,"line_end":74,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371635,"byte_end":1371657,"line_start":75,"line_end":75,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":5758},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1393935,"byte_end":1393945,"line_start":797,"line_end":797,"column_start":11,"column_end":21},"name":"SliceIndex","qualname":"::slice::SliceIndex","value":"SliceIndex<T: ?Sized>","parent":null,"children":[{"krate":0,"index":5760},{"krate":0,"index":5762},{"krate":0,"index":5764},{"krate":0,"index":5766},{"krate":0,"index":5768},{"krate":0,"index":5770},{"krate":0,"index":5772}],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1393782,"byte_end":1393839,"line_start":795,"line_end":795,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1393840,"byte_end":1393924,"line_start":796,"line_end":796,"column_start":1,"column_end":85}}]},{"kind":"Type","id":{"krate":0,"index":5760},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1394013,"byte_end":1394019,"line_start":799,"line_end":799,"column_start":10,"column_end":16},"name":"Output","qualname":"::slice::SliceIndex::Output","value":"type Output: ?Sized;","parent":{"krate":0,"index":5758},"children":[],"decl_id":null,"docs":" The output type returned by methods.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5762},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1394126,"byte_end":1394129,"line_start":803,"line_end":803,"column_start":8,"column_end":11},"name":"get","qualname":"::slice::SliceIndex::get","value":"fn (self, slice: &T) -> Option<&Self::Output>","parent":{"krate":0,"index":5758},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1393782,"byte_end":1393839,"line_start":795,"line_end":795,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1393840,"byte_end":1393924,"line_start":796,"line_end":796,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":5764},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1394271,"byte_end":1394278,"line_start":807,"line_end":807,"column_start":8,"column_end":15},"name":"get_mut","qualname":"::slice::SliceIndex::get_mut","value":"fn (self, slice: &mut T) -> Option<&mut Self::Output>","parent":{"krate":0,"index":5758},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1393782,"byte_end":1393839,"line_start":795,"line_end":795,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1393840,"byte_end":1393924,"line_start":796,"line_end":796,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":5766},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1394460,"byte_end":1394473,"line_start":811,"line_end":811,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::slice::SliceIndex::get_unchecked","value":"fn (self, slice: &T) -> &Self::Output","parent":{"krate":0,"index":5758},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1393782,"byte_end":1393839,"line_start":795,"line_end":795,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1393840,"byte_end":1393924,"line_start":796,"line_end":796,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":5768},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1394640,"byte_end":1394657,"line_start":815,"line_end":815,"column_start":15,"column_end":32},"name":"get_unchecked_mut","qualname":"::slice::SliceIndex::get_unchecked_mut","value":"fn (self, slice: &mut T) -> &mut Self::Output","parent":{"krate":0,"index":5758},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1393782,"byte_end":1393839,"line_start":795,"line_end":795,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1393840,"byte_end":1393924,"line_start":796,"line_end":796,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":5770},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1394812,"byte_end":1394817,"line_start":819,"line_end":819,"column_start":8,"column_end":13},"name":"index","qualname":"::slice::SliceIndex::index","value":"fn (self, slice: &T) -> &Self::Output","parent":{"krate":0,"index":5758},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1393782,"byte_end":1393839,"line_start":795,"line_end":795,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1393840,"byte_end":1393924,"line_start":796,"line_end":796,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":5772},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1394965,"byte_end":1394974,"line_start":823,"line_end":823,"column_start":8,"column_end":17},"name":"index_mut","qualname":"::slice::SliceIndex::index_mut","value":"fn (self, slice: &mut T) -> &mut Self::Output","parent":{"krate":0,"index":5758},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1393782,"byte_end":1393839,"line_start":795,"line_end":795,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1393840,"byte_end":1393924,"line_start":796,"line_end":796,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":5918},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1411556,"byte_end":1411560,"line_start":1384,"line_end":1384,"column_start":12,"column_end":16},"name":"Iter","qualname":"::slice::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":3557},{"krate":0,"index":3559},{"krate":0,"index":3561}],"decl_id":null,"docs":" Immutable slice iterator","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1411499,"byte_end":1411544,"line_start":1383,"line_end":1383,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":5930},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1413043,"byte_end":1413051,"line_start":1430,"line_end":1430,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Iter<'a, T>>::as_slice","value":"fn (&self) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5950},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1414975,"byte_end":1414982,"line_start":1501,"line_end":1501,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::slice::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":3603},{"krate":0,"index":3605},{"krate":0,"index":3607}],"decl_id":null,"docs":" Mutable slice iterator.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1414918,"byte_end":1414963,"line_start":1500,"line_end":1500,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":5962},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1416951,"byte_end":1416961,"line_start":1558,"line_end":1558,"column_start":12,"column_end":22},"name":"into_slice","qualname":"<IterMut<'a, T>>::into_slice","value":"fn (self) -> &'a mut [T]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5978},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1418368,"byte_end":1418380,"line_start":1606,"line_end":1606,"column_start":15,"column_end":27},"name":"slice_offset","qualname":"::slice::PointerExt::slice_offset","value":"fn (self, i: isize) -> Self","parent":{"krate":0,"index":5976},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5980},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1418502,"byte_end":1418510,"line_start":1610,"line_end":1610,"column_start":15,"column_end":23},"name":"post_inc","qualname":"::slice::PointerExt::post_inc","value":"fn (&mut self) -> Self","parent":{"krate":0,"index":5976},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5982},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1418717,"byte_end":1418724,"line_start":1618,"line_end":1618,"column_start":15,"column_end":22},"name":"pre_dec","qualname":"::slice::PointerExt::pre_dec","value":"fn (&mut self) -> Self","parent":{"krate":0,"index":5976},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5994},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1419389,"byte_end":1419395,"line_start":1644,"line_end":1644,"column_start":8,"column_end":14},"name":"finish","qualname":"::slice::SplitIter::finish","value":"fn (&mut self) -> Option<Self::Item>","parent":{"krate":0,"index":5992},"children":[],"decl_id":null,"docs":" An internal abstraction over the splitting iterators, so that\n splitn, splitn_mut etc can be implemented once.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5996},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1419756,"byte_end":1419761,"line_start":1655,"line_end":1655,"column_start":12,"column_end":17},"name":"Split","qualname":"::slice::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":3647},{"krate":0,"index":3649},{"krate":0,"index":3651}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a predicate\n function.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1419699,"byte_end":1419744,"line_start":1654,"line_end":1654,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6024},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1422463,"byte_end":1422471,"line_start":1746,"line_end":1746,"column_start":12,"column_end":20},"name":"SplitMut","qualname":"::slice::SplitMut","value":"SplitMut {  }","parent":null,"children":[{"krate":0,"index":3699},{"krate":0,"index":3701},{"krate":0,"index":3703}],"decl_id":null,"docs":" An iterator over the subslices of the vector which are separated\n by elements that match `pred`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1422406,"byte_end":1422451,"line_start":1745,"line_end":1745,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":41196},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1425596,"byte_end":1425602,"line_start":1845,"line_end":1845,"column_start":12,"column_end":18},"name":"RSplit","qualname":"::slice::RSplit","value":"RSplit {  }","parent":null,"children":[{"krate":0,"index":26977}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a predicate\n function, starting from the end of the slice.","sig":null,"attributes":[{"value":"unstable(feature = \"slice_rsplit\", issue = \"41020\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1425450,"byte_end":1425504,"line_start":1843,"line_end":1843,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":6070},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1427393,"byte_end":1427402,"line_start":1901,"line_end":1901,"column_start":12,"column_end":21},"name":"RSplitMut","qualname":"::slice::RSplitMut","value":"RSplitMut {  }","parent":null,"children":[{"krate":0,"index":3775}],"decl_id":null,"docs":" An iterator over the subslices of the vector which are separated\n by elements that match `pred`, starting from the end of the slice.","sig":null,"attributes":[{"value":"unstable(feature = \"slice_rsplit\", issue = \"41020\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1427327,"byte_end":1427381,"line_start":1900,"line_end":1900,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":6102},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1429935,"byte_end":1429941,"line_start":1987,"line_end":1987,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::slice::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":3819}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a predicate\n function, limited to a given number of splits.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1429878,"byte_end":1429923,"line_start":1986,"line_end":1986,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6108},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1430749,"byte_end":1430756,"line_start":2009,"line_end":2009,"column_start":12,"column_end":19},"name":"RSplitN","qualname":"::slice::RSplitN","value":"RSplitN {  }","parent":null,"children":[{"krate":0,"index":3833}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a\n predicate function, limited to a given number of splits, starting\n from the end of the slice.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1430692,"byte_end":1430737,"line_start":2008,"line_end":2008,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6114},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1431536,"byte_end":1431545,"line_start":2030,"line_end":2030,"column_start":12,"column_end":21},"name":"SplitNMut","qualname":"::slice::SplitNMut","value":"SplitNMut {  }","parent":null,"children":[{"krate":0,"index":3847}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a predicate\n function, limited to a given number of splits.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1431479,"byte_end":1431524,"line_start":2029,"line_end":2029,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6120},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1432374,"byte_end":1432384,"line_start":2052,"line_end":2052,"column_start":12,"column_end":22},"name":"RSplitNMut","qualname":"::slice::RSplitNMut","value":"RSplitNMut {  }","parent":null,"children":[{"krate":0,"index":3861}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a\n predicate function, limited to a given number of splits, starting\n from the end of the slice.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1432317,"byte_end":1432362,"line_start":2051,"line_end":2051,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":41248},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1434016,"byte_end":1434023,"line_start":2103,"line_end":2103,"column_start":12,"column_end":19},"name":"Windows","qualname":"::slice::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":27047},{"krate":0,"index":27049}],"decl_id":null,"docs":" An iterator over overlapping subslices of length `size`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1433959,"byte_end":1434004,"line_start":2102,"line_end":2102,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":41254},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1436915,"byte_end":1436921,"line_start":2213,"line_end":2213,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::slice::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":27059},{"krate":0,"index":27061}],"decl_id":null,"docs":" An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a\n time).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1436858,"byte_end":1436903,"line_start":2212,"line_end":2212,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":41260},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1440537,"byte_end":1440546,"line_start":2335,"line_end":2335,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::slice::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":27071},{"krate":0,"index":27073}],"decl_id":null,"docs":" An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size`\n elements at a time). When the slice len is not evenly divided by the chunk\n size, the last slice of the iteration will be the remainder.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1440480,"byte_end":1440525,"line_start":2334,"line_end":2334,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":41266},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1444205,"byte_end":1444216,"line_start":2453,"line_end":2453,"column_start":12,"column_end":23},"name":"ExactChunks","qualname":"::slice::ExactChunks","value":"ExactChunks {  }","parent":null,"children":[{"krate":0,"index":27083},{"krate":0,"index":27085}],"decl_id":null,"docs":" An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a\n time).","sig":null,"attributes":[{"value":"unstable(feature = \"exact_chunks\", issue = \"47115\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1444139,"byte_end":1444193,"line_start":2452,"line_end":2452,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":41272},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1447151,"byte_end":1447165,"line_start":2557,"line_end":2557,"column_start":12,"column_end":26},"name":"ExactChunksMut","qualname":"::slice::ExactChunksMut","value":"ExactChunksMut {  }","parent":null,"children":[{"krate":0,"index":27095},{"krate":0,"index":27097}],"decl_id":null,"docs":" An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size`\n elements at a time). When the slice len is not evenly divided by the chunk\n size, the last up to `chunk_size-1` elements will be omitted.","sig":null,"attributes":[{"value":"unstable(feature = \"exact_chunks\", issue = \"47115\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1447085,"byte_end":1447139,"line_start":2556,"line_end":2556,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":6284},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1450831,"byte_end":1450845,"line_start":2685,"line_end":2685,"column_start":15,"column_end":29},"name":"from_raw_parts","qualname":"::slice::from_raw_parts","value":"fn <'a, T> (p: *const T, len: usize) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":" Forms a slice from a pointer and a length.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1450761,"byte_end":1450770,"line_start":2683,"line_end":2683,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1450771,"byte_end":1450816,"line_start":2684,"line_end":2684,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":6286},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1451367,"byte_end":1451385,"line_start":2698,"line_end":2698,"column_start":15,"column_end":33},"name":"from_raw_parts_mut","qualname":"::slice::from_raw_parts_mut","value":"fn <'a, T> (p: *mut T, len: usize) -> &'a mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as `from_raw_parts`, except that a mutable\n slice is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1451297,"byte_end":1451306,"line_start":2696,"line_end":2696,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1451307,"byte_end":1451352,"line_start":2697,"line_end":2697,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":6288},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1451615,"byte_end":1451623,"line_start":2704,"line_end":2704,"column_start":8,"column_end":16},"name":"from_ref","qualname":"::slice::from_ref","value":"fn <T> (s: &T) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to T into a slice of length 1 (without copying).\n","sig":null,"attributes":[{"value":"unstable(feature = \"from_ref\", issue = \"45703\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1451557,"byte_end":1451607,"line_start":2703,"line_end":2703,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":6290},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1451827,"byte_end":1451839,"line_start":2712,"line_end":2712,"column_start":8,"column_end":20},"name":"from_ref_mut","qualname":"::slice::from_ref_mut","value":"fn <T> (s: &mut T) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to T into a slice of length 1 (without copying).\n","sig":null,"attributes":[{"value":"unstable(feature = \"from_ref\", issue = \"45703\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1451769,"byte_end":1451819,"line_start":2711,"line_end":2711,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":6292},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1452119,"byte_end":1452127,"line_start":2721,"line_end":2721,"column_start":8,"column_end":16},"name":"heapsort","qualname":"::slice::heapsort","value":"fn <T, F> (v: &mut [T], mut is_less: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"sort_internals\",\n           reason = \"internal to sort module\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1452008,"byte_end":1452096,"line_start":2719,"line_end":2719,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":6314},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1453532,"byte_end":1453537,"line_start":2775,"line_end":2775,"column_start":8,"column_end":13},"name":"equal","qualname":"::slice::SlicePartialEq::equal","value":"fn (&self, other: &[B]) -> bool","parent":{"krate":0,"index":6312},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6316},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1453575,"byte_end":1453584,"line_start":2777,"line_end":2777,"column_start":8,"column_end":17},"name":"not_equal","qualname":"::slice::SlicePartialEq::not_equal","value":"fn (&self, other: &[B]) -> bool","parent":{"krate":0,"index":6312},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6328},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1454644,"byte_end":1454659,"line_start":2821,"line_end":2821,"column_start":8,"column_end":23},"name":"partial_compare","qualname":"::slice::SlicePartialOrd::partial_compare","value":"fn (&self, other: &[B]) -> Option<Ordering>","parent":{"krate":0,"index":6326},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6340},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1455574,"byte_end":1455581,"line_start":2857,"line_end":2857,"column_start":8,"column_end":15},"name":"compare","qualname":"::slice::SliceOrd::compare","value":"fn (&self, other: &[B]) -> Ordering","parent":{"krate":0,"index":6338},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6368},"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1457603,"byte_end":1457617,"line_start":2934,"line_end":2934,"column_start":8,"column_end":22},"name":"slice_contains","qualname":"::slice::SliceContains::slice_contains","value":"fn (&self, x: &[Self]) -> bool","parent":{"krate":0,"index":6366},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":6382},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"str","qualname":"::str","value":"libcore/str/mod.rs","parent":null,"children":[{"krate":0,"index":6384},{"krate":0,"index":6386},{"krate":0,"index":6394},{"krate":0,"index":6396},{"krate":0,"index":6398},{"krate":0,"index":6410},{"krate":0,"index":6412},{"krate":0,"index":6418},{"krate":0,"index":6420},{"krate":0,"index":6626},{"krate":0,"index":6672},{"krate":0,"index":6678},{"krate":0,"index":41474},{"krate":0,"index":41490},{"krate":0,"index":41486},{"krate":0,"index":41480},{"krate":0,"index":41476},{"krate":0,"index":6684},{"krate":0,"index":41494},{"krate":0,"index":41514},{"krate":0,"index":41510},{"krate":0,"index":41504},{"krate":0,"index":41500},{"krate":0,"index":41496},{"krate":0,"index":6688},{"krate":0,"index":6694},{"krate":0,"index":6696},{"krate":0,"index":6698},{"krate":0,"index":6700},{"krate":0,"index":6702},{"krate":0,"index":6704},{"krate":0,"index":41516},{"krate":0,"index":41522},{"krate":0,"index":41518},{"krate":0,"index":6708},{"krate":0,"index":6710},{"krate":0,"index":6712},{"krate":0,"index":6714},{"krate":0,"index":6716},{"krate":0,"index":6718},{"krate":0,"index":6720},{"krate":0,"index":6732},{"krate":0,"index":6736},{"krate":0,"index":6738},{"krate":0,"index":41526},{"krate":0,"index":41532},{"krate":0,"index":41528},{"krate":0,"index":6742},{"krate":0,"index":6754},{"krate":0,"index":6758},{"krate":0,"index":6760},{"krate":0,"index":41536},{"krate":0,"index":41542},{"krate":0,"index":41538},{"krate":0,"index":6764},{"krate":0,"index":6788},{"krate":0,"index":6794},{"krate":0,"index":6800},{"krate":0,"index":6802},{"krate":0,"index":6804},{"krate":0,"index":6810},{"krate":0,"index":6812},{"krate":0,"index":41546},{"krate":0,"index":6814},{"krate":0,"index":6816},{"krate":0,"index":6820},{"krate":0,"index":41550},{"krate":0,"index":41552},{"krate":0,"index":41556},{"krate":0,"index":41562},{"krate":0,"index":41566},{"krate":0,"index":41568},{"krate":0,"index":41572},{"krate":0,"index":41578},{"krate":0,"index":41582},{"krate":0,"index":41584},{"krate":0,"index":41586},{"krate":0,"index":41590},{"krate":0,"index":41594},{"krate":0,"index":41596},{"krate":0,"index":41600},{"krate":0,"index":41606},{"krate":0,"index":41610},{"krate":0,"index":41612},{"krate":0,"index":41616},{"krate":0,"index":41622},{"krate":0,"index":41626},{"krate":0,"index":41628},{"krate":0,"index":41630},{"krate":0,"index":41634},{"krate":0,"index":41638},{"krate":0,"index":6828},{"krate":0,"index":6830},{"krate":0,"index":6834},{"krate":0,"index":41642},{"krate":0,"index":41644},{"krate":0,"index":41648},{"krate":0,"index":41654},{"krate":0,"index":41658},{"krate":0,"index":41660},{"krate":0,"index":41664},{"krate":0,"index":41670},{"krate":0,"index":41674},{"krate":0,"index":41676},{"krate":0,"index":41678},{"krate":0,"index":6840},{"krate":0,"index":6842},{"krate":0,"index":6846},{"krate":0,"index":41682},{"krate":0,"index":41684},{"krate":0,"index":41688},{"krate":0,"index":41694},{"krate":0,"index":41698},{"krate":0,"index":41700},{"krate":0,"index":41704},{"krate":0,"index":41710},{"krate":0,"index":41714},{"krate":0,"index":41716},{"krate":0,"index":41718},{"krate":0,"index":41722},{"krate":0,"index":41726},{"krate":0,"index":6852},{"krate":0,"index":6854},{"krate":0,"index":6858},{"krate":0,"index":41730},{"krate":0,"index":41732},{"krate":0,"index":41736},{"krate":0,"index":41742},{"krate":0,"index":41746},{"krate":0,"index":41748},{"krate":0,"index":41752},{"krate":0,"index":41758},{"krate":0,"index":41762},{"krate":0,"index":41764},{"krate":0,"index":41766},{"krate":0,"index":41770},{"krate":0,"index":41774},{"krate":0,"index":41780},{"krate":0,"index":41776},{"krate":0,"index":6864},{"krate":0,"index":6872},{"krate":0,"index":6876},{"krate":0,"index":41784},{"krate":0,"index":41790},{"krate":0,"index":41786},{"krate":0,"index":41794},{"krate":0,"index":41796},{"krate":0,"index":6878},{"krate":0,"index":6882},{"krate":0,"index":6886},{"krate":0,"index":6892},{"krate":0,"index":6900},{"krate":0,"index":6904},{"krate":0,"index":6906},{"krate":0,"index":6908},{"krate":0,"index":6910},{"krate":0,"index":6916},{"krate":0,"index":6918},{"krate":0,"index":6920},{"krate":0,"index":6922},{"krate":0,"index":6924},{"krate":0,"index":7108},{"krate":0,"index":7200},{"krate":0,"index":7202},{"krate":0,"index":7206},{"krate":0,"index":7298},{"krate":0,"index":7302},{"krate":0,"index":41800},{"krate":0,"index":41806},{"krate":0,"index":41802},{"krate":0,"index":41810},{"krate":0,"index":41812},{"krate":0,"index":7306},{"krate":0,"index":7312},{"krate":0,"index":41816},{"krate":0,"index":41818},{"krate":0,"index":7316},{"krate":0,"index":7322},{"krate":0,"index":7326},{"krate":0,"index":7332},{"krate":0,"index":7336}],"decl_id":null,"docs":" String manipulation","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1494001,"byte_end":1494047,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":6420},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pattern","qualname":"::str::pattern","value":"libcore/str/pattern.rs","parent":null,"children":[{"krate":0,"index":6422},{"krate":0,"index":6424},{"krate":0,"index":6426},{"krate":0,"index":6428},{"krate":0,"index":6430},{"krate":0,"index":41302},{"krate":0,"index":41322},{"krate":0,"index":41318},{"krate":0,"index":41314},{"krate":0,"index":41308},{"krate":0,"index":41304},{"krate":0,"index":6442},{"krate":0,"index":6452},{"krate":0,"index":6460},{"krate":0,"index":41324},{"krate":0,"index":41330},{"krate":0,"index":41326},{"krate":0,"index":6462},{"krate":0,"index":6470},{"krate":0,"index":6476},{"krate":0,"index":6478},{"krate":0,"index":6490},{"krate":0,"index":6494},{"krate":0,"index":6498},{"krate":0,"index":6502},{"krate":0,"index":41334},{"krate":0,"index":41340},{"krate":0,"index":41336},{"krate":0,"index":6504},{"krate":0,"index":6510},{"krate":0,"index":6516},{"krate":0,"index":6520},{"krate":0,"index":6522},{"krate":0,"index":6524},{"krate":0,"index":41344},{"krate":0,"index":41350},{"krate":0,"index":41346},{"krate":0,"index":6526},{"krate":0,"index":6528},{"krate":0,"index":6530},{"krate":0,"index":6532},{"krate":0,"index":41378},{"krate":0,"index":41380},{"krate":0,"index":6534},{"krate":0,"index":6538},{"krate":0,"index":6540},{"krate":0,"index":6542},{"krate":0,"index":6544},{"krate":0,"index":6546},{"krate":0,"index":6548},{"krate":0,"index":41418},{"krate":0,"index":41424},{"krate":0,"index":41420},{"krate":0,"index":41428},{"krate":0,"index":41434},{"krate":0,"index":41430},{"krate":0,"index":41438},{"krate":0,"index":41444},{"krate":0,"index":41440},{"krate":0,"index":6558},{"krate":0,"index":6562},{"krate":0,"index":6570},{"krate":0,"index":41448},{"krate":0,"index":41454},{"krate":0,"index":41450},{"krate":0,"index":6576},{"krate":0,"index":6592},{"krate":0,"index":6602},{"krate":0,"index":6604},{"krate":0,"index":6614},{"krate":0,"index":6616}],"decl_id":null,"docs":" The string Pattern API.","sig":null,"attributes":[{"value":"unstable(feature = \"pattern\",\n           reason = \"API not fully fleshed out and ready to be stabilized\",\n           issue = \"27721\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1579352,"byte_end":1579491,"line_start":16,"line_end":18,"column_start":1,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":6430},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1579993,"byte_end":1580000,"line_start":38,"line_end":38,"column_start":11,"column_end":18},"name":"Pattern","qualname":"::str::pattern::Pattern","value":"Pattern<'a>: Sized","parent":null,"children":[{"krate":0,"index":6432},{"krate":0,"index":6434},{"krate":0,"index":6436},{"krate":0,"index":6438},{"krate":0,"index":6440}],"decl_id":null,"docs":" A string pattern.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6432},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1580068,"byte_end":1580076,"line_start":40,"line_end":40,"column_start":10,"column_end":18},"name":"Searcher","qualname":"::str::pattern::Pattern::Searcher","value":"type Searcher: Searcher<'a>;","parent":{"krate":0,"index":6430},"children":[],"decl_id":null,"docs":" Associated searcher for this pattern\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6434},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1580196,"byte_end":1580209,"line_start":44,"line_end":44,"column_start":8,"column_end":21},"name":"into_searcher","qualname":"::str::pattern::Pattern::into_searcher","value":"fn (self, haystack: &'a str) -> Self::Searcher","parent":{"krate":0,"index":6430},"children":[],"decl_id":null,"docs":" A string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6436},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1580344,"byte_end":1580359,"line_start":48,"line_end":48,"column_start":8,"column_end":23},"name":"is_contained_in","qualname":"::str::pattern::Pattern::is_contained_in","value":"fn (self, haystack: &'a str) -> bool","parent":{"krate":0,"index":6430},"children":[],"decl_id":null,"docs":" A string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6438},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1580555,"byte_end":1580567,"line_start":54,"line_end":54,"column_start":8,"column_end":20},"name":"is_prefix_of","qualname":"::str::pattern::Pattern::is_prefix_of","value":"fn (self, haystack: &'a str) -> bool","parent":{"krate":0,"index":6430},"children":[],"decl_id":null,"docs":" A string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6440},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1580833,"byte_end":1580845,"line_start":63,"line_end":63,"column_start":8,"column_end":20},"name":"is_suffix_of","qualname":"::str::pattern::Pattern::is_suffix_of","value":"fn (self, haystack: &'a str) -> bool","parent":{"krate":0,"index":6430},"children":[],"decl_id":null,"docs":" A string pattern.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27107},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1581353,"byte_end":1581358,"line_start":80,"line_end":80,"column_start":5,"column_end":10},"name":"Match","qualname":"::str::pattern::SearchStep::Match","value":"SearchStep::Match(usize, usize)","parent":{"krate":0,"index":41302},"children":[],"decl_id":null,"docs":" Expresses that a match of the pattern has been found at\n `haystack[a..b]`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27113},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1581633,"byte_end":1581639,"line_start":86,"line_end":86,"column_start":5,"column_end":11},"name":"Reject","qualname":"::str::pattern::SearchStep::Reject","value":"SearchStep::Reject(usize, usize)","parent":{"krate":0,"index":41302},"children":[],"decl_id":null,"docs":" Expresses that `haystack[a..b]` has been rejected as a possible match\n of the pattern.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27119},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1581757,"byte_end":1581761,"line_start":89,"line_end":89,"column_start":5,"column_end":9},"name":"Done","qualname":"::str::pattern::SearchStep::Done","value":"SearchStep::Done","parent":{"krate":0,"index":41302},"children":[],"decl_id":null,"docs":" Expresses that every byte of the haystack has been visited, ending\n the iteration.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":41302},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1581246,"byte_end":1581256,"line_start":77,"line_end":77,"column_start":10,"column_end":20},"name":"SearchStep","qualname":"::str::pattern::SearchStep","value":"SearchStep::{Match, Reject, Done}","parent":null,"children":[{"krate":0,"index":27107},{"krate":0,"index":27113},{"krate":0,"index":27119}],"decl_id":null,"docs":" Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1581237,"byte_end":1581763,"line_start":77,"line_end":90,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1581237,"byte_end":1581763,"line_start":77,"line_end":90,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":6442},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1582304,"byte_end":1582312,"line_start":104,"line_end":104,"column_start":18,"column_end":26},"name":"Searcher","qualname":"::str::pattern::Searcher","value":"Searcher<'a>","parent":null,"children":[{"krate":0,"index":6444},{"krate":0,"index":6446},{"krate":0,"index":6448},{"krate":0,"index":6450}],"decl_id":null,"docs":" A searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6444},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1582436,"byte_end":1582444,"line_start":108,"line_end":108,"column_start":8,"column_end":16},"name":"haystack","qualname":"::str::pattern::Searcher::haystack","value":"fn (&self) -> &'a str","parent":{"krate":0,"index":6442},"children":[],"decl_id":null,"docs":" A searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6446},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1583393,"byte_end":1583397,"line_start":128,"line_end":128,"column_start":8,"column_end":12},"name":"next","qualname":"::str::pattern::Searcher::next","value":"fn (&mut self) -> SearchStep","parent":{"krate":0,"index":6442},"children":[],"decl_id":null,"docs":" A searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6448},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1583793,"byte_end":1583803,"line_start":137,"line_end":137,"column_start":8,"column_end":18},"name":"next_match","qualname":"::str::pattern::Searcher::next_match","value":"fn (&mut self) -> Option<(usize, usize)>","parent":{"krate":0,"index":6442},"children":[],"decl_id":null,"docs":" A searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6450},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1584280,"byte_end":1584291,"line_start":152,"line_end":152,"column_start":8,"column_end":19},"name":"next_reject","qualname":"::str::pattern::Searcher::next_reject","value":"fn (&mut self) -> Option<(usize, usize)>","parent":{"krate":0,"index":6442},"children":[],"decl_id":null,"docs":" A searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":6452},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1585126,"byte_end":1585141,"line_start":177,"line_end":177,"column_start":18,"column_end":33},"name":"ReverseSearcher","qualname":"::str::pattern::ReverseSearcher","value":"ReverseSearcher<'a>: Searcher<'a>","parent":null,"children":[{"krate":0,"index":6454},{"krate":0,"index":6456},{"krate":0,"index":6458}],"decl_id":null,"docs":" A reverse searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6454},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1586089,"byte_end":1586098,"line_start":196,"line_end":196,"column_start":8,"column_end":17},"name":"next_back","qualname":"::str::pattern::ReverseSearcher::next_back","value":"fn (&mut self) -> SearchStep","parent":{"krate":0,"index":6452},"children":[],"decl_id":null,"docs":" A reverse searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6456},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1586203,"byte_end":1586218,"line_start":200,"line_end":200,"column_start":8,"column_end":23},"name":"next_match_back","qualname":"::str::pattern::ReverseSearcher::next_match_back","value":"fn (&mut self) -> Option<(usize, usize)>","parent":{"krate":0,"index":6452},"children":[],"decl_id":null,"docs":" A reverse searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6458},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1586562,"byte_end":1586578,"line_start":212,"line_end":212,"column_start":8,"column_end":24},"name":"next_reject_back","qualname":"::str::pattern::ReverseSearcher::next_reject_back","value":"fn (&mut self) -> Option<(usize, usize)>","parent":{"krate":0,"index":6452},"children":[],"decl_id":null,"docs":" A reverse searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":6460},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1587716,"byte_end":1587735,"line_start":244,"line_end":244,"column_start":11,"column_end":30},"name":"DoubleEndedSearcher","qualname":"::str::pattern::DoubleEndedSearcher","value":"DoubleEndedSearcher<'a>: ReverseSearcher<'a>","parent":null,"children":[],"decl_id":null,"docs":" A marker trait to express that a `ReverseSearcher`\n can be used for a `DoubleEndedIterator` implementation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":41324},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1588034,"byte_end":1588046,"line_start":253,"line_end":253,"column_start":12,"column_end":24},"name":"CharSearcher","qualname":"::str::pattern::CharSearcher","value":"CharSearcher {  }","parent":null,"children":[{"krate":0,"index":27121},{"krate":0,"index":27123},{"krate":0,"index":27125},{"krate":0,"index":27127},{"krate":0,"index":27129},{"krate":0,"index":27131}],"decl_id":null,"docs":" Associated type for `<char as Pattern<'a>>::Searcher`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6492},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1597802,"byte_end":1597809,"line_start":486,"line_end":486,"column_start":8,"column_end":15},"name":"matches","qualname":"::str::pattern::MultiCharEq::matches","value":"fn (&mut self, c: char) -> bool","parent":{"krate":0,"index":6490},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":41344},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1602248,"byte_end":1602265,"line_start":643,"line_end":643,"column_start":12,"column_end":29},"name":"CharSliceSearcher","qualname":"::str::pattern::CharSliceSearcher","value":"","parent":null,"children":[],"decl_id":null,"docs":" Associated type for `<&[char] as Pattern<'a>>::Searcher`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":41378},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1603093,"byte_end":1603114,"line_start":666,"line_end":666,"column_start":12,"column_end":33},"name":"CharPredicateSearcher","qualname":"::str::pattern::CharPredicateSearcher","value":"","parent":null,"children":[],"decl_id":null,"docs":" Associated type for `<F as Pattern<'a>>::Searcher`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":41418},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1605818,"byte_end":1605829,"line_start":747,"line_end":747,"column_start":12,"column_end":23},"name":"StrSearcher","qualname":"::str::pattern::StrSearcher","value":"StrSearcher {  }","parent":null,"children":[{"krate":0,"index":27197},{"krate":0,"index":27199},{"krate":0,"index":27201}],"decl_id":null,"docs":" Associated type for `<&str as Pattern<'a>>::Searcher`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":6594},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1631210,"byte_end":1631216,"line_start":1381,"line_end":1381,"column_start":10,"column_end":16},"name":"Output","qualname":"::str::pattern::TwoWayStrategy::Output","value":"type Output;","parent":{"krate":0,"index":6592},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6596},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1631225,"byte_end":1631241,"line_start":1382,"line_end":1382,"column_start":8,"column_end":24},"name":"use_early_reject","qualname":"::str::pattern::TwoWayStrategy::use_early_reject","value":"fn () -> bool","parent":{"krate":0,"index":6592},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6598},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1631260,"byte_end":1631269,"line_start":1383,"line_end":1383,"column_start":8,"column_end":17},"name":"rejecting","qualname":"::str::pattern::TwoWayStrategy::rejecting","value":"fn (a: usize, b: usize) -> Self::Output","parent":{"krate":0,"index":6592},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6600},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1631314,"byte_end":1631322,"line_start":1384,"line_end":1384,"column_start":8,"column_end":16},"name":"matching","qualname":"::str::pattern::TwoWayStrategy::matching","value":"fn (a: usize, b: usize) -> Self::Output","parent":{"krate":0,"index":6592},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":6626},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"lossy","qualname":"::str::lossy","value":"libcore/str/lossy.rs","parent":null,"children":[{"krate":0,"index":6628},{"krate":0,"index":6630},{"krate":0,"index":6632},{"krate":0,"index":6634},{"krate":0,"index":6636},{"krate":0,"index":6638},{"krate":0,"index":6640},{"krate":0,"index":6648},{"krate":0,"index":41458},{"krate":0,"index":41468},{"krate":0,"index":41464},{"krate":0,"index":41460},{"krate":0,"index":6650},{"krate":0,"index":6664},{"krate":0,"index":6668}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"str_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1494324,"byte_end":1494375,"line_start":29,"line_end":29,"column_start":1,"column_end":52}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1494376,"byte_end":1494398,"line_start":30,"line_end":30,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":6638},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1632734,"byte_end":1632743,"line_start":19,"line_end":19,"column_start":12,"column_end":21},"name":"Utf8Lossy","qualname":"::str::lossy::Utf8Lossy","value":"Utf8Lossy {  }","parent":null,"children":[{"krate":0,"index":4157}],"decl_id":null,"docs":" Lossy UTF-8 string.\n","sig":null,"attributes":[{"value":"unstable(feature = \"str_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1632671,"byte_end":1632722,"line_start":18,"line_end":18,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":6642},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1632793,"byte_end":1632801,"line_start":24,"line_end":24,"column_start":12,"column_end":20},"name":"from_str","qualname":"<Utf8Lossy>::from_str","value":"fn (s: &str) -> &Utf8Lossy","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6644},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1632889,"byte_end":1632899,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<Utf8Lossy>::from_bytes","value":"fn (bytes: &[u8]) -> &Utf8Lossy","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6646},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1632989,"byte_end":1632995,"line_start":32,"line_end":32,"column_start":12,"column_end":18},"name":"chunks","qualname":"<Utf8Lossy>::chunks","value":"fn (&self) -> Utf8LossyChunksIter","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6648},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1633230,"byte_end":1633249,"line_start":41,"line_end":41,"column_start":12,"column_end":31},"name":"Utf8LossyChunksIter","qualname":"::str::lossy::Utf8LossyChunksIter","value":"Utf8LossyChunksIter {  }","parent":null,"children":[{"krate":0,"index":4159}],"decl_id":null,"docs":" Iterator over lossy UTF-8 string\n","sig":null,"attributes":[{"value":"unstable(feature = \"str_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1633127,"byte_end":1633178,"line_start":39,"line_end":39,"column_start":1,"column_end":52}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1633179,"byte_end":1633218,"line_start":40,"line_end":40,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":41458},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1633376,"byte_end":1633390,"line_start":47,"line_end":47,"column_start":12,"column_end":26},"name":"Utf8LossyChunk","qualname":"::str::lossy::Utf8LossyChunk","value":"Utf8LossyChunk { valid, broken }","parent":null,"children":[{"krate":0,"index":27247},{"krate":0,"index":27249}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"str_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1633281,"byte_end":1633332,"line_start":45,"line_end":45,"column_start":1,"column_end":52}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1633365,"byte_end":1633614,"line_start":47,"line_end":54,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":27247},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1633487,"byte_end":1633492,"line_start":50,"line_end":50,"column_start":9,"column_end":14},"name":"valid","qualname":"::str::lossy::Utf8LossyChunk::valid","value":"&'a str","parent":{"krate":0,"index":41458},"children":[],"decl_id":null,"docs":" Sequence of valid chars.\n Can be empty between broken UTF-8 chars.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":27249},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1633595,"byte_end":1633601,"line_start":53,"line_end":53,"column_start":9,"column_end":15},"name":"broken","qualname":"::str::lossy::Utf8LossyChunk::broken","value":"&'a [u8]","parent":{"krate":0,"index":41458},"children":[],"decl_id":null,"docs":" Single broken char, empty if none.\n Empty iff iterator item is last.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":6672},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1495693,"byte_end":1495700,"line_start":76,"line_end":76,"column_start":11,"column_end":18},"name":"FromStr","qualname":"::str::FromStr","value":"FromStr: Sized","parent":null,"children":[{"krate":0,"index":6674},{"krate":0,"index":6676}],"decl_id":null,"docs":" A trait to abstract the idea of creating a new instance of a type from a\n string.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1495637,"byte_end":1495682,"line_start":75,"line_end":75,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":6674},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1495834,"byte_end":1495837,"line_start":79,"line_end":79,"column_start":10,"column_end":13},"name":"Err","qualname":"::str::FromStr::Err","value":"type Err;","parent":{"krate":0,"index":6672},"children":[],"decl_id":null,"docs":" The associated error which can be returned from parsing.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1495779,"byte_end":1495824,"line_start":78,"line_end":78,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":6676},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1496667,"byte_end":1496675,"line_start":105,"line_end":105,"column_start":8,"column_end":16},"name":"from_str","qualname":"::str::FromStr::from_str","value":"fn (s: &str) -> Result<Self, Self::Err>","parent":{"krate":0,"index":6672},"children":[],"decl_id":null,"docs":" A trait to abstract the idea of creating a new instance of a type from a\n string.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1495637,"byte_end":1495682,"line_start":75,"line_end":75,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":41474},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1498004,"byte_end":1498018,"line_start":149,"line_end":149,"column_start":12,"column_end":26},"name":"ParseBoolError","qualname":"::str::ParseBoolError","value":"ParseBoolError {  }","parent":null,"children":[{"krate":0,"index":27259}],"decl_id":null,"docs":" An error returned when parsing a `bool` using [`from_str`] fails","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1497947,"byte_end":1497992,"line_start":148,"line_end":148,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1497993,"byte_end":1498032,"line_start":149,"line_end":149,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":41494},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1499774,"byte_end":1499783,"line_start":205,"line_end":205,"column_start":12,"column_end":21},"name":"Utf8Error","qualname":"::str::Utf8Error","value":"Utf8Error {  }","parent":null,"children":[{"krate":0,"index":27261},{"krate":0,"index":27263}],"decl_id":null,"docs":" Errors which can occur when attempting to interpret a sequence of [`u8`]\n as a string.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1499717,"byte_end":1499762,"line_start":204,"line_end":204,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1499763,"byte_end":1499838,"line_start":205,"line_end":208,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1499763,"byte_end":1499838,"line_start":205,"line_end":208,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":6690},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1500556,"byte_end":1500567,"line_start":234,"line_end":234,"column_start":12,"column_end":23},"name":"valid_up_to","qualname":"<Utf8Error>::valid_up_to","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6692},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1501406,"byte_end":1501415,"line_start":249,"line_end":249,"column_start":12,"column_end":21},"name":"error_len","qualname":"<Utf8Error>::error_len","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":6694},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1504040,"byte_end":1504049,"line_start":336,"line_end":336,"column_start":8,"column_end":17},"name":"from_utf8","qualname":"::str::from_utf8","value":"fn (v: &[u8]) -> Result<&str, Utf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice of bytes to a string slice.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1503987,"byte_end":1504032,"line_start":335,"line_end":335,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":6696},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1505031,"byte_end":1505044,"line_start":374,"line_end":374,"column_start":8,"column_end":21},"name":"from_utf8_mut","qualname":"::str::from_utf8_mut","value":"fn (v: &mut [u8]) -> Result<&mut str, Utf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a mutable slice of bytes to a mutable string slice.","sig":null,"attributes":[{"value":"stable(feature = \"str_mut_extras\", since = \"1.20.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1504968,"byte_end":1505023,"line_start":373,"line_end":373,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":6700},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1507259,"byte_end":1507278,"line_start":443,"line_end":443,"column_start":15,"column_end":34},"name":"from_utf8_unchecked","qualname":"::str::from_utf8_unchecked","value":"fn (v: &[u8]) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice of bytes to a string slice without checking\n that the string contains valid UTF-8.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1507189,"byte_end":1507198,"line_start":441,"line_end":441,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1507199,"byte_end":1507244,"line_start":442,"line_end":442,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":6702},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1507919,"byte_end":1507942,"line_start":468,"line_end":468,"column_start":15,"column_end":38},"name":"from_utf8_unchecked_mut","qualname":"::str::from_utf8_unchecked_mut","value":"fn (v: &mut [u8]) -> &mut str","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice of bytes to a string slice without checking\n that the string contains valid UTF-8; mutable version.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1507839,"byte_end":1507848,"line_start":466,"line_end":466,"column_start":1,"column_end":10}},{"value":"stable(feature = \"str_mut_extras\", since = \"1.20.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1507849,"byte_end":1507904,"line_start":467,"line_end":467,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":41516},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1508863,"byte_end":1508868,"line_start":499,"line_end":499,"column_start":12,"column_end":17},"name":"Chars","qualname":"::str::Chars","value":"Chars {  }","parent":null,"children":[{"krate":0,"index":27265}],"decl_id":null,"docs":" An iterator over the [`char`]s of a string slice.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1508806,"byte_end":1508851,"line_start":498,"line_end":498,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":6716},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1509823,"byte_end":1509838,"line_start":530,"line_end":530,"column_start":8,"column_end":23},"name":"next_code_point","qualname":"::str::next_code_point","value":"fn <'a, I> (bytes: &mut I) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Reads the next code point out of a byte iterator (assuming a\n UTF-8-like encoding).\n","sig":null,"attributes":[{"value":"unstable(feature = \"str_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1509754,"byte_end":1509805,"line_start":528,"line_end":528,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1509806,"byte_end":1509815,"line_start":529,"line_end":529,"column_start":1,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":6740},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1514078,"byte_end":1514084,"line_start":670,"line_end":670,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Chars<'a>>::as_str","value":"fn (&self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":41526},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1514606,"byte_end":1514617,"line_start":686,"line_end":686,"column_start":12,"column_end":23},"name":"CharIndices","qualname":"::str::CharIndices","value":"CharIndices {  }","parent":null,"children":[{"krate":0,"index":27273},{"krate":0,"index":27275}],"decl_id":null,"docs":" An iterator over the [`char`]s of a string slice, and their positions.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1514549,"byte_end":1514594,"line_start":685,"line_end":685,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6762},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1516328,"byte_end":1516334,"line_start":750,"line_end":750,"column_start":12,"column_end":18},"name":"as_str","qualname":"<CharIndices<'a>>::as_str","value":"fn (&self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":41536},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1516728,"byte_end":1516733,"line_start":764,"line_end":764,"column_start":12,"column_end":17},"name":"Bytes","qualname":"::str::Bytes","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the bytes of a string slice.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1516647,"byte_end":1516692,"line_start":762,"line_end":762,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":41774},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1534438,"byte_end":1534443,"line_start":1350,"line_end":1350,"column_start":12,"column_end":17},"name":"Lines","qualname":"::str::Lines","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the lines of a string, as string slices.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1534357,"byte_end":1534402,"line_start":1348,"line_end":1348,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":41784},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1535361,"byte_end":1535369,"line_start":1385,"line_end":1385,"column_start":12,"column_end":20},"name":"LinesAny","qualname":"::str::LinesAny","value":"","parent":null,"children":[],"decl_id":null,"docs":" Created with the method [`lines_any`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1535180,"byte_end":1535225,"line_start":1381,"line_end":1381,"column_start":1,"column_end":46}},{"value":"rustc_deprecated(since = \"1.4.0\", reason = \"use lines()/Lines instead now\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1535226,"byte_end":1535304,"line_start":1382,"line_end":1382,"column_start":1,"column_end":79}},{"value":"allow(deprecated)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1535329,"byte_end":1535349,"line_start":1384,"line_end":1384,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":6918},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1542597,"byte_end":1542612,"line_start":1603,"line_end":1603,"column_start":8,"column_end":23},"name":"utf8_char_width","qualname":"::str::utf8_char_width","value":"fn (b: u8) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Given a first byte, determines how many bytes are in this UTF-8 character.\n","sig":null,"attributes":[{"value":"unstable(feature = \"str_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1542528,"byte_end":1542579,"line_start":1601,"line_end":1601,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1542580,"byte_end":1542589,"line_start":1602,"line_end":1602,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":7108},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560970,"byte_end":1560976,"line_start":2127,"line_end":2127,"column_start":11,"column_end":17},"name":"StrExt","qualname":"::str::StrExt","value":"StrExt","parent":null,"children":[{"krate":0,"index":7110},{"krate":0,"index":7112},{"krate":0,"index":7114},{"krate":0,"index":7116},{"krate":0,"index":7118},{"krate":0,"index":7120},{"krate":0,"index":7122},{"krate":0,"index":7124},{"krate":0,"index":7126},{"krate":0,"index":7128},{"krate":0,"index":7130},{"krate":0,"index":7132},{"krate":0,"index":7134},{"krate":0,"index":7136},{"krate":0,"index":7138},{"krate":0,"index":7140},{"krate":0,"index":7142},{"krate":0,"index":7144},{"krate":0,"index":7146},{"krate":0,"index":7148},{"krate":0,"index":7150},{"krate":0,"index":7152},{"krate":0,"index":7154},{"krate":0,"index":7156},{"krate":0,"index":7158},{"krate":0,"index":7160},{"krate":0,"index":7162},{"krate":0,"index":7164},{"krate":0,"index":7166},{"krate":0,"index":7168},{"krate":0,"index":7170},{"krate":0,"index":7172},{"krate":0,"index":7174},{"krate":0,"index":7176},{"krate":0,"index":7178},{"krate":0,"index":7180},{"krate":0,"index":7182},{"krate":0,"index":7184},{"krate":0,"index":7186},{"krate":0,"index":7188},{"krate":0,"index":7190},{"krate":0,"index":7192},{"krate":0,"index":7194},{"krate":0,"index":7196},{"krate":0,"index":7198}],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7110},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1561143,"byte_end":1561151,"line_start":2132,"line_end":2132,"column_start":8,"column_end":16},"name":"contains","qualname":"::str::StrExt::contains","value":"fn <'a, P> (&'a self, pat: P) -> bool","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7112},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1561255,"byte_end":1561260,"line_start":2134,"line_end":2134,"column_start":8,"column_end":13},"name":"chars","qualname":"::str::StrExt::chars","value":"fn (&self) -> Chars","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7114},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1561334,"byte_end":1561339,"line_start":2136,"line_end":2136,"column_start":8,"column_end":13},"name":"bytes","qualname":"::str::StrExt::bytes","value":"fn (&self) -> Bytes","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7116},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1561413,"byte_end":1561425,"line_start":2138,"line_end":2138,"column_start":8,"column_end":20},"name":"char_indices","qualname":"::str::StrExt::char_indices","value":"fn (&self) -> CharIndices","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7118},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1561505,"byte_end":1561510,"line_start":2140,"line_end":2140,"column_start":8,"column_end":13},"name":"split","qualname":"::str::StrExt::split","value":"fn <'a, P> (&'a self, pat: P) -> Split<'a, P>","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7120},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1561622,"byte_end":1561628,"line_start":2142,"line_end":2142,"column_start":8,"column_end":14},"name":"rsplit","qualname":"::str::StrExt::rsplit","value":"fn <'a, P> (&'a self, pat: P) -> RSplit<'a, P>","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7122},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1561788,"byte_end":1561794,"line_start":2145,"line_end":2145,"column_start":8,"column_end":14},"name":"splitn","qualname":"::str::StrExt::splitn","value":"fn <'a, P> (&'a self, count: usize, pat: P) -> SplitN<'a, P>","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7124},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1561921,"byte_end":1561928,"line_start":2147,"line_end":2147,"column_start":8,"column_end":15},"name":"rsplitn","qualname":"::str::StrExt::rsplitn","value":"fn <'a, P> (&'a self, count: usize, pat: P) -> RSplitN<'a, P>","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7126},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1562103,"byte_end":1562119,"line_start":2150,"line_end":2150,"column_start":8,"column_end":24},"name":"split_terminator","qualname":"::str::StrExt::split_terminator","value":"fn <'a, P> (&'a self, pat: P) -> SplitTerminator<'a, P>","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7128},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1562241,"byte_end":1562258,"line_start":2152,"line_end":2152,"column_start":8,"column_end":25},"name":"rsplit_terminator","qualname":"::str::StrExt::rsplit_terminator","value":"fn <'a, P> (&'a self, pat: P) -> RSplitTerminator<'a, P>","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7130},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1562428,"byte_end":1562435,"line_start":2155,"line_end":2155,"column_start":8,"column_end":15},"name":"matches","qualname":"::str::StrExt::matches","value":"fn <'a, P> (&'a self, pat: P) -> Matches<'a, P>","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7132},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1562549,"byte_end":1562557,"line_start":2157,"line_end":2157,"column_start":8,"column_end":16},"name":"rmatches","qualname":"::str::StrExt::rmatches","value":"fn <'a, P> (&'a self, pat: P) -> RMatches<'a, P>","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7134},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1562719,"byte_end":1562732,"line_start":2160,"line_end":2160,"column_start":8,"column_end":21},"name":"match_indices","qualname":"::str::StrExt::match_indices","value":"fn <'a, P> (&'a self, pat: P) -> MatchIndices<'a, P>","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7136},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1562851,"byte_end":1562865,"line_start":2162,"line_end":2162,"column_start":8,"column_end":22},"name":"rmatch_indices","qualname":"::str::StrExt::rmatch_indices","value":"fn <'a, P> (&'a self, pat: P) -> RMatchIndices<'a, P>","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7138},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1563032,"byte_end":1563037,"line_start":2165,"line_end":2165,"column_start":8,"column_end":13},"name":"lines","qualname":"::str::StrExt::lines","value":"fn (&self) -> Lines","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7140},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1563213,"byte_end":1563222,"line_start":2169,"line_end":2169,"column_start":8,"column_end":17},"name":"lines_any","qualname":"::str::StrExt::lines_any","value":"fn (&self) -> LinesAny","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7142},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1563315,"byte_end":1563318,"line_start":2171,"line_end":2171,"column_start":8,"column_end":11},"name":"get","qualname":"::str::StrExt::get","value":"fn <I> (&self, i: I) -> Option<&I::Output>","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7144},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1563447,"byte_end":1563454,"line_start":2173,"line_end":2173,"column_start":8,"column_end":15},"name":"get_mut","qualname":"::str::StrExt::get_mut","value":"fn <I> (&mut self, i: I) -> Option<&mut I::Output>","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7146},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1563598,"byte_end":1563611,"line_start":2175,"line_end":2175,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::str::StrExt::get_unchecked","value":"fn <I> (&self, i: I) -> &I::Output","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7148},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1563739,"byte_end":1563756,"line_start":2177,"line_end":2177,"column_start":15,"column_end":32},"name":"get_unchecked_mut","qualname":"::str::StrExt::get_unchecked_mut","value":"fn <I> (&mut self, i: I) -> &mut I::Output","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7150},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1563876,"byte_end":1563891,"line_start":2179,"line_end":2179,"column_start":15,"column_end":30},"name":"slice_unchecked","qualname":"::str::StrExt::slice_unchecked","value":"fn (&self, begin: usize, end: usize) -> &str","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7152},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1563997,"byte_end":1564016,"line_start":2181,"line_end":2181,"column_start":15,"column_end":34},"name":"slice_mut_unchecked","qualname":"::str::StrExt::slice_mut_unchecked","value":"fn (&mut self, begin: usize, end: usize) -> &mut str","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7154},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1564123,"byte_end":1564134,"line_start":2183,"line_end":2183,"column_start":8,"column_end":19},"name":"starts_with","qualname":"::str::StrExt::starts_with","value":"fn <'a, P> (&'a self, pat: P) -> bool","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7156},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1564238,"byte_end":1564247,"line_start":2185,"line_end":2185,"column_start":8,"column_end":17},"name":"ends_with","qualname":"::str::StrExt::ends_with","value":"fn <'a, P> (&'a self, pat: P) -> bool","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7158},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1564398,"byte_end":1564410,"line_start":2188,"line_end":2188,"column_start":8,"column_end":20},"name":"trim_matches","qualname":"::str::StrExt::trim_matches","value":"fn <'a, P> (&'a self, pat: P) -> &'a str","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7160},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1564568,"byte_end":1564585,"line_start":2191,"line_end":2191,"column_start":8,"column_end":25},"name":"trim_left_matches","qualname":"::str::StrExt::trim_left_matches","value":"fn <'a, P> (&'a self, pat: P) -> &'a str","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7162},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1564692,"byte_end":1564710,"line_start":2193,"line_end":2193,"column_start":8,"column_end":26},"name":"trim_right_matches","qualname":"::str::StrExt::trim_right_matches","value":"fn <'a, P> (&'a self, pat: P) -> &'a str","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7164},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1564876,"byte_end":1564892,"line_start":2196,"line_end":2196,"column_start":8,"column_end":24},"name":"is_char_boundary","qualname":"::str::StrExt::is_char_boundary","value":"fn (&self, index: usize) -> bool","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7166},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1564979,"byte_end":1564987,"line_start":2198,"line_end":2198,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::str::StrExt::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7168},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1565079,"byte_end":1565091,"line_start":2200,"line_end":2200,"column_start":15,"column_end":27},"name":"as_bytes_mut","qualname":"::str::StrExt::as_bytes_mut","value":"fn (&mut self) -> &mut [u8]","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7170},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1565173,"byte_end":1565177,"line_start":2202,"line_end":2202,"column_start":8,"column_end":12},"name":"find","qualname":"::str::StrExt::find","value":"fn <'a, P> (&'a self, pat: P) -> Option<usize>","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7172},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1565290,"byte_end":1565295,"line_start":2204,"line_end":2204,"column_start":8,"column_end":13},"name":"rfind","qualname":"::str::StrExt::rfind","value":"fn <'a, P> (&'a self, pat: P) -> Option<usize>","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7174},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1565406,"byte_end":1565414,"line_start":2206,"line_end":2206,"column_start":8,"column_end":16},"name":"find_str","qualname":"::str::StrExt::find_str","value":"fn <'a, P> (&'a self, pat: P) -> Option<usize>","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7176},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1565527,"byte_end":1565535,"line_start":2208,"line_end":2208,"column_start":8,"column_end":16},"name":"split_at","qualname":"::str::StrExt::split_at","value":"fn (&self, mid: usize) -> (&str, &str)","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7178},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1565628,"byte_end":1565640,"line_start":2210,"line_end":2210,"column_start":8,"column_end":20},"name":"split_at_mut","qualname":"::str::StrExt::split_at_mut","value":"fn (&mut self, mid: usize) -> (&mut str, &mut str)","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7180},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1565745,"byte_end":1565751,"line_start":2212,"line_end":2212,"column_start":8,"column_end":14},"name":"as_ptr","qualname":"::str::StrExt::as_ptr","value":"fn (&self) -> *const u8","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7182},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1565829,"byte_end":1565832,"line_start":2214,"line_end":2214,"column_start":8,"column_end":11},"name":"len","qualname":"::str::StrExt::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7184},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1565906,"byte_end":1565914,"line_start":2216,"line_end":2216,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::str::StrExt::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7186},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1565987,"byte_end":1565992,"line_start":2218,"line_end":2218,"column_start":8,"column_end":13},"name":"parse","qualname":"::str::StrExt::parse","value":"fn <T> (&self) -> Result<T, T::Err>","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7188},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1566102,"byte_end":1566118,"line_start":2220,"line_end":2220,"column_start":8,"column_end":24},"name":"split_whitespace","qualname":"::str::StrExt::split_whitespace","value":"fn <'a> (&'a self) -> SplitWhitespace<'a>","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7190},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1566239,"byte_end":1566252,"line_start":2222,"line_end":2222,"column_start":8,"column_end":21},"name":"is_whitespace","qualname":"::str::StrExt::is_whitespace","value":"fn (&self) -> bool","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7192},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1566351,"byte_end":1566366,"line_start":2224,"line_end":2224,"column_start":8,"column_end":23},"name":"is_alphanumeric","qualname":"::str::StrExt::is_alphanumeric","value":"fn (&self) -> bool","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7194},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1566440,"byte_end":1566444,"line_start":2226,"line_end":2226,"column_start":8,"column_end":12},"name":"trim","qualname":"::str::StrExt::trim","value":"fn (&self) -> &str","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7196},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1566518,"byte_end":1566527,"line_start":2228,"line_end":2228,"column_start":8,"column_end":17},"name":"trim_left","qualname":"::str::StrExt::trim_left","value":"fn (&self) -> &str","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":7198},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1566601,"byte_end":1566611,"line_start":2230,"line_end":2230,"column_start":8,"column_end":18},"name":"trim_right","qualname":"::str::StrExt::trim_right","value":"fn (&self) -> &str","parent":{"krate":0,"index":7108},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560777,"byte_end":1560799,"line_start":2122,"line_end":2122,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1560815,"byte_end":1560959,"line_start":2124,"line_end":2126,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":41800},"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1577354,"byte_end":1577369,"line_start":2607,"line_end":2607,"column_start":12,"column_end":27},"name":"SplitWhitespace","qualname":"::str::SplitWhitespace","value":"SplitWhitespace {  }","parent":null,"children":[{"krate":0,"index":27603}],"decl_id":null,"docs":" An iterator over the non-whitespace substrings of a string,\n separated by any amount of whitespace.","sig":null,"attributes":[{"value":"stable(feature = \"split_whitespace\", since = \"1.1.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1577262,"byte_end":1577318,"line_start":2605,"line_end":2605,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":7338},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hash","qualname":"::hash","value":"libcore/hash/mod.rs","parent":null,"children":[{"krate":0,"index":7340},{"krate":0,"index":7342},{"krate":0,"index":7344},{"krate":0,"index":7346},{"krate":0,"index":7348},{"krate":0,"index":7350},{"krate":0,"index":7434},{"krate":0,"index":7440},{"krate":0,"index":7470},{"krate":0,"index":7500},{"krate":0,"index":7506},{"krate":0,"index":7508},{"krate":0,"index":7512},{"krate":0,"index":7518},{"krate":0,"index":7522},{"krate":0,"index":7526}],"decl_id":null,"docs":" Generic hashing support.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1641147,"byte_end":1641193,"line_start":92,"line_end":92,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":41822},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1660322,"byte_end":1660333,"line_start":31,"line_end":31,"column_start":12,"column_end":23},"name":"SipHasher13","qualname":"::hash::sip::SipHasher13","value":"SipHasher13 {  }","parent":null,"children":[{"krate":0,"index":27615}],"decl_id":null,"docs":" An implementation of SipHash 1-3.","sig":null,"attributes":[{"value":"unstable(feature = \"hashmap_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1660082,"byte_end":1660137,"line_start":26,"line_end":26,"column_start":1,"column_end":56}},{"value":"rustc_deprecated(since = \"1.13.0\",\n                   reason =\n                       \"use `std::collections::hash_map::DefaultHasher` instead\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1660138,"byte_end":1660262,"line_start":27,"line_end":28,"column_start":1,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":41850},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1661537,"byte_end":1661546,"line_start":62,"line_end":62,"column_start":12,"column_end":21},"name":"SipHasher","qualname":"::hash::sip::SipHasher","value":"","parent":null,"children":[],"decl_id":null,"docs":" An implementation of SipHash 2-4.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1661322,"byte_end":1661367,"line_start":58,"line_end":58,"column_start":1,"column_end":46}},{"value":"rustc_deprecated(since = \"1.13.0\",\n                   reason =\n                       \"use `std::collections::hash_map::DefaultHasher` instead\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1661368,"byte_end":1661492,"line_start":59,"line_end":60,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":7368},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1664401,"byte_end":1664404,"line_start":150,"line_end":150,"column_start":12,"column_end":15},"name":"new","qualname":"<SipHasher>::new","value":"fn () -> SipHasher","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7370},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1664743,"byte_end":1664756,"line_start":159,"line_end":159,"column_start":12,"column_end":25},"name":"new_with_keys","qualname":"<SipHasher>::new_with_keys","value":"fn (key0: u64, key1: u64) -> SipHasher","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7374},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1665209,"byte_end":1665212,"line_start":172,"line_end":172,"column_start":12,"column_end":15},"name":"new","qualname":"<SipHasher13>::new","value":"fn () -> SipHasher13","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7376},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1665567,"byte_end":1665580,"line_start":181,"line_end":181,"column_start":12,"column_end":25},"name":"new_with_keys","qualname":"<SipHasher13>::new_with_keys","value":"fn (key0: u64, key1: u64) -> SipHasher13","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7418},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1670732,"byte_end":1670740,"line_start":375,"line_end":375,"column_start":8,"column_end":16},"name":"c_rounds","qualname":"::hash::sip::Sip::c_rounds","value":"fn (_: &mut State) -> ()","parent":{"krate":0,"index":7416},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7420},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1670764,"byte_end":1670772,"line_start":376,"line_end":376,"column_start":8,"column_end":16},"name":"d_rounds","qualname":"::hash::sip::Sip::d_rounds","value":"fn (_: &mut State) -> ()","parent":{"krate":0,"index":7416},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":7434},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1643109,"byte_end":1643113,"line_start":169,"line_end":169,"column_start":11,"column_end":15},"name":"Hash","qualname":"::hash::Hash","value":"Hash","parent":null,"children":[{"krate":0,"index":7436},{"krate":0,"index":7438}],"decl_id":null,"docs":" A hashable type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1643053,"byte_end":1643098,"line_start":168,"line_end":168,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7436},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1643563,"byte_end":1643567,"line_start":185,"line_end":185,"column_start":8,"column_end":12},"name":"hash","qualname":"::hash::Hash::hash","value":"fn <H> (&self, state: &mut H) -> ()","parent":{"krate":0,"index":7434},"children":[],"decl_id":null,"docs":" A hashable type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1643053,"byte_end":1643098,"line_start":168,"line_end":168,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7438},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1644124,"byte_end":1644134,"line_start":203,"line_end":203,"column_start":8,"column_end":18},"name":"hash_slice","qualname":"::hash::Hash::hash_slice","value":"fn <H> (data: &[Self], state: &mut H) -> ()","parent":{"krate":0,"index":7434},"children":[],"decl_id":null,"docs":" A hashable type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1643053,"byte_end":1643098,"line_start":168,"line_end":168,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":7440},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1645254,"byte_end":1645260,"line_start":243,"line_end":243,"column_start":11,"column_end":17},"name":"Hasher","qualname":"::hash::Hasher","value":"Hasher","parent":null,"children":[{"krate":0,"index":7442},{"krate":0,"index":7444},{"krate":0,"index":7446},{"krate":0,"index":7448},{"krate":0,"index":7450},{"krate":0,"index":7452},{"krate":0,"index":7454},{"krate":0,"index":7456},{"krate":0,"index":7458},{"krate":0,"index":7460},{"krate":0,"index":7462},{"krate":0,"index":7464},{"krate":0,"index":7466},{"krate":0,"index":7468}],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1645198,"byte_end":1645243,"line_start":242,"line_end":242,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7442},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1645971,"byte_end":1645977,"line_start":265,"line_end":265,"column_start":8,"column_end":14},"name":"finish","qualname":"::hash::Hasher::finish","value":"fn (&self) -> u64","parent":{"krate":0,"index":7440},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1645198,"byte_end":1645243,"line_start":242,"line_end":242,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7444},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1646462,"byte_end":1646467,"line_start":283,"line_end":283,"column_start":8,"column_end":13},"name":"write","qualname":"::hash::Hasher::write","value":"fn (&mut self, bytes: &[u8]) -> ()","parent":{"krate":0,"index":7440},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1645198,"byte_end":1645243,"line_start":242,"line_end":242,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7446},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1646620,"byte_end":1646628,"line_start":288,"line_end":288,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::hash::Hasher::write_u8","value":"fn (&mut self, i: u8) -> ()","parent":{"krate":0,"index":7440},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1645198,"byte_end":1645243,"line_start":242,"line_end":242,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7448},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1646806,"byte_end":1646815,"line_start":294,"line_end":294,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::hash::Hasher::write_u16","value":"fn (&mut self, i: u16) -> ()","parent":{"krate":0,"index":7440},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1645198,"byte_end":1645243,"line_start":242,"line_end":242,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7450},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1647033,"byte_end":1647042,"line_start":300,"line_end":300,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::hash::Hasher::write_u32","value":"fn (&mut self, i: u32) -> ()","parent":{"krate":0,"index":7440},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1645198,"byte_end":1645243,"line_start":242,"line_end":242,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7452},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1647260,"byte_end":1647269,"line_start":306,"line_end":306,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::hash::Hasher::write_u64","value":"fn (&mut self, i: u64) -> ()","parent":{"krate":0,"index":7440},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1645198,"byte_end":1645243,"line_start":242,"line_end":242,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7454},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1647481,"byte_end":1647491,"line_start":312,"line_end":312,"column_start":8,"column_end":18},"name":"write_u128","qualname":"::hash::Hasher::write_u128","value":"fn (&mut self, i: u128) -> ()","parent":{"krate":0,"index":7440},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1645198,"byte_end":1645243,"line_start":242,"line_end":242,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7456},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1647713,"byte_end":1647724,"line_start":318,"line_end":318,"column_start":8,"column_end":19},"name":"write_usize","qualname":"::hash::Hasher::write_usize","value":"fn (&mut self, i: usize) -> ()","parent":{"krate":0,"index":7440},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1645198,"byte_end":1645243,"line_start":242,"line_end":242,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7458},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1648041,"byte_end":1648049,"line_start":328,"line_end":328,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::hash::Hasher::write_i8","value":"fn (&mut self, i: i8) -> ()","parent":{"krate":0,"index":7440},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1645198,"byte_end":1645243,"line_start":242,"line_end":242,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7460},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1648233,"byte_end":1648242,"line_start":334,"line_end":334,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::hash::Hasher::write_i16","value":"fn (&mut self, i: i16) -> ()","parent":{"krate":0,"index":7440},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1645198,"byte_end":1645243,"line_start":242,"line_end":242,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7462},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1648429,"byte_end":1648438,"line_start":340,"line_end":340,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::hash::Hasher::write_i32","value":"fn (&mut self, i: i32) -> ()","parent":{"krate":0,"index":7440},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1645198,"byte_end":1645243,"line_start":242,"line_end":242,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7464},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1648625,"byte_end":1648634,"line_start":346,"line_end":346,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::hash::Hasher::write_i64","value":"fn (&mut self, i: i64) -> ()","parent":{"krate":0,"index":7440},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1645198,"byte_end":1645243,"line_start":242,"line_end":242,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7466},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1648815,"byte_end":1648825,"line_start":352,"line_end":352,"column_start":8,"column_end":18},"name":"write_i128","qualname":"::hash::Hasher::write_i128","value":"fn (&mut self, i: i128) -> ()","parent":{"krate":0,"index":7440},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1645198,"byte_end":1645243,"line_start":242,"line_end":242,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7468},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1649017,"byte_end":1649028,"line_start":358,"line_end":358,"column_start":8,"column_end":19},"name":"write_isize","qualname":"::hash::Hasher::write_isize","value":"fn (&mut self, i: isize) -> ()","parent":{"krate":0,"index":7440},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1645198,"byte_end":1645243,"line_start":242,"line_end":242,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":7500},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1651293,"byte_end":1651304,"line_start":439,"line_end":439,"column_start":11,"column_end":22},"name":"BuildHasher","qualname":"::hash::BuildHasher","value":"BuildHasher","parent":null,"children":[{"krate":0,"index":7502},{"krate":0,"index":7504}],"decl_id":null,"docs":" A trait for creating instances of [`Hasher`].","sig":null,"attributes":[{"value":"stable(since = \"1.7.0\", feature = \"build_hasher\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1651230,"byte_end":1651282,"line_start":438,"line_end":438,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":7502},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1651422,"byte_end":1651428,"line_start":442,"line_end":442,"column_start":10,"column_end":16},"name":"Hasher","qualname":"::hash::BuildHasher::Hasher","value":"type Hasher: Hasher;","parent":{"krate":0,"index":7500},"children":[],"decl_id":null,"docs":" Type of the hasher that will be created.\n","sig":null,"attributes":[{"value":"stable(since = \"1.7.0\", feature = \"build_hasher\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1651360,"byte_end":1651412,"line_start":441,"line_end":441,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":7504},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1651920,"byte_end":1651932,"line_start":461,"line_end":461,"column_start":8,"column_end":20},"name":"build_hasher","qualname":"::hash::BuildHasher::build_hasher","value":"fn (&self) -> Self::Hasher","parent":{"krate":0,"index":7500},"children":[],"decl_id":null,"docs":" A trait for creating instances of [`Hasher`].","sig":null,"attributes":[{"value":"stable(since = \"1.7.0\", feature = \"build_hasher\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1651230,"byte_end":1651282,"line_start":438,"line_end":438,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":7506},"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1653661,"byte_end":1653679,"line_start":513,"line_end":513,"column_start":12,"column_end":30},"name":"BuildHasherDefault","qualname":"::hash::BuildHasherDefault","value":"","parent":null,"children":[],"decl_id":null,"docs":" Used to create a default [`BuildHasher`] instance for types that implement\n [`Hasher`] and [`Default`].","sig":null,"attributes":[{"value":"stable(since = \"1.7.0\", feature = \"build_hasher\")","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1653597,"byte_end":1653649,"line_start":512,"line_end":512,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":7572},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fmt","qualname":"::fmt","value":"libcore/fmt/mod.rs","parent":null,"children":[{"krate":0,"index":7574},{"krate":0,"index":7586},{"krate":0,"index":7588},{"krate":0,"index":7590},{"krate":0,"index":7592},{"krate":0,"index":7594},{"krate":0,"index":7596},{"krate":0,"index":7598},{"krate":0,"index":7600},{"krate":0,"index":7634},{"krate":0,"index":7694},{"krate":0,"index":42618},{"krate":0,"index":42620},{"krate":0,"index":7780},{"krate":0,"index":7792},{"krate":0,"index":7796},{"krate":0,"index":42672},{"krate":0,"index":42706},{"krate":0,"index":42702},{"krate":0,"index":42698},{"krate":0,"index":42694},{"krate":0,"index":42690},{"krate":0,"index":42686},{"krate":0,"index":42682},{"krate":0,"index":42678},{"krate":0,"index":42674},{"krate":0,"index":7798},{"krate":0,"index":7816},{"krate":0,"index":7824},{"krate":0,"index":7826},{"krate":0,"index":42708},{"krate":0,"index":42710},{"krate":0,"index":7828},{"krate":0,"index":7832},{"krate":0,"index":42712},{"krate":0,"index":42718},{"krate":0,"index":42714},{"krate":0,"index":7842},{"krate":0,"index":42720},{"krate":0,"index":42726},{"krate":0,"index":42722},{"krate":0,"index":7850},{"krate":0,"index":7854},{"krate":0,"index":7858},{"krate":0,"index":7862},{"krate":0,"index":7866},{"krate":0,"index":7870},{"krate":0,"index":7874},{"krate":0,"index":7878},{"krate":0,"index":7882},{"krate":0,"index":7886},{"krate":0,"index":7890},{"krate":0,"index":7894},{"krate":0,"index":7896},{"krate":0,"index":7954},{"krate":0,"index":7962},{"krate":0,"index":7966},{"krate":0,"index":42728},{"krate":0,"index":42732},{"krate":0,"index":42736},{"krate":0,"index":42740},{"krate":0,"index":42744},{"krate":0,"index":42748},{"krate":0,"index":42752},{"krate":0,"index":42756},{"krate":0,"index":42760},{"krate":0,"index":42764},{"krate":0,"index":42768},{"krate":0,"index":42772},{"krate":0,"index":42776},{"krate":0,"index":42780},{"krate":0,"index":42784},{"krate":0,"index":42788},{"krate":0,"index":7968},{"krate":0,"index":7972},{"krate":0,"index":7976},{"krate":0,"index":7980},{"krate":0,"index":7984},{"krate":0,"index":7988},{"krate":0,"index":7992},{"krate":0,"index":7996},{"krate":0,"index":8000},{"krate":0,"index":8004},{"krate":0,"index":8008},{"krate":0,"index":8012},{"krate":0,"index":8016},{"krate":0,"index":8020},{"krate":0,"index":8024},{"krate":0,"index":8026},{"krate":0,"index":8028},{"krate":0,"index":42792},{"krate":0,"index":42796},{"krate":0,"index":42800},{"krate":0,"index":42804},{"krate":0,"index":42808},{"krate":0,"index":42812},{"krate":0,"index":42816},{"krate":0,"index":42820},{"krate":0,"index":42824},{"krate":0,"index":42828},{"krate":0,"index":42832},{"krate":0,"index":42836},{"krate":0,"index":8030},{"krate":0,"index":8034},{"krate":0,"index":8038},{"krate":0,"index":8042},{"krate":0,"index":8046},{"krate":0,"index":8056},{"krate":0,"index":8060},{"krate":0,"index":8064}],"decl_id":null,"docs":" Utilities for formatting and printing strings.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1671974,"byte_end":1672020,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":7656},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1741640,"byte_end":1741644,"line_start":26,"line_end":26,"column_start":8,"column_end":12},"name":"zero","qualname":"::fmt::num::Int::zero","value":"fn () -> Self","parent":{"krate":0,"index":7654},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7658},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1741663,"byte_end":1741670,"line_start":27,"line_end":27,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::fmt::num::Int::from_u8","value":"fn (u: u8) -> Self","parent":{"krate":0,"index":7654},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7660},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1741694,"byte_end":1741699,"line_start":28,"line_end":28,"column_start":8,"column_end":13},"name":"to_u8","qualname":"::fmt::num::Int::to_u8","value":"fn (&self) -> u8","parent":{"krate":0,"index":7654},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7662},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1741721,"byte_end":1741727,"line_start":29,"line_end":29,"column_start":8,"column_end":14},"name":"to_u16","qualname":"::fmt::num::Int::to_u16","value":"fn (&self) -> u16","parent":{"krate":0,"index":7654},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7664},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1741750,"byte_end":1741756,"line_start":30,"line_end":30,"column_start":8,"column_end":14},"name":"to_u32","qualname":"::fmt::num::Int::to_u32","value":"fn (&self) -> u32","parent":{"krate":0,"index":7654},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7666},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1741779,"byte_end":1741785,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::fmt::num::Int::to_u64","value":"fn (&self) -> u64","parent":{"krate":0,"index":7654},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7668},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1741808,"byte_end":1741815,"line_start":32,"line_end":32,"column_start":8,"column_end":15},"name":"to_u128","qualname":"::fmt::num::Int::to_u128","value":"fn (&self) -> u128","parent":{"krate":0,"index":7654},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7674},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1742411,"byte_end":1742415,"line_start":52,"line_end":52,"column_start":11,"column_end":15},"name":"BASE","qualname":"::fmt::num::GenericRadix::BASE","value":"u8","parent":{"krate":0,"index":7672},"children":[],"decl_id":null,"docs":" The number of digits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7676},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1742472,"byte_end":1742478,"line_start":55,"line_end":55,"column_start":11,"column_end":17},"name":"PREFIX","qualname":"::fmt::num::GenericRadix::PREFIX","value":"&'static str","parent":{"krate":0,"index":7672},"children":[],"decl_id":null,"docs":" A radix-specific prefix string.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7678},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1742560,"byte_end":1742565,"line_start":58,"line_end":58,"column_start":8,"column_end":13},"name":"digit","qualname":"::fmt::num::GenericRadix::digit","value":"fn (x: u8) -> u8","parent":{"krate":0,"index":7672},"children":[],"decl_id":null,"docs":" A type that represents a specific radix\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7680},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1742649,"byte_end":1742656,"line_start":61,"line_end":61,"column_start":8,"column_end":15},"name":"fmt_int","qualname":"::fmt::num::GenericRadix::fmt_int","value":"fn <T> (&self, mut x: T, f: &mut fmt::Formatter) -> fmt::Result","parent":{"krate":0,"index":7672},"children":[],"decl_id":null,"docs":" A type that represents a specific radix\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7708},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1752864,"byte_end":1752875,"line_start":90,"line_end":90,"column_start":12,"column_end":23},"name":"DebugStruct","qualname":"::fmt::builders::DebugStruct","value":"DebugStruct {  }","parent":null,"children":[{"krate":0,"index":4647},{"krate":0,"index":4649},{"krate":0,"index":4651}],"decl_id":null,"docs":" A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1752746,"byte_end":1752757,"line_start":87,"line_end":87,"column_start":1,"column_end":12}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1752758,"byte_end":1752797,"line_start":88,"line_end":88,"column_start":1,"column_end":40}},{"value":"stable(feature = \"debug_builders\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1752798,"byte_end":1752852,"line_start":89,"line_end":89,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":7710},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1752984,"byte_end":1753000,"line_start":96,"line_end":96,"column_start":8,"column_end":24},"name":"debug_struct_new","qualname":"::fmt::builders::debug_struct_new","value":"fn <'a, 'b> (fmt: &'a mut fmt::Formatter<'b>, name: &str) -> DebugStruct<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7714},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1753430,"byte_end":1753435,"line_start":110,"line_end":110,"column_start":12,"column_end":17},"name":"field","qualname":"<DebugStruct<'a, 'b>>::field","value":"fn (&mut self, name: &str, value: &fmt::Debug) -> &mut DebugStruct<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7716},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1754360,"byte_end":1754366,"line_start":138,"line_end":138,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugStruct<'a, 'b>>::finish","value":"fn (&mut self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7720},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1755669,"byte_end":1755679,"line_start":187,"line_end":187,"column_start":12,"column_end":22},"name":"DebugTuple","qualname":"::fmt::builders::DebugTuple","value":"DebugTuple {  }","parent":null,"children":[{"krate":0,"index":4669},{"krate":0,"index":4671},{"krate":0,"index":4673},{"krate":0,"index":4675}],"decl_id":null,"docs":" A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1755551,"byte_end":1755562,"line_start":184,"line_end":184,"column_start":1,"column_end":12}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1755563,"byte_end":1755602,"line_start":185,"line_end":185,"column_start":1,"column_end":40}},{"value":"stable(feature = \"debug_builders\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1755603,"byte_end":1755657,"line_start":186,"line_end":186,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":7722},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1755807,"byte_end":1755822,"line_start":194,"line_end":194,"column_start":8,"column_end":23},"name":"debug_tuple_new","qualname":"::fmt::builders::debug_tuple_new","value":"fn <'a, 'b> (fmt: &'a mut fmt::Formatter<'b>, name: &str) -> DebugTuple<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7726},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1756220,"byte_end":1756225,"line_start":207,"line_end":207,"column_start":12,"column_end":17},"name":"field","qualname":"<DebugTuple<'a, 'b>>::field","value":"fn (&mut self, value: &fmt::Debug) -> &mut DebugTuple<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7728},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1757099,"byte_end":1757105,"line_start":234,"line_end":234,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugTuple<'a, 'b>>::finish","value":"fn (&mut self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7738},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1758430,"byte_end":1758436,"line_start":283,"line_end":283,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugInner<'a, 'b>>::finish","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7742},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1759529,"byte_end":1759537,"line_start":325,"line_end":325,"column_start":12,"column_end":20},"name":"DebugSet","qualname":"::fmt::builders::DebugSet","value":"DebugSet {  }","parent":null,"children":[{"krate":0,"index":4711}],"decl_id":null,"docs":" A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1759411,"byte_end":1759422,"line_start":322,"line_end":322,"column_start":1,"column_end":12}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1759423,"byte_end":1759462,"line_start":323,"line_end":323,"column_start":1,"column_end":40}},{"value":"stable(feature = \"debug_builders\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1759463,"byte_end":1759517,"line_start":324,"line_end":324,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":7744},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1759593,"byte_end":1759606,"line_start":329,"line_end":329,"column_start":8,"column_end":21},"name":"debug_set_new","qualname":"::fmt::builders::debug_set_new","value":"fn <'a, 'b> (fmt: &'a mut fmt::Formatter<'b>) -> DebugSet<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7748},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1759987,"byte_end":1759992,"line_start":343,"line_end":343,"column_start":12,"column_end":17},"name":"entry","qualname":"<DebugSet<'a, 'b>>::entry","value":"fn (&mut self, entry: &fmt::Debug) -> &mut DebugSet<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7750},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1760245,"byte_end":1760252,"line_start":350,"line_end":350,"column_start":12,"column_end":19},"name":"entries","qualname":"<DebugSet<'a, 'b>>::entries","value":"fn <D, I> (&mut self, entries: I) -> &mut DebugSet<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7752},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1760604,"byte_end":1760610,"line_start":362,"line_end":362,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugSet<'a, 'b>>::finish","value":"fn (&mut self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7754},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1761553,"byte_end":1761562,"line_start":396,"line_end":396,"column_start":12,"column_end":21},"name":"DebugList","qualname":"::fmt::builders::DebugList","value":"DebugList {  }","parent":null,"children":[{"krate":0,"index":4731}],"decl_id":null,"docs":" A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1761435,"byte_end":1761446,"line_start":393,"line_end":393,"column_start":1,"column_end":12}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1761447,"byte_end":1761486,"line_start":394,"line_end":394,"column_start":1,"column_end":40}},{"value":"stable(feature = \"debug_builders\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1761487,"byte_end":1761541,"line_start":395,"line_end":395,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":7756},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1761618,"byte_end":1761632,"line_start":400,"line_end":400,"column_start":8,"column_end":22},"name":"debug_list_new","qualname":"::fmt::builders::debug_list_new","value":"fn <'a, 'b> (fmt: &'a mut fmt::Formatter<'b>) -> DebugList<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7760},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1762016,"byte_end":1762021,"line_start":414,"line_end":414,"column_start":12,"column_end":17},"name":"entry","qualname":"<DebugList<'a, 'b>>::entry","value":"fn (&mut self, entry: &fmt::Debug) -> &mut DebugList<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7762},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1762276,"byte_end":1762283,"line_start":421,"line_end":421,"column_start":12,"column_end":19},"name":"entries","qualname":"<DebugList<'a, 'b>>::entries","value":"fn <D, I> (&mut self, entries: I) -> &mut DebugList<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7764},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1762636,"byte_end":1762642,"line_start":433,"line_end":433,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugList<'a, 'b>>::finish","value":"fn (&mut self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7766},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1763660,"byte_end":1763668,"line_start":467,"line_end":467,"column_start":12,"column_end":20},"name":"DebugMap","qualname":"::fmt::builders::DebugMap","value":"DebugMap {  }","parent":null,"children":[{"krate":0,"index":4751},{"krate":0,"index":4753},{"krate":0,"index":4755}],"decl_id":null,"docs":" A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1763542,"byte_end":1763553,"line_start":464,"line_end":464,"column_start":1,"column_end":12}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1763554,"byte_end":1763593,"line_start":465,"line_end":465,"column_start":1,"column_end":40}},{"value":"stable(feature = \"debug_builders\", since = \"1.2.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1763594,"byte_end":1763648,"line_start":466,"line_end":466,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":7768},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1763777,"byte_end":1763790,"line_start":473,"line_end":473,"column_start":8,"column_end":21},"name":"debug_map_new","qualname":"::fmt::builders::debug_map_new","value":"fn <'a, 'b> (fmt: &'a mut fmt::Formatter<'b>) -> DebugMap<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7772},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1764120,"byte_end":1764125,"line_start":485,"line_end":485,"column_start":12,"column_end":17},"name":"entry","qualname":"<DebugMap<'a, 'b>>::entry","value":"fn (&mut self, key: &fmt::Debug, value: &fmt::Debug) -> &mut DebugMap<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7774},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1765126,"byte_end":1765133,"line_start":514,"line_end":514,"column_start":12,"column_end":19},"name":"entries","qualname":"<DebugMap<'a, 'b>>::entries","value":"fn <K, V, I> (&mut self, entries: I) -> &mut DebugMap<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7776},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1765523,"byte_end":1765529,"line_start":527,"line_end":527,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugMap<'a, 'b>>::finish","value":"fn (&mut self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27931},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1672422,"byte_end":1672426,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Left","qualname":"::fmt::Alignment::Left","value":"Alignment::Left","parent":{"krate":0,"index":42618},"children":[],"decl_id":null,"docs":" Indication that contents should be left-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27933},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1672490,"byte_end":1672495,"line_start":35,"line_end":35,"column_start":5,"column_end":10},"name":"Right","qualname":"::fmt::Alignment::Right","value":"Alignment::Right","parent":{"krate":0,"index":42618},"children":[],"decl_id":null,"docs":" Indication that contents should be right-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27935},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1672560,"byte_end":1672566,"line_start":37,"line_end":37,"column_start":5,"column_end":11},"name":"Center","qualname":"::fmt::Alignment::Center","value":"Alignment::Center","parent":{"krate":0,"index":42618},"children":[],"decl_id":null,"docs":" Indication that contents should be center-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27937},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1672608,"byte_end":1672615,"line_start":39,"line_end":39,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::fmt::Alignment::Unknown","value":"Alignment::Unknown","parent":{"krate":0,"index":42618},"children":[],"decl_id":null,"docs":" No alignment was requested.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":42618},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1672349,"byte_end":1672358,"line_start":31,"line_end":31,"column_start":10,"column_end":19},"name":"Alignment","qualname":"::fmt::Alignment","value":"Alignment::{Left, Right, Center, Unknown}","parent":null,"children":[{"krate":0,"index":27931},{"krate":0,"index":27933},{"krate":0,"index":27935},{"krate":0,"index":27937}],"decl_id":null,"docs":" Possible alignments returned by `Formatter::align`\n","sig":null,"attributes":[{"value":"unstable(feature = \"fmt_flags_align\", issue = \"27726\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1672210,"byte_end":1672267,"line_start":28,"line_end":28,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":7792},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1672881,"byte_end":1672883,"line_start":48,"line_end":48,"column_start":9,"column_end":11},"name":"rt","qualname":"::fmt::rt","value":"libcore/fmt/mod.rs","parent":null,"children":[{"krate":0,"index":7794}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"fmt_internals\",\n           reason = \"internal to format_args!\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1672758,"byte_end":1672857,"line_start":45,"line_end":46,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":7794},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v1","qualname":"::fmt::rt::v1","value":"libcore/fmt/rt/v1.rs","parent":null,"children":[{"krate":0,"index":42624},{"krate":0,"index":42630},{"krate":0,"index":42626},{"krate":0,"index":42632},{"krate":0,"index":42638},{"krate":0,"index":42634},{"krate":0,"index":42640},{"krate":0,"index":42654},{"krate":0,"index":42650},{"krate":0,"index":42646},{"krate":0,"index":42642},{"krate":0,"index":42656},{"krate":0,"index":42662},{"krate":0,"index":42658},{"krate":0,"index":42664},{"krate":0,"index":42670},{"krate":0,"index":42666}],"decl_id":null,"docs":" This is an internal module used by the ifmt! runtime. These structures are\n emitted to static arrays to precompile format strings ahead of time.","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1766610,"byte_end":1766650,"line_start":16,"line_end":16,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":42624},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1766686,"byte_end":1766694,"line_start":19,"line_end":19,"column_start":12,"column_end":20},"name":"Argument","qualname":"::fmt::rt::v1::Argument","value":"Argument { position, format }","parent":null,"children":[{"krate":0,"index":27939},{"krate":0,"index":27941}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1766675,"byte_end":1766754,"line_start":19,"line_end":22,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":27939},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1766705,"byte_end":1766713,"line_start":20,"line_end":20,"column_start":9,"column_end":17},"name":"position","qualname":"::fmt::rt::v1::Argument::position","value":"fmt::rt::v1::Position","parent":{"krate":0,"index":42624},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":27941},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1766733,"byte_end":1766739,"line_start":21,"line_end":21,"column_start":9,"column_end":15},"name":"format","qualname":"::fmt::rt::v1::Argument::format","value":"fmt::rt::v1::FormatSpec","parent":{"krate":0,"index":42624},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":42632},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1766790,"byte_end":1766800,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"FormatSpec","qualname":"::fmt::rt::v1::FormatSpec","value":"FormatSpec { fill, align, flags, precision, width }","parent":null,"children":[{"krate":0,"index":27943},{"krate":0,"index":27945},{"krate":0,"index":27947},{"krate":0,"index":27949},{"krate":0,"index":27951}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1766779,"byte_end":1766918,"line_start":25,"line_end":31,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":27943},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1766811,"byte_end":1766815,"line_start":26,"line_end":26,"column_start":9,"column_end":13},"name":"fill","qualname":"::fmt::rt::v1::FormatSpec::fill","value":"char","parent":{"krate":0,"index":42632},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":27945},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1766831,"byte_end":1766836,"line_start":27,"line_end":27,"column_start":9,"column_end":14},"name":"align","qualname":"::fmt::rt::v1::FormatSpec::align","value":"fmt::rt::v1::Alignment","parent":{"krate":0,"index":42632},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":27947},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1766857,"byte_end":1766862,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"name":"flags","qualname":"::fmt::rt::v1::FormatSpec::flags","value":"u32","parent":{"krate":0,"index":42632},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":27949},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1766877,"byte_end":1766886,"line_start":29,"line_end":29,"column_start":9,"column_end":18},"name":"precision","qualname":"::fmt::rt::v1::FormatSpec::precision","value":"fmt::rt::v1::Count","parent":{"krate":0,"index":42632},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":27951},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1766903,"byte_end":1766908,"line_start":30,"line_end":30,"column_start":9,"column_end":14},"name":"width","qualname":"::fmt::rt::v1::FormatSpec::width","value":"fmt::rt::v1::Count","parent":{"krate":0,"index":42632},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27953},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1767121,"byte_end":1767125,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Left","qualname":"::fmt::rt::v1::Alignment::Left","value":"Alignment::Left","parent":{"krate":0,"index":42640},"children":[],"decl_id":null,"docs":" Indication that contents should be left-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27955},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1767189,"byte_end":1767194,"line_start":39,"line_end":39,"column_start":5,"column_end":10},"name":"Right","qualname":"::fmt::rt::v1::Alignment::Right","value":"Alignment::Right","parent":{"krate":0,"index":42640},"children":[],"decl_id":null,"docs":" Indication that contents should be right-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27957},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1767259,"byte_end":1767265,"line_start":41,"line_end":41,"column_start":5,"column_end":11},"name":"Center","qualname":"::fmt::rt::v1::Alignment::Center","value":"Alignment::Center","parent":{"krate":0,"index":42640},"children":[],"decl_id":null,"docs":" Indication that contents should be center-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27959},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1767307,"byte_end":1767314,"line_start":43,"line_end":43,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::fmt::rt::v1::Alignment::Unknown","value":"Alignment::Unknown","parent":{"krate":0,"index":42640},"children":[],"decl_id":null,"docs":" No alignment was requested.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":42640},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1767048,"byte_end":1767057,"line_start":35,"line_end":35,"column_start":10,"column_end":19},"name":"Alignment","qualname":"::fmt::rt::v1::Alignment","value":"Alignment::{Left, Right, Center, Unknown}","parent":null,"children":[{"krate":0,"index":27953},{"krate":0,"index":27955},{"krate":0,"index":27957},{"krate":0,"index":27959}],"decl_id":null,"docs":" Possible alignments that can be requested as part of a formatting directive.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1767039,"byte_end":1767317,"line_start":35,"line_end":44,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1767039,"byte_end":1767317,"line_start":35,"line_end":44,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":27961},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1767363,"byte_end":1767365,"line_start":48,"line_end":48,"column_start":5,"column_end":7},"name":"Is","qualname":"::fmt::rt::v1::Count::Is","value":"Count::Is(usize)","parent":{"krate":0,"index":42656},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27965},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1767378,"byte_end":1767383,"line_start":49,"line_end":49,"column_start":5,"column_end":10},"name":"Param","qualname":"::fmt::rt::v1::Count::Param","value":"Count::Param(usize)","parent":{"krate":0,"index":42656},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27969},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1767396,"byte_end":1767405,"line_start":50,"line_end":50,"column_start":5,"column_end":14},"name":"NextParam","qualname":"::fmt::rt::v1::Count::NextParam","value":"Count::NextParam","parent":{"krate":0,"index":42656},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27971},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1767411,"byte_end":1767418,"line_start":51,"line_end":51,"column_start":5,"column_end":12},"name":"Implied","qualname":"::fmt::rt::v1::Count::Implied","value":"Count::Implied","parent":{"krate":0,"index":42656},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":42656},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1767351,"byte_end":1767356,"line_start":47,"line_end":47,"column_start":10,"column_end":15},"name":"Count","qualname":"::fmt::rt::v1::Count","value":"Count::{Is, Param, NextParam, Implied}","parent":null,"children":[{"krate":0,"index":27961},{"krate":0,"index":27965},{"krate":0,"index":27969},{"krate":0,"index":27971}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1767342,"byte_end":1767421,"line_start":47,"line_end":52,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":27973},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1767470,"byte_end":1767474,"line_start":56,"line_end":56,"column_start":5,"column_end":9},"name":"Next","qualname":"::fmt::rt::v1::Position::Next","value":"Position::Next","parent":{"krate":0,"index":42664},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":27975},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1767480,"byte_end":1767482,"line_start":57,"line_end":57,"column_start":5,"column_end":7},"name":"At","qualname":"::fmt::rt::v1::Position::At","value":"Position::At(usize)","parent":{"krate":0,"index":42664},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":42664},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1767455,"byte_end":1767463,"line_start":55,"line_end":55,"column_start":10,"column_end":18},"name":"Position","qualname":"::fmt::rt::v1::Position","value":"Position::{Next, At}","parent":null,"children":[{"krate":0,"index":27973},{"krate":0,"index":27975}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1767446,"byte_end":1767492,"line_start":55,"line_end":58,"column_start":1,"column_end":2}}]},{"kind":"Type","id":{"krate":0,"index":7796},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1673457,"byte_end":1673463,"line_start":77,"line_end":77,"column_start":10,"column_end":16},"name":"Result","qualname":"::fmt::Result","value":"result::Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" The type returned by formatter methods.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1673402,"byte_end":1673447,"line_start":76,"line_end":76,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":42672},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1674457,"byte_end":1674462,"line_start":105,"line_end":105,"column_start":12,"column_end":17},"name":"Error","qualname":"::fmt::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type which is returned from formatting a message into a stream.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1674323,"byte_end":1674368,"line_start":103,"line_end":103,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1674446,"byte_end":1674463,"line_start":105,"line_end":105,"column_start":1,"column_end":18}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1674446,"byte_end":1674463,"line_start":105,"line_end":105,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":7798},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1675130,"byte_end":1675135,"line_start":120,"line_end":120,"column_start":11,"column_end":16},"name":"Write","qualname":"::fmt::Write","value":"Write","parent":null,"children":[{"krate":0,"index":7800},{"krate":0,"index":7802},{"krate":0,"index":7804}],"decl_id":null,"docs":" A collection of methods that are required to format a message into a stream.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1675074,"byte_end":1675119,"line_start":119,"line_end":119,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7800},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1675970,"byte_end":1675979,"line_start":148,"line_end":148,"column_start":8,"column_end":17},"name":"write_str","qualname":"::fmt::Write::write_str","value":"fn (&mut self, s: &str) -> Result","parent":{"krate":0,"index":7798},"children":[],"decl_id":null,"docs":" A collection of methods that are required to format a message into a stream.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1675074,"byte_end":1675119,"line_start":119,"line_end":119,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7802},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1676990,"byte_end":1677000,"line_start":179,"line_end":179,"column_start":8,"column_end":18},"name":"write_char","qualname":"::fmt::Write::write_char","value":"fn (&mut self, c: char) -> Result","parent":{"krate":0,"index":7798},"children":[],"decl_id":null,"docs":" A collection of methods that are required to format a message into a stream.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1675074,"byte_end":1675119,"line_start":119,"line_end":119,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7804},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1677766,"byte_end":1677775,"line_start":204,"line_end":204,"column_start":8,"column_end":17},"name":"write_fmt","qualname":"::fmt::Write::write_fmt","value":"fn (&mut self, args: Arguments) -> Result","parent":{"krate":0,"index":7798},"children":[],"decl_id":null,"docs":" A collection of methods that are required to format a message into a stream.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1675074,"byte_end":1675119,"line_start":119,"line_end":119,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":7824},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1679169,"byte_end":1679178,"line_start":250,"line_end":250,"column_start":12,"column_end":21},"name":"Formatter","qualname":"::fmt::Formatter","value":"Formatter {  }","parent":null,"children":[{"krate":0,"index":4797},{"krate":0,"index":4799},{"krate":0,"index":4801},{"krate":0,"index":4803},{"krate":0,"index":4805},{"krate":0,"index":4807},{"krate":0,"index":4809},{"krate":0,"index":4811}],"decl_id":null,"docs":" A struct to represent both where to emit formatting strings to and how they\n should be formatted. A mutable version of this is passed to all formatting\n traits.\n","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1679072,"byte_end":1679111,"line_start":248,"line_end":248,"column_start":1,"column_end":40}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1679112,"byte_end":1679157,"line_start":249,"line_end":249,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":42708},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1680583,"byte_end":1680593,"line_start":286,"line_end":286,"column_start":12,"column_end":22},"name":"ArgumentV1","qualname":"::fmt::ArgumentV1","value":"ArgumentV1 {  }","parent":null,"children":[{"krate":0,"index":27983},{"krate":0,"index":27985}],"decl_id":null,"docs":" This struct represents the generic \"argument\" which is taken by the Xprintf\n family of functions. It contains a function to format the given value. At\n compile time it is ensured that the function and the value have the correct\n types, and then this struct is used to canonicalize arguments to one type.\n","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1680417,"byte_end":1680456,"line_start":282,"line_end":282,"column_start":1,"column_end":40}},{"value":"unstable(feature = \"fmt_internals\",\n           reason = \"internal to format_args!\",\n           issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1680457,"byte_end":1680556,"line_start":283,"line_end":284,"column_start":1,"column_end":25}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1680572,"byte_end":1680674,"line_start":286,"line_end":289,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":7836},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1681154,"byte_end":1681157,"line_start":308,"line_end":308,"column_start":12,"column_end":15},"name":"new","qualname":"<ArgumentV1<'a>>::new","value":"fn <'b, T> (x: &'b T, f: fn(&T, &mut Formatter) -> Result) -> ArgumentV1<'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7838},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1681552,"byte_end":1681562,"line_start":321,"line_end":321,"column_start":12,"column_end":22},"name":"from_usize","qualname":"<ArgumentV1<'a>>::from_usize","value":"fn (x: &usize) -> ArgumentV1","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7844},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1682341,"byte_end":1682347,"line_start":344,"line_end":344,"column_start":12,"column_end":18},"name":"new_v1","qualname":"<Arguments<'a>>::new_v1","value":"fn (pieces: &'a [&'a str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7846},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1683103,"byte_end":1683119,"line_start":362,"line_end":362,"column_start":12,"column_end":28},"name":"new_v1_formatted","qualname":"<Arguments<'a>>::new_v1_formatted","value":"fn (pieces: &'a [&'a str], args: &'a [ArgumentV1<'a>], fmt: &'a [rt::v1::Argument]) -> Arguments<'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7848},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1683739,"byte_end":1683757,"line_start":379,"line_end":379,"column_start":12,"column_end":30},"name":"estimated_capacity","qualname":"<Arguments<'a>>::estimated_capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":42720},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1685626,"byte_end":1685635,"line_start":425,"line_end":425,"column_start":12,"column_end":21},"name":"Arguments","qualname":"::fmt::Arguments","value":"Arguments {  }","parent":null,"children":[{"krate":0,"index":28003},{"krate":0,"index":28005},{"krate":0,"index":28007}],"decl_id":null,"docs":" This structure represents a safely precompiled version of a format string\n and its arguments. This cannot be generated at runtime because it cannot\n safely be done, so no constructors are given and the fields are private\n to prevent modification.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1685546,"byte_end":1685591,"line_start":423,"line_end":423,"column_start":1,"column_end":46}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1685615,"byte_end":1685997,"line_start":425,"line_end":435,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":7858},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1689044,"byte_end":1689049,"line_start":551,"line_end":551,"column_start":11,"column_end":16},"name":"Debug","qualname":"::fmt::Debug","value":"Debug","parent":null,"children":[{"krate":0,"index":7860}],"decl_id":null,"docs":" `?` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1688635,"byte_end":1688680,"line_start":543,"line_end":543,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(crate_local,\n                            label =\n                                \"`{Self}` cannot be formatted using `:?`; add `#[derive(Debug)]` or manually implement `{Debug}`\"),\n                         message = \"`{Self}` doesn\\'t implement `{Debug}`\",\n                         label =\n                             \"`{Self}` cannot be formatted using `:?` because it doesn\\'t implement `{Debug}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1688681,"byte_end":1689009,"line_start":544,"line_end":549,"column_start":1,"column_end":3}},{"value":"lang = \"debug_trait\"","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1689010,"byte_end":1689033,"line_start":550,"line_end":550,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":7860},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1689695,"byte_end":1689698,"line_start":574,"line_end":574,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::Debug::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7858},"children":[],"decl_id":null,"docs":" `?` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1688635,"byte_end":1688680,"line_start":543,"line_end":543,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented(on(crate_local,\n                            label =\n                                \"`{Self}` cannot be formatted using `:?`; add `#[derive(Debug)]` or manually implement `{Debug}`\"),\n                         message = \"`{Self}` doesn\\'t implement `{Debug}`\",\n                         label =\n                             \"`{Self}` cannot be formatted using `:?` because it doesn\\'t implement `{Debug}`\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1688681,"byte_end":1689009,"line_start":544,"line_end":549,"column_start":1,"column_end":3}},{"value":"lang = \"debug_trait\"","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1689010,"byte_end":1689033,"line_start":550,"line_end":550,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":7862},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1690766,"byte_end":1690773,"line_start":616,"line_end":616,"column_start":11,"column_end":18},"name":"Display","qualname":"::fmt::Display","value":"Display","parent":null,"children":[{"krate":0,"index":7864}],"decl_id":null,"docs":" Format trait for an empty format, `{}`.","sig":null,"attributes":[{"value":"rustc_on_unimplemented(message = \"`{Self}` doesn\\'t implement `{Display}`\",\n                         label =\n                             \"`{Self}` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1690488,"byte_end":1690709,"line_start":610,"line_end":614,"column_start":1,"column_end":3}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1690710,"byte_end":1690755,"line_start":615,"line_end":615,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7864},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1691415,"byte_end":1691418,"line_start":639,"line_end":639,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::Display::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7862},"children":[],"decl_id":null,"docs":" Format trait for an empty format, `{}`.","sig":null,"attributes":[{"value":"rustc_on_unimplemented(message = \"`{Self}` doesn\\'t implement `{Display}`\",\n                         label =\n                             \"`{Self}` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1690488,"byte_end":1690709,"line_start":610,"line_end":614,"column_start":1,"column_end":3}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1690710,"byte_end":1690755,"line_start":615,"line_end":615,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":7866},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1692612,"byte_end":1692617,"line_start":688,"line_end":688,"column_start":11,"column_end":16},"name":"Octal","qualname":"::fmt::Octal","value":"Octal","parent":null,"children":[{"krate":0,"index":7868}],"decl_id":null,"docs":" `o` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1692556,"byte_end":1692601,"line_start":687,"line_end":687,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7868},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1692730,"byte_end":1692733,"line_start":691,"line_end":691,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::Octal::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7866},"children":[],"decl_id":null,"docs":" `o` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1692556,"byte_end":1692601,"line_start":687,"line_end":687,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":7870},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1694147,"byte_end":1694153,"line_start":744,"line_end":744,"column_start":11,"column_end":17},"name":"Binary","qualname":"::fmt::Binary","value":"Binary","parent":null,"children":[{"krate":0,"index":7872}],"decl_id":null,"docs":" `b` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1694091,"byte_end":1694136,"line_start":743,"line_end":743,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7872},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1694266,"byte_end":1694269,"line_start":747,"line_end":747,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::Binary::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7870},"children":[],"decl_id":null,"docs":" `b` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1694091,"byte_end":1694136,"line_start":743,"line_end":743,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":7874},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1695510,"byte_end":1695518,"line_start":797,"line_end":797,"column_start":11,"column_end":19},"name":"LowerHex","qualname":"::fmt::LowerHex","value":"LowerHex","parent":null,"children":[{"krate":0,"index":7876}],"decl_id":null,"docs":" `x` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1695454,"byte_end":1695499,"line_start":796,"line_end":796,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7876},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1695631,"byte_end":1695634,"line_start":800,"line_end":800,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::LowerHex::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7874},"children":[],"decl_id":null,"docs":" `x` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1695454,"byte_end":1695499,"line_start":796,"line_end":796,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":7878},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1696875,"byte_end":1696883,"line_start":850,"line_end":850,"column_start":11,"column_end":19},"name":"UpperHex","qualname":"::fmt::UpperHex","value":"UpperHex","parent":null,"children":[{"krate":0,"index":7880}],"decl_id":null,"docs":" `X` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1696819,"byte_end":1696864,"line_start":849,"line_end":849,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7880},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1696996,"byte_end":1696999,"line_start":853,"line_end":853,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::UpperHex::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7878},"children":[],"decl_id":null,"docs":" `X` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1696819,"byte_end":1696864,"line_start":849,"line_end":849,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":7882},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1698007,"byte_end":1698014,"line_start":895,"line_end":895,"column_start":11,"column_end":18},"name":"Pointer","qualname":"::fmt::Pointer","value":"Pointer","parent":null,"children":[{"krate":0,"index":7884}],"decl_id":null,"docs":" `p` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1697951,"byte_end":1697996,"line_start":894,"line_end":894,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7884},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1698127,"byte_end":1698130,"line_start":898,"line_end":898,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::Pointer::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7882},"children":[],"decl_id":null,"docs":" `p` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1697951,"byte_end":1697996,"line_start":894,"line_end":894,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":7886},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1699045,"byte_end":1699053,"line_start":938,"line_end":938,"column_start":11,"column_end":19},"name":"LowerExp","qualname":"::fmt::LowerExp","value":"LowerExp","parent":null,"children":[{"krate":0,"index":7888}],"decl_id":null,"docs":" `e` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1698989,"byte_end":1699034,"line_start":937,"line_end":937,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7888},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1699166,"byte_end":1699169,"line_start":941,"line_end":941,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::LowerExp::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7886},"children":[],"decl_id":null,"docs":" `e` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1698989,"byte_end":1699034,"line_start":937,"line_end":937,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":7890},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1700085,"byte_end":1700093,"line_start":981,"line_end":981,"column_start":11,"column_end":19},"name":"UpperExp","qualname":"::fmt::UpperExp","value":"UpperExp","parent":null,"children":[{"krate":0,"index":7892}],"decl_id":null,"docs":" `E` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1700029,"byte_end":1700074,"line_start":980,"line_end":980,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7892},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1700206,"byte_end":1700209,"line_start":984,"line_end":984,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::UpperExp::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":7890},"children":[],"decl_id":null,"docs":" `E` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1700029,"byte_end":1700074,"line_start":980,"line_end":980,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":7894},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1701201,"byte_end":1701206,"line_start":1019,"line_end":1019,"column_start":8,"column_end":13},"name":"write","qualname":"::fmt::write","value":"fn (output: &mut Write, args: Arguments) -> Result","parent":null,"children":[],"decl_id":null,"docs":" The `write` function takes an output stream, and an `Arguments` struct\n that can be precompiled with the `format_args!` macro.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1701148,"byte_end":1701193,"line_start":1018,"line_end":1018,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":7904},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1705143,"byte_end":1705155,"line_start":1132,"line_end":1132,"column_start":12,"column_end":24},"name":"pad_integral","qualname":"<Formatter<'a>>::pad_integral","value":"fn (&mut self, is_nonnegative: bool, prefix: &str, buf: &str) -> Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7906},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1707921,"byte_end":1707924,"line_start":1203,"line_end":1203,"column_start":12,"column_end":15},"name":"pad","qualname":"<Formatter<'a>>::pad","value":"fn (&mut self, s: &str) -> Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7918},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1714041,"byte_end":1714050,"line_start":1360,"line_end":1360,"column_start":12,"column_end":21},"name":"write_str","qualname":"<Formatter<'a>>::write_str","value":"fn (&mut self, data: &str) -> Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7920},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1714248,"byte_end":1714257,"line_start":1366,"line_end":1366,"column_start":12,"column_end":21},"name":"write_fmt","qualname":"<Formatter<'a>>::write_fmt","value":"fn (&mut self, fmt: Arguments) -> Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7922},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1714624,"byte_end":1714629,"line_start":1375,"line_end":1375,"column_start":12,"column_end":17},"name":"flags","qualname":"<Formatter<'a>>::flags","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7924},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1714786,"byte_end":1714790,"line_start":1379,"line_end":1379,"column_start":12,"column_end":16},"name":"fill","qualname":"<Formatter<'a>>::fill","value":"fn (&self) -> char","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7926},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1715006,"byte_end":1715011,"line_start":1384,"line_end":1384,"column_start":12,"column_end":17},"name":"align","qualname":"<Formatter<'a>>::align","value":"fn (&self) -> Alignment","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7928},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1716196,"byte_end":1716201,"line_start":1418,"line_end":1418,"column_start":12,"column_end":17},"name":"width","qualname":"<Formatter<'a>>::width","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7930},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1717109,"byte_end":1717118,"line_start":1445,"line_end":1445,"column_start":12,"column_end":21},"name":"precision","qualname":"<Formatter<'a>>::precision","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7932},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1717977,"byte_end":1717986,"line_start":1473,"line_end":1473,"column_start":12,"column_end":21},"name":"sign_plus","qualname":"<Formatter<'a>>::sign_plus","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7934},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1718809,"byte_end":1718819,"line_start":1499,"line_end":1499,"column_start":12,"column_end":22},"name":"sign_minus","qualname":"<Formatter<'a>>::sign_minus","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7936},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1719574,"byte_end":1719583,"line_start":1524,"line_end":1524,"column_start":12,"column_end":21},"name":"alternate","qualname":"<Formatter<'a>>::alternate","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7938},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1720304,"byte_end":1720323,"line_start":1547,"line_end":1547,"column_start":12,"column_end":31},"name":"sign_aware_zero_pad","qualname":"<Formatter<'a>>::sign_aware_zero_pad","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7944},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1721928,"byte_end":1721940,"line_start":1595,"line_end":1595,"column_start":12,"column_end":24},"name":"debug_struct","qualname":"<Formatter<'a>>::debug_struct","value":"fn <'b> (&'b mut self, name: &str) -> DebugStruct<'b, 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7946},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1722916,"byte_end":1722927,"line_start":1626,"line_end":1626,"column_start":12,"column_end":23},"name":"debug_tuple","qualname":"<Formatter<'a>>::debug_tuple","value":"fn <'b> (&'b mut self, name: &str) -> DebugTuple<'b, 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7948},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1723647,"byte_end":1723657,"line_start":1650,"line_end":1650,"column_start":12,"column_end":22},"name":"debug_list","qualname":"<Formatter<'a>>::debug_list","value":"fn <'b> (&'b mut self) -> DebugList<'b, 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7950},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1725471,"byte_end":1725480,"line_start":1709,"line_end":1709,"column_start":12,"column_end":21},"name":"debug_set","qualname":"<Formatter<'a>>::debug_set","value":"fn <'b> (&'b mut self) -> DebugSet<'b, 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7952},"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1726263,"byte_end":1726272,"line_start":1733,"line_end":1733,"column_start":12,"column_end":21},"name":"debug_map","qualname":"<Formatter<'a>>::debug_map","value":"fn <'b> (&'b mut self) -> DebugMap<'b, 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8068},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"time","qualname":"::time","value":"libcore/time.rs","parent":null,"children":[{"krate":0,"index":8070},{"krate":0,"index":8072},{"krate":0,"index":8090},{"krate":0,"index":8092},{"krate":0,"index":8094},{"krate":0,"index":8096},{"krate":0,"index":8098},{"krate":0,"index":42840},{"krate":0,"index":42882},{"krate":0,"index":42880},{"krate":0,"index":42874},{"krate":0,"index":42870},{"krate":0,"index":42858},{"krate":0,"index":42854},{"krate":0,"index":42850},{"krate":0,"index":42846},{"krate":0,"index":42842},{"krate":0,"index":8100},{"krate":0,"index":8128},{"krate":0,"index":8134},{"krate":0,"index":8138},{"krate":0,"index":8144},{"krate":0,"index":8148},{"krate":0,"index":8154},{"krate":0,"index":8158},{"krate":0,"index":8164},{"krate":0,"index":8168},{"krate":0,"index":8172}],"decl_id":null,"docs":" Temporal quantification.","sig":null,"attributes":[{"value":"stable(feature = \"duration_core\", since = \"1.25.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1767965,"byte_end":1768020,"line_start":10,"line_end":10,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":42840},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1769659,"byte_end":1769667,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"Duration","qualname":"::time::Duration","value":"Duration {  }","parent":null,"children":[{"krate":0,"index":28235},{"krate":0,"index":28237}],"decl_id":null,"docs":" A `Duration` type to represent a span of time, typically used for system\n timeouts.","sig":null,"attributes":[{"value":"stable(feature = \"duration\", since = \"1.3.0\")","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1769522,"byte_end":1769570,"line_start":61,"line_end":61,"column_start":1,"column_end":49}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1769648,"byte_end":1769739,"line_start":63,"line_end":66,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1769648,"byte_end":1769739,"line_start":63,"line_end":66,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":8102},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1770408,"byte_end":1770411,"line_start":89,"line_end":89,"column_start":12,"column_end":15},"name":"new","qualname":"<Duration>::new","value":"fn (secs: u64, nanos: u32) -> Duration","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8104},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1771070,"byte_end":1771079,"line_start":110,"line_end":110,"column_start":18,"column_end":27},"name":"from_secs","qualname":"<Duration>::from_secs","value":"fn (secs: u64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8106},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1771575,"byte_end":1771586,"line_start":128,"line_end":128,"column_start":18,"column_end":29},"name":"from_millis","qualname":"<Duration>::from_millis","value":"fn (millis: u64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8108},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1772241,"byte_end":1772252,"line_start":150,"line_end":150,"column_start":18,"column_end":29},"name":"from_micros","qualname":"<Duration>::from_micros","value":"fn (micros: u64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8110},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1772898,"byte_end":1772908,"line_start":172,"line_end":172,"column_start":18,"column_end":28},"name":"from_nanos","qualname":"<Duration>::from_nanos","value":"fn (nanos: u64) -> Duration","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8112},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1774060,"byte_end":1774067,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"as_secs","qualname":"<Duration>::as_secs","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8114},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1774773,"byte_end":1774786,"line_start":229,"line_end":229,"column_start":12,"column_end":25},"name":"subsec_millis","qualname":"<Duration>::subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8116},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1775541,"byte_end":1775554,"line_start":249,"line_end":249,"column_start":12,"column_end":25},"name":"subsec_micros","qualname":"<Duration>::subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8118},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1776236,"byte_end":1776248,"line_start":268,"line_end":268,"column_start":12,"column_end":24},"name":"subsec_nanos","qualname":"<Duration>::subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8120},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1776876,"byte_end":1776887,"line_start":287,"line_end":287,"column_start":12,"column_end":23},"name":"checked_add","qualname":"<Duration>::checked_add","value":"fn (self, rhs: Duration) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8122},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1778130,"byte_end":1778141,"line_start":325,"line_end":325,"column_start":12,"column_end":23},"name":"checked_sub","qualname":"<Duration>::checked_sub","value":"fn (self, rhs: Duration) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8124},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1779351,"byte_end":1779362,"line_start":361,"line_end":361,"column_start":12,"column_end":23},"name":"checked_mul","qualname":"<Duration>::checked_mul","value":"fn (self, rhs: u32) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8126},"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1780622,"byte_end":1780633,"line_start":397,"line_end":397,"column_start":12,"column_end":23},"name":"checked_div","qualname":"<Duration>::checked_div","value":"fn (self, rhs: u32) -> Option<Duration>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8176},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unicode","qualname":"::unicode","value":"libcore/unicode/mod.rs","parent":null,"children":[{"krate":0,"index":8178},{"krate":0,"index":8194},{"krate":0,"index":8212},{"krate":0,"index":8286},{"krate":0,"index":8288},{"krate":0,"index":8296}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"unicode_internals\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,109,111,100,46,114,115],"byte_start":1787956,"byte_end":1788012,"line_start":11,"line_end":11,"column_start":1,"column_end":57}},{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,109,111,100,46,114,115],"byte_start":1788013,"byte_end":1788036,"line_start":12,"line_end":12,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":8180},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,98,111,111,108,95,116,114,105,101,46,114,115],"byte_start":1790013,"byte_end":1790021,"line_start":30,"line_end":30,"column_start":12,"column_end":20},"name":"BoolTrie","qualname":"::unicode::bool_trie::BoolTrie","value":"BoolTrie { r1, r2, r3, r4, r5, r6 }","parent":null,"children":[{"krate":0,"index":4925},{"krate":0,"index":4927},{"krate":0,"index":4929},{"krate":0,"index":4931},{"krate":0,"index":4933},{"krate":0,"index":4935}],"decl_id":null,"docs":" BoolTrie is a trie for representing a set of Unicode codepoints. It is\n implemented with postfix compression (sharing of identical child nodes),\n which gives both compact size and fast lookup.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4925},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,98,111,111,108,95,116,114,105,101,46,114,115],"byte_start":1790096,"byte_end":1790098,"line_start":32,"line_end":32,"column_start":9,"column_end":11},"name":"r1","qualname":"::unicode::bool_trie::BoolTrie::r1","value":"[u64; _]","parent":{"krate":0,"index":8180},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4927},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,98,111,111,108,95,116,114,105,101,46,114,115],"byte_start":1790196,"byte_end":1790198,"line_start":35,"line_end":35,"column_start":9,"column_end":11},"name":"r2","qualname":"::unicode::bool_trie::BoolTrie::r2","value":"[u8; _]","parent":{"krate":0,"index":8180},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4929},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,98,111,111,108,95,116,114,105,101,46,114,115],"byte_start":1790239,"byte_end":1790241,"line_start":36,"line_end":36,"column_start":9,"column_end":11},"name":"r3","qualname":"::unicode::bool_trie::BoolTrie::r3","value":"&'static [u64]","parent":{"krate":0,"index":8180},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4931},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,98,111,111,108,95,116,114,105,101,46,114,115],"byte_start":1790346,"byte_end":1790348,"line_start":39,"line_end":39,"column_start":9,"column_end":11},"name":"r4","qualname":"::unicode::bool_trie::BoolTrie::r4","value":"[u8; _]","parent":{"krate":0,"index":8180},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4933},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,98,111,111,108,95,116,114,105,101,46,114,115],"byte_start":1790390,"byte_end":1790392,"line_start":40,"line_end":40,"column_start":9,"column_end":11},"name":"r5","qualname":"::unicode::bool_trie::BoolTrie::r5","value":"&'static [u8]","parent":{"krate":0,"index":8180},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4935},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,98,111,111,108,95,116,114,105,101,46,114,115],"byte_start":1790435,"byte_end":1790437,"line_start":41,"line_end":41,"column_start":9,"column_end":11},"name":"r6","qualname":"::unicode::bool_trie::BoolTrie::r6","value":"&'static [u64]","parent":{"krate":0,"index":8180},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8184},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,98,111,111,108,95,116,114,105,101,46,114,115],"byte_start":1790495,"byte_end":1790501,"line_start":44,"line_end":44,"column_start":12,"column_end":18},"name":"lookup","qualname":"<BoolTrie>::lookup","value":"fn (&self, c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8186},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,98,111,111,108,95,116,114,105,101,46,114,115],"byte_start":1790995,"byte_end":1791008,"line_start":59,"line_end":59,"column_start":12,"column_end":25},"name":"SmallBoolTrie","qualname":"::unicode::bool_trie::SmallBoolTrie","value":"SmallBoolTrie {  }","parent":null,"children":[{"krate":0,"index":4943},{"krate":0,"index":4945}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8190},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,98,111,111,108,95,116,114,105,101,46,114,115],"byte_start":1791142,"byte_end":1791148,"line_start":65,"line_end":65,"column_start":12,"column_end":18},"name":"lookup","qualname":"<SmallBoolTrie>::lookup","value":"fn (&self, c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":8222},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1804434,"byte_end":1804449,"line_start":21,"line_end":21,"column_start":11,"column_end":26},"name":"UNICODE_VERSION","qualname":"::unicode::tables::UNICODE_VERSION","value":"UnicodeVersion","parent":null,"children":[],"decl_id":null,"docs":" The version of [Unicode](http://www.unicode.org/) that the Unicode parts of\n `char` and `str` methods are based on.\n","sig":null,"attributes":[{"value":"unstable(feature = \"unicode_version\", issue = \"49726\")","span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1804366,"byte_end":1804423,"line_start":20,"line_end":20,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":8224},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1804554,"byte_end":1804570,"line_start":27,"line_end":27,"column_start":9,"column_end":25},"name":"general_category","qualname":"::unicode::tables::general_category","value":"libcore/unicode/tables.rs","parent":null,"children":[{"krate":0,"index":8226},{"krate":0,"index":8228},{"krate":0,"index":8230},{"krate":0,"index":8232}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":8226},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1804587,"byte_end":1804595,"line_start":28,"line_end":28,"column_start":15,"column_end":23},"name":"Cc_table","qualname":"::unicode::tables::general_category::Cc_table","value":"&super::SmallBoolTrie","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8228},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1804787,"byte_end":1804789,"line_start":37,"line_end":37,"column_start":12,"column_end":14},"name":"Cc","qualname":"::unicode::tables::general_category::Cc","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":8230},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1804857,"byte_end":1804864,"line_start":41,"line_end":41,"column_start":15,"column_end":22},"name":"N_table","qualname":"::unicode::tables::general_category::N_table","value":"&super::BoolTrie","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8232},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1812236,"byte_end":1812237,"line_start":132,"line_end":132,"column_start":12,"column_end":13},"name":"N","qualname":"::unicode::tables::general_category::N","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8234},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1812301,"byte_end":1812317,"line_start":138,"line_end":138,"column_start":9,"column_end":25},"name":"derived_property","qualname":"::unicode::tables::derived_property","value":"libcore/unicode/tables.rs","parent":null,"children":[{"krate":0,"index":8236},{"krate":0,"index":8238},{"krate":0,"index":8240},{"krate":0,"index":8242},{"krate":0,"index":8244},{"krate":0,"index":8246},{"krate":0,"index":8248},{"krate":0,"index":8250},{"krate":0,"index":8252},{"krate":0,"index":8254},{"krate":0,"index":8256},{"krate":0,"index":8258},{"krate":0,"index":8260},{"krate":0,"index":8262}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":8236},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1812334,"byte_end":1812350,"line_start":139,"line_end":139,"column_start":15,"column_end":31},"name":"Alphabetic_table","qualname":"::unicode::tables::derived_property::Alphabetic_table","value":"&super::BoolTrie","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8238},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1828137,"byte_end":1828147,"line_start":317,"line_end":317,"column_start":12,"column_end":22},"name":"Alphabetic","qualname":"::unicode::tables::derived_property::Alphabetic","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":8240},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1828223,"byte_end":1828243,"line_start":321,"line_end":321,"column_start":15,"column_end":35},"name":"Case_Ignorable_table","qualname":"::unicode::tables::derived_property::Case_Ignorable_table","value":"&super::BoolTrie","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8242},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1839115,"byte_end":1839129,"line_start":449,"line_end":449,"column_start":12,"column_end":26},"name":"Case_Ignorable","qualname":"::unicode::tables::derived_property::Case_Ignorable","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":8244},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1839209,"byte_end":1839220,"line_start":453,"line_end":453,"column_start":15,"column_end":26},"name":"Cased_table","qualname":"::unicode::tables::derived_property::Cased_table","value":"&super::BoolTrie","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8246},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1847015,"byte_end":1847020,"line_start":548,"line_end":548,"column_start":12,"column_end":17},"name":"Cased","qualname":"::unicode::tables::derived_property::Cased","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":8248},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1847091,"byte_end":1847106,"line_start":552,"line_end":552,"column_start":15,"column_end":30},"name":"Lowercase_table","qualname":"::unicode::tables::derived_property::Lowercase_table","value":"&super::BoolTrie","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8250},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1854686,"byte_end":1854695,"line_start":645,"line_end":645,"column_start":12,"column_end":21},"name":"Lowercase","qualname":"::unicode::tables::derived_property::Lowercase","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":8252},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1854770,"byte_end":1854785,"line_start":649,"line_end":649,"column_start":15,"column_end":30},"name":"Uppercase_table","qualname":"::unicode::tables::derived_property::Uppercase_table","value":"&super::BoolTrie","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8254},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1862484,"byte_end":1862493,"line_start":743,"line_end":743,"column_start":12,"column_end":21},"name":"Uppercase","qualname":"::unicode::tables::derived_property::Uppercase","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":8256},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1862568,"byte_end":1862586,"line_start":747,"line_end":747,"column_start":15,"column_end":33},"name":"XID_Continue_table","qualname":"::unicode::tables::derived_property::XID_Continue_table","value":"&super::BoolTrie","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8258},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1877646,"byte_end":1877658,"line_start":918,"line_end":918,"column_start":12,"column_end":24},"name":"XID_Continue","qualname":"::unicode::tables::derived_property::XID_Continue","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":8260},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1877736,"byte_end":1877751,"line_start":922,"line_end":922,"column_start":15,"column_end":30},"name":"XID_Start_table","qualname":"::unicode::tables::derived_property::XID_Start_table","value":"&super::BoolTrie","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8262},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1892965,"byte_end":1892974,"line_start":1095,"line_end":1095,"column_start":12,"column_end":21},"name":"XID_Start","qualname":"::unicode::tables::derived_property::XID_Start","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8264},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1893046,"byte_end":1893054,"line_start":1101,"line_end":1101,"column_start":9,"column_end":17},"name":"property","qualname":"::unicode::tables::property","value":"libcore/unicode/tables.rs","parent":null,"children":[{"krate":0,"index":8266},{"krate":0,"index":8268},{"krate":0,"index":8270},{"krate":0,"index":8272}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":8266},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1893071,"byte_end":1893096,"line_start":1102,"line_end":1102,"column_start":15,"column_end":40},"name":"Pattern_White_Space_table","qualname":"::unicode::tables::property::Pattern_White_Space_table","value":"&super::SmallBoolTrie","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8268},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1893754,"byte_end":1893773,"line_start":1115,"line_end":1115,"column_start":12,"column_end":31},"name":"Pattern_White_Space","qualname":"::unicode::tables::property::Pattern_White_Space","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":8270},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1893858,"byte_end":1893875,"line_start":1119,"line_end":1119,"column_start":15,"column_end":32},"name":"White_Space_table","qualname":"::unicode::tables::property::White_Space_table","value":"&super::SmallBoolTrie","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8272},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1894801,"byte_end":1894812,"line_start":1135,"line_end":1135,"column_start":12,"column_end":23},"name":"White_Space","qualname":"::unicode::tables::property::White_Space","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8274},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1894886,"byte_end":1894897,"line_start":1141,"line_end":1141,"column_start":9,"column_end":20},"name":"conversions","qualname":"::unicode::tables::conversions","value":"libcore/unicode/tables.rs","parent":null,"children":[{"krate":0,"index":8276},{"krate":0,"index":8278},{"krate":0,"index":8280},{"krate":0,"index":8282},{"krate":0,"index":8284}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8276},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1894911,"byte_end":1894919,"line_start":1142,"line_end":1142,"column_start":12,"column_end":20},"name":"to_lower","qualname":"::unicode::tables::conversions::to_lower","value":"fn (c: char) -> [char; 3]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8278},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115],"byte_start":1895130,"byte_end":1895138,"line_start":1149,"line_end":1149,"column_start":12,"column_end":20},"name":"to_upper","qualname":"::unicode::tables::conversions::to_upper","value":"fn (c: char) -> [char; 3]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":42886},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,118,101,114,115,105,111,110,46,114,115],"byte_start":2013093,"byte_end":2013107,"line_start":16,"line_end":16,"column_start":12,"column_end":26},"name":"UnicodeVersion","qualname":"::unicode::version::UnicodeVersion","value":"UnicodeVersion { major, minor, micro }","parent":null,"children":[{"krate":0,"index":28241},{"krate":0,"index":28243},{"krate":0,"index":28245},{"krate":0,"index":28247}],"decl_id":null,"docs":" Represents a Unicode Version.","sig":null,"attributes":[{"value":"unstable(feature = \"unicode_version\", issue = \"49726\")","span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,118,101,114,115,105,111,110,46,114,115],"byte_start":2013024,"byte_end":2013081,"line_start":15,"line_end":15,"column_start":1,"column_end":58}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,118,101,114,115,105,111,110,46,114,115],"byte_start":2013082,"byte_end":2013329,"line_start":16,"line_end":28,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,118,101,114,115,105,111,110,46,114,115],"byte_start":2013082,"byte_end":2013329,"line_start":16,"line_end":28,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":28241},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,118,101,114,115,105,111,110,46,114,115],"byte_start":2013141,"byte_end":2013146,"line_start":18,"line_end":18,"column_start":9,"column_end":14},"name":"major","qualname":"::unicode::version::UnicodeVersion::major","value":"u32","parent":{"krate":0,"index":42886},"children":[],"decl_id":null,"docs":" Major version.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":28243},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,118,101,114,115,105,111,110,46,114,115],"byte_start":2013185,"byte_end":2013190,"line_start":21,"line_end":21,"column_start":9,"column_end":14},"name":"minor","qualname":"::unicode::version::UnicodeVersion::minor","value":"u32","parent":{"krate":0,"index":42886},"children":[],"decl_id":null,"docs":" Minor version.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":28245},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,118,101,114,115,105,111,110,46,114,115],"byte_start":2013241,"byte_end":2013246,"line_start":24,"line_end":24,"column_start":9,"column_end":14},"name":"micro","qualname":"::unicode::version::UnicodeVersion::micro","value":"u32","parent":{"krate":0,"index":42886},"children":[],"decl_id":null,"docs":" Micro (or Update) version.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8288},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,109,111,100,46,114,115],"byte_start":1788186,"byte_end":1788202,"line_start":20,"line_end":20,"column_start":9,"column_end":25},"name":"derived_property","qualname":"::unicode::derived_property","value":"libcore/unicode/mod.rs","parent":null,"children":[{"krate":0,"index":8290}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8296},"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,109,111,100,46,114,115],"byte_start":1788312,"byte_end":1788320,"line_start":25,"line_end":25,"column_start":9,"column_end":17},"name":"property","qualname":"::unicode::property","value":"libcore/unicode/mod.rs","parent":null,"children":[{"krate":0,"index":8298}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8300},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"alloc","qualname":"::alloc","value":"libcore/alloc.rs","parent":null,"children":[{"krate":0,"index":8302},{"krate":0,"index":8304},{"krate":0,"index":8306},{"krate":0,"index":8308},{"krate":0,"index":8310},{"krate":0,"index":8316},{"krate":0,"index":8318},{"krate":0,"index":42924},{"krate":0,"index":42926},{"krate":0,"index":8324},{"krate":0,"index":42930},{"krate":0,"index":42946},{"krate":0,"index":42942},{"krate":0,"index":42936},{"krate":0,"index":42932},{"krate":0,"index":8326},{"krate":0,"index":42950},{"krate":0,"index":42966},{"krate":0,"index":42960},{"krate":0,"index":42956},{"krate":0,"index":42952},{"krate":0,"index":8354},{"krate":0,"index":42970},{"krate":0,"index":42984},{"krate":0,"index":42980},{"krate":0,"index":42976},{"krate":0,"index":42972},{"krate":0,"index":8358},{"krate":0,"index":42988},{"krate":0,"index":43002},{"krate":0,"index":42998},{"krate":0,"index":42994},{"krate":0,"index":42990},{"krate":0,"index":8362},{"krate":0,"index":8366},{"krate":0,"index":43006},{"krate":0,"index":43020},{"krate":0,"index":43016},{"krate":0,"index":43012},{"krate":0,"index":43008},{"krate":0,"index":8370},{"krate":0,"index":8374},{"krate":0,"index":8386}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5826,"byte_end":5848,"line_start":187,"line_end":187,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"allocator_api\",\n           reason =\n               \"the precise API and guarantees it provides may be tweaked slightly, especially to possibly take into account the types being stored to make room for a future tracing garbage collector\",\n           issue = \"32838\")","span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2013798,"byte_end":2014146,"line_start":11,"line_end":16,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":8320},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2014570,"byte_end":2014574,"line_start":34,"line_end":34,"column_start":12,"column_end":16},"name":"null","qualname":"<Opaque>::null","value":"fn () -> *const Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8322},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2014695,"byte_end":2014703,"line_start":39,"line_end":39,"column_start":12,"column_end":20},"name":"null_mut","qualname":"<Opaque>::null_mut","value":"fn () -> *mut Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":42924},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2014874,"byte_end":2014880,"line_start":47,"line_end":47,"column_start":12,"column_end":18},"name":"Excess","qualname":"::alloc::Excess","value":"","parent":null,"children":[],"decl_id":null,"docs":" Represents the combination of a starting address and\n a total capacity of the returned block.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":42930},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2015637,"byte_end":2015643,"line_start":67,"line_end":67,"column_start":12,"column_end":18},"name":"Layout","qualname":"::alloc::Layout","value":"Layout {  }","parent":null,"children":[{"krate":0,"index":28255},{"krate":0,"index":28257}],"decl_id":null,"docs":" Layout of a block of memory.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2015626,"byte_end":2016151,"line_start":67,"line_end":79,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":8328},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2016712,"byte_end":2016727,"line_start":97,"line_end":97,"column_start":12,"column_end":27},"name":"from_size_align","qualname":"<Layout>::from_size_align","value":"fn (size: usize, align: usize) -> Result<Self, LayoutErr>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8330},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2018035,"byte_end":2018060,"line_start":133,"line_end":133,"column_start":19,"column_end":44},"name":"from_size_align_unchecked","qualname":"<Layout>::from_size_align_unchecked","value":"fn (size: usize, align: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8332},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2018243,"byte_end":2018247,"line_start":139,"line_end":139,"column_start":12,"column_end":16},"name":"size","qualname":"<Layout>::size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8334},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2018374,"byte_end":2018379,"line_start":143,"line_end":143,"column_start":12,"column_end":17},"name":"align","qualname":"<Layout>::align","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8336},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2018495,"byte_end":2018498,"line_start":146,"line_end":146,"column_start":12,"column_end":15},"name":"new","qualname":"<Layout>::new","value":"fn <T> () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8338},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2019206,"byte_end":2019215,"line_start":161,"line_end":161,"column_start":12,"column_end":21},"name":"for_value","qualname":"<Layout>::for_value","value":"fn <T> (t: &T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8340},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2020283,"byte_end":2020291,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"name":"align_to","qualname":"<Layout>::align_to","value":"fn (&self, align: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8342},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2021263,"byte_end":2021281,"line_start":208,"line_end":208,"column_start":12,"column_end":30},"name":"padding_needed_for","qualname":"<Layout>::padding_needed_for","value":"fn (&self, align: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8344},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2022845,"byte_end":2022851,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"repeat","qualname":"<Layout>::repeat","value":"fn (&self, n: usize) -> Result<(Self, usize), LayoutErr>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8346},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2023851,"byte_end":2023857,"line_start":262,"line_end":262,"column_start":12,"column_end":18},"name":"extend","qualname":"<Layout>::extend","value":"fn (&self, next: Self) -> Result<(Self, usize), LayoutErr>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8348},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2025012,"byte_end":2025025,"line_start":289,"line_end":289,"column_start":12,"column_end":25},"name":"repeat_packed","qualname":"<Layout>::repeat_packed","value":"fn (&self, n: usize) -> Result<Self, LayoutErr>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8350},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2025997,"byte_end":2026010,"line_start":309,"line_end":309,"column_start":12,"column_end":25},"name":"extend_packed","qualname":"<Layout>::extend_packed","value":"fn (&self, next: Self) -> Result<(Self, usize), LayoutErr>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8352},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2026416,"byte_end":2026421,"line_start":319,"line_end":319,"column_start":12,"column_end":17},"name":"array","qualname":"<Layout>::array","value":"fn <T> (n: usize) -> Result<Self, LayoutErr>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":42950},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2026798,"byte_end":2026807,"line_start":332,"line_end":332,"column_start":12,"column_end":21},"name":"LayoutErr","qualname":"::alloc::LayoutErr","value":"LayoutErr {  }","parent":null,"children":[{"krate":0,"index":28259}],"decl_id":null,"docs":" The parameters given to `Layout::from_size_align` do not satisfy\n its documented constraints.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2026787,"byte_end":2026827,"line_start":332,"line_end":334,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":42970},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2027320,"byte_end":2027328,"line_start":348,"line_end":348,"column_start":12,"column_end":20},"name":"AllocErr","qualname":"::alloc::AllocErr","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `AllocErr` error specifies whether an allocation failure is\n specifically due to resource exhaustion or if it is due to\n something wrong when combining the given input arguments with this\n allocator.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2027309,"byte_end":2027329,"line_start":348,"line_end":348,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":42988},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2027746,"byte_end":2027766,"line_start":361,"line_end":361,"column_start":12,"column_end":32},"name":"CannotReallocInPlace","qualname":"::alloc::CannotReallocInPlace","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `CannotReallocInPlace` error is used when `grow_in_place` or\n `shrink_in_place` were unable to reuse the given memory block for\n a requested layout.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2027735,"byte_end":2027767,"line_start":361,"line_end":361,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":8364},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2027808,"byte_end":2027819,"line_start":364,"line_end":364,"column_start":12,"column_end":23},"name":"description","qualname":"<CannotReallocInPlace>::description","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":28265},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2028430,"byte_end":2028446,"line_start":382,"line_end":382,"column_start":5,"column_end":21},"name":"CapacityOverflow","qualname":"::alloc::CollectionAllocErr::CapacityOverflow","value":"CollectionAllocErr::CapacityOverflow","parent":{"krate":0,"index":43006},"children":[],"decl_id":null,"docs":" Error due to the computed capacity exceeding the collection's maximum\n (usually `isize::MAX` bytes).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":28267},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2028521,"byte_end":2028529,"line_start":384,"line_end":384,"column_start":5,"column_end":13},"name":"AllocErr","qualname":"::alloc::CollectionAllocErr::AllocErr","value":"CollectionAllocErr::AllocErr","parent":{"krate":0,"index":43006},"children":[],"decl_id":null,"docs":" Error due to the allocator (see the `AllocErr` type's docs).\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":43006},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2028289,"byte_end":2028307,"line_start":379,"line_end":379,"column_start":10,"column_end":28},"name":"CollectionAllocErr","qualname":"::alloc::CollectionAllocErr","value":"CollectionAllocErr::{CapacityOverflow, AllocErr}","parent":null,"children":[{"krate":0,"index":28265},{"krate":0,"index":28267}],"decl_id":null,"docs":" Augments `AllocErr` with a CapacityOverflow variant.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")","span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2028208,"byte_end":2028279,"line_start":378,"line_end":378,"column_start":1,"column_end":72}},{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2028280,"byte_end":2028532,"line_start":379,"line_end":385,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":8374},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2028908,"byte_end":2028919,"line_start":397,"line_end":397,"column_start":18,"column_end":29},"name":"GlobalAlloc","qualname":"::alloc::GlobalAlloc","value":"GlobalAlloc","parent":null,"children":[{"krate":0,"index":8376},{"krate":0,"index":8378},{"krate":0,"index":8380},{"krate":0,"index":8382},{"krate":0,"index":8384}],"decl_id":null,"docs":" A memory allocator that can be registered to be the one backing `std::alloc::Global`\n though the `#[global_allocator]` attributes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8376},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2029190,"byte_end":2029195,"line_start":406,"line_end":406,"column_start":15,"column_end":20},"name":"alloc","qualname":"::alloc::GlobalAlloc::alloc","value":"fn (&self, layout: Layout) -> *mut Opaque","parent":{"krate":0,"index":8374},"children":[],"decl_id":null,"docs":" A memory allocator that can be registered to be the one backing `std::alloc::Global`\n though the `#[global_allocator]` attributes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8378},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2029503,"byte_end":2029510,"line_start":414,"line_end":414,"column_start":15,"column_end":22},"name":"dealloc","qualname":"::alloc::GlobalAlloc::dealloc","value":"fn (&self, ptr: *mut Opaque, layout: Layout) -> ()","parent":{"krate":0,"index":8374},"children":[],"decl_id":null,"docs":" A memory allocator that can be registered to be the one backing `std::alloc::Global`\n though the `#[global_allocator]` attributes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8380},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2029568,"byte_end":2029580,"line_start":416,"line_end":416,"column_start":15,"column_end":27},"name":"alloc_zeroed","qualname":"::alloc::GlobalAlloc::alloc_zeroed","value":"fn (&self, layout: Layout) -> *mut Opaque","parent":{"krate":0,"index":8374},"children":[],"decl_id":null,"docs":" A memory allocator that can be registered to be the one backing `std::alloc::Global`\n though the `#[global_allocator]` attributes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8382},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2030543,"byte_end":2030550,"line_start":441,"line_end":441,"column_start":15,"column_end":22},"name":"realloc","qualname":"::alloc::GlobalAlloc::realloc","value":"fn (&self, ptr: *mut Opaque, layout: Layout, new_size: usize) -> *mut Opaque","parent":{"krate":0,"index":8374},"children":[],"decl_id":null,"docs":" A memory allocator that can be registered to be the one backing `std::alloc::Global`\n though the `#[global_allocator]` attributes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8384},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2031387,"byte_end":2031390,"line_start":462,"line_end":462,"column_start":8,"column_end":11},"name":"oom","qualname":"::alloc::GlobalAlloc::oom","value":"fn (&self) -> !","parent":{"krate":0,"index":8374},"children":[],"decl_id":null,"docs":" A memory allocator that can be registered to be the one backing `std::alloc::Global`\n though the `#[global_allocator]` attributes.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":8386},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2035626,"byte_end":2035631,"line_start":553,"line_end":553,"column_start":18,"column_end":23},"name":"Alloc","qualname":"::alloc::Alloc","value":"Alloc","parent":null,"children":[{"krate":0,"index":8388},{"krate":0,"index":8390},{"krate":0,"index":8392},{"krate":0,"index":8394},{"krate":0,"index":8396},{"krate":0,"index":8398},{"krate":0,"index":8400},{"krate":0,"index":8402},{"krate":0,"index":8404},{"krate":0,"index":8406},{"krate":0,"index":8408},{"krate":0,"index":8410},{"krate":0,"index":8412},{"krate":0,"index":8414},{"krate":0,"index":8416}],"decl_id":null,"docs":" An implementation of `Alloc` can allocate, reallocate, and\n deallocate arbitrary blocks of data described via `Layout`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8388},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2037625,"byte_end":2037630,"line_start":598,"line_end":598,"column_start":15,"column_end":20},"name":"alloc","qualname":"::alloc::Alloc::alloc","value":"fn (&mut self, layout: Layout) -> Result<NonNull<Opaque>, AllocErr>","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":" An implementation of `Alloc` can allocate, reallocate, and\n deallocate arbitrary blocks of data described via `Layout`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8390},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2038274,"byte_end":2038281,"line_start":615,"line_end":615,"column_start":15,"column_end":22},"name":"dealloc","qualname":"::alloc::Alloc::dealloc","value":"fn (&mut self, ptr: NonNull<Opaque>, layout: Layout) -> ()","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":" An implementation of `Alloc` can allocate, reallocate, and\n deallocate arbitrary blocks of data described via `Layout`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8392},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2039420,"byte_end":2039423,"line_start":639,"line_end":639,"column_start":8,"column_end":11},"name":"oom","qualname":"::alloc::Alloc::oom","value":"fn (&mut self) -> !","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":" An implementation of `Alloc` can allocate, reallocate, and\n deallocate arbitrary blocks of data described via `Layout`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8394},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2040849,"byte_end":2040860,"line_start":673,"line_end":673,"column_start":8,"column_end":19},"name":"usable_size","qualname":"::alloc::Alloc::usable_size","value":"fn (&self, layout: &Layout) -> (usize, usize)","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":" An implementation of `Alloc` can allocate, reallocate, and\n deallocate arbitrary blocks of data described via `Layout`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8396},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2043397,"byte_end":2043404,"line_start":732,"line_end":732,"column_start":15,"column_end":22},"name":"realloc","qualname":"::alloc::Alloc::realloc","value":"fn (&mut self, ptr: NonNull<Opaque>, layout: Layout, new_size: usize) -> Result<NonNull<Opaque>, AllocErr>","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":" An implementation of `Alloc` can allocate, reallocate, and\n deallocate arbitrary blocks of data described via `Layout`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8398},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2045092,"byte_end":2045104,"line_start":776,"line_end":776,"column_start":15,"column_end":27},"name":"alloc_zeroed","qualname":"::alloc::Alloc::alloc_zeroed","value":"fn (&mut self, layout: Layout) -> Result<NonNull<Opaque>, AllocErr>","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":" An implementation of `Alloc` can allocate, reallocate, and\n deallocate arbitrary blocks of data described via `Layout`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8400},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2046085,"byte_end":2046097,"line_start":802,"line_end":802,"column_start":15,"column_end":27},"name":"alloc_excess","qualname":"::alloc::Alloc::alloc_excess","value":"fn (&mut self, layout: Layout) -> Result<Excess, AllocErr>","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":" An implementation of `Alloc` can allocate, reallocate, and\n deallocate arbitrary blocks of data described via `Layout`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8402},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2047012,"byte_end":2047026,"line_start":824,"line_end":824,"column_start":15,"column_end":29},"name":"realloc_excess","qualname":"::alloc::Alloc::realloc_excess","value":"fn (&mut self, ptr: NonNull<Opaque>, layout: Layout, new_size: usize) -> Result<Excess, AllocErr>","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":" An implementation of `Alloc` can allocate, reallocate, and\n deallocate arbitrary blocks of data described via `Layout`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8404},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2049064,"byte_end":2049077,"line_start":869,"line_end":869,"column_start":15,"column_end":28},"name":"grow_in_place","qualname":"::alloc::Alloc::grow_in_place","value":"fn (&mut self, ptr: NonNull<Opaque>, layout: Layout, new_size: usize) -> Result<(), CannotReallocInPlace>","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":" An implementation of `Alloc` can allocate, reallocate, and\n deallocate arbitrary blocks of data described via `Layout`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8406},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2051596,"byte_end":2051611,"line_start":924,"line_end":924,"column_start":15,"column_end":30},"name":"shrink_in_place","qualname":"::alloc::Alloc::shrink_in_place","value":"fn (&mut self, ptr: NonNull<Opaque>, layout: Layout, new_size: usize) -> Result<(), CannotReallocInPlace>","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":" An implementation of `Alloc` can allocate, reallocate, and\n deallocate arbitrary blocks of data described via `Layout`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8408},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2053666,"byte_end":2053675,"line_start":971,"line_end":971,"column_start":8,"column_end":17},"name":"alloc_one","qualname":"::alloc::Alloc::alloc_one","value":"fn <T> (&mut self) -> Result<NonNull<T>, AllocErr>","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":" An implementation of `Alloc` can allocate, reallocate, and\n deallocate arbitrary blocks of data described via `Layout`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8410},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2054623,"byte_end":2054634,"line_start":999,"line_end":999,"column_start":15,"column_end":26},"name":"dealloc_one","qualname":"::alloc::Alloc::dealloc_one","value":"fn <T> (&mut self, ptr: NonNull<T>) -> ()","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":" An implementation of `Alloc` can allocate, reallocate, and\n deallocate arbitrary blocks of data described via `Layout`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8412},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2056177,"byte_end":2056188,"line_start":1038,"line_end":1038,"column_start":8,"column_end":19},"name":"alloc_array","qualname":"::alloc::Alloc::alloc_array","value":"fn <T> (&mut self, n: usize) -> Result<NonNull<T>, AllocErr>","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":" An implementation of `Alloc` can allocate, reallocate, and\n deallocate arbitrary blocks of data described via `Layout`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8414},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2057812,"byte_end":2057825,"line_start":1083,"line_end":1083,"column_start":15,"column_end":28},"name":"realloc_array","qualname":"::alloc::Alloc::realloc_array","value":"fn <T> (&mut self, ptr: NonNull<T>, n_old: usize, n_new: usize) -> Result<NonNull<T>, AllocErr>","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":" An implementation of `Alloc` can allocate, reallocate, and\n deallocate arbitrary blocks of data described via `Layout`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8416},"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2059163,"byte_end":2059176,"line_start":1120,"line_end":1120,"column_start":15,"column_end":28},"name":"dealloc_array","qualname":"::alloc::Alloc::dealloc_array","value":"fn <T> (&mut self, ptr: NonNull<T>, n: usize) -> Result<(), AllocErr>","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":" An implementation of `Alloc` can allocate, reallocate, and\n deallocate arbitrary blocks of data described via `Layout`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8418},"span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":6041,"byte_end":6045,"line_start":193,"line_end":193,"column_start":9,"column_end":13},"name":"heap","qualname":"::heap","value":"libcore/lib.rs","parent":null,"children":[{"krate":0,"index":8420}],"decl_id":null,"docs":" Use the `alloc` module instead.\n","sig":null,"attributes":[{"value":"unstable(feature = \"allocator_api\", issue = \"32838\")","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5865,"byte_end":5920,"line_start":190,"line_end":190,"column_start":1,"column_end":56}},{"value":"rustc_deprecated(since = \"1.27.0\", reason = \"module renamed to `alloc`\")","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5921,"byte_end":5996,"line_start":191,"line_end":191,"column_start":1,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":8424},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,95,112,114,105,118,97,116,101,46,114,115],"byte_start":2060363,"byte_end":2060382,"line_start":23,"line_end":23,"column_start":18,"column_end":37},"name":"TrustedRandomAccess","qualname":"::iter_private::TrustedRandomAccess","value":"TrustedRandomAccess: ExactSizeIterator","parent":null,"children":[{"krate":0,"index":8426},{"krate":0,"index":8428}],"decl_id":null,"docs":" An iterator whose items are random accessible efficiently","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8426},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,95,112,114,105,118,97,116,101,46,114,115],"byte_start":2060419,"byte_end":2060432,"line_start":24,"line_end":24,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::iter_private::TrustedRandomAccess::get_unchecked","value":"fn (&mut self, i: usize) -> Self::Item","parent":{"krate":0,"index":8424},"children":[],"decl_id":null,"docs":" An iterator whose items are random accessible efficiently","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8428},"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,95,112,114,105,118,97,116,101,46,114,115],"byte_start":2060608,"byte_end":2060628,"line_start":27,"line_end":27,"column_start":8,"column_end":28},"name":"may_have_side_effect","qualname":"::iter_private::TrustedRandomAccess::may_have_side_effect","value":"fn () -> bool","parent":{"krate":0,"index":8424},"children":[],"decl_id":null,"docs":" An iterator whose items are random accessible efficiently","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8558},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,115,117,109,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sum","qualname":"::coresimd::ppsv::codegen::sum","value":"libcore/../stdsimd/coresimd/ppsv/codegen/sum.rs","parent":null,"children":[{"krate":0,"index":8560},{"krate":0,"index":8562},{"krate":0,"index":8564},{"krate":0,"index":8570},{"krate":0,"index":43360},{"krate":0,"index":43366},{"krate":0,"index":43372},{"krate":0,"index":43378},{"krate":0,"index":43384},{"krate":0,"index":43390},{"krate":0,"index":43396},{"krate":0,"index":43402},{"krate":0,"index":43408},{"krate":0,"index":43414},{"krate":0,"index":43420},{"krate":0,"index":43426},{"krate":0,"index":43432},{"krate":0,"index":43438},{"krate":0,"index":43444},{"krate":0,"index":43450},{"krate":0,"index":43456},{"krate":0,"index":43462},{"krate":0,"index":43468},{"krate":0,"index":43474},{"krate":0,"index":43480},{"krate":0,"index":43486},{"krate":0,"index":43492},{"krate":0,"index":43498},{"krate":0,"index":43504},{"krate":0,"index":43510},{"krate":0,"index":43516},{"krate":0,"index":43522},{"krate":0,"index":43528},{"krate":0,"index":43534},{"krate":0,"index":43540},{"krate":0,"index":43546},{"krate":0,"index":43552},{"krate":0,"index":43558},{"krate":0,"index":43564},{"krate":0,"index":43570},{"krate":0,"index":8572},{"krate":0,"index":43576},{"krate":0,"index":43582},{"krate":0,"index":43588},{"krate":0,"index":43594},{"krate":0,"index":43600},{"krate":0,"index":43606},{"krate":0,"index":43612}],"decl_id":null,"docs":" Code generation for the sum reduction.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":8564},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,115,117,109,46,114,115],"byte_start":2140025,"byte_end":2140034,"line_start":96,"line_end":96,"column_start":11,"column_end":20},"name":"ReduceAdd","qualname":"::coresimd::ppsv::codegen::sum::ReduceAdd","value":"ReduceAdd","parent":null,"children":[{"krate":0,"index":8566},{"krate":0,"index":8568}],"decl_id":null,"docs":" Reduction: horizontal sum of the vector elements.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":8566},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,115,117,109,46,114,115],"byte_start":2140084,"byte_end":2140087,"line_start":98,"line_end":98,"column_start":10,"column_end":13},"name":"Acc","qualname":"::coresimd::ppsv::codegen::sum::ReduceAdd::Acc","value":"type Acc;","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":" Result type of the reduction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8568},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,115,117,109,46,114,115],"byte_start":2140156,"byte_end":2140166,"line_start":100,"line_end":100,"column_start":8,"column_end":18},"name":"reduce_add","qualname":"::coresimd::ppsv::codegen::sum::ReduceAdd::reduce_add","value":"fn (self) -> Self::Acc","parent":{"krate":0,"index":8564},"children":[],"decl_id":null,"docs":" Reduction: horizontal sum of the vector elements.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8574},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,112,114,111,100,117,99,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"product","qualname":"::coresimd::ppsv::codegen::product","value":"libcore/../stdsimd/coresimd/ppsv/codegen/product.rs","parent":null,"children":[{"krate":0,"index":8576},{"krate":0,"index":8578},{"krate":0,"index":8580},{"krate":0,"index":8586},{"krate":0,"index":43618},{"krate":0,"index":43624},{"krate":0,"index":43630},{"krate":0,"index":43636},{"krate":0,"index":43642},{"krate":0,"index":43648},{"krate":0,"index":43654},{"krate":0,"index":43660},{"krate":0,"index":43666},{"krate":0,"index":43672},{"krate":0,"index":43678},{"krate":0,"index":43684},{"krate":0,"index":43690},{"krate":0,"index":43696},{"krate":0,"index":43702},{"krate":0,"index":43708},{"krate":0,"index":43714},{"krate":0,"index":43720},{"krate":0,"index":43726},{"krate":0,"index":43732},{"krate":0,"index":43738},{"krate":0,"index":43744},{"krate":0,"index":43750},{"krate":0,"index":43756},{"krate":0,"index":43762},{"krate":0,"index":43768},{"krate":0,"index":43774},{"krate":0,"index":43780},{"krate":0,"index":43786},{"krate":0,"index":43792},{"krate":0,"index":43798},{"krate":0,"index":43804},{"krate":0,"index":43810},{"krate":0,"index":43816},{"krate":0,"index":43822},{"krate":0,"index":43828},{"krate":0,"index":8588},{"krate":0,"index":43834},{"krate":0,"index":43840},{"krate":0,"index":43846},{"krate":0,"index":43852},{"krate":0,"index":43858},{"krate":0,"index":43864},{"krate":0,"index":43870}],"decl_id":null,"docs":" Code generation for the product reduction.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":8580},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,112,114,111,100,117,99,116,46,114,115],"byte_start":2148607,"byte_end":2148616,"line_start":96,"line_end":96,"column_start":11,"column_end":20},"name":"ReduceMul","qualname":"::coresimd::ppsv::codegen::product::ReduceMul","value":"ReduceMul","parent":null,"children":[{"krate":0,"index":8582},{"krate":0,"index":8584}],"decl_id":null,"docs":" Reduction: horizontal product of the vector elements.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":8582},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,112,114,111,100,117,99,116,46,114,115],"byte_start":2148666,"byte_end":2148669,"line_start":98,"line_end":98,"column_start":10,"column_end":13},"name":"Acc","qualname":"::coresimd::ppsv::codegen::product::ReduceMul::Acc","value":"type Acc;","parent":{"krate":0,"index":8580},"children":[],"decl_id":null,"docs":" Result type of the reduction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8584},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,112,114,111,100,117,99,116,46,114,115],"byte_start":2148742,"byte_end":2148752,"line_start":100,"line_end":100,"column_start":8,"column_end":18},"name":"reduce_mul","qualname":"::coresimd::ppsv::codegen::product::ReduceMul::reduce_mul","value":"fn (self) -> Self::Acc","parent":{"krate":0,"index":8580},"children":[],"decl_id":null,"docs":" Reduction: horizontal product of the vector elements.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8590},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,97,110,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"and","qualname":"::coresimd::ppsv::codegen::and","value":"libcore/../stdsimd/coresimd/ppsv/codegen/and.rs","parent":null,"children":[{"krate":0,"index":8592},{"krate":0,"index":8594},{"krate":0,"index":8596},{"krate":0,"index":8602},{"krate":0,"index":43876},{"krate":0,"index":43882},{"krate":0,"index":43888},{"krate":0,"index":43894},{"krate":0,"index":43900},{"krate":0,"index":43906},{"krate":0,"index":43912},{"krate":0,"index":43918},{"krate":0,"index":43924},{"krate":0,"index":43930},{"krate":0,"index":43936},{"krate":0,"index":43942},{"krate":0,"index":43948},{"krate":0,"index":43954},{"krate":0,"index":43960},{"krate":0,"index":43966},{"krate":0,"index":43972},{"krate":0,"index":43978},{"krate":0,"index":43984},{"krate":0,"index":43990},{"krate":0,"index":43996},{"krate":0,"index":44002},{"krate":0,"index":44008},{"krate":0,"index":44014},{"krate":0,"index":44020},{"krate":0,"index":44026},{"krate":0,"index":44032},{"krate":0,"index":44038},{"krate":0,"index":44044},{"krate":0,"index":44050},{"krate":0,"index":44056},{"krate":0,"index":44062},{"krate":0,"index":44068},{"krate":0,"index":44074},{"krate":0,"index":44080},{"krate":0,"index":44086},{"krate":0,"index":44092},{"krate":0,"index":44098},{"krate":0,"index":44104},{"krate":0,"index":44110},{"krate":0,"index":44116},{"krate":0,"index":44122}],"decl_id":null,"docs":" Code generation for the and reduction.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":8596},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,97,110,100,46,114,115],"byte_start":2156371,"byte_end":2156380,"line_start":83,"line_end":83,"column_start":11,"column_end":20},"name":"ReduceAnd","qualname":"::coresimd::ppsv::codegen::and::ReduceAnd","value":"ReduceAnd","parent":null,"children":[{"krate":0,"index":8598},{"krate":0,"index":8600}],"decl_id":null,"docs":" Reduction: horizontal bitwise and of the vector elements.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":8598},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,97,110,100,46,114,115],"byte_start":2156430,"byte_end":2156433,"line_start":85,"line_end":85,"column_start":10,"column_end":13},"name":"Acc","qualname":"::coresimd::ppsv::codegen::and::ReduceAnd::Acc","value":"type Acc;","parent":{"krate":0,"index":8596},"children":[],"decl_id":null,"docs":" Result type of the reduction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8600},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,97,110,100,46,114,115],"byte_start":2156509,"byte_end":2156519,"line_start":87,"line_end":87,"column_start":8,"column_end":18},"name":"reduce_and","qualname":"::coresimd::ppsv::codegen::and::ReduceAnd::reduce_and","value":"fn (self) -> Self::Acc","parent":{"krate":0,"index":8596},"children":[],"decl_id":null,"docs":" Reduction: horizontal bitwise and of the vector elements.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8604},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,111,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"or","qualname":"::coresimd::ppsv::codegen::or","value":"libcore/../stdsimd/coresimd/ppsv/codegen/or.rs","parent":null,"children":[{"krate":0,"index":8606},{"krate":0,"index":8608},{"krate":0,"index":8610},{"krate":0,"index":8616},{"krate":0,"index":44128},{"krate":0,"index":44134},{"krate":0,"index":44140},{"krate":0,"index":44146},{"krate":0,"index":44152},{"krate":0,"index":44158},{"krate":0,"index":44164},{"krate":0,"index":44170},{"krate":0,"index":44176},{"krate":0,"index":44182},{"krate":0,"index":44188},{"krate":0,"index":44194},{"krate":0,"index":44200},{"krate":0,"index":44206},{"krate":0,"index":44212},{"krate":0,"index":44218},{"krate":0,"index":44224},{"krate":0,"index":44230},{"krate":0,"index":44236},{"krate":0,"index":44242},{"krate":0,"index":44248},{"krate":0,"index":44254},{"krate":0,"index":44260},{"krate":0,"index":44266},{"krate":0,"index":44272},{"krate":0,"index":44278},{"krate":0,"index":44284},{"krate":0,"index":44290},{"krate":0,"index":44296},{"krate":0,"index":44302},{"krate":0,"index":44308},{"krate":0,"index":44314},{"krate":0,"index":44320},{"krate":0,"index":44326},{"krate":0,"index":44332},{"krate":0,"index":44338},{"krate":0,"index":44344},{"krate":0,"index":44350},{"krate":0,"index":44356},{"krate":0,"index":44362},{"krate":0,"index":44368},{"krate":0,"index":44374}],"decl_id":null,"docs":" Code generation for the or reduction.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":8610},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,111,114,46,114,115],"byte_start":2163368,"byte_end":2163376,"line_start":83,"line_end":83,"column_start":11,"column_end":19},"name":"ReduceOr","qualname":"::coresimd::ppsv::codegen::or::ReduceOr","value":"ReduceOr","parent":null,"children":[{"krate":0,"index":8612},{"krate":0,"index":8614}],"decl_id":null,"docs":" Reduction: horizontal bitwise or of the vector elements.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":8612},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,111,114,46,114,115],"byte_start":2163421,"byte_end":2163424,"line_start":85,"line_end":85,"column_start":10,"column_end":13},"name":"Acc","qualname":"::coresimd::ppsv::codegen::or::ReduceOr::Acc","value":"type Acc;","parent":{"krate":0,"index":8610},"children":[],"decl_id":null,"docs":" Result of the reduction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8614},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,111,114,46,114,115],"byte_start":2163500,"byte_end":2163509,"line_start":87,"line_end":87,"column_start":8,"column_end":17},"name":"reduce_or","qualname":"::coresimd::ppsv::codegen::or::ReduceOr::reduce_or","value":"fn (self) -> Self::Acc","parent":{"krate":0,"index":8610},"children":[],"decl_id":null,"docs":" Reduction: horizontal bitwise or of the vector elements.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8618},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,120,111,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"xor","qualname":"::coresimd::ppsv::codegen::xor","value":"libcore/../stdsimd/coresimd/ppsv/codegen/xor.rs","parent":null,"children":[{"krate":0,"index":8620},{"krate":0,"index":8622},{"krate":0,"index":8624},{"krate":0,"index":8630},{"krate":0,"index":44380},{"krate":0,"index":44386},{"krate":0,"index":44392},{"krate":0,"index":44398},{"krate":0,"index":44404},{"krate":0,"index":44410},{"krate":0,"index":44416},{"krate":0,"index":44422},{"krate":0,"index":44428},{"krate":0,"index":44434},{"krate":0,"index":44440},{"krate":0,"index":44446},{"krate":0,"index":44452},{"krate":0,"index":44458},{"krate":0,"index":44464},{"krate":0,"index":44470},{"krate":0,"index":44476},{"krate":0,"index":44482},{"krate":0,"index":44488},{"krate":0,"index":44494},{"krate":0,"index":44500},{"krate":0,"index":44506},{"krate":0,"index":44512},{"krate":0,"index":44518},{"krate":0,"index":44524},{"krate":0,"index":44530},{"krate":0,"index":44536},{"krate":0,"index":44542},{"krate":0,"index":44548},{"krate":0,"index":44554},{"krate":0,"index":44560},{"krate":0,"index":44566},{"krate":0,"index":44572},{"krate":0,"index":44578},{"krate":0,"index":44584},{"krate":0,"index":44590},{"krate":0,"index":44596},{"krate":0,"index":44602},{"krate":0,"index":44608},{"krate":0,"index":44614},{"krate":0,"index":44620},{"krate":0,"index":44626}],"decl_id":null,"docs":" Code generation for the xor reduction.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":8624},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,120,111,114,46,114,115],"byte_start":2170341,"byte_end":2170350,"line_start":83,"line_end":83,"column_start":11,"column_end":20},"name":"ReduceXor","qualname":"::coresimd::ppsv::codegen::xor::ReduceXor","value":"ReduceXor","parent":null,"children":[{"krate":0,"index":8626},{"krate":0,"index":8628}],"decl_id":null,"docs":" Reduction: horizontal bitwise xor of the vector elements.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":8626},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,120,111,114,46,114,115],"byte_start":2170400,"byte_end":2170403,"line_start":85,"line_end":85,"column_start":10,"column_end":13},"name":"Acc","qualname":"::coresimd::ppsv::codegen::xor::ReduceXor::Acc","value":"type Acc;","parent":{"krate":0,"index":8624},"children":[],"decl_id":null,"docs":" Result type of the reduction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8628},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,120,111,114,46,114,115],"byte_start":2170480,"byte_end":2170490,"line_start":87,"line_end":87,"column_start":8,"column_end":18},"name":"reduce_xor","qualname":"::coresimd::ppsv::codegen::xor::ReduceXor::reduce_xor","value":"fn (self) -> Self::Acc","parent":{"krate":0,"index":8624},"children":[],"decl_id":null,"docs":" Reduction: horizontal bitwise xor of the vector elements.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8632},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,109,105,110,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"min","qualname":"::coresimd::ppsv::codegen::min","value":"libcore/../stdsimd/coresimd/ppsv/codegen/min.rs","parent":null,"children":[{"krate":0,"index":8634},{"krate":0,"index":8636},{"krate":0,"index":8638},{"krate":0,"index":8644},{"krate":0,"index":44632},{"krate":0,"index":44638},{"krate":0,"index":44644},{"krate":0,"index":44650},{"krate":0,"index":44656},{"krate":0,"index":44662},{"krate":0,"index":44668},{"krate":0,"index":44674},{"krate":0,"index":44680},{"krate":0,"index":44686},{"krate":0,"index":44692},{"krate":0,"index":44698},{"krate":0,"index":44704},{"krate":0,"index":44710},{"krate":0,"index":44716},{"krate":0,"index":44722},{"krate":0,"index":44728},{"krate":0,"index":44734},{"krate":0,"index":44740},{"krate":0,"index":44746},{"krate":0,"index":44752},{"krate":0,"index":44758},{"krate":0,"index":44764},{"krate":0,"index":44770},{"krate":0,"index":44776},{"krate":0,"index":44782},{"krate":0,"index":44788},{"krate":0,"index":44794},{"krate":0,"index":44800},{"krate":0,"index":44806},{"krate":0,"index":44812},{"krate":0,"index":44818},{"krate":0,"index":44824},{"krate":0,"index":44830},{"krate":0,"index":44836},{"krate":0,"index":44842},{"krate":0,"index":44848},{"krate":0,"index":44854},{"krate":0,"index":44860},{"krate":0,"index":44866},{"krate":0,"index":44872},{"krate":0,"index":44878},{"krate":0,"index":44884}],"decl_id":null,"docs":" Code generation for the min reduction.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":8638},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,109,105,110,46,114,115],"byte_start":2178222,"byte_end":2178231,"line_start":97,"line_end":97,"column_start":11,"column_end":20},"name":"ReduceMin","qualname":"::coresimd::ppsv::codegen::min::ReduceMin","value":"ReduceMin","parent":null,"children":[{"krate":0,"index":8640},{"krate":0,"index":8642}],"decl_id":null,"docs":" Reduction: horizontal max of the vector elements.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":8640},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,109,105,110,46,114,115],"byte_start":2178281,"byte_end":2178284,"line_start":99,"line_end":99,"column_start":10,"column_end":13},"name":"Acc","qualname":"::coresimd::ppsv::codegen::min::ReduceMin::Acc","value":"type Acc;","parent":{"krate":0,"index":8638},"children":[],"decl_id":null,"docs":" Result type of the reduction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8642},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,109,105,110,46,114,115],"byte_start":2178353,"byte_end":2178363,"line_start":101,"line_end":101,"column_start":8,"column_end":18},"name":"reduce_min","qualname":"::coresimd::ppsv::codegen::min::ReduceMin::reduce_min","value":"fn (self) -> Self::Acc","parent":{"krate":0,"index":8638},"children":[],"decl_id":null,"docs":" Reduction: horizontal max of the vector elements.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8646},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,109,97,120,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"max","qualname":"::coresimd::ppsv::codegen::max","value":"libcore/../stdsimd/coresimd/ppsv/codegen/max.rs","parent":null,"children":[{"krate":0,"index":8648},{"krate":0,"index":8650},{"krate":0,"index":8652},{"krate":0,"index":8658},{"krate":0,"index":44890},{"krate":0,"index":44896},{"krate":0,"index":44902},{"krate":0,"index":44908},{"krate":0,"index":44914},{"krate":0,"index":44920},{"krate":0,"index":44926},{"krate":0,"index":44932},{"krate":0,"index":44938},{"krate":0,"index":44944},{"krate":0,"index":44950},{"krate":0,"index":44956},{"krate":0,"index":44962},{"krate":0,"index":44968},{"krate":0,"index":44974},{"krate":0,"index":44980},{"krate":0,"index":44986},{"krate":0,"index":44992},{"krate":0,"index":44998},{"krate":0,"index":45004},{"krate":0,"index":45010},{"krate":0,"index":45016},{"krate":0,"index":45022},{"krate":0,"index":45028},{"krate":0,"index":45034},{"krate":0,"index":45040},{"krate":0,"index":45046},{"krate":0,"index":45052},{"krate":0,"index":45058},{"krate":0,"index":45064},{"krate":0,"index":45070},{"krate":0,"index":45076},{"krate":0,"index":45082},{"krate":0,"index":45088},{"krate":0,"index":45094},{"krate":0,"index":45100},{"krate":0,"index":45106},{"krate":0,"index":45112},{"krate":0,"index":45118},{"krate":0,"index":45124},{"krate":0,"index":45130},{"krate":0,"index":45136},{"krate":0,"index":45142}],"decl_id":null,"docs":" Code generation for the max reduction.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":8652},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,109,97,120,46,114,115],"byte_start":2186410,"byte_end":2186419,"line_start":97,"line_end":97,"column_start":11,"column_end":20},"name":"ReduceMax","qualname":"::coresimd::ppsv::codegen::max::ReduceMax","value":"ReduceMax","parent":null,"children":[{"krate":0,"index":8654},{"krate":0,"index":8656}],"decl_id":null,"docs":" Reduction: horizontal max of the vector elements.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":8654},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,109,97,120,46,114,115],"byte_start":2186469,"byte_end":2186472,"line_start":99,"line_end":99,"column_start":10,"column_end":13},"name":"Acc","qualname":"::coresimd::ppsv::codegen::max::ReduceMax::Acc","value":"type Acc;","parent":{"krate":0,"index":8652},"children":[],"decl_id":null,"docs":" Result type of the reduction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8656},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,109,97,120,46,114,115],"byte_start":2186541,"byte_end":2186551,"line_start":101,"line_end":101,"column_start":8,"column_end":18},"name":"reduce_max","qualname":"::coresimd::ppsv::codegen::max::ReduceMax::reduce_max","value":"fn (self) -> Self::Acc","parent":{"krate":0,"index":8652},"children":[],"decl_id":null,"docs":" Reduction: horizontal max of the vector elements.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":8732},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,109,111,100,46,114,115],"byte_start":2072267,"byte_end":2072275,"line_start":54,"line_end":54,"column_start":11,"column_end":19},"name":"FromBits","qualname":"::coresimd::ppsv::FromBits","value":"FromBits<T>: marker::Sized","parent":null,"children":[{"krate":0,"index":8734}],"decl_id":null,"docs":" Safe lossless bitwise conversion from `T` to `Self`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8734},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,109,111,100,46,114,115],"byte_start":2072353,"byte_end":2072362,"line_start":56,"line_end":56,"column_start":8,"column_end":17},"name":"from_bits","qualname":"::coresimd::ppsv::FromBits::from_bits","value":"fn (T) -> Self","parent":{"krate":0,"index":8732},"children":[],"decl_id":null,"docs":" Safe lossless bitwise conversion from `T` to `Self`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":8736},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,109,111,100,46,114,115],"byte_start":2072445,"byte_end":2072453,"line_start":60,"line_end":60,"column_start":11,"column_end":19},"name":"IntoBits","qualname":"::coresimd::ppsv::IntoBits","value":"IntoBits<T>: marker::Sized","parent":null,"children":[{"krate":0,"index":8738}],"decl_id":null,"docs":" Safe lossless bitwise conversion from `Self` to `T`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8738},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,109,111,100,46,114,115],"byte_start":2072541,"byte_end":2072550,"line_start":62,"line_end":62,"column_start":8,"column_end":17},"name":"into_bits","qualname":"::coresimd::ppsv::IntoBits::into_bits","value":"fn (self) -> T","parent":{"krate":0,"index":8736},"children":[],"decl_id":null,"docs":" Safe lossless bitwise conversion from `Self` to `T`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8748},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,109,111,100,46,114,115],"byte_start":2067970,"byte_end":2067974,"line_start":12,"line_end":12,"column_start":9,"column_end":13},"name":"simd","qualname":"::coresimd::simd","value":"libcore/../stdsimd/coresimd/mod.rs","parent":null,"children":[{"krate":0,"index":8750}],"decl_id":null,"docs":" Platform independent SIMD vector types and operations.","sig":null,"attributes":[{"value":"unstable(feature = \"stdsimd\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,109,111,100,46,114,115],"byte_start":2067916,"byte_end":2067961,"line_start":11,"line_end":11,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":8752},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,109,111,100,46,114,115],"byte_start":2069054,"byte_end":2069058,"line_start":38,"line_end":38,"column_start":9,"column_end":13},"name":"arch","qualname":"::coresimd::arch","value":"libcore/../stdsimd/coresimd/mod.rs","parent":null,"children":[{"krate":0,"index":8754}],"decl_id":null,"docs":" Platform dependent vendor intrinsics.","sig":null,"attributes":[{"value":"unstable(feature = \"stdsimd\", issue = \"0\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,109,111,100,46,114,115],"byte_start":2069000,"byte_end":2069045,"line_start":37,"line_end":37,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":8754},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,109,111,100,46,114,115],"byte_start":2069581,"byte_end":2069587,"line_start":53,"line_end":53,"column_start":13,"column_end":19},"name":"x86_64","qualname":"::coresimd::arch::x86_64","value":"libcore/../stdsimd/coresimd/mod.rs","parent":null,"children":[{"krate":0,"index":8756},{"krate":0,"index":8758}],"decl_id":null,"docs":" Platform-specific intrinsics for the `x86_64` platform.","sig":null,"attributes":[{"value":"cfg(any(target_arch = \"x86_64\", dox))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,109,111,100,46,114,115],"byte_start":2069488,"byte_end":2069528,"line_start":51,"line_end":51,"column_start":5,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":5563},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2216326,"byte_end":2216333,"line_start":6,"line_end":6,"column_start":12,"column_end":19},"name":"simd_eq","qualname":"::coresimd::simd_llvm::::simd_eq","value":"fn <T, U> (x: T, y: T) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5569},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2216369,"byte_end":2216376,"line_start":7,"line_end":7,"column_start":12,"column_end":19},"name":"simd_ne","qualname":"::coresimd::simd_llvm::::simd_ne","value":"fn <T, U> (x: T, y: T) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5575},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2216412,"byte_end":2216419,"line_start":8,"line_end":8,"column_start":12,"column_end":19},"name":"simd_lt","qualname":"::coresimd::simd_llvm::::simd_lt","value":"fn <T, U> (x: T, y: T) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5581},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2216455,"byte_end":2216462,"line_start":9,"line_end":9,"column_start":12,"column_end":19},"name":"simd_le","qualname":"::coresimd::simd_llvm::::simd_le","value":"fn <T, U> (x: T, y: T) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5587},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2216498,"byte_end":2216505,"line_start":10,"line_end":10,"column_start":12,"column_end":19},"name":"simd_gt","qualname":"::coresimd::simd_llvm::::simd_gt","value":"fn <T, U> (x: T, y: T) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5593},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2216541,"byte_end":2216548,"line_start":11,"line_end":11,"column_start":12,"column_end":19},"name":"simd_ge","qualname":"::coresimd::simd_llvm::::simd_ge","value":"fn <T, U> (x: T, y: T) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5599},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2216585,"byte_end":2216598,"line_start":13,"line_end":13,"column_start":12,"column_end":25},"name":"simd_shuffle2","qualname":"::coresimd::simd_llvm::::simd_shuffle2","value":"fn <T, U> (x: T, y: T, idx: [u32; 2]) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5607},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2216649,"byte_end":2216662,"line_start":14,"line_end":14,"column_start":12,"column_end":25},"name":"simd_shuffle4","qualname":"::coresimd::simd_llvm::::simd_shuffle4","value":"fn <T, U> (x: T, y: T, idx: [u32; 4]) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5615},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2216713,"byte_end":2216726,"line_start":15,"line_end":15,"column_start":12,"column_end":25},"name":"simd_shuffle8","qualname":"::coresimd::simd_llvm::::simd_shuffle8","value":"fn <T, U> (x: T, y: T, idx: [u32; 8]) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5623},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2216777,"byte_end":2216791,"line_start":16,"line_end":16,"column_start":12,"column_end":26},"name":"simd_shuffle16","qualname":"::coresimd::simd_llvm::::simd_shuffle16","value":"fn <T, U> (x: T, y: T, idx: [u32; 16]) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5631},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2216843,"byte_end":2216857,"line_start":17,"line_end":17,"column_start":12,"column_end":26},"name":"simd_shuffle32","qualname":"::coresimd::simd_llvm::::simd_shuffle32","value":"fn <T, U> (x: T, y: T, idx: [u32; 32]) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5639},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2216910,"byte_end":2216921,"line_start":19,"line_end":19,"column_start":12,"column_end":23},"name":"simd_insert","qualname":"::coresimd::simd_llvm::::simd_insert","value":"fn <T, U> (x: T, idx: u32, val: U) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5645},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2216969,"byte_end":2216981,"line_start":20,"line_end":20,"column_start":12,"column_end":24},"name":"simd_extract","qualname":"::coresimd::simd_llvm::::simd_extract","value":"fn <T, U> (x: T, idx: u32) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5651},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2217022,"byte_end":2217031,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"simd_cast","qualname":"::coresimd::simd_llvm::::simd_cast","value":"fn <T, U> (x: T) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5657},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2217062,"byte_end":2217070,"line_start":24,"line_end":24,"column_start":12,"column_end":20},"name":"simd_add","qualname":"::coresimd::simd_llvm::::simd_add","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5661},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2217103,"byte_end":2217111,"line_start":25,"line_end":25,"column_start":12,"column_end":20},"name":"simd_sub","qualname":"::coresimd::simd_llvm::::simd_sub","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5665},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2217144,"byte_end":2217152,"line_start":26,"line_end":26,"column_start":12,"column_end":20},"name":"simd_mul","qualname":"::coresimd::simd_llvm::::simd_mul","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5669},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2217185,"byte_end":2217193,"line_start":27,"line_end":27,"column_start":12,"column_end":20},"name":"simd_div","qualname":"::coresimd::simd_llvm::::simd_div","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5673},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2217226,"byte_end":2217234,"line_start":28,"line_end":28,"column_start":12,"column_end":20},"name":"simd_rem","qualname":"::coresimd::simd_llvm::::simd_rem","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5677},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2217267,"byte_end":2217275,"line_start":29,"line_end":29,"column_start":12,"column_end":20},"name":"simd_shl","qualname":"::coresimd::simd_llvm::::simd_shl","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5681},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2217308,"byte_end":2217316,"line_start":30,"line_end":30,"column_start":12,"column_end":20},"name":"simd_shr","qualname":"::coresimd::simd_llvm::::simd_shr","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5685},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2217349,"byte_end":2217357,"line_start":31,"line_end":31,"column_start":12,"column_end":20},"name":"simd_and","qualname":"::coresimd::simd_llvm::::simd_and","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5689},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2217390,"byte_end":2217397,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"simd_or","qualname":"::coresimd::simd_llvm::::simd_or","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":5693},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,115,105,109,100,95,108,108,118,109,46,114,115],"byte_start":2217430,"byte_end":2217438,"line_start":33,"line_end":33,"column_start":12,"column_end":20},"name":"simd_xor","qualname":"::coresimd::simd_llvm::::simd_xor","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8786},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2230513,"byte_end":2230521,"line_start":359,"line_end":359,"column_start":8,"column_end":16},"name":"as_m128i","qualname":"::coresimd::x86::m128iExt::as_m128i","value":"fn (self) -> __m128i","parent":{"krate":0,"index":8784},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2230440,"byte_end":2230470,"line_start":357,"line_end":357,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":8788},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2230562,"byte_end":2230570,"line_start":362,"line_end":362,"column_start":8,"column_end":16},"name":"as_u8x16","qualname":"::coresimd::x86::m128iExt::as_u8x16","value":"fn (self) -> ::coresimd::simd::u8x16","parent":{"krate":0,"index":8784},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2230440,"byte_end":2230470,"line_start":357,"line_end":357,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":8790},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2230685,"byte_end":2230693,"line_start":367,"line_end":367,"column_start":8,"column_end":16},"name":"as_u16x8","qualname":"::coresimd::x86::m128iExt::as_u16x8","value":"fn (self) -> ::coresimd::simd::u16x8","parent":{"krate":0,"index":8784},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2230440,"byte_end":2230470,"line_start":357,"line_end":357,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":8792},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2230808,"byte_end":2230816,"line_start":372,"line_end":372,"column_start":8,"column_end":16},"name":"as_u32x4","qualname":"::coresimd::x86::m128iExt::as_u32x4","value":"fn (self) -> ::coresimd::simd::u32x4","parent":{"krate":0,"index":8784},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2230440,"byte_end":2230470,"line_start":357,"line_end":357,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":8794},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2230931,"byte_end":2230939,"line_start":377,"line_end":377,"column_start":8,"column_end":16},"name":"as_u64x2","qualname":"::coresimd::x86::m128iExt::as_u64x2","value":"fn (self) -> ::coresimd::simd::u64x2","parent":{"krate":0,"index":8784},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2230440,"byte_end":2230470,"line_start":357,"line_end":357,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":8796},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231054,"byte_end":2231062,"line_start":382,"line_end":382,"column_start":8,"column_end":16},"name":"as_i8x16","qualname":"::coresimd::x86::m128iExt::as_i8x16","value":"fn (self) -> ::coresimd::simd::i8x16","parent":{"krate":0,"index":8784},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2230440,"byte_end":2230470,"line_start":357,"line_end":357,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":8798},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231177,"byte_end":2231185,"line_start":387,"line_end":387,"column_start":8,"column_end":16},"name":"as_i16x8","qualname":"::coresimd::x86::m128iExt::as_i16x8","value":"fn (self) -> ::coresimd::simd::i16x8","parent":{"krate":0,"index":8784},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2230440,"byte_end":2230470,"line_start":357,"line_end":357,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":8800},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231300,"byte_end":2231308,"line_start":392,"line_end":392,"column_start":8,"column_end":16},"name":"as_i32x4","qualname":"::coresimd::x86::m128iExt::as_i32x4","value":"fn (self) -> ::coresimd::simd::i32x4","parent":{"krate":0,"index":8784},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2230440,"byte_end":2230470,"line_start":357,"line_end":357,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":8802},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231423,"byte_end":2231431,"line_start":397,"line_end":397,"column_start":8,"column_end":16},"name":"as_i64x2","qualname":"::coresimd::x86::m128iExt::as_i64x2","value":"fn (self) -> ::coresimd::simd::i64x2","parent":{"krate":0,"index":8784},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2230440,"byte_end":2230470,"line_start":357,"line_end":357,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":8810},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231711,"byte_end":2231719,"line_start":412,"line_end":412,"column_start":8,"column_end":16},"name":"as_m256i","qualname":"::coresimd::x86::m256iExt::as_m256i","value":"fn (self) -> __m256i","parent":{"krate":0,"index":8808},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231638,"byte_end":2231668,"line_start":410,"line_end":410,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":8812},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231760,"byte_end":2231768,"line_start":415,"line_end":415,"column_start":8,"column_end":16},"name":"as_u8x32","qualname":"::coresimd::x86::m256iExt::as_u8x32","value":"fn (self) -> ::coresimd::simd::u8x32","parent":{"krate":0,"index":8808},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231638,"byte_end":2231668,"line_start":410,"line_end":410,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":8814},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231883,"byte_end":2231892,"line_start":420,"line_end":420,"column_start":8,"column_end":17},"name":"as_u16x16","qualname":"::coresimd::x86::m256iExt::as_u16x16","value":"fn (self) -> ::coresimd::simd::u16x16","parent":{"krate":0,"index":8808},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231638,"byte_end":2231668,"line_start":410,"line_end":410,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":8816},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2232008,"byte_end":2232016,"line_start":425,"line_end":425,"column_start":8,"column_end":16},"name":"as_u32x8","qualname":"::coresimd::x86::m256iExt::as_u32x8","value":"fn (self) -> ::coresimd::simd::u32x8","parent":{"krate":0,"index":8808},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231638,"byte_end":2231668,"line_start":410,"line_end":410,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":8818},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2232131,"byte_end":2232139,"line_start":430,"line_end":430,"column_start":8,"column_end":16},"name":"as_u64x4","qualname":"::coresimd::x86::m256iExt::as_u64x4","value":"fn (self) -> ::coresimd::simd::u64x4","parent":{"krate":0,"index":8808},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231638,"byte_end":2231668,"line_start":410,"line_end":410,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":8820},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2232254,"byte_end":2232262,"line_start":435,"line_end":435,"column_start":8,"column_end":16},"name":"as_i8x32","qualname":"::coresimd::x86::m256iExt::as_i8x32","value":"fn (self) -> ::coresimd::simd::i8x32","parent":{"krate":0,"index":8808},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231638,"byte_end":2231668,"line_start":410,"line_end":410,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":8822},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2232377,"byte_end":2232386,"line_start":440,"line_end":440,"column_start":8,"column_end":17},"name":"as_i16x16","qualname":"::coresimd::x86::m256iExt::as_i16x16","value":"fn (self) -> ::coresimd::simd::i16x16","parent":{"krate":0,"index":8808},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231638,"byte_end":2231668,"line_start":410,"line_end":410,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":8824},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2232502,"byte_end":2232510,"line_start":445,"line_end":445,"column_start":8,"column_end":16},"name":"as_i32x8","qualname":"::coresimd::x86::m256iExt::as_i32x8","value":"fn (self) -> ::coresimd::simd::i32x8","parent":{"krate":0,"index":8808},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231638,"byte_end":2231668,"line_start":410,"line_end":410,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":8826},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2232625,"byte_end":2232633,"line_start":450,"line_end":450,"column_start":8,"column_end":16},"name":"as_i64x4","qualname":"::coresimd::x86::m256iExt::as_i64x4","value":"fn (self) -> ::coresimd::simd::i64x4","parent":{"krate":0,"index":8808},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231638,"byte_end":2231668,"line_start":410,"line_end":410,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":8894},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,101,102,108,97,103,115,46,114,115],"byte_start":2246986,"byte_end":2246998,"line_start":15,"line_end":15,"column_start":15,"column_end":27},"name":"__readeflags","qualname":"::coresimd::x86::eflags::__readeflags","value":"fn () -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads EFLAGS.\n","sig":null,"attributes":[{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,101,102,108,97,103,115,46,114,115],"byte_start":2246923,"byte_end":2246953,"line_start":13,"line_end":13,"column_start":1,"column_end":31}},{"value":"inline(always)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,101,102,108,97,103,115,46,114,115],"byte_start":2246954,"byte_end":2246971,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":8896},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,101,102,108,97,103,115,46,114,115],"byte_start":2247371,"byte_end":2247384,"line_start":31,"line_end":31,"column_start":15,"column_end":28},"name":"__writeeflags","qualname":"::coresimd::x86::eflags::__writeeflags","value":"fn (eflags: u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Write EFLAGS.\n","sig":null,"attributes":[{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,101,102,108,97,103,115,46,114,115],"byte_start":2247308,"byte_end":2247338,"line_start":29,"line_end":29,"column_start":1,"column_end":31}},{"value":"inline(always)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,101,102,108,97,103,115,46,114,115],"byte_start":2247339,"byte_end":2247356,"line_start":30,"line_end":30,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":8902},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,115,119,97,112,46,114,115],"byte_start":2248086,"byte_end":2248092,"line_start":11,"line_end":11,"column_start":15,"column_end":21},"name":"_bswap","qualname":"::coresimd::x86::bswap::_bswap","value":"fn (x: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Return an integer with the reversed byte order of x\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,115,119,97,112,46,114,115],"byte_start":2248023,"byte_end":2248032,"line_start":9,"line_end":9,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8910},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,114,100,116,115,99,46,114,115],"byte_start":2249230,"byte_end":2249236,"line_start":22,"line_end":22,"column_start":15,"column_end":21},"name":"_rdtsc","qualname":"::coresimd::x86::rdtsc::_rdtsc","value":"fn () -> i64","parent":null,"children":[],"decl_id":null,"docs":" Reads the current value of the processor’s time-stamp counter.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,114,100,116,115,99,46,114,115],"byte_start":2249167,"byte_end":2249176,"line_start":20,"line_end":20,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8912},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,114,100,116,115,99,46,114,115],"byte_start":2249931,"byte_end":2249939,"line_start":42,"line_end":42,"column_start":15,"column_end":23},"name":"__rdtscp","qualname":"::coresimd::x86::rdtsc::__rdtscp","value":"fn (aux: *mut u32) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the current value of the processor’s time-stamp counter and\n the `IA32_TSC_AUX MSR`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,114,100,116,115,99,46,114,115],"byte_start":2249867,"byte_end":2249876,"line_start":40,"line_end":40,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":66504},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,99,112,117,105,100,46,114,115],"byte_start":2250921,"byte_end":2250932,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"CpuidResult","qualname":"::coresimd::x86::cpuid::CpuidResult","value":"CpuidResult { eax, ebx, ecx, edx }","parent":null,"children":[{"krate":0,"index":32035},{"krate":0,"index":32037},{"krate":0,"index":32039},{"krate":0,"index":32041}],"decl_id":null,"docs":" Result of the `cpuid` instruction.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,99,112,117,105,100,46,114,115],"byte_start":2250910,"byte_end":2251096,"line_start":13,"line_end":22,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,99,112,117,105,100,46,114,115],"byte_start":2250910,"byte_end":2251096,"line_start":13,"line_end":22,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":32035},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,99,112,117,105,100,46,114,115],"byte_start":2250965,"byte_end":2250968,"line_start":15,"line_end":15,"column_start":9,"column_end":12},"name":"eax","qualname":"::coresimd::x86::cpuid::CpuidResult::eax","value":"u32","parent":{"krate":0,"index":66504},"children":[],"decl_id":null,"docs":" EAX register.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":32037},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,99,112,117,105,100,46,114,115],"byte_start":2251005,"byte_end":2251008,"line_start":17,"line_end":17,"column_start":9,"column_end":12},"name":"ebx","qualname":"::coresimd::x86::cpuid::CpuidResult::ebx","value":"u32","parent":{"krate":0,"index":66504},"children":[],"decl_id":null,"docs":" EBX register.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":32039},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,99,112,117,105,100,46,114,115],"byte_start":2251045,"byte_end":2251048,"line_start":19,"line_end":19,"column_start":9,"column_end":12},"name":"ecx","qualname":"::coresimd::x86::cpuid::CpuidResult::ecx","value":"u32","parent":{"krate":0,"index":66504},"children":[],"decl_id":null,"docs":" ECX register.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":32041},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,99,112,117,105,100,46,114,115],"byte_start":2251085,"byte_end":2251088,"line_start":21,"line_end":21,"column_start":9,"column_end":12},"name":"edx","qualname":"::coresimd::x86::cpuid::CpuidResult::edx","value":"u32","parent":{"krate":0,"index":66504},"children":[],"decl_id":null,"docs":" EDX register.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8922},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,99,112,117,105,100,46,114,115],"byte_start":2252302,"byte_end":2252315,"line_start":49,"line_end":49,"column_start":15,"column_end":28},"name":"__cpuid_count","qualname":"::coresimd::x86::cpuid::__cpuid_count","value":"fn (leaf: u32, sub_leaf: u32) -> CpuidResult","parent":null,"children":[],"decl_id":null,"docs":" Returns the result of the `cpuid` instruction for a given `leaf` (`EAX`)\n and\n `sub_leaf` (`ECX`).","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,99,112,117,105,100,46,114,115],"byte_start":2252239,"byte_end":2252248,"line_start":47,"line_end":47,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8924},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,99,112,117,105,100,46,114,115],"byte_start":2253002,"byte_end":2253009,"line_start":69,"line_end":69,"column_start":15,"column_end":22},"name":"__cpuid","qualname":"::coresimd::x86::cpuid::__cpuid","value":"fn (leaf: u32) -> CpuidResult","parent":null,"children":[],"decl_id":null,"docs":" See [`__cpuid_count`](fn.__cpuid_count.html).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,99,112,117,105,100,46,114,115],"byte_start":2252939,"byte_end":2252948,"line_start":67,"line_end":67,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8926},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,99,112,117,105,100,46,114,115],"byte_start":2253136,"byte_end":2253145,"line_start":75,"line_end":75,"column_start":8,"column_end":17},"name":"has_cpuid","qualname":"::coresimd::x86::cpuid::has_cpuid","value":"fn () -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does the host support the `cpuid` instruction?\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,99,112,117,105,100,46,114,115],"byte_start":2253119,"byte_end":2253128,"line_start":74,"line_end":74,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8928},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,99,112,117,105,100,46,114,115],"byte_start":2254466,"byte_end":2254481,"line_start":117,"line_end":117,"column_start":15,"column_end":30},"name":"__get_cpuid_max","qualname":"::coresimd::x86::cpuid::__get_cpuid_max","value":"fn (leaf: u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Returns the highest-supported `leaf` (`EAX`) and sub-leaf (`ECX`) `cpuid`\n values.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,99,112,117,105,100,46,114,115],"byte_start":2254442,"byte_end":2254451,"line_start":116,"line_end":116,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":8936},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2256468,"byte_end":2256474,"line_start":37,"line_end":37,"column_start":15,"column_end":21},"name":"_xsave","qualname":"::coresimd::x86::xsave::_xsave","value":"fn (mem_addr: *mut u8, save_mask: u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a full or partial save of the enabled processor states to memory at\n `mem_addr`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2256369,"byte_end":2256378,"line_start":34,"line_end":34,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"xsave\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2256379,"byte_end":2256414,"line_start":35,"line_end":35,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":8938},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2256974,"byte_end":2256981,"line_start":50,"line_end":50,"column_start":15,"column_end":22},"name":"_xrstor","qualname":"::coresimd::x86::xsave::_xrstor","value":"fn (mem_addr: *const u8, rs_mask: u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a full or partial restore of the enabled processor states using\n the state information stored in memory at `mem_addr`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2256874,"byte_end":2256883,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"xsave\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2256884,"byte_end":2256919,"line_start":48,"line_end":48,"column_start":1,"column_end":36}}]},{"kind":"Const","id":{"krate":0,"index":8940},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2257185,"byte_end":2257211,"line_start":57,"line_end":57,"column_start":11,"column_end":37},"name":"_XCR_XFEATURE_ENABLED_MASK","qualname":"::coresimd::x86::xsave::_XCR_XFEATURE_ENABLED_MASK","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" `XFEATURE_ENABLED_MASK` for `XCR`","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8942},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2257481,"byte_end":2257488,"line_start":66,"line_end":66,"column_start":15,"column_end":22},"name":"_xsetbv","qualname":"::coresimd::x86::xsave::_xsetbv","value":"fn (a: u32, val: u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Copy 64-bits from `val` to the extended control register (`XCR`) specified\n by `a`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2257381,"byte_end":2257390,"line_start":63,"line_end":63,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"xsave\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2257391,"byte_end":2257426,"line_start":64,"line_end":64,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":8944},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2257748,"byte_end":2257755,"line_start":75,"line_end":75,"column_start":15,"column_end":22},"name":"_xgetbv","qualname":"::coresimd::x86::xsave::_xgetbv","value":"fn (xcr_no: u32) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the contents of the extended control register `XCR`\n specified in `xcr_no`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2257648,"byte_end":2257657,"line_start":72,"line_end":72,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"xsave\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2257658,"byte_end":2257693,"line_start":73,"line_end":73,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":8946},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2258426,"byte_end":2258435,"line_start":92,"line_end":92,"column_start":15,"column_end":24},"name":"_xsaveopt","qualname":"::coresimd::x86::xsave::_xsaveopt","value":"fn (mem_addr: *mut u8, save_mask: u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a full or partial save of the enabled processor states to memory at\n `mem_addr`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2258315,"byte_end":2258324,"line_start":89,"line_end":89,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"xsave,xsaveopt\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2258325,"byte_end":2258369,"line_start":90,"line_end":90,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":8948},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2258972,"byte_end":2258979,"line_start":105,"line_end":105,"column_start":15,"column_end":22},"name":"_xsavec","qualname":"::coresimd::x86::xsave::_xsavec","value":"fn (mem_addr: *mut u8, save_mask: u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a full or partial save of the enabled processor states to memory\n at `mem_addr`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2258865,"byte_end":2258874,"line_start":102,"line_end":102,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"xsave,xsavec\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2258875,"byte_end":2258917,"line_start":103,"line_end":103,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":8950},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2259579,"byte_end":2259586,"line_start":119,"line_end":119,"column_start":15,"column_end":22},"name":"_xsaves","qualname":"::coresimd::x86::xsave::_xsaves","value":"fn (mem_addr: *mut u8, save_mask: u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a full or partial save of the enabled processor states to memory at\n `mem_addr`","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2259472,"byte_end":2259481,"line_start":116,"line_end":116,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"xsave,xsaves\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2259482,"byte_end":2259524,"line_start":117,"line_end":117,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":8952},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2260330,"byte_end":2260338,"line_start":135,"line_end":135,"column_start":15,"column_end":23},"name":"_xrstors","qualname":"::coresimd::x86::xsave::_xrstors","value":"fn (mem_addr: *const u8, rs_mask: u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a full or partial restore of the enabled processor states using the\n state information stored in memory at `mem_addr`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2260222,"byte_end":2260231,"line_start":132,"line_end":132,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"xsave,xsaves\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,120,115,97,118,101,46,114,115],"byte_start":2260232,"byte_end":2260274,"line_start":133,"line_end":133,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":8970},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2264115,"byte_end":2264125,"line_start":18,"line_end":18,"column_start":15,"column_end":25},"name":"_mm_add_ss","qualname":"::coresimd::x86::sse::_mm_add_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Adds the first component of `a` and `b`, the other components are copied\n from `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2264018,"byte_end":2264027,"line_start":15,"line_end":15,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2264028,"byte_end":2264061,"line_start":16,"line_end":16,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":8972},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2264301,"byte_end":2264311,"line_start":26,"line_end":26,"column_start":15,"column_end":25},"name":"_mm_add_ps","qualname":"::coresimd::x86::sse::_mm_add_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Adds __m128 vectors.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2264204,"byte_end":2264213,"line_start":23,"line_end":23,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2264214,"byte_end":2264247,"line_start":24,"line_end":24,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":8974},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2264562,"byte_end":2264572,"line_start":35,"line_end":35,"column_start":15,"column_end":25},"name":"_mm_sub_ss","qualname":"::coresimd::x86::sse::_mm_sub_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the first component of `b` from `a`, the other components are\n copied from `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2264465,"byte_end":2264474,"line_start":32,"line_end":32,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2264475,"byte_end":2264508,"line_start":33,"line_end":33,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":8976},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2264753,"byte_end":2264763,"line_start":43,"line_end":43,"column_start":15,"column_end":25},"name":"_mm_sub_ps","qualname":"::coresimd::x86::sse::_mm_sub_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Subtracts __m128 vectors.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2264656,"byte_end":2264665,"line_start":40,"line_end":40,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2264666,"byte_end":2264699,"line_start":41,"line_end":41,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":8978},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2265014,"byte_end":2265024,"line_start":52,"line_end":52,"column_start":15,"column_end":25},"name":"_mm_mul_ss","qualname":"::coresimd::x86::sse::_mm_mul_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Multiplies the first component of `a` and `b`, the other components are\n copied from `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2264917,"byte_end":2264926,"line_start":49,"line_end":49,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2264927,"byte_end":2264960,"line_start":50,"line_end":50,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":8980},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2265206,"byte_end":2265216,"line_start":60,"line_end":60,"column_start":15,"column_end":25},"name":"_mm_mul_ps","qualname":"::coresimd::x86::sse::_mm_mul_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Multiplies __m128 vectors.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2265109,"byte_end":2265118,"line_start":57,"line_end":57,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2265119,"byte_end":2265152,"line_start":58,"line_end":58,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":8982},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2265463,"byte_end":2265473,"line_start":69,"line_end":69,"column_start":15,"column_end":25},"name":"_mm_div_ss","qualname":"::coresimd::x86::sse::_mm_div_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Divides the first component of `b` by `a`, the other components are\n copied from `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2265366,"byte_end":2265375,"line_start":66,"line_end":66,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2265376,"byte_end":2265409,"line_start":67,"line_end":67,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":8984},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2265652,"byte_end":2265662,"line_start":77,"line_end":77,"column_start":15,"column_end":25},"name":"_mm_div_ps","qualname":"::coresimd::x86::sse::_mm_div_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Divides __m128 vectors.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2265555,"byte_end":2265564,"line_start":74,"line_end":74,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2265565,"byte_end":2265598,"line_start":75,"line_end":75,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":8986},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2265952,"byte_end":2265963,"line_start":86,"line_end":86,"column_start":15,"column_end":26},"name":"_mm_sqrt_ss","qualname":"::coresimd::x86::sse::_mm_sqrt_ss","value":"fn (a: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Return the square root of the first single-precision (32-bit)\n floating-point element in `a`, the other elements are unchanged.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2265854,"byte_end":2265863,"line_start":83,"line_end":83,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2265864,"byte_end":2265897,"line_start":84,"line_end":84,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":8988},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2266201,"byte_end":2266212,"line_start":95,"line_end":95,"column_start":15,"column_end":26},"name":"_mm_sqrt_ps","qualname":"::coresimd::x86::sse::_mm_sqrt_ps","value":"fn (a: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Return the square root of packed single-precision (32-bit) floating-point\n elements in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2266103,"byte_end":2266112,"line_start":92,"line_end":92,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2266113,"byte_end":2266146,"line_start":93,"line_end":93,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":8990},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2266496,"byte_end":2266506,"line_start":104,"line_end":104,"column_start":15,"column_end":25},"name":"_mm_rcp_ss","qualname":"::coresimd::x86::sse::_mm_rcp_ss","value":"fn (a: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate reciprocal of the first single-precision\n (32-bit) floating-point element in `a`, the other elements are unchanged.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2266399,"byte_end":2266408,"line_start":101,"line_end":101,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2266409,"byte_end":2266442,"line_start":102,"line_end":102,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":8992},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2266753,"byte_end":2266763,"line_start":113,"line_end":113,"column_start":15,"column_end":25},"name":"_mm_rcp_ps","qualname":"::coresimd::x86::sse::_mm_rcp_ps","value":"fn (a: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate reciprocal of packed single-precision (32-bit)\n floating-point elements in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2266656,"byte_end":2266665,"line_start":110,"line_end":110,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2266666,"byte_end":2266699,"line_start":111,"line_end":111,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":8994},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2267060,"byte_end":2267072,"line_start":122,"line_end":122,"column_start":15,"column_end":27},"name":"_mm_rsqrt_ss","qualname":"::coresimd::x86::sse::_mm_rsqrt_ss","value":"fn (a: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate reciprocal square root of the fist single-precision\n (32-bit) floating-point elements in `a`, the other elements are unchanged.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2266961,"byte_end":2266970,"line_start":119,"line_end":119,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2266971,"byte_end":2267004,"line_start":120,"line_end":120,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":8996},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2267335,"byte_end":2267347,"line_start":131,"line_end":131,"column_start":15,"column_end":27},"name":"_mm_rsqrt_ps","qualname":"::coresimd::x86::sse::_mm_rsqrt_ps","value":"fn (a: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate reciprocal square root of packed single-precision\n (32-bit) floating-point elements in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2267236,"byte_end":2267245,"line_start":128,"line_end":128,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2267246,"byte_end":2267279,"line_start":129,"line_end":129,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":8998},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2267692,"byte_end":2267702,"line_start":141,"line_end":141,"column_start":15,"column_end":25},"name":"_mm_min_ss","qualname":"::coresimd::x86::sse::_mm_min_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare the first single-precision (32-bit) floating-point element of `a`\n and `b`, and return the minimum value in the first element of the return\n value, the other elements are copied from `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2267595,"byte_end":2267604,"line_start":138,"line_end":138,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2267605,"byte_end":2267638,"line_start":139,"line_end":139,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9000},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2267987,"byte_end":2267997,"line_start":150,"line_end":150,"column_start":15,"column_end":25},"name":"_mm_min_ps","qualname":"::coresimd::x86::sse::_mm_min_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare packed single-precision (32-bit) floating-point elements in `a` and\n `b`, and return the corresponding minimum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2267890,"byte_end":2267899,"line_start":147,"line_end":147,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2267900,"byte_end":2267933,"line_start":148,"line_end":148,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9002},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2268354,"byte_end":2268364,"line_start":160,"line_end":160,"column_start":15,"column_end":25},"name":"_mm_max_ss","qualname":"::coresimd::x86::sse::_mm_max_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare the first single-precision (32-bit) floating-point element of `a`\n and `b`, and return the maximum value in the first element of the return\n value, the other elements are copied from `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2268257,"byte_end":2268266,"line_start":157,"line_end":157,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2268267,"byte_end":2268300,"line_start":158,"line_end":158,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9004},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2268649,"byte_end":2268659,"line_start":169,"line_end":169,"column_start":15,"column_end":25},"name":"_mm_max_ps","qualname":"::coresimd::x86::sse::_mm_max_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare packed single-precision (32-bit) floating-point elements in `a` and\n `b`, and return the corresponding maximum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2268552,"byte_end":2268561,"line_start":166,"line_end":166,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2268562,"byte_end":2268595,"line_start":167,"line_end":167,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9006},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2269028,"byte_end":2269038,"line_start":179,"line_end":179,"column_start":15,"column_end":25},"name":"_mm_and_ps","qualname":"::coresimd::x86::sse::_mm_and_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise AND of packed single-precision (32-bit) floating-point elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2268790,"byte_end":2268799,"line_start":174,"line_end":174,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2268800,"byte_end":2268833,"line_start":175,"line_end":175,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9008},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2269583,"byte_end":2269596,"line_start":195,"line_end":195,"column_start":15,"column_end":28},"name":"_mm_andnot_ps","qualname":"::coresimd::x86::sse::_mm_andnot_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise AND-NOT of packed single-precision (32-bit) floating-point\n elements.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2269331,"byte_end":2269340,"line_start":189,"line_end":189,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2269341,"byte_end":2269374,"line_start":190,"line_end":190,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9010},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2270138,"byte_end":2270147,"line_start":208,"line_end":208,"column_start":15,"column_end":24},"name":"_mm_or_ps","qualname":"::coresimd::x86::sse::_mm_or_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise OR of packed single-precision (32-bit) floating-point elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2269899,"byte_end":2269908,"line_start":203,"line_end":203,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2269909,"byte_end":2269942,"line_start":204,"line_end":204,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9012},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2270630,"byte_end":2270640,"line_start":221,"line_end":221,"column_start":15,"column_end":25},"name":"_mm_xor_ps","qualname":"::coresimd::x86::sse::_mm_xor_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise exclusive OR of packed single-precision (32-bit) floating-point\n elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2270389,"byte_end":2270398,"line_start":216,"line_end":216,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2270399,"byte_end":2270432,"line_start":217,"line_end":217,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9014},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2271121,"byte_end":2271133,"line_start":233,"line_end":233,"column_start":15,"column_end":27},"name":"_mm_cmpeq_ss","qualname":"::coresimd::x86::sse::_mm_cmpeq_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare the lowest `f32` of both inputs for equality. The lowest 32 bits of\n the result will be `0xffffffff` if the two inputs are equal, or `0`\n otherwise. The upper 96 bits of the result are the upper 96 bits of `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2271022,"byte_end":2271031,"line_start":230,"line_end":230,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2271032,"byte_end":2271065,"line_start":231,"line_end":231,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9016},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2271541,"byte_end":2271553,"line_start":244,"line_end":244,"column_start":15,"column_end":27},"name":"_mm_cmplt_ss","qualname":"::coresimd::x86::sse::_mm_cmplt_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare the lowest `f32` of both inputs for less than. The lowest 32 bits\n of the result will be `0xffffffff` if `a.extract(0)` is less than\n `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the\n upper 96 bits of `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2271442,"byte_end":2271451,"line_start":241,"line_end":241,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2271452,"byte_end":2271485,"line_start":242,"line_end":242,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9018},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2271979,"byte_end":2271991,"line_start":255,"line_end":255,"column_start":15,"column_end":27},"name":"_mm_cmple_ss","qualname":"::coresimd::x86::sse::_mm_cmple_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare the lowest `f32` of both inputs for less than or equal. The lowest\n 32 bits of the result will be `0xffffffff` if `a.extract(0)` is less than\n or equal `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result\n are the upper 96 bits of `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2271880,"byte_end":2271889,"line_start":252,"line_end":252,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2271890,"byte_end":2271923,"line_start":253,"line_end":253,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9020},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2272405,"byte_end":2272417,"line_start":266,"line_end":266,"column_start":15,"column_end":27},"name":"_mm_cmpgt_ss","qualname":"::coresimd::x86::sse::_mm_cmpgt_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare the lowest `f32` of both inputs for greater than. The lowest 32\n bits of the result will be `0xffffffff` if `a.extract(0)` is greater\n than `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result\n are the upper 96 bits of `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2272306,"byte_end":2272315,"line_start":263,"line_end":263,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2272316,"byte_end":2272349,"line_start":264,"line_end":264,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9022},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2272881,"byte_end":2272893,"line_start":277,"line_end":277,"column_start":15,"column_end":27},"name":"_mm_cmpge_ss","qualname":"::coresimd::x86::sse::_mm_cmpge_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare the lowest `f32` of both inputs for greater than or equal. The\n lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is\n greater than or equal `b.extract(0)`, or `0` otherwise. The upper 96 bits\n of the result are the upper 96 bits of `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2272782,"byte_end":2272791,"line_start":274,"line_end":274,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2272792,"byte_end":2272825,"line_start":275,"line_end":275,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9024},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2273338,"byte_end":2273351,"line_start":288,"line_end":288,"column_start":15,"column_end":28},"name":"_mm_cmpneq_ss","qualname":"::coresimd::x86::sse::_mm_cmpneq_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare the lowest `f32` of both inputs for inequality. The lowest 32 bits\n of the result will be `0xffffffff` if `a.extract(0)` is not equal to\n `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the\n upper 96 bits of `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2273238,"byte_end":2273247,"line_start":285,"line_end":285,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2273248,"byte_end":2273281,"line_start":286,"line_end":286,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9026},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2273768,"byte_end":2273781,"line_start":299,"line_end":299,"column_start":15,"column_end":28},"name":"_mm_cmpnlt_ss","qualname":"::coresimd::x86::sse::_mm_cmpnlt_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare the lowest `f32` of both inputs for not-less-than. The lowest 32\n bits of the result will be `0xffffffff` if `a.extract(0)` is not less than\n `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are the\n upper 96 bits of `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2273668,"byte_end":2273677,"line_start":296,"line_end":296,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2273678,"byte_end":2273711,"line_start":297,"line_end":297,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9028},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2274219,"byte_end":2274232,"line_start":310,"line_end":310,"column_start":15,"column_end":28},"name":"_mm_cmpnle_ss","qualname":"::coresimd::x86::sse::_mm_cmpnle_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare the lowest `f32` of both inputs for not-less-than-or-equal. The\n lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is not\n less than or equal to `b.extract(0)`, or `0` otherwise. The upper 96 bits\n of the result are the upper 96 bits of `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2274119,"byte_end":2274128,"line_start":307,"line_end":307,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2274129,"byte_end":2274162,"line_start":308,"line_end":308,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9030},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2274655,"byte_end":2274668,"line_start":321,"line_end":321,"column_start":15,"column_end":28},"name":"_mm_cmpngt_ss","qualname":"::coresimd::x86::sse::_mm_cmpngt_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare the lowest `f32` of both inputs for not-greater-than. The lowest 32\n bits of the result will be `0xffffffff` if `a.extract(0)` is not greater\n than `b.extract(0)`, or `0` otherwise. The upper 96 bits of the result are\n the upper 96 bits of `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2274555,"byte_end":2274564,"line_start":318,"line_end":318,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2274565,"byte_end":2274598,"line_start":319,"line_end":319,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9032},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2275144,"byte_end":2275157,"line_start":332,"line_end":332,"column_start":15,"column_end":28},"name":"_mm_cmpnge_ss","qualname":"::coresimd::x86::sse::_mm_cmpnge_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare the lowest `f32` of both inputs for not-greater-than-or-equal. The\n lowest 32 bits of the result will be `0xffffffff` if `a.extract(0)` is not\n greater than or equal to `b.extract(0)`, or `0` otherwise. The upper 96\n bits of the result are the upper 96 bits of `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2275044,"byte_end":2275053,"line_start":329,"line_end":329,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2275054,"byte_end":2275087,"line_start":330,"line_end":330,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9034},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2275607,"byte_end":2275620,"line_start":343,"line_end":343,"column_start":15,"column_end":28},"name":"_mm_cmpord_ss","qualname":"::coresimd::x86::sse::_mm_cmpord_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Check if the lowest `f32` of both inputs are ordered. The lowest 32 bits of\n the result will be `0xffffffff` if neither of `a.extract(0)` or\n `b.extract(0)` is a NaN, or `0` otherwise. The upper 96 bits of the result\n are the upper 96 bits of `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2275507,"byte_end":2275516,"line_start":340,"line_end":340,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2275517,"byte_end":2275550,"line_start":341,"line_end":341,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9036},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2276038,"byte_end":2276053,"line_start":354,"line_end":354,"column_start":15,"column_end":30},"name":"_mm_cmpunord_ss","qualname":"::coresimd::x86::sse::_mm_cmpunord_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Check if the lowest `f32` of both inputs are unordered. The lowest 32 bits\n of the result will be `0xffffffff` if any of `a.extract(0)` or\n `b.extract(0)` is a NaN, or `0` otherwise. The upper 96 bits of the result\n are the upper 96 bits of `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2275936,"byte_end":2275945,"line_start":351,"line_end":351,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2275946,"byte_end":2275979,"line_start":352,"line_end":352,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9038},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2276402,"byte_end":2276414,"line_start":364,"line_end":364,"column_start":15,"column_end":27},"name":"_mm_cmpeq_ps","qualname":"::coresimd::x86::sse::_mm_cmpeq_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare each of the four floats in `a` to the corresponding element in `b`.\n The result in the output vector will be `0xffffffff` if the input elements\n were equal, or `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2276303,"byte_end":2276312,"line_start":361,"line_end":361,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2276313,"byte_end":2276346,"line_start":362,"line_end":362,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9040},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2276804,"byte_end":2276816,"line_start":374,"line_end":374,"column_start":15,"column_end":27},"name":"_mm_cmplt_ps","qualname":"::coresimd::x86::sse::_mm_cmplt_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare each of the four floats in `a` to the corresponding element in `b`.\n The result in the output vector will be `0xffffffff` if the input element\n in `a` is less than the corresponding element in `b`, or `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2276705,"byte_end":2276714,"line_start":371,"line_end":371,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2276715,"byte_end":2276748,"line_start":372,"line_end":372,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9042},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2277222,"byte_end":2277234,"line_start":385,"line_end":385,"column_start":15,"column_end":27},"name":"_mm_cmple_ps","qualname":"::coresimd::x86::sse::_mm_cmple_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare each of the four floats in `a` to the corresponding element in `b`.\n The result in the output vector will be `0xffffffff` if the input element\n in `a` is less than or equal to the corresponding element in `b`, or `0`\n otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2277123,"byte_end":2277132,"line_start":382,"line_end":382,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2277133,"byte_end":2277166,"line_start":383,"line_end":383,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9044},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2277627,"byte_end":2277639,"line_start":395,"line_end":395,"column_start":15,"column_end":27},"name":"_mm_cmpgt_ps","qualname":"::coresimd::x86::sse::_mm_cmpgt_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare each of the four floats in `a` to the corresponding element in `b`.\n The result in the output vector will be `0xffffffff` if the input element\n in `a` is greater than the corresponding element in `b`, or `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2277528,"byte_end":2277537,"line_start":392,"line_end":392,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2277538,"byte_end":2277571,"line_start":393,"line_end":393,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9046},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2278048,"byte_end":2278060,"line_start":406,"line_end":406,"column_start":15,"column_end":27},"name":"_mm_cmpge_ps","qualname":"::coresimd::x86::sse::_mm_cmpge_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare each of the four floats in `a` to the corresponding element in `b`.\n The result in the output vector will be `0xffffffff` if the input element\n in `a` is greater than or equal to the corresponding element in `b`, or `0`\n otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2277949,"byte_end":2277958,"line_start":403,"line_end":403,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2277959,"byte_end":2277992,"line_start":404,"line_end":404,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9048},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2278415,"byte_end":2278428,"line_start":416,"line_end":416,"column_start":15,"column_end":28},"name":"_mm_cmpneq_ps","qualname":"::coresimd::x86::sse::_mm_cmpneq_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare each of the four floats in `a` to the corresponding element in `b`.\n The result in the output vector will be `0xffffffff` if the input elements\n are *not* equal, or `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2278315,"byte_end":2278324,"line_start":413,"line_end":413,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2278325,"byte_end":2278358,"line_start":414,"line_end":414,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9050},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2278829,"byte_end":2278842,"line_start":427,"line_end":427,"column_start":15,"column_end":28},"name":"_mm_cmpnlt_ps","qualname":"::coresimd::x86::sse::_mm_cmpnlt_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare each of the four floats in `a` to the corresponding element in `b`.\n The result in the output vector will be `0xffffffff` if the input element\n in `a` is *not* less than the corresponding element in `b`, or `0`\n otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2278729,"byte_end":2278738,"line_start":424,"line_end":424,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2278739,"byte_end":2278772,"line_start":425,"line_end":425,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9052},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2279255,"byte_end":2279268,"line_start":438,"line_end":438,"column_start":15,"column_end":28},"name":"_mm_cmpnle_ps","qualname":"::coresimd::x86::sse::_mm_cmpnle_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare each of the four floats in `a` to the corresponding element in `b`.\n The result in the output vector will be `0xffffffff` if the input element\n in `a` is *not* less than or equal to the corresponding element in `b`, or\n `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2279155,"byte_end":2279164,"line_start":435,"line_end":435,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2279165,"byte_end":2279198,"line_start":436,"line_end":436,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9054},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2279672,"byte_end":2279685,"line_start":449,"line_end":449,"column_start":15,"column_end":28},"name":"_mm_cmpngt_ps","qualname":"::coresimd::x86::sse::_mm_cmpngt_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare each of the four floats in `a` to the corresponding element in `b`.\n The result in the output vector will be `0xffffffff` if the input element\n in `a` is *not* greater than the corresponding element in `b`, or `0`\n otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2279572,"byte_end":2279581,"line_start":446,"line_end":446,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2279582,"byte_end":2279615,"line_start":447,"line_end":447,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9056},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2280101,"byte_end":2280114,"line_start":460,"line_end":460,"column_start":15,"column_end":28},"name":"_mm_cmpnge_ps","qualname":"::coresimd::x86::sse::_mm_cmpnge_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare each of the four floats in `a` to the corresponding element in `b`.\n The result in the output vector will be `0xffffffff` if the input element\n in `a` is *not* greater than or equal to the corresponding element in `b`,\n or `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2280001,"byte_end":2280010,"line_start":457,"line_end":457,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2280011,"byte_end":2280044,"line_start":458,"line_end":458,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9058},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2280580,"byte_end":2280593,"line_start":471,"line_end":471,"column_start":15,"column_end":28},"name":"_mm_cmpord_ps","qualname":"::coresimd::x86::sse::_mm_cmpord_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare each of the four floats in `a` to the corresponding element in `b`.\n Returns four floats that have one of two possible bit patterns. The element\n in the output vector will be `0xffffffff` if the input elements in `a` and\n `b` are ordered (i.e., neither of them is a NaN), or 0 otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2280480,"byte_end":2280489,"line_start":468,"line_end":468,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2280490,"byte_end":2280523,"line_start":469,"line_end":469,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9060},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2281067,"byte_end":2281082,"line_start":482,"line_end":482,"column_start":15,"column_end":30},"name":"_mm_cmpunord_ps","qualname":"::coresimd::x86::sse::_mm_cmpunord_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare each of the four floats in `a` to the corresponding element in `b`.\n Returns four floats that have one of two possible bit patterns. The element\n in the output vector will be `0xffffffff` if the input elements in `a` and\n `b` are unordered (i.e., at least on of them is a NaN), or 0 otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2280965,"byte_end":2280974,"line_start":479,"line_end":479,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2280975,"byte_end":2281008,"line_start":480,"line_end":480,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9062},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2281360,"byte_end":2281373,"line_start":491,"line_end":491,"column_start":15,"column_end":28},"name":"_mm_comieq_ss","qualname":"::coresimd::x86::sse::_mm_comieq_ss","value":"fn (a: __m128, b: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns\n `1` if they are equal, or `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2281262,"byte_end":2281271,"line_start":488,"line_end":488,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2281272,"byte_end":2281305,"line_start":489,"line_end":489,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9064},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2281683,"byte_end":2281696,"line_start":500,"line_end":500,"column_start":15,"column_end":28},"name":"_mm_comilt_ss","qualname":"::coresimd::x86::sse::_mm_comilt_ss","value":"fn (a: __m128, b: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns\n `1` if the value from `a` is less than the one from `b`, or `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2281585,"byte_end":2281594,"line_start":497,"line_end":497,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2281595,"byte_end":2281628,"line_start":498,"line_end":498,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9066},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2282022,"byte_end":2282035,"line_start":510,"line_end":510,"column_start":15,"column_end":28},"name":"_mm_comile_ss","qualname":"::coresimd::x86::sse::_mm_comile_ss","value":"fn (a: __m128, b: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns\n `1` if the value from `a` is less than or equal to the one from `b`, or `0`\n otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2281924,"byte_end":2281933,"line_start":507,"line_end":507,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2281934,"byte_end":2281967,"line_start":508,"line_end":508,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9068},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2282352,"byte_end":2282365,"line_start":520,"line_end":520,"column_start":15,"column_end":28},"name":"_mm_comigt_ss","qualname":"::coresimd::x86::sse::_mm_comigt_ss","value":"fn (a: __m128, b: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns\n `1` if the value from `a` is greater than the one from `b`, or `0`\n otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2282254,"byte_end":2282263,"line_start":517,"line_end":517,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2282264,"byte_end":2282297,"line_start":518,"line_end":518,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9070},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2282694,"byte_end":2282707,"line_start":530,"line_end":530,"column_start":15,"column_end":28},"name":"_mm_comige_ss","qualname":"::coresimd::x86::sse::_mm_comige_ss","value":"fn (a: __m128, b: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns\n `1` if the value from `a` is greater than or equal to the one from `b`, or\n `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2282596,"byte_end":2282605,"line_start":527,"line_end":527,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2282606,"byte_end":2282639,"line_start":528,"line_end":528,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9072},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2282989,"byte_end":2283003,"line_start":539,"line_end":539,"column_start":15,"column_end":29},"name":"_mm_comineq_ss","qualname":"::coresimd::x86::sse::_mm_comineq_ss","value":"fn (a: __m128, b: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns\n `1` if they are *not* equal, or `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2282891,"byte_end":2282900,"line_start":536,"line_end":536,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2282901,"byte_end":2282934,"line_start":537,"line_end":537,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9074},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2283366,"byte_end":2283380,"line_start":549,"line_end":549,"column_start":15,"column_end":29},"name":"_mm_ucomieq_ss","qualname":"::coresimd::x86::sse::_mm_ucomieq_ss","value":"fn (a: __m128, b: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns\n `1` if they are equal, or `0` otherwise. This instruction will not signal\n an exception if either argument is a quiet NaN.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2283267,"byte_end":2283276,"line_start":546,"line_end":546,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2283277,"byte_end":2283310,"line_start":547,"line_end":547,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9076},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2283781,"byte_end":2283795,"line_start":560,"line_end":560,"column_start":15,"column_end":29},"name":"_mm_ucomilt_ss","qualname":"::coresimd::x86::sse::_mm_ucomilt_ss","value":"fn (a: __m128, b: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns\n `1` if the value from `a` is less than the one from `b`, or `0` otherwise.\n This instruction will not signal an exception if either argument is a quiet\n NaN.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2283682,"byte_end":2283691,"line_start":557,"line_end":557,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2283692,"byte_end":2283725,"line_start":558,"line_end":558,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9078},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2284208,"byte_end":2284222,"line_start":571,"line_end":571,"column_start":15,"column_end":29},"name":"_mm_ucomile_ss","qualname":"::coresimd::x86::sse::_mm_ucomile_ss","value":"fn (a: __m128, b: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns\n `1` if the value from `a` is less than or equal to the one from `b`, or `0`\n otherwise. This instruction will not signal an exception if either argument\n is a quiet NaN.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2284109,"byte_end":2284118,"line_start":568,"line_end":568,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2284119,"byte_end":2284152,"line_start":569,"line_end":569,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9080},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2284626,"byte_end":2284640,"line_start":582,"line_end":582,"column_start":15,"column_end":29},"name":"_mm_ucomigt_ss","qualname":"::coresimd::x86::sse::_mm_ucomigt_ss","value":"fn (a: __m128, b: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns\n `1` if the value from `a` is greater than the one from `b`, or `0`\n otherwise. This instruction will not signal an exception if either argument\n is a quiet NaN.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2284527,"byte_end":2284536,"line_start":579,"line_end":579,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2284537,"byte_end":2284570,"line_start":580,"line_end":580,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9082},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2285056,"byte_end":2285070,"line_start":593,"line_end":593,"column_start":15,"column_end":29},"name":"_mm_ucomige_ss","qualname":"::coresimd::x86::sse::_mm_ucomige_ss","value":"fn (a: __m128, b: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns\n `1` if the value from `a` is greater than or equal to the one from `b`, or\n `0` otherwise. This instruction will not signal an exception if either\n argument is a quiet NaN.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2284957,"byte_end":2284966,"line_start":590,"line_end":590,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2284967,"byte_end":2285000,"line_start":591,"line_end":591,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9084},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2285439,"byte_end":2285454,"line_start":603,"line_end":603,"column_start":15,"column_end":30},"name":"_mm_ucomineq_ss","qualname":"::coresimd::x86::sse::_mm_ucomineq_ss","value":"fn (a: __m128, b: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare two 32-bit floats from the low-order bits of `a` and `b`. Returns\n `1` if they are *not* equal, or `0` otherwise. This instruction will not\n signal an exception if either argument is a quiet NaN.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2285340,"byte_end":2285349,"line_start":600,"line_end":600,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2285350,"byte_end":2285383,"line_start":601,"line_end":601,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9086},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2286057,"byte_end":2286071,"line_start":618,"line_end":618,"column_start":15,"column_end":29},"name":"_mm_cvtss_si32","qualname":"::coresimd::x86::sse::_mm_cvtss_si32","value":"fn (a: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Convert the lowest 32 bit float in the input vector to a 32 bit integer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2285957,"byte_end":2285966,"line_start":615,"line_end":615,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2285967,"byte_end":2286000,"line_start":616,"line_end":616,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9088},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2286269,"byte_end":2286282,"line_start":626,"line_end":626,"column_start":15,"column_end":28},"name":"_mm_cvt_ss2si","qualname":"::coresimd::x86::sse::_mm_cvt_ss2si","value":"fn (a: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Alias for [`_mm_cvtss_si32`](fn._mm_cvtss_si32.html).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2286169,"byte_end":2286178,"line_start":623,"line_end":623,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2286179,"byte_end":2286212,"line_start":624,"line_end":624,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9090},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2286906,"byte_end":2286921,"line_start":643,"line_end":643,"column_start":15,"column_end":30},"name":"_mm_cvttss_si32","qualname":"::coresimd::x86::sse::_mm_cvttss_si32","value":"fn (a: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Convert the lowest 32 bit float in the input vector to a 32 bit integer\n with\n truncation.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2286805,"byte_end":2286814,"line_start":640,"line_end":640,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2286815,"byte_end":2286848,"line_start":641,"line_end":641,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9092},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2287123,"byte_end":2287137,"line_start":651,"line_end":651,"column_start":15,"column_end":29},"name":"_mm_cvtt_ss2si","qualname":"::coresimd::x86::sse::_mm_cvtt_ss2si","value":"fn (a: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Alias for [`_mm_cvttss_si32`](fn._mm_cvttss_si32.html).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2287022,"byte_end":2287031,"line_start":648,"line_end":648,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2287032,"byte_end":2287065,"line_start":649,"line_end":649,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9094},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2287425,"byte_end":2287438,"line_start":660,"line_end":660,"column_start":15,"column_end":28},"name":"_mm_cvtss_f32","qualname":"::coresimd::x86::sse::_mm_cvtss_f32","value":"fn (a: __m128) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Extract the lowest 32 bit float from the input vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2287243,"byte_end":2287252,"line_start":656,"line_end":656,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2287253,"byte_end":2287286,"line_start":657,"line_end":657,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9096},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2287833,"byte_end":2287847,"line_start":672,"line_end":672,"column_start":15,"column_end":29},"name":"_mm_cvtsi32_ss","qualname":"::coresimd::x86::sse::_mm_cvtsi32_ss","value":"fn (a: __m128, b: i32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Convert a 32 bit integer to a 32 bit float. The result vector is the input\n vector `a` with the lowest 32 bit float replaced by the converted integer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2287733,"byte_end":2287742,"line_start":669,"line_end":669,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2287743,"byte_end":2287776,"line_start":670,"line_end":670,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9098},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2288059,"byte_end":2288072,"line_start":680,"line_end":680,"column_start":15,"column_end":28},"name":"_mm_cvt_si2ss","qualname":"::coresimd::x86::sse::_mm_cvt_si2ss","value":"fn (a: __m128, b: i32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Alias for [`_mm_cvtsi32_ss`](fn._mm_cvtsi32_ss.html).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2287959,"byte_end":2287968,"line_start":677,"line_end":677,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2287969,"byte_end":2288002,"line_start":678,"line_end":678,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9100},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2288319,"byte_end":2288329,"line_start":689,"line_end":689,"column_start":15,"column_end":25},"name":"_mm_set_ss","qualname":"::coresimd::x86::sse::_mm_set_ss","value":"fn (a: f32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Construct a `__m128` with the lowest element set to `a` and the rest set to\n zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2288222,"byte_end":2288231,"line_start":686,"line_end":686,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2288232,"byte_end":2288265,"line_start":687,"line_end":687,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9102},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2288534,"byte_end":2288545,"line_start":697,"line_end":697,"column_start":15,"column_end":26},"name":"_mm_set1_ps","qualname":"::coresimd::x86::sse::_mm_set1_ps","value":"fn (a: f32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Construct a `__m128` with all element set to `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2288436,"byte_end":2288445,"line_start":694,"line_end":694,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2288446,"byte_end":2288479,"line_start":695,"line_end":695,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9104},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2288741,"byte_end":2288752,"line_start":705,"line_end":705,"column_start":15,"column_end":26},"name":"_mm_set_ps1","qualname":"::coresimd::x86::sse::_mm_set_ps1","value":"fn (a: f32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Alias for [`_mm_set1_ps`](fn._mm_set1_ps.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2288643,"byte_end":2288652,"line_start":702,"line_end":702,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2288653,"byte_end":2288686,"line_start":703,"line_end":703,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9106},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2289448,"byte_end":2289458,"line_start":729,"line_end":729,"column_start":15,"column_end":25},"name":"_mm_set_ps","qualname":"::coresimd::x86::sse::_mm_set_ps","value":"fn (a: f32, b: f32, c: f32, d: f32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Construct a `__m128` from four floating point values highest to lowest.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2289348,"byte_end":2289357,"line_start":726,"line_end":726,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2289358,"byte_end":2289391,"line_start":727,"line_end":727,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9108},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2290090,"byte_end":2290101,"line_start":746,"line_end":746,"column_start":15,"column_end":26},"name":"_mm_setr_ps","qualname":"::coresimd::x86::sse::_mm_setr_ps","value":"fn (a: f32, b: f32, c: f32, d: f32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Construct a `__m128` from four floating point values lowest to highest.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2289823,"byte_end":2289832,"line_start":741,"line_end":741,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2289833,"byte_end":2289866,"line_start":742,"line_end":742,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9110},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2290333,"byte_end":2290347,"line_start":754,"line_end":754,"column_start":15,"column_end":29},"name":"_mm_setzero_ps","qualname":"::coresimd::x86::sse::_mm_setzero_ps","value":"fn () -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Construct a `__m128` with all elements initialized to zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2290236,"byte_end":2290245,"line_start":751,"line_end":751,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2290246,"byte_end":2290279,"line_start":752,"line_end":752,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9112},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2290798,"byte_end":2290812,"line_start":767,"line_end":767,"column_start":15,"column_end":29},"name":"_mm_shuffle_ps","qualname":"::coresimd::x86::sse::_mm_shuffle_ps","value":"fn (a: __m128, b: __m128, mask: u32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Shuffle packed single-precision (32-bit) floating-point elements in `a` and\n `b` using `mask`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2290658,"byte_end":2290667,"line_start":763,"line_end":763,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2290668,"byte_end":2290701,"line_start":764,"line_end":764,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2290752,"byte_end":2290783,"line_start":766,"line_end":766,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9122},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2292477,"byte_end":2292492,"line_start":818,"line_end":818,"column_start":15,"column_end":30},"name":"_mm_unpackhi_ps","qualname":"::coresimd::x86::sse::_mm_unpackhi_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave single-precision (32-bit) floating-point elements\n from the higher half of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2292377,"byte_end":2292386,"line_start":815,"line_end":815,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2292387,"byte_end":2292420,"line_start":816,"line_end":816,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9124},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2292784,"byte_end":2292799,"line_start":827,"line_end":827,"column_start":15,"column_end":30},"name":"_mm_unpacklo_ps","qualname":"::coresimd::x86::sse::_mm_unpacklo_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave single-precision (32-bit) floating-point elements\n from the lower half of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2292684,"byte_end":2292693,"line_start":824,"line_end":824,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2292694,"byte_end":2292727,"line_start":825,"line_end":825,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9126},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2293076,"byte_end":2293089,"line_start":836,"line_end":836,"column_start":15,"column_end":28},"name":"_mm_movehl_ps","qualname":"::coresimd::x86::sse::_mm_movehl_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Combine higher half of `a` and `b`. The highwe half of `b` occupies the\n lower half of result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2292977,"byte_end":2292986,"line_start":833,"line_end":833,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2292987,"byte_end":2293020,"line_start":834,"line_end":834,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9128},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2293433,"byte_end":2293446,"line_start":846,"line_end":846,"column_start":15,"column_end":28},"name":"_mm_movelh_ps","qualname":"::coresimd::x86::sse::_mm_movelh_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Combine lower half of `a` and `b`. The lower half of `b` occupies the\n higher half of result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2293334,"byte_end":2293343,"line_start":843,"line_end":843,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2293344,"byte_end":2293377,"line_start":844,"line_end":844,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9130},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2293807,"byte_end":2293822,"line_start":857,"line_end":857,"column_start":15,"column_end":30},"name":"_mm_movemask_ps","qualname":"::coresimd::x86::sse::_mm_movemask_ps","value":"fn (a: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Return a mask of the most significant bit of each element in `a`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2293707,"byte_end":2293716,"line_start":854,"line_end":854,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2293717,"byte_end":2293750,"line_start":855,"line_end":855,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9132},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2295722,"byte_end":2295734,"line_start":911,"line_end":911,"column_start":15,"column_end":27},"name":"_mm_loadh_pi","qualname":"::coresimd::x86::sse::_mm_loadh_pi","value":"fn (a: __m128, p: *const __m64) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Set the upper two single-precision floating-point values with 64 bits of\n data loaded from the address `p`; the lower two values are passed through\n from `a`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2294992,"byte_end":2295001,"line_start":898,"line_end":898,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2295002,"byte_end":2295035,"line_start":899,"line_end":899,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9134},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2297604,"byte_end":2297616,"line_start":965,"line_end":965,"column_start":15,"column_end":27},"name":"_mm_loadl_pi","qualname":"::coresimd::x86::sse::_mm_loadl_pi","value":"fn (a: __m128, p: *const __m64) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Load two floats from `p` into the lower half of a `__m128`. The upper half\n is copied from the upper half of `a`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2296995,"byte_end":2297004,"line_start":953,"line_end":953,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2297005,"byte_end":2297038,"line_start":954,"line_end":954,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9136},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2298062,"byte_end":2298073,"line_start":979,"line_end":979,"column_start":15,"column_end":26},"name":"_mm_load_ss","qualname":"::coresimd::x86::sse::_mm_load_ss","value":"fn (p: *const f32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Construct a `__m128` with the lowest element read from `p` and the other\n elements set to zero.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2297965,"byte_end":2297974,"line_start":976,"line_end":976,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2297975,"byte_end":2298008,"line_start":977,"line_end":977,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9138},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2298410,"byte_end":2298422,"line_start":991,"line_end":991,"column_start":15,"column_end":27},"name":"_mm_load1_ps","qualname":"::coresimd::x86::sse::_mm_load1_ps","value":"fn (p: *const f32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Construct a `__m128` by duplicating the value read from `p` into all\n elements.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2298313,"byte_end":2298322,"line_start":988,"line_end":988,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2298323,"byte_end":2298356,"line_start":989,"line_end":989,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9140},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2298642,"byte_end":2298654,"line_start":1000,"line_end":1000,"column_start":15,"column_end":27},"name":"_mm_load_ps1","qualname":"::coresimd::x86::sse::_mm_load_ps1","value":"fn (p: *const f32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Alias for [`_mm_load1_ps`](fn._mm_load1_ps.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2298545,"byte_end":2298554,"line_start":997,"line_end":997,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2298555,"byte_end":2298588,"line_start":998,"line_end":998,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9142},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2299160,"byte_end":2299171,"line_start":1015,"line_end":1015,"column_start":15,"column_end":26},"name":"_mm_load_ps","qualname":"::coresimd::x86::sse::_mm_load_ps","value":"fn (p: *const f32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Load four `f32` values from *aligned* memory into a `__m128`. If the\n pointer is not aligned to a 128-bit boundary (16 bytes) a general\n protection fault will be triggered (fatal program crash).","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2299062,"byte_end":2299071,"line_start":1012,"line_end":1012,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2299072,"byte_end":2299105,"line_start":1013,"line_end":1013,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9144},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2299579,"byte_end":2299591,"line_start":1029,"line_end":1029,"column_start":15,"column_end":27},"name":"_mm_loadu_ps","qualname":"::coresimd::x86::sse::_mm_loadu_ps","value":"fn (p: *const f32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Load four `f32` values from memory into a `__m128`. There are no\n restrictions\n on memory alignment. For aligned memory\n [`_mm_load_ps`](fn._mm_load_ps.html)\n may be faster.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2299481,"byte_end":2299490,"line_start":1026,"line_end":1026,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2299491,"byte_end":2299524,"line_start":1027,"line_end":1027,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9146},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2300607,"byte_end":2300619,"line_start":1063,"line_end":1063,"column_start":15,"column_end":27},"name":"_mm_loadr_ps","qualname":"::coresimd::x86::sse::_mm_loadr_ps","value":"fn (p: *const f32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Load four `f32` values from aligned memory into a `__m128` in reverse\n order.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2300509,"byte_end":2300518,"line_start":1060,"line_end":1060,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2300519,"byte_end":2300552,"line_start":1061,"line_end":1061,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9148},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2301236,"byte_end":2301249,"line_start":1079,"line_end":1079,"column_start":15,"column_end":28},"name":"_mm_storeh_pi","qualname":"::coresimd::x86::sse::_mm_storeh_pi","value":"fn (p: *mut __m64, a: __m128) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store the upper half of `a` (64 bits) into memory.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2300921,"byte_end":2300930,"line_start":1072,"line_end":1072,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2300931,"byte_end":2300964,"line_start":1073,"line_end":1073,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9150},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2302271,"byte_end":2302284,"line_start":1107,"line_end":1107,"column_start":15,"column_end":28},"name":"_mm_storel_pi","qualname":"::coresimd::x86::sse::_mm_storel_pi","value":"fn (p: *mut __m64, a: __m128) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store the lower half of `a` (64 bits) into memory.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2302027,"byte_end":2302036,"line_start":1102,"line_end":1102,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2302037,"byte_end":2302070,"line_start":1103,"line_end":1103,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9152},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2302942,"byte_end":2302954,"line_start":1130,"line_end":1130,"column_start":15,"column_end":27},"name":"_mm_store_ss","qualname":"::coresimd::x86::sse::_mm_store_ss","value":"fn (p: *mut f32, a: __m128) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store the lowest 32 bit float of `a` into memory.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2302845,"byte_end":2302854,"line_start":1127,"line_end":1127,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2302855,"byte_end":2302888,"line_start":1128,"line_end":1128,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9154},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2303590,"byte_end":2303603,"line_start":1153,"line_end":1153,"column_start":15,"column_end":28},"name":"_mm_store1_ps","qualname":"::coresimd::x86::sse::_mm_store1_ps","value":"fn (p: *mut f32, a: __m128) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store the lowest 32 bit float of `a` repeated four times into *aligned*\n memory.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2303492,"byte_end":2303501,"line_start":1150,"line_end":1150,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2303502,"byte_end":2303535,"line_start":1151,"line_end":1151,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9156},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2303870,"byte_end":2303883,"line_start":1162,"line_end":1162,"column_start":15,"column_end":28},"name":"_mm_store_ps1","qualname":"::coresimd::x86::sse::_mm_store_ps1","value":"fn (p: *mut f32, a: __m128) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Alias for [`_mm_store1_ps`](fn._mm_store1_ps.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2303772,"byte_end":2303781,"line_start":1159,"line_end":1159,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2303782,"byte_end":2303815,"line_start":1160,"line_end":1160,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9158},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2304385,"byte_end":2304397,"line_start":1178,"line_end":1178,"column_start":15,"column_end":27},"name":"_mm_store_ps","qualname":"::coresimd::x86::sse::_mm_store_ps","value":"fn (p: *mut f32, a: __m128) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store four 32-bit floats into *aligned* memory.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2304287,"byte_end":2304296,"line_start":1175,"line_end":1175,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2304297,"byte_end":2304330,"line_start":1176,"line_end":1176,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9160},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2304787,"byte_end":2304800,"line_start":1190,"line_end":1190,"column_start":15,"column_end":28},"name":"_mm_storeu_ps","qualname":"::coresimd::x86::sse::_mm_storeu_ps","value":"fn (p: *mut f32, a: __m128) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store four 32-bit floats into memory. There are no restrictions on memory\n alignment. For aligned memory [`_mm_store_ps`](fn._mm_store_ps.html) may be\n faster.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2304689,"byte_end":2304698,"line_start":1187,"line_end":1187,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2304699,"byte_end":2304732,"line_start":1188,"line_end":1188,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9162},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2305541,"byte_end":2305554,"line_start":1215,"line_end":1215,"column_start":15,"column_end":28},"name":"_mm_storer_ps","qualname":"::coresimd::x86::sse::_mm_storer_ps","value":"fn (p: *mut f32, a: __m128) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store four 32-bit floats into *aligned* memory in reverse order.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2305443,"byte_end":2305452,"line_start":1212,"line_end":1212,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2305453,"byte_end":2305486,"line_start":1213,"line_end":1213,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9164},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2305980,"byte_end":2305991,"line_start":1230,"line_end":1230,"column_start":15,"column_end":26},"name":"_mm_move_ss","qualname":"::coresimd::x86::sse::_mm_move_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Return a `__m128` with the first component from `b` and the remaining\n components from `a`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2305883,"byte_end":2305892,"line_start":1227,"line_end":1227,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2305893,"byte_end":2305926,"line_start":1228,"line_end":1228,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9166},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2306465,"byte_end":2306475,"line_start":1243,"line_end":1243,"column_start":15,"column_end":25},"name":"_mm_sfence","qualname":"::coresimd::x86::sse::_mm_sfence","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a serializing operation on all store-to-memory instructions that\n were issued prior to this instruction.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2306367,"byte_end":2306376,"line_start":1240,"line_end":1240,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2306377,"byte_end":2306410,"line_start":1241,"line_end":1241,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9168},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2306732,"byte_end":2306742,"line_start":1253,"line_end":1253,"column_start":15,"column_end":25},"name":"_mm_getcsr","qualname":"::coresimd::x86::sse::_mm_getcsr","value":"fn () -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the unsigned 32-bit value of the MXCSR control and status register.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2306633,"byte_end":2306642,"line_start":1250,"line_end":1250,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2306643,"byte_end":2306676,"line_start":1251,"line_end":1251,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9170},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2311600,"byte_end":2311610,"line_start":1387,"line_end":1387,"column_start":15,"column_end":25},"name":"_mm_setcsr","qualname":"::coresimd::x86::sse::_mm_setcsr","value":"fn (val: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the MXCSR register with the 32-bit unsigned integer value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2311501,"byte_end":2311510,"line_start":1384,"line_end":1384,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2311511,"byte_end":2311544,"line_start":1385,"line_end":1385,"column_start":1,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":9172},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2311723,"byte_end":2311741,"line_start":1392,"line_end":1392,"column_start":11,"column_end":29},"name":"_MM_EXCEPT_INVALID","qualname":"::coresimd::x86::sse::_MM_EXCEPT_INVALID","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9174},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2311810,"byte_end":2311827,"line_start":1394,"line_end":1394,"column_start":11,"column_end":28},"name":"_MM_EXCEPT_DENORM","qualname":"::coresimd::x86::sse::_MM_EXCEPT_DENORM","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9176},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2311896,"byte_end":2311915,"line_start":1396,"line_end":1396,"column_start":11,"column_end":30},"name":"_MM_EXCEPT_DIV_ZERO","qualname":"::coresimd::x86::sse::_MM_EXCEPT_DIV_ZERO","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9178},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2311984,"byte_end":2312003,"line_start":1398,"line_end":1398,"column_start":11,"column_end":30},"name":"_MM_EXCEPT_OVERFLOW","qualname":"::coresimd::x86::sse::_MM_EXCEPT_OVERFLOW","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9180},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2312072,"byte_end":2312092,"line_start":1400,"line_end":1400,"column_start":11,"column_end":31},"name":"_MM_EXCEPT_UNDERFLOW","qualname":"::coresimd::x86::sse::_MM_EXCEPT_UNDERFLOW","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9182},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2312161,"byte_end":2312179,"line_start":1402,"line_end":1402,"column_start":11,"column_end":29},"name":"_MM_EXCEPT_INEXACT","qualname":"::coresimd::x86::sse::_MM_EXCEPT_INEXACT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9184},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2312274,"byte_end":2312289,"line_start":1404,"line_end":1404,"column_start":11,"column_end":26},"name":"_MM_EXCEPT_MASK","qualname":"::coresimd::x86::sse::_MM_EXCEPT_MASK","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_MM_GET_EXCEPTION_STATE`](fn._MM_GET_EXCEPTION_STATE.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9186},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2312359,"byte_end":2312375,"line_start":1407,"line_end":1407,"column_start":11,"column_end":27},"name":"_MM_MASK_INVALID","qualname":"::coresimd::x86::sse::_MM_MASK_INVALID","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9188},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2312444,"byte_end":2312459,"line_start":1409,"line_end":1409,"column_start":11,"column_end":26},"name":"_MM_MASK_DENORM","qualname":"::coresimd::x86::sse::_MM_MASK_DENORM","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9190},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2312528,"byte_end":2312545,"line_start":1411,"line_end":1411,"column_start":11,"column_end":28},"name":"_MM_MASK_DIV_ZERO","qualname":"::coresimd::x86::sse::_MM_MASK_DIV_ZERO","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9192},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2312614,"byte_end":2312631,"line_start":1413,"line_end":1413,"column_start":11,"column_end":28},"name":"_MM_MASK_OVERFLOW","qualname":"::coresimd::x86::sse::_MM_MASK_OVERFLOW","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9194},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2312700,"byte_end":2312718,"line_start":1415,"line_end":1415,"column_start":11,"column_end":29},"name":"_MM_MASK_UNDERFLOW","qualname":"::coresimd::x86::sse::_MM_MASK_UNDERFLOW","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9196},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2312787,"byte_end":2312803,"line_start":1417,"line_end":1417,"column_start":11,"column_end":27},"name":"_MM_MASK_INEXACT","qualname":"::coresimd::x86::sse::_MM_MASK_INEXACT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9198},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2312896,"byte_end":2312909,"line_start":1419,"line_end":1419,"column_start":11,"column_end":24},"name":"_MM_MASK_MASK","qualname":"::coresimd::x86::sse::_MM_MASK_MASK","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_MM_GET_EXCEPTION_MASK`](fn._MM_GET_EXCEPTION_MASK.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9200},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2312979,"byte_end":2312996,"line_start":1422,"line_end":1422,"column_start":11,"column_end":28},"name":"_MM_ROUND_NEAREST","qualname":"::coresimd::x86::sse::_MM_ROUND_NEAREST","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9202},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2313065,"byte_end":2313079,"line_start":1424,"line_end":1424,"column_start":11,"column_end":25},"name":"_MM_ROUND_DOWN","qualname":"::coresimd::x86::sse::_MM_ROUND_DOWN","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9204},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2313148,"byte_end":2313160,"line_start":1426,"line_end":1426,"column_start":11,"column_end":23},"name":"_MM_ROUND_UP","qualname":"::coresimd::x86::sse::_MM_ROUND_UP","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9206},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2313229,"byte_end":2313250,"line_start":1428,"line_end":1428,"column_start":11,"column_end":32},"name":"_MM_ROUND_TOWARD_ZERO","qualname":"::coresimd::x86::sse::_MM_ROUND_TOWARD_ZERO","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9208},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2313342,"byte_end":2313356,"line_start":1431,"line_end":1431,"column_start":11,"column_end":25},"name":"_MM_ROUND_MASK","qualname":"::coresimd::x86::sse::_MM_ROUND_MASK","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_MM_GET_ROUNDING_MODE`](fn._MM_GET_ROUNDING_MODE.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9210},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2313452,"byte_end":2313471,"line_start":1434,"line_end":1434,"column_start":11,"column_end":30},"name":"_MM_FLUSH_ZERO_MASK","qualname":"::coresimd::x86::sse::_MM_FLUSH_ZERO_MASK","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_MM_GET_FLUSH_ZERO_MODE`](fn._MM_GET_FLUSH_ZERO_MODE.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9212},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2313540,"byte_end":2313557,"line_start":1436,"line_end":1436,"column_start":11,"column_end":28},"name":"_MM_FLUSH_ZERO_ON","qualname":"::coresimd::x86::sse::_MM_FLUSH_ZERO_ON","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9214},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2313626,"byte_end":2313644,"line_start":1438,"line_end":1438,"column_start":11,"column_end":29},"name":"_MM_FLUSH_ZERO_OFF","qualname":"::coresimd::x86::sse::_MM_FLUSH_ZERO_OFF","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":9216},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2313787,"byte_end":2313809,"line_start":1444,"line_end":1444,"column_start":15,"column_end":37},"name":"_MM_GET_EXCEPTION_MASK","qualname":"::coresimd::x86::sse::_MM_GET_EXCEPTION_MASK","value":"fn () -> u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2313704,"byte_end":2313713,"line_start":1441,"line_end":1441,"column_start":1,"column_end":10}},{"value":"allow(non_snake_case)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2313714,"byte_end":2313738,"line_start":1442,"line_end":1442,"column_start":1,"column_end":25}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2313739,"byte_end":2313772,"line_start":1443,"line_end":1443,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9218},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2313983,"byte_end":2314006,"line_start":1452,"line_end":1452,"column_start":15,"column_end":38},"name":"_MM_GET_EXCEPTION_STATE","qualname":"::coresimd::x86::sse::_MM_GET_EXCEPTION_STATE","value":"fn () -> u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2313900,"byte_end":2313909,"line_start":1449,"line_end":1449,"column_start":1,"column_end":10}},{"value":"allow(non_snake_case)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2313910,"byte_end":2313934,"line_start":1450,"line_end":1450,"column_start":1,"column_end":25}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2313935,"byte_end":2313968,"line_start":1451,"line_end":1451,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9220},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314182,"byte_end":2314205,"line_start":1460,"line_end":1460,"column_start":15,"column_end":38},"name":"_MM_GET_FLUSH_ZERO_MODE","qualname":"::coresimd::x86::sse::_MM_GET_FLUSH_ZERO_MODE","value":"fn () -> u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314099,"byte_end":2314108,"line_start":1457,"line_end":1457,"column_start":1,"column_end":10}},{"value":"allow(non_snake_case)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314109,"byte_end":2314133,"line_start":1458,"line_end":1458,"column_start":1,"column_end":25}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314134,"byte_end":2314167,"line_start":1459,"line_end":1459,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9222},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314385,"byte_end":2314406,"line_start":1468,"line_end":1468,"column_start":15,"column_end":36},"name":"_MM_GET_ROUNDING_MODE","qualname":"::coresimd::x86::sse::_MM_GET_ROUNDING_MODE","value":"fn () -> u32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314302,"byte_end":2314311,"line_start":1465,"line_end":1465,"column_start":1,"column_end":10}},{"value":"allow(non_snake_case)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314312,"byte_end":2314336,"line_start":1466,"line_end":1466,"column_start":1,"column_end":25}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314337,"byte_end":2314370,"line_start":1467,"line_end":1467,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9224},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314581,"byte_end":2314603,"line_start":1476,"line_end":1476,"column_start":15,"column_end":37},"name":"_MM_SET_EXCEPTION_MASK","qualname":"::coresimd::x86::sse::_MM_SET_EXCEPTION_MASK","value":"fn (x: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314498,"byte_end":2314507,"line_start":1473,"line_end":1473,"column_start":1,"column_end":10}},{"value":"allow(non_snake_case)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314508,"byte_end":2314532,"line_start":1474,"line_end":1474,"column_start":1,"column_end":25}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314533,"byte_end":2314566,"line_start":1475,"line_end":1475,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9226},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314795,"byte_end":2314818,"line_start":1484,"line_end":1484,"column_start":15,"column_end":38},"name":"_MM_SET_EXCEPTION_STATE","qualname":"::coresimd::x86::sse::_MM_SET_EXCEPTION_STATE","value":"fn (x: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314712,"byte_end":2314721,"line_start":1481,"line_end":1481,"column_start":1,"column_end":10}},{"value":"allow(non_snake_case)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314722,"byte_end":2314746,"line_start":1482,"line_end":1482,"column_start":1,"column_end":25}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314747,"byte_end":2314780,"line_start":1483,"line_end":1483,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9228},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2315012,"byte_end":2315035,"line_start":1492,"line_end":1492,"column_start":15,"column_end":38},"name":"_MM_SET_FLUSH_ZERO_MODE","qualname":"::coresimd::x86::sse::_MM_SET_FLUSH_ZERO_MODE","value":"fn (x: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314929,"byte_end":2314938,"line_start":1489,"line_end":1489,"column_start":1,"column_end":10}},{"value":"allow(non_snake_case)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314939,"byte_end":2314963,"line_start":1490,"line_end":1490,"column_start":1,"column_end":25}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2314964,"byte_end":2314997,"line_start":1491,"line_end":1491,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9230},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2315294,"byte_end":2315315,"line_start":1502,"line_end":1502,"column_start":15,"column_end":36},"name":"_MM_SET_ROUNDING_MODE","qualname":"::coresimd::x86::sse::_MM_SET_ROUNDING_MODE","value":"fn (x: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_setcsr`](fn._mm_setcsr.html)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2315211,"byte_end":2315220,"line_start":1499,"line_end":1499,"column_start":1,"column_end":10}},{"value":"allow(non_snake_case)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2315221,"byte_end":2315245,"line_start":1500,"line_end":1500,"column_start":1,"column_end":25}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2315246,"byte_end":2315279,"line_start":1501,"line_end":1501,"column_start":1,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":9232},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2315440,"byte_end":2315451,"line_start":1507,"line_end":1507,"column_start":11,"column_end":22},"name":"_MM_HINT_T0","qualname":"::coresimd::x86::sse::_MM_HINT_T0","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_prefetch`](fn._mm_prefetch.html).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9234},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2315521,"byte_end":2315532,"line_start":1510,"line_end":1510,"column_start":11,"column_end":22},"name":"_MM_HINT_T1","qualname":"::coresimd::x86::sse::_MM_HINT_T1","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_prefetch`](fn._mm_prefetch.html).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9236},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2315602,"byte_end":2315613,"line_start":1513,"line_end":1513,"column_start":11,"column_end":22},"name":"_MM_HINT_T2","qualname":"::coresimd::x86::sse::_MM_HINT_T2","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_prefetch`](fn._mm_prefetch.html).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9238},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2315683,"byte_end":2315695,"line_start":1516,"line_end":1516,"column_start":11,"column_end":23},"name":"_MM_HINT_NTA","qualname":"::coresimd::x86::sse::_MM_HINT_NTA","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" See [`_mm_prefetch`](fn._mm_prefetch.html).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":9240},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2317501,"byte_end":2317513,"line_start":1561,"line_end":1561,"column_start":15,"column_end":27},"name":"_mm_prefetch","qualname":"::coresimd::x86::sse::_mm_prefetch","value":"fn (p: *const i8, strategy: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fetch the cache line that contains address `p` using the given `strategy`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2317137,"byte_end":2317146,"line_start":1554,"line_end":1554,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2317147,"byte_end":2317180,"line_start":1555,"line_end":1555,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2317455,"byte_end":2317486,"line_start":1560,"line_end":1560,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9244},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2318224,"byte_end":2318240,"line_start":1582,"line_end":1582,"column_start":15,"column_end":31},"name":"_mm_undefined_ps","qualname":"::coresimd::x86::sse::_mm_undefined_ps","value":"fn () -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Return vector of type __m128 with undefined elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2318166,"byte_end":2318175,"line_start":1580,"line_end":1580,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2318176,"byte_end":2318209,"line_start":1581,"line_end":1581,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9246},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2318545,"byte_end":2318562,"line_start":1595,"line_end":1595,"column_start":15,"column_end":32},"name":"_MM_TRANSPOSE4_PS","qualname":"::coresimd::x86::sse::_MM_TRANSPOSE4_PS","value":"fn (row0: &mut __m128, row1: &mut __m128, row2: &mut __m128, row3: &mut __m128) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Transpose the 4x4 matrix formed by 4 rows of __m128 in place.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2318462,"byte_end":2318471,"line_start":1592,"line_end":1592,"column_start":1,"column_end":10}},{"value":"allow(non_snake_case)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2318472,"byte_end":2318496,"line_start":1593,"line_end":1593,"column_start":1,"column_end":25}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2318497,"byte_end":2318530,"line_start":1594,"line_end":1594,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9250},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2323880,"byte_end":2323893,"line_start":1726,"line_end":1726,"column_start":15,"column_end":28},"name":"_mm_stream_ps","qualname":"::coresimd::x86::sse::_mm_stream_ps","value":"fn (mem_addr: *mut f32, a: __m128) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores `a` into the memory at `mem_addr` using a non-temporal memory hint.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2323781,"byte_end":2323790,"line_start":1723,"line_end":1723,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2323791,"byte_end":2323824,"line_start":1724,"line_end":1724,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":9252},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2324187,"byte_end":2324200,"line_start":1735,"line_end":1735,"column_start":15,"column_end":28},"name":"_mm_stream_pi","qualname":"::coresimd::x86::sse::_mm_stream_pi","value":"fn (mem_addr: *mut __m64, a: __m64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store 64-bits of integer data from a into memory using a non-temporal\n memory hint.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2324085,"byte_end":2324094,"line_start":1732,"line_end":1732,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2324095,"byte_end":2324132,"line_start":1733,"line_end":1733,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9254},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2324475,"byte_end":2324487,"line_start":1744,"line_end":1744,"column_start":15,"column_end":27},"name":"_mm_max_pi16","qualname":"::coresimd::x86::sse::_mm_max_pi16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Compares the packed 16-bit signed integers of `a` and `b` writing the\n greatest value into the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2324373,"byte_end":2324382,"line_start":1741,"line_end":1741,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2324383,"byte_end":2324420,"line_start":1742,"line_end":1742,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9256},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2324751,"byte_end":2324760,"line_start":1753,"line_end":1753,"column_start":15,"column_end":24},"name":"_m_pmaxsw","qualname":"::coresimd::x86::sse::_m_pmaxsw","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Compares the packed 16-bit signed integers of `a` and `b` writing the\n greatest value into the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2324649,"byte_end":2324658,"line_start":1750,"line_end":1750,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2324659,"byte_end":2324696,"line_start":1751,"line_end":1751,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9258},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2325029,"byte_end":2325040,"line_start":1762,"line_end":1762,"column_start":15,"column_end":26},"name":"_mm_max_pu8","qualname":"::coresimd::x86::sse::_mm_max_pu8","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Compares the packed 8-bit signed integers of `a` and `b` writing the\n greatest value into the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2324927,"byte_end":2324936,"line_start":1759,"line_end":1759,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2324937,"byte_end":2324974,"line_start":1760,"line_end":1760,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9260},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2325303,"byte_end":2325312,"line_start":1771,"line_end":1771,"column_start":15,"column_end":24},"name":"_m_pmaxub","qualname":"::coresimd::x86::sse::_m_pmaxub","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Compares the packed 8-bit signed integers of `a` and `b` writing the\n greatest value into the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2325201,"byte_end":2325210,"line_start":1768,"line_end":1768,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2325211,"byte_end":2325248,"line_start":1769,"line_end":1769,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9262},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2325581,"byte_end":2325593,"line_start":1780,"line_end":1780,"column_start":15,"column_end":27},"name":"_mm_min_pi16","qualname":"::coresimd::x86::sse::_mm_min_pi16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Compares the packed 16-bit signed integers of `a` and `b` writing the\n smallest value into the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2325479,"byte_end":2325488,"line_start":1777,"line_end":1777,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2325489,"byte_end":2325526,"line_start":1778,"line_end":1778,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9264},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2325857,"byte_end":2325866,"line_start":1789,"line_end":1789,"column_start":15,"column_end":24},"name":"_m_pminsw","qualname":"::coresimd::x86::sse::_m_pminsw","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Compares the packed 16-bit signed integers of `a` and `b` writing the\n smallest value into the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2325755,"byte_end":2325764,"line_start":1786,"line_end":1786,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2325765,"byte_end":2325802,"line_start":1787,"line_end":1787,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9266},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2326135,"byte_end":2326146,"line_start":1798,"line_end":1798,"column_start":15,"column_end":26},"name":"_mm_min_pu8","qualname":"::coresimd::x86::sse::_mm_min_pu8","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Compares the packed 8-bit signed integers of `a` and `b` writing the\n smallest value into the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2326033,"byte_end":2326042,"line_start":1795,"line_end":1795,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2326043,"byte_end":2326080,"line_start":1796,"line_end":1796,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9268},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2326409,"byte_end":2326418,"line_start":1807,"line_end":1807,"column_start":15,"column_end":24},"name":"_m_pminub","qualname":"::coresimd::x86::sse::_m_pminub","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Compares the packed 8-bit signed integers of `a` and `b` writing the\n smallest value into the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2326307,"byte_end":2326316,"line_start":1804,"line_end":1804,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2326317,"byte_end":2326354,"line_start":1805,"line_end":1805,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9270},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2326742,"byte_end":2326756,"line_start":1817,"line_end":1817,"column_start":15,"column_end":29},"name":"_mm_mulhi_pu16","qualname":"::coresimd::x86::sse::_mm_mulhi_pu16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Multiplies packed 16-bit unsigned integer values and writes the\n high-order 16 bits of each 32-bit product to the corresponding bits in\n the destination.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2326639,"byte_end":2326648,"line_start":1814,"line_end":1814,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2326649,"byte_end":2326686,"line_start":1815,"line_end":1815,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9272},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2327076,"byte_end":2327086,"line_start":1827,"line_end":1827,"column_start":15,"column_end":25},"name":"_m_pmulhuw","qualname":"::coresimd::x86::sse::_m_pmulhuw","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Multiplies packed 16-bit unsigned integer values and writes the\n high-order 16 bits of each 32-bit product to the corresponding bits in\n the destination.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2326973,"byte_end":2326982,"line_start":1824,"line_end":1824,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2326983,"byte_end":2327020,"line_start":1825,"line_end":1825,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9274},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2327403,"byte_end":2327414,"line_start":1837,"line_end":1837,"column_start":15,"column_end":26},"name":"_mm_avg_pu8","qualname":"::coresimd::x86::sse::_mm_avg_pu8","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Computes the rounded averages of the packed unsigned 8-bit integer\n values and writes the averages to the corresponding bits in the\n destination.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2327302,"byte_end":2327311,"line_start":1834,"line_end":1834,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2327312,"byte_end":2327349,"line_start":1835,"line_end":1835,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9276},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2327722,"byte_end":2327730,"line_start":1847,"line_end":1847,"column_start":15,"column_end":23},"name":"_m_pavgb","qualname":"::coresimd::x86::sse::_m_pavgb","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Computes the rounded averages of the packed unsigned 8-bit integer\n values and writes the averages to the corresponding bits in the\n destination.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2327621,"byte_end":2327630,"line_start":1844,"line_end":1844,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2327631,"byte_end":2327668,"line_start":1845,"line_end":1845,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9278},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2328045,"byte_end":2328057,"line_start":1857,"line_end":1857,"column_start":15,"column_end":27},"name":"_mm_avg_pu16","qualname":"::coresimd::x86::sse::_mm_avg_pu16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Computes the rounded averages of the packed unsigned 16-bit integer\n values and writes the averages to the corresponding bits in the\n destination.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2327944,"byte_end":2327953,"line_start":1854,"line_end":1854,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2327954,"byte_end":2327991,"line_start":1855,"line_end":1855,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9280},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2328366,"byte_end":2328374,"line_start":1867,"line_end":1867,"column_start":15,"column_end":23},"name":"_m_pavgw","qualname":"::coresimd::x86::sse::_m_pavgw","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Computes the rounded averages of the packed unsigned 16-bit integer\n values and writes the averages to the corresponding bits in the\n destination.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2328265,"byte_end":2328274,"line_start":1864,"line_end":1864,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2328275,"byte_end":2328312,"line_start":1865,"line_end":1865,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9282},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2328831,"byte_end":2328842,"line_start":1878,"line_end":1878,"column_start":15,"column_end":26},"name":"_mm_sad_pu8","qualname":"::coresimd::x86::sse::_mm_sad_pu8","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the corresponding 8-bit unsigned integer values of the two\n 64-bit vector operands and computes the absolute value for each of the\n difference. Then sum of the 8 absolute differences is written to the\n bits [15:0] of the destination; the remaining bits [63:16] are cleared.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2328729,"byte_end":2328738,"line_start":1875,"line_end":1875,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2328739,"byte_end":2328776,"line_start":1876,"line_end":1876,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9284},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2329293,"byte_end":2329302,"line_start":1889,"line_end":1889,"column_start":15,"column_end":24},"name":"_m_psadbw","qualname":"::coresimd::x86::sse::_m_psadbw","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the corresponding 8-bit unsigned integer values of the two\n 64-bit vector operands and computes the absolute value for each of the\n difference. Then sum of the 8 absolute differences is written to the\n bits [15:0] of the destination; the remaining bits [63:16] are cleared.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2329191,"byte_end":2329200,"line_start":1886,"line_end":1886,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2329201,"byte_end":2329238,"line_start":1887,"line_end":1887,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9286},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2329741,"byte_end":2329755,"line_start":1900,"line_end":1900,"column_start":15,"column_end":29},"name":"_mm_cvtpi32_ps","qualname":"::coresimd::x86::sse::_mm_cvtpi32_ps","value":"fn (a: __m128, b: __m64) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Converts two elements of a 64-bit vector of [2 x i32] into two\n floating point values and writes them to the lower 64-bits of the\n destination. The remaining higher order elements of the destination are\n copied from the corresponding elements in the first operand.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2329637,"byte_end":2329646,"line_start":1897,"line_end":1897,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2329647,"byte_end":2329684,"line_start":1898,"line_end":1898,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9288},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2330193,"byte_end":2330206,"line_start":1911,"line_end":1911,"column_start":15,"column_end":28},"name":"_mm_cvt_pi2ps","qualname":"::coresimd::x86::sse::_mm_cvt_pi2ps","value":"fn (a: __m128, b: __m64) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Converts two elements of a 64-bit vector of [2 x i32] into two\n floating point values and writes them to the lower 64-bits of the\n destination. The remaining higher order elements of the destination are\n copied from the corresponding elements in the first operand.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2330089,"byte_end":2330098,"line_start":1908,"line_end":1908,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2330099,"byte_end":2330136,"line_start":1909,"line_end":1909,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9290},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2330452,"byte_end":2330465,"line_start":1919,"line_end":1919,"column_start":15,"column_end":28},"name":"_mm_cvtpi8_ps","qualname":"::coresimd::x86::sse::_mm_cvtpi8_ps","value":"fn (a: __m64) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower 4 8-bit values of `a` into a 128-bit vector of 4 `f32`s.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2330348,"byte_end":2330357,"line_start":1916,"line_end":1916,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2330358,"byte_end":2330395,"line_start":1917,"line_end":1917,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9292},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2330798,"byte_end":2330811,"line_start":1930,"line_end":1930,"column_start":15,"column_end":28},"name":"_mm_cvtpu8_ps","qualname":"::coresimd::x86::sse::_mm_cvtpu8_ps","value":"fn (a: __m64) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower 4 8-bit values of `a` into a 128-bit vector of 4 `f32`s.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2330694,"byte_end":2330703,"line_start":1927,"line_end":1927,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2330704,"byte_end":2330741,"line_start":1928,"line_end":1928,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9294},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2331105,"byte_end":2331119,"line_start":1940,"line_end":1940,"column_start":15,"column_end":29},"name":"_mm_cvtpi16_ps","qualname":"::coresimd::x86::sse::_mm_cvtpi16_ps","value":"fn (a: __m64) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Converts a 64-bit vector of `i16`s into a 128-bit vector of 4 `f32`s.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2331001,"byte_end":2331010,"line_start":1937,"line_end":1937,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2331011,"byte_end":2331048,"line_start":1938,"line_end":1938,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9296},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2331573,"byte_end":2331587,"line_start":1955,"line_end":1955,"column_start":15,"column_end":29},"name":"_mm_cvtpu16_ps","qualname":"::coresimd::x86::sse::_mm_cvtpu16_ps","value":"fn (a: __m64) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Converts a 64-bit vector of `i16`s into a 128-bit vector of 4 `f32`s.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2331469,"byte_end":2331478,"line_start":1952,"line_end":1952,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2331479,"byte_end":2331516,"line_start":1953,"line_end":1953,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9298},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2332070,"byte_end":2332086,"line_start":1970,"line_end":1970,"column_start":15,"column_end":31},"name":"_mm_cvtpi32x2_ps","qualname":"::coresimd::x86::sse::_mm_cvtpi32x2_ps","value":"fn (a: __m64, b: __m64) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Converts the two 32-bit signed integer values from each 64-bit vector\n operand of [2 x i32] into a 128-bit vector of [4 x float].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2331966,"byte_end":2331975,"line_start":1967,"line_end":1967,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2331976,"byte_end":2332013,"line_start":1968,"line_end":1968,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9300},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2332715,"byte_end":2332732,"line_start":1987,"line_end":1987,"column_start":15,"column_end":32},"name":"_mm_maskmove_si64","qualname":"::coresimd::x86::sse::_mm_maskmove_si64","value":"fn (a: __m64, mask: __m64, mem_addr: *mut i8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Conditionally copies the values from each 8-bit element in the first\n 64-bit integer vector operand to the specified memory location, as\n specified by the most significant bit in the corresponding element in the\n second 64-bit integer vector operand.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2332611,"byte_end":2332620,"line_start":1984,"line_end":1984,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2332621,"byte_end":2332658,"line_start":1985,"line_end":1985,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9302},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2333283,"byte_end":2333294,"line_start":2001,"line_end":2001,"column_start":15,"column_end":26},"name":"_m_maskmovq","qualname":"::coresimd::x86::sse::_m_maskmovq","value":"fn (a: __m64, mask: __m64, mem_addr: *mut i8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Conditionally copies the values from each 8-bit element in the first\n 64-bit integer vector operand to the specified memory location, as\n specified by the most significant bit in the corresponding element in the\n second 64-bit integer vector operand.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2333179,"byte_end":2333188,"line_start":1998,"line_end":1998,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2333189,"byte_end":2333226,"line_start":1999,"line_end":1999,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9304},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2333656,"byte_end":2333672,"line_start":2011,"line_end":2011,"column_start":15,"column_end":31},"name":"_mm_extract_pi16","qualname":"::coresimd::x86::sse::_mm_extract_pi16","value":"fn (a: __m64, imm2: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Extracts 16-bit element from a 64-bit vector of [4 x i16] and\n returns it, as specified by the immediate integer operand.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2333512,"byte_end":2333521,"line_start":2007,"line_end":2007,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2333522,"byte_end":2333559,"line_start":2008,"line_end":2008,"column_start":1,"column_end":38}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2333610,"byte_end":2333641,"line_start":2010,"line_end":2010,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9308},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2334092,"byte_end":2334101,"line_start":2024,"line_end":2024,"column_start":15,"column_end":24},"name":"_m_pextrw","qualname":"::coresimd::x86::sse::_m_pextrw","value":"fn (a: __m64, imm2: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Extracts 16-bit element from a 64-bit vector of [4 x i16] and\n returns it, as specified by the immediate integer operand.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2333948,"byte_end":2333957,"line_start":2020,"line_end":2020,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2333958,"byte_end":2333995,"line_start":2021,"line_end":2021,"column_start":1,"column_end":38}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2334046,"byte_end":2334077,"line_start":2023,"line_end":2023,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9312},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2334585,"byte_end":2334600,"line_start":2038,"line_end":2038,"column_start":15,"column_end":30},"name":"_mm_insert_pi16","qualname":"::coresimd::x86::sse::_mm_insert_pi16","value":"fn (a: __m64, d: i32, imm2: i32) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Copies data from the 64-bit vector of [4 x i16] to the destination,\n and inserts the lower 16-bits of an integer operand at the 16-bit offset\n specified by the immediate operand `n`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2334441,"byte_end":2334450,"line_start":2034,"line_end":2034,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2334451,"byte_end":2334488,"line_start":2035,"line_end":2035,"column_start":1,"column_end":38}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2334539,"byte_end":2334570,"line_start":2037,"line_end":2037,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9316},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2335090,"byte_end":2335099,"line_start":2052,"line_end":2052,"column_start":15,"column_end":24},"name":"_m_pinsrw","qualname":"::coresimd::x86::sse::_m_pinsrw","value":"fn (a: __m64, d: i32, imm2: i32) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Copies data from the 64-bit vector of [4 x i16] to the destination,\n and inserts the lower 16-bits of an integer operand at the 16-bit offset\n specified by the immediate operand `n`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2334946,"byte_end":2334955,"line_start":2048,"line_end":2048,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2334956,"byte_end":2334993,"line_start":2049,"line_end":2049,"column_start":1,"column_end":38}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2335044,"byte_end":2335075,"line_start":2051,"line_end":2051,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9320},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2335556,"byte_end":2335572,"line_start":2065,"line_end":2065,"column_start":15,"column_end":31},"name":"_mm_movemask_pi8","qualname":"::coresimd::x86::sse::_mm_movemask_pi8","value":"fn (a: __m64) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Takes the most significant bit from each 8-bit element in a 64-bit\n integer vector to create a 16-bit mask value. Zero-extends the value to\n 32-bit integer and writes it to the destination.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2335452,"byte_end":2335461,"line_start":2062,"line_end":2062,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2335462,"byte_end":2335499,"line_start":2063,"line_end":2063,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9322},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2335915,"byte_end":2335926,"line_start":2075,"line_end":2075,"column_start":15,"column_end":26},"name":"_m_pmovmskb","qualname":"::coresimd::x86::sse::_m_pmovmskb","value":"fn (a: __m64) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Takes the most significant bit from each 8-bit element in a 64-bit\n integer vector to create a 16-bit mask value. Zero-extends the value to\n 32-bit integer and writes it to the destination.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2335811,"byte_end":2335820,"line_start":2072,"line_end":2072,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2335821,"byte_end":2335858,"line_start":2073,"line_end":2073,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9324},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2336250,"byte_end":2336266,"line_start":2085,"line_end":2085,"column_start":15,"column_end":31},"name":"_mm_shuffle_pi16","qualname":"::coresimd::x86::sse::_mm_shuffle_pi16","value":"fn (a: __m64, imm8: i32) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Shuffles the 4 16-bit integers from a 64-bit integer vector to the\n destination, as specified by the immediate value operand.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2336106,"byte_end":2336115,"line_start":2081,"line_end":2081,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2336116,"byte_end":2336153,"line_start":2082,"line_end":2082,"column_start":1,"column_end":38}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2336204,"byte_end":2336235,"line_start":2084,"line_end":2084,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9328},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2336685,"byte_end":2336694,"line_start":2098,"line_end":2098,"column_start":15,"column_end":24},"name":"_m_pshufw","qualname":"::coresimd::x86::sse::_m_pshufw","value":"fn (a: __m64, imm8: i32) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Shuffles the 4 16-bit integers from a 64-bit integer vector to the\n destination, as specified by the immediate value operand.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2336541,"byte_end":2336550,"line_start":2094,"line_end":2094,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2336551,"byte_end":2336588,"line_start":2095,"line_end":2095,"column_start":1,"column_end":38}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2336639,"byte_end":2336670,"line_start":2097,"line_end":2097,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9332},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2337078,"byte_end":2337093,"line_start":2110,"line_end":2110,"column_start":15,"column_end":30},"name":"_mm_cvttps_pi32","qualname":"::coresimd::x86::sse::_mm_cvttps_pi32","value":"fn (a: __m128) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Convert the two lower packed single-precision (32-bit) floating-point\n elements in `a` to packed 32-bit integers with truncation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2336973,"byte_end":2336982,"line_start":2107,"line_end":2107,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2336983,"byte_end":2337020,"line_start":2108,"line_end":2108,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9334},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2337378,"byte_end":2337392,"line_start":2119,"line_end":2119,"column_start":15,"column_end":29},"name":"_mm_cvtt_ps2pi","qualname":"::coresimd::x86::sse::_mm_cvtt_ps2pi","value":"fn (a: __m128) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Convert the two lower packed single-precision (32-bit) floating-point\n elements in `a` to packed 32-bit integers with truncation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2337273,"byte_end":2337282,"line_start":2116,"line_end":2116,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2337283,"byte_end":2337320,"line_start":2117,"line_end":2117,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9336},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2337666,"byte_end":2337680,"line_start":2128,"line_end":2128,"column_start":15,"column_end":29},"name":"_mm_cvtps_pi32","qualname":"::coresimd::x86::sse::_mm_cvtps_pi32","value":"fn (a: __m128) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Convert the two lower packed single-precision (32-bit) floating-point\n elements in `a` to packed 32-bit integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2337562,"byte_end":2337571,"line_start":2125,"line_end":2125,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2337572,"byte_end":2337609,"line_start":2126,"line_end":2126,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9338},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2337947,"byte_end":2337960,"line_start":2137,"line_end":2137,"column_start":15,"column_end":28},"name":"_mm_cvt_ps2pi","qualname":"::coresimd::x86::sse::_mm_cvt_ps2pi","value":"fn (a: __m128) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Convert the two lower packed single-precision (32-bit) floating-point\n elements in `a` to packed 32-bit integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2337843,"byte_end":2337852,"line_start":2134,"line_end":2134,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2337853,"byte_end":2337890,"line_start":2135,"line_end":2135,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9340},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2338219,"byte_end":2338233,"line_start":2146,"line_end":2146,"column_start":15,"column_end":29},"name":"_mm_cvtps_pi16","qualname":"::coresimd::x86::sse::_mm_cvtps_pi16","value":"fn (a: __m128) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Convert packed single-precision (32-bit) floating-point elements in `a` to\n packed 16-bit integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2338115,"byte_end":2338124,"line_start":2143,"line_end":2143,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2338125,"byte_end":2338162,"line_start":2144,"line_end":2144,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9342},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2338650,"byte_end":2338663,"line_start":2159,"line_end":2159,"column_start":15,"column_end":28},"name":"_mm_cvtps_pi8","qualname":"::coresimd::x86::sse::_mm_cvtps_pi8","value":"fn (a: __m128) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Convert packed single-precision (32-bit) floating-point elements in `a` to\n packed 8-bit integers, and returns theem in the lower 4 elements of the\n result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2338546,"byte_end":2338555,"line_start":2156,"line_end":2156,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,46,114,115],"byte_start":2338556,"byte_end":2338593,"line_start":2157,"line_end":2157,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":9360},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2391235,"byte_end":2391244,"line_start":20,"line_end":20,"column_start":15,"column_end":24},"name":"_mm_pause","qualname":"::coresimd::x86::sse2::_mm_pause","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provide a hint to the processor that the code sequence is a spin-wait loop.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2391137,"byte_end":2391146,"line_start":17,"line_end":17,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2391147,"byte_end":2391181,"line_start":18,"line_end":18,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9362},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2391466,"byte_end":2391477,"line_start":29,"line_end":29,"column_start":15,"column_end":26},"name":"_mm_clflush","qualname":"::coresimd::x86::sse2::_mm_clflush","value":"fn (p: *mut u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Invalidate and flush the cache line that contains `p` from all levels of\n the cache hierarchy.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2391366,"byte_end":2391375,"line_start":26,"line_end":26,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2391376,"byte_end":2391410,"line_start":27,"line_end":27,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9364},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2391908,"byte_end":2391918,"line_start":42,"line_end":42,"column_start":15,"column_end":25},"name":"_mm_lfence","qualname":"::coresimd::x86::sse2::_mm_lfence","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a serializing operation on all load-from-memory instructions\n that were issued prior to this instruction.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2391809,"byte_end":2391818,"line_start":39,"line_end":39,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2391819,"byte_end":2391853,"line_start":40,"line_end":40,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9366},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2392385,"byte_end":2392395,"line_start":55,"line_end":55,"column_start":15,"column_end":25},"name":"_mm_mfence","qualname":"::coresimd::x86::sse2::_mm_mfence","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a serializing operation on all load-from-memory and store-to-memory\n instructions that were issued prior to this instruction.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2392286,"byte_end":2392295,"line_start":52,"line_end":52,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2392296,"byte_end":2392330,"line_start":53,"line_end":53,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9368},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2392560,"byte_end":2392572,"line_start":63,"line_end":63,"column_start":15,"column_end":27},"name":"_mm_add_epi8","qualname":"::coresimd::x86::sse2::_mm_add_epi8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Add packed 8-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2392462,"byte_end":2392471,"line_start":60,"line_end":60,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2392472,"byte_end":2392506,"line_start":61,"line_end":61,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9370},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2392815,"byte_end":2392828,"line_start":71,"line_end":71,"column_start":15,"column_end":28},"name":"_mm_add_epi16","qualname":"::coresimd::x86::sse2::_mm_add_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Add packed 16-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2392717,"byte_end":2392726,"line_start":68,"line_end":68,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2392727,"byte_end":2392761,"line_start":69,"line_end":69,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9372},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2393071,"byte_end":2393084,"line_start":79,"line_end":79,"column_start":15,"column_end":28},"name":"_mm_add_epi32","qualname":"::coresimd::x86::sse2::_mm_add_epi32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Add packed 32-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2392973,"byte_end":2392982,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2392983,"byte_end":2393017,"line_start":77,"line_end":77,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9374},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2393327,"byte_end":2393340,"line_start":87,"line_end":87,"column_start":15,"column_end":28},"name":"_mm_add_epi64","qualname":"::coresimd::x86::sse2::_mm_add_epi64","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Add packed 64-bit integers in `a` and \"b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2393229,"byte_end":2393238,"line_start":84,"line_end":84,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2393239,"byte_end":2393273,"line_start":85,"line_end":85,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9376},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2393600,"byte_end":2393613,"line_start":95,"line_end":95,"column_start":15,"column_end":28},"name":"_mm_adds_epi8","qualname":"::coresimd::x86::sse2::_mm_adds_epi8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Add packed 8-bit integers in `a` and `b` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2393501,"byte_end":2393510,"line_start":92,"line_end":92,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2393511,"byte_end":2393545,"line_start":93,"line_end":93,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9378},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2393872,"byte_end":2393886,"line_start":103,"line_end":103,"column_start":15,"column_end":29},"name":"_mm_adds_epi16","qualname":"::coresimd::x86::sse2::_mm_adds_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Add packed 16-bit integers in `a` and `b` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2393773,"byte_end":2393782,"line_start":100,"line_end":100,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2393783,"byte_end":2393817,"line_start":101,"line_end":101,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9380},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2394154,"byte_end":2394167,"line_start":111,"line_end":111,"column_start":15,"column_end":28},"name":"_mm_adds_epu8","qualname":"::coresimd::x86::sse2::_mm_adds_epu8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Add packed unsigned 8-bit integers in `a` and `b` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2394054,"byte_end":2394063,"line_start":108,"line_end":108,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2394064,"byte_end":2394098,"line_start":109,"line_end":109,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9382},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2394437,"byte_end":2394451,"line_start":119,"line_end":119,"column_start":15,"column_end":29},"name":"_mm_adds_epu16","qualname":"::coresimd::x86::sse2::_mm_adds_epu16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Add packed unsigned 16-bit integers in `a` and `b` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2394337,"byte_end":2394346,"line_start":116,"line_end":116,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2394347,"byte_end":2394381,"line_start":117,"line_end":117,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9384},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2394705,"byte_end":2394717,"line_start":127,"line_end":127,"column_start":15,"column_end":27},"name":"_mm_avg_epu8","qualname":"::coresimd::x86::sse2::_mm_avg_epu8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Average packed unsigned 8-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2394607,"byte_end":2394616,"line_start":124,"line_end":124,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2394617,"byte_end":2394651,"line_start":125,"line_end":125,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9386},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2394970,"byte_end":2394983,"line_start":135,"line_end":135,"column_start":15,"column_end":28},"name":"_mm_avg_epu16","qualname":"::coresimd::x86::sse2::_mm_avg_epu16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Average packed unsigned 16-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2394872,"byte_end":2394881,"line_start":132,"line_end":132,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2394882,"byte_end":2394916,"line_start":133,"line_end":133,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9388},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2395439,"byte_end":2395453,"line_start":147,"line_end":147,"column_start":15,"column_end":29},"name":"_mm_madd_epi16","qualname":"::coresimd::x86::sse2::_mm_madd_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply and then horizontally add signed 16 bit integers in `a` and `b`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2395339,"byte_end":2395348,"line_start":144,"line_end":144,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2395349,"byte_end":2395383,"line_start":145,"line_end":145,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9390},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2395742,"byte_end":2395755,"line_start":156,"line_end":156,"column_start":15,"column_end":28},"name":"_mm_max_epi16","qualname":"::coresimd::x86::sse2::_mm_max_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 16-bit integers in `a` and `b`, and return the packed\n maximum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2395643,"byte_end":2395652,"line_start":153,"line_end":153,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2395653,"byte_end":2395687,"line_start":154,"line_end":154,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9392},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2396051,"byte_end":2396063,"line_start":165,"line_end":165,"column_start":15,"column_end":27},"name":"_mm_max_epu8","qualname":"::coresimd::x86::sse2::_mm_max_epu8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed unsigned 8-bit integers in `a` and `b`, and return the\n packed maximum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2395952,"byte_end":2395961,"line_start":162,"line_end":162,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2395962,"byte_end":2395996,"line_start":163,"line_end":163,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9394},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2396351,"byte_end":2396364,"line_start":174,"line_end":174,"column_start":15,"column_end":28},"name":"_mm_min_epi16","qualname":"::coresimd::x86::sse2::_mm_min_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 16-bit integers in `a` and `b`, and return the packed\n minimum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2396252,"byte_end":2396261,"line_start":171,"line_end":171,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2396262,"byte_end":2396296,"line_start":172,"line_end":172,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9396},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2396660,"byte_end":2396672,"line_start":183,"line_end":183,"column_start":15,"column_end":27},"name":"_mm_min_epu8","qualname":"::coresimd::x86::sse2::_mm_min_epu8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed unsigned 8-bit integers in `a` and `b`, and return the\n packed minimum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2396561,"byte_end":2396570,"line_start":180,"line_end":180,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2396571,"byte_end":2396605,"line_start":181,"line_end":181,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9398},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2397052,"byte_end":2397067,"line_start":194,"line_end":194,"column_start":15,"column_end":30},"name":"_mm_mulhi_epi16","qualname":"::coresimd::x86::sse2::_mm_mulhi_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply the packed 16-bit integers in `a` and `b`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2396953,"byte_end":2396962,"line_start":191,"line_end":191,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2396963,"byte_end":2396997,"line_start":192,"line_end":192,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9400},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2397457,"byte_end":2397472,"line_start":205,"line_end":205,"column_start":15,"column_end":30},"name":"_mm_mulhi_epu16","qualname":"::coresimd::x86::sse2::_mm_mulhi_epu16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply the packed unsigned 16-bit integers in `a` and `b`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2397357,"byte_end":2397366,"line_start":202,"line_end":202,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2397367,"byte_end":2397401,"line_start":203,"line_end":203,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9402},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2397852,"byte_end":2397867,"line_start":216,"line_end":216,"column_start":15,"column_end":30},"name":"_mm_mullo_epi16","qualname":"::coresimd::x86::sse2::_mm_mullo_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply the packed 16-bit integers in `a` and `b`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2397753,"byte_end":2397762,"line_start":213,"line_end":213,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2397763,"byte_end":2397797,"line_start":214,"line_end":214,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9404},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2398207,"byte_end":2398220,"line_start":227,"line_end":227,"column_start":15,"column_end":28},"name":"_mm_mul_epu32","qualname":"::coresimd::x86::sse2::_mm_mul_epu32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply the low unsigned 32-bit integers from each packed 64-bit element\n in `a` and `b`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2398107,"byte_end":2398116,"line_start":224,"line_end":224,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2398117,"byte_end":2398151,"line_start":225,"line_end":225,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9406},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2398769,"byte_end":2398781,"line_start":240,"line_end":240,"column_start":15,"column_end":27},"name":"_mm_sad_epu8","qualname":"::coresimd::x86::sse2::_mm_sad_epu8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Sum the absolute differences of packed unsigned 8-bit integers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2398670,"byte_end":2398679,"line_start":237,"line_end":237,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2398680,"byte_end":2398714,"line_start":238,"line_end":238,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9408},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2399052,"byte_end":2399064,"line_start":248,"line_end":248,"column_start":15,"column_end":27},"name":"_mm_sub_epi8","qualname":"::coresimd::x86::sse2::_mm_sub_epi8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2398954,"byte_end":2398963,"line_start":245,"line_end":245,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2398964,"byte_end":2398998,"line_start":246,"line_end":246,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9410},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2399339,"byte_end":2399352,"line_start":256,"line_end":256,"column_start":15,"column_end":28},"name":"_mm_sub_epi16","qualname":"::coresimd::x86::sse2::_mm_sub_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2399241,"byte_end":2399250,"line_start":253,"line_end":253,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2399251,"byte_end":2399285,"line_start":254,"line_end":254,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9412},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2399627,"byte_end":2399640,"line_start":264,"line_end":264,"column_start":15,"column_end":28},"name":"_mm_sub_epi32","qualname":"::coresimd::x86::sse2::_mm_sub_epi32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 32-bit integers in `b` from packed 32-bit integers in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2399529,"byte_end":2399538,"line_start":261,"line_end":261,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2399539,"byte_end":2399573,"line_start":262,"line_end":262,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9414},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2399915,"byte_end":2399928,"line_start":272,"line_end":272,"column_start":15,"column_end":28},"name":"_mm_sub_epi64","qualname":"::coresimd::x86::sse2::_mm_sub_epi64","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 64-bit integers in `b` from packed 64-bit integers in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2399817,"byte_end":2399826,"line_start":269,"line_end":269,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2399827,"byte_end":2399861,"line_start":270,"line_end":270,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9416},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2400223,"byte_end":2400236,"line_start":281,"line_end":281,"column_start":15,"column_end":28},"name":"_mm_subs_epi8","qualname":"::coresimd::x86::sse2::_mm_subs_epi8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a`\n using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2400124,"byte_end":2400133,"line_start":278,"line_end":278,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2400134,"byte_end":2400168,"line_start":279,"line_end":279,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9418},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2400531,"byte_end":2400545,"line_start":290,"line_end":290,"column_start":15,"column_end":29},"name":"_mm_subs_epi16","qualname":"::coresimd::x86::sse2::_mm_subs_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a`\n using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2400432,"byte_end":2400441,"line_start":287,"line_end":287,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2400442,"byte_end":2400476,"line_start":288,"line_end":288,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9420},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2400857,"byte_end":2400870,"line_start":299,"line_end":299,"column_start":15,"column_end":28},"name":"_mm_subs_epu8","qualname":"::coresimd::x86::sse2::_mm_subs_epu8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed unsigned 8-bit integers in `b` from packed unsigned 8-bit\n integers in `a` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2400757,"byte_end":2400766,"line_start":296,"line_end":296,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2400767,"byte_end":2400801,"line_start":297,"line_end":297,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9422},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2401185,"byte_end":2401199,"line_start":308,"line_end":308,"column_start":15,"column_end":29},"name":"_mm_subs_epu16","qualname":"::coresimd::x86::sse2::_mm_subs_epu16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed unsigned 16-bit integers in `b` from packed unsigned 16-bit\n integers in `a` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2401085,"byte_end":2401094,"line_start":305,"line_end":305,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2401095,"byte_end":2401129,"line_start":306,"line_end":306,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9424},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2401497,"byte_end":2401511,"line_start":317,"line_end":317,"column_start":15,"column_end":29},"name":"_mm_slli_si128","qualname":"::coresimd::x86::sse2::_mm_slli_si128","value":"fn (a: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift `a` left by `imm8` bytes while shifting in zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2401356,"byte_end":2401365,"line_start":313,"line_end":313,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2401366,"byte_end":2401400,"line_start":314,"line_end":314,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2401451,"byte_end":2401482,"line_start":316,"line_end":316,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9430},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2403103,"byte_end":2403118,"line_start":369,"line_end":369,"column_start":15,"column_end":30},"name":"_mm_bslli_si128","qualname":"::coresimd::x86::sse2::_mm_bslli_si128","value":"fn (a: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift `a` left by `imm8` bytes while shifting in zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2402962,"byte_end":2402971,"line_start":365,"line_end":365,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2402972,"byte_end":2403006,"line_start":366,"line_end":366,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2403057,"byte_end":2403088,"line_start":368,"line_end":368,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9432},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2403393,"byte_end":2403408,"line_start":378,"line_end":378,"column_start":15,"column_end":30},"name":"_mm_bsrli_si128","qualname":"::coresimd::x86::sse2::_mm_bsrli_si128","value":"fn (a: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift `a` right by `imm8` bytes while shifting in zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2403252,"byte_end":2403261,"line_start":374,"line_end":374,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2403262,"byte_end":2403296,"line_start":375,"line_end":375,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2403347,"byte_end":2403378,"line_start":377,"line_end":377,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9434},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2403701,"byte_end":2403715,"line_start":387,"line_end":387,"column_start":15,"column_end":29},"name":"_mm_slli_epi16","qualname":"::coresimd::x86::sse2::_mm_slli_epi16","value":"fn (a: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 16-bit integers in `a` left by `imm8` while shifting in zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2403561,"byte_end":2403570,"line_start":383,"line_end":383,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2403571,"byte_end":2403605,"line_start":384,"line_end":384,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2403655,"byte_end":2403686,"line_start":386,"line_end":386,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9436},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2403985,"byte_end":2403998,"line_start":396,"line_end":396,"column_start":15,"column_end":28},"name":"_mm_sll_epi16","qualname":"::coresimd::x86::sse2::_mm_sll_epi16","value":"fn (a: __m128i, count: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 16-bit integers in `a` left by `count` while shifting in\n zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2403887,"byte_end":2403896,"line_start":393,"line_end":393,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2403897,"byte_end":2403931,"line_start":394,"line_end":394,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9438},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2404321,"byte_end":2404335,"line_start":405,"line_end":405,"column_start":15,"column_end":29},"name":"_mm_slli_epi32","qualname":"::coresimd::x86::sse2::_mm_slli_epi32","value":"fn (a: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` left by `imm8` while shifting in zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2404181,"byte_end":2404190,"line_start":401,"line_end":401,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2404191,"byte_end":2404225,"line_start":402,"line_end":402,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2404275,"byte_end":2404306,"line_start":404,"line_end":404,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9440},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2404605,"byte_end":2404618,"line_start":414,"line_end":414,"column_start":15,"column_end":28},"name":"_mm_sll_epi32","qualname":"::coresimd::x86::sse2::_mm_sll_epi32","value":"fn (a: __m128i, count: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` left by `count` while shifting in\n zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2404507,"byte_end":2404516,"line_start":411,"line_end":411,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2404517,"byte_end":2404551,"line_start":412,"line_end":412,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9442},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2404941,"byte_end":2404955,"line_start":423,"line_end":423,"column_start":15,"column_end":29},"name":"_mm_slli_epi64","qualname":"::coresimd::x86::sse2::_mm_slli_epi64","value":"fn (a: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 64-bit integers in `a` left by `imm8` while shifting in zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2404801,"byte_end":2404810,"line_start":419,"line_end":419,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2404811,"byte_end":2404845,"line_start":420,"line_end":420,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2404895,"byte_end":2404926,"line_start":422,"line_end":422,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9444},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2405225,"byte_end":2405238,"line_start":432,"line_end":432,"column_start":15,"column_end":28},"name":"_mm_sll_epi64","qualname":"::coresimd::x86::sse2::_mm_sll_epi64","value":"fn (a: __m128i, count: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 64-bit integers in `a` left by `count` while shifting in\n zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2405127,"byte_end":2405136,"line_start":429,"line_end":429,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2405137,"byte_end":2405171,"line_start":430,"line_end":430,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9446},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2405570,"byte_end":2405584,"line_start":442,"line_end":442,"column_start":15,"column_end":29},"name":"_mm_srai_epi16","qualname":"::coresimd::x86::sse2::_mm_srai_epi16","value":"fn (a: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 16-bit integers in `a` right by `imm8` while shifting in sign\n bits.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2405430,"byte_end":2405439,"line_start":438,"line_end":438,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2405440,"byte_end":2405474,"line_start":439,"line_end":439,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2405524,"byte_end":2405555,"line_start":441,"line_end":441,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9448},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2405859,"byte_end":2405872,"line_start":451,"line_end":451,"column_start":15,"column_end":28},"name":"_mm_sra_epi16","qualname":"::coresimd::x86::sse2::_mm_sra_epi16","value":"fn (a: __m128i, count: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 16-bit integers in `a` right by `count` while shifting in sign\n bits.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2405761,"byte_end":2405770,"line_start":448,"line_end":448,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2405771,"byte_end":2405805,"line_start":449,"line_end":449,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9450},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2406204,"byte_end":2406218,"line_start":461,"line_end":461,"column_start":15,"column_end":29},"name":"_mm_srai_epi32","qualname":"::coresimd::x86::sse2::_mm_srai_epi32","value":"fn (a: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` right by `imm8` while shifting in sign\n bits.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2406064,"byte_end":2406073,"line_start":457,"line_end":457,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2406074,"byte_end":2406108,"line_start":458,"line_end":458,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2406158,"byte_end":2406189,"line_start":460,"line_end":460,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9452},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2406493,"byte_end":2406506,"line_start":470,"line_end":470,"column_start":15,"column_end":28},"name":"_mm_sra_epi32","qualname":"::coresimd::x86::sse2::_mm_sra_epi32","value":"fn (a: __m128i, count: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` right by `count` while shifting in sign\n bits.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2406395,"byte_end":2406404,"line_start":467,"line_end":467,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2406405,"byte_end":2406439,"line_start":468,"line_end":468,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9454},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2406811,"byte_end":2406825,"line_start":479,"line_end":479,"column_start":15,"column_end":29},"name":"_mm_srli_si128","qualname":"::coresimd::x86::sse2::_mm_srli_si128","value":"fn (a: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift `a` right by `imm8` bytes while shifting in zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2406670,"byte_end":2406679,"line_start":475,"line_end":475,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2406680,"byte_end":2406714,"line_start":476,"line_end":476,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2406765,"byte_end":2406796,"line_start":478,"line_end":478,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9460},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2408422,"byte_end":2408436,"line_start":532,"line_end":532,"column_start":15,"column_end":29},"name":"_mm_srli_epi16","qualname":"::coresimd::x86::sse2::_mm_srli_epi16","value":"fn (a: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 16-bit integers in `a` right by `imm8` while shifting in\n zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2408282,"byte_end":2408291,"line_start":528,"line_end":528,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2408292,"byte_end":2408326,"line_start":529,"line_end":529,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2408376,"byte_end":2408407,"line_start":531,"line_end":531,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9462},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2408707,"byte_end":2408720,"line_start":541,"line_end":541,"column_start":15,"column_end":28},"name":"_mm_srl_epi16","qualname":"::coresimd::x86::sse2::_mm_srl_epi16","value":"fn (a: __m128i, count: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 16-bit integers in `a` right by `count` while shifting in\n zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2408609,"byte_end":2408618,"line_start":538,"line_end":538,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2408619,"byte_end":2408653,"line_start":539,"line_end":539,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9464},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2409048,"byte_end":2409062,"line_start":551,"line_end":551,"column_start":15,"column_end":29},"name":"_mm_srli_epi32","qualname":"::coresimd::x86::sse2::_mm_srli_epi32","value":"fn (a: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` right by `imm8` while shifting in\n zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2408908,"byte_end":2408917,"line_start":547,"line_end":547,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2408918,"byte_end":2408952,"line_start":548,"line_end":548,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2409002,"byte_end":2409033,"line_start":550,"line_end":550,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9466},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2409333,"byte_end":2409346,"line_start":560,"line_end":560,"column_start":15,"column_end":28},"name":"_mm_srl_epi32","qualname":"::coresimd::x86::sse2::_mm_srl_epi32","value":"fn (a: __m128i, count: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` right by `count` while shifting in\n zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2409235,"byte_end":2409244,"line_start":557,"line_end":557,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2409245,"byte_end":2409279,"line_start":558,"line_end":558,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9468},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2409674,"byte_end":2409688,"line_start":570,"line_end":570,"column_start":15,"column_end":29},"name":"_mm_srli_epi64","qualname":"::coresimd::x86::sse2::_mm_srli_epi64","value":"fn (a: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 64-bit integers in `a` right by `imm8` while shifting in\n zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2409534,"byte_end":2409543,"line_start":566,"line_end":566,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2409544,"byte_end":2409578,"line_start":567,"line_end":567,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2409628,"byte_end":2409659,"line_start":569,"line_end":569,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9470},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2409959,"byte_end":2409972,"line_start":579,"line_end":579,"column_start":15,"column_end":28},"name":"_mm_srl_epi64","qualname":"::coresimd::x86::sse2::_mm_srl_epi64","value":"fn (a: __m128i, count: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 64-bit integers in `a` right by `count` while shifting in\n zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2409861,"byte_end":2409870,"line_start":576,"line_end":576,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2409871,"byte_end":2409905,"line_start":577,"line_end":577,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9472},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2410261,"byte_end":2410274,"line_start":588,"line_end":588,"column_start":15,"column_end":28},"name":"_mm_and_si128","qualname":"::coresimd::x86::sse2::_mm_and_si128","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of 128 bits (representing integer data) in `a` and\n `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2410163,"byte_end":2410172,"line_start":585,"line_end":585,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2410173,"byte_end":2410207,"line_start":586,"line_end":586,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9474},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2410535,"byte_end":2410551,"line_start":597,"line_end":597,"column_start":15,"column_end":31},"name":"_mm_andnot_si128","qualname":"::coresimd::x86::sse2::_mm_andnot_si128","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise NOT of 128 bits (representing integer data) in `a` and\n then AND with `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2410436,"byte_end":2410445,"line_start":594,"line_end":594,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2410446,"byte_end":2410480,"line_start":595,"line_end":595,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9476},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2410824,"byte_end":2410836,"line_start":606,"line_end":606,"column_start":15,"column_end":27},"name":"_mm_or_si128","qualname":"::coresimd::x86::sse2::_mm_or_si128","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise OR of 128 bits (representing integer data) in `a` and\n `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2410727,"byte_end":2410736,"line_start":603,"line_end":603,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2410737,"byte_end":2410771,"line_start":604,"line_end":604,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9478},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2411081,"byte_end":2411094,"line_start":615,"line_end":615,"column_start":15,"column_end":28},"name":"_mm_xor_si128","qualname":"::coresimd::x86::sse2::_mm_xor_si128","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise XOR of 128 bits (representing integer data) in `a` and\n `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2410983,"byte_end":2410992,"line_start":612,"line_end":612,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2410993,"byte_end":2411027,"line_start":613,"line_end":613,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9480},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2411317,"byte_end":2411331,"line_start":623,"line_end":623,"column_start":15,"column_end":29},"name":"_mm_cmpeq_epi8","qualname":"::coresimd::x86::sse2::_mm_cmpeq_epi8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 8-bit integers in `a` and `b` for equality.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2411217,"byte_end":2411226,"line_start":620,"line_end":620,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2411227,"byte_end":2411261,"line_start":621,"line_end":621,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9482},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2411604,"byte_end":2411619,"line_start":631,"line_end":631,"column_start":15,"column_end":30},"name":"_mm_cmpeq_epi16","qualname":"::coresimd::x86::sse2::_mm_cmpeq_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 16-bit integers in `a` and `b` for equality.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2411504,"byte_end":2411513,"line_start":628,"line_end":628,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2411514,"byte_end":2411548,"line_start":629,"line_end":629,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9484},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2411892,"byte_end":2411907,"line_start":639,"line_end":639,"column_start":15,"column_end":30},"name":"_mm_cmpeq_epi32","qualname":"::coresimd::x86::sse2::_mm_cmpeq_epi32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 32-bit integers in `a` and `b` for equality.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2411792,"byte_end":2411801,"line_start":636,"line_end":636,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2411802,"byte_end":2411836,"line_start":637,"line_end":637,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9486},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2412183,"byte_end":2412197,"line_start":647,"line_end":647,"column_start":15,"column_end":29},"name":"_mm_cmpgt_epi8","qualname":"::coresimd::x86::sse2::_mm_cmpgt_epi8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 8-bit integers in `a` and `b` for greater-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2412083,"byte_end":2412092,"line_start":644,"line_end":644,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2412093,"byte_end":2412127,"line_start":645,"line_end":645,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9488},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2412474,"byte_end":2412489,"line_start":655,"line_end":655,"column_start":15,"column_end":30},"name":"_mm_cmpgt_epi16","qualname":"::coresimd::x86::sse2::_mm_cmpgt_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 16-bit integers in `a` and `b` for greater-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2412374,"byte_end":2412383,"line_start":652,"line_end":652,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2412384,"byte_end":2412418,"line_start":653,"line_end":653,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9490},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2412766,"byte_end":2412781,"line_start":663,"line_end":663,"column_start":15,"column_end":30},"name":"_mm_cmpgt_epi32","qualname":"::coresimd::x86::sse2::_mm_cmpgt_epi32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 32-bit integers in `a` and `b` for greater-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2412666,"byte_end":2412675,"line_start":660,"line_end":660,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2412676,"byte_end":2412710,"line_start":661,"line_end":661,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9492},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2413054,"byte_end":2413068,"line_start":671,"line_end":671,"column_start":15,"column_end":29},"name":"_mm_cmplt_epi8","qualname":"::coresimd::x86::sse2::_mm_cmplt_epi8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 8-bit integers in `a` and `b` for less-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2412954,"byte_end":2412963,"line_start":668,"line_end":668,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2412964,"byte_end":2412998,"line_start":669,"line_end":669,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9494},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2413342,"byte_end":2413357,"line_start":679,"line_end":679,"column_start":15,"column_end":30},"name":"_mm_cmplt_epi16","qualname":"::coresimd::x86::sse2::_mm_cmplt_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 16-bit integers in `a` and `b` for less-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2413242,"byte_end":2413251,"line_start":676,"line_end":676,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2413252,"byte_end":2413286,"line_start":677,"line_end":677,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9496},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2413631,"byte_end":2413646,"line_start":687,"line_end":687,"column_start":15,"column_end":30},"name":"_mm_cmplt_epi32","qualname":"::coresimd::x86::sse2::_mm_cmplt_epi32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 32-bit integers in `a` and `b` for less-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2413531,"byte_end":2413540,"line_start":684,"line_end":684,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2413541,"byte_end":2413575,"line_start":685,"line_end":685,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9498},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2413977,"byte_end":2413992,"line_start":696,"line_end":696,"column_start":15,"column_end":30},"name":"_mm_cvtepi32_pd","qualname":"::coresimd::x86::sse2::_mm_cvtepi32_pd","value":"fn (a: __m128i) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert the lower two packed 32-bit integers in `a` to packed\n double-precision (64-bit) floating-point elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2413876,"byte_end":2413885,"line_start":693,"line_end":693,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2413886,"byte_end":2413920,"line_start":694,"line_end":694,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9500},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2414300,"byte_end":2414314,"line_start":706,"line_end":706,"column_start":15,"column_end":29},"name":"_mm_cvtsi32_sd","qualname":"::coresimd::x86::sse2::_mm_cvtsi32_sd","value":"fn (a: __m128d, b: i32) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return `a` with its lower element replaced by `b` after converting it to\n an `f64`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2414199,"byte_end":2414208,"line_start":703,"line_end":703,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2414209,"byte_end":2414243,"line_start":704,"line_end":704,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9502},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2414591,"byte_end":2414606,"line_start":715,"line_end":715,"column_start":15,"column_end":30},"name":"_mm_cvtepi32_ps","qualname":"::coresimd::x86::sse2::_mm_cvtepi32_ps","value":"fn (a: __m128i) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Convert packed 32-bit integers in `a` to packed single-precision (32-bit)\n floating-point elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2414490,"byte_end":2414499,"line_start":712,"line_end":712,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2414500,"byte_end":2414534,"line_start":713,"line_end":713,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9504},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2414869,"byte_end":2414884,"line_start":724,"line_end":724,"column_start":15,"column_end":30},"name":"_mm_cvtps_epi32","qualname":"::coresimd::x86::sse2::_mm_cvtps_epi32","value":"fn (a: __m128) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Convert packed single-precision (32-bit) floating-point elements in `a`\n to packed 32-bit integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2414768,"byte_end":2414777,"line_start":721,"line_end":721,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2414778,"byte_end":2414812,"line_start":722,"line_end":722,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9506},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2415155,"byte_end":2415172,"line_start":733,"line_end":733,"column_start":15,"column_end":32},"name":"_mm_cvtsi32_si128","qualname":"::coresimd::x86::sse2::_mm_cvtsi32_si128","value":"fn (a: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return a vector whose lowest element is `a` and all higher elements are\n `0`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2415029,"byte_end":2415038,"line_start":730,"line_end":730,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2415039,"byte_end":2415073,"line_start":731,"line_end":731,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9508},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2415375,"byte_end":2415392,"line_start":741,"line_end":741,"column_start":15,"column_end":32},"name":"_mm_cvtsi128_si32","qualname":"::coresimd::x86::sse2::_mm_cvtsi128_si32","value":"fn (a: __m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Return the lowest element of `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2415278,"byte_end":2415287,"line_start":738,"line_end":738,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2415288,"byte_end":2415322,"line_start":739,"line_end":739,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9510},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2415632,"byte_end":2415646,"line_start":750,"line_end":750,"column_start":15,"column_end":29},"name":"_mm_set_epi64x","qualname":"::coresimd::x86::sse2::_mm_set_epi64x","value":"fn (e1: i64, e0: i64) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Set packed 64-bit integers with the supplied values, from highest to\n lowest.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2415536,"byte_end":2415545,"line_start":747,"line_end":747,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2415546,"byte_end":2415580,"line_start":748,"line_end":748,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9512},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2415873,"byte_end":2415886,"line_start":758,"line_end":758,"column_start":15,"column_end":28},"name":"_mm_set_epi32","qualname":"::coresimd::x86::sse2::_mm_set_epi32","value":"fn (e3: i32, e2: i32, e1: i32, e0: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Set packed 32-bit integers with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2415777,"byte_end":2415786,"line_start":755,"line_end":755,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2415787,"byte_end":2415821,"line_start":756,"line_end":756,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9514},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2416139,"byte_end":2416152,"line_start":766,"line_end":766,"column_start":15,"column_end":28},"name":"_mm_set_epi16","qualname":"::coresimd::x86::sse2::_mm_set_epi16","value":"fn (e7: i16, e6: i16, e5: i16, e4: i16, e3: i16, e2: i16, e1: i16, e0: i16) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Set packed 16-bit integers with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2416043,"byte_end":2416052,"line_start":763,"line_end":763,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2416053,"byte_end":2416087,"line_start":764,"line_end":764,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9516},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2416462,"byte_end":2416474,"line_start":776,"line_end":776,"column_start":15,"column_end":27},"name":"_mm_set_epi8","qualname":"::coresimd::x86::sse2::_mm_set_epi8","value":"fn (e15: i8, e14: i8, e13: i8, e12: i8, e11: i8, e10: i8, e9: i8, e8: i8, e7: i8, e6: i8, e5: i8, e4: i8, e3: i8, e2: i8, e1: i8, e0: i8) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Set packed 8-bit integers with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2416366,"byte_end":2416375,"line_start":773,"line_end":773,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2416376,"byte_end":2416410,"line_start":774,"line_end":774,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9518},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2416937,"byte_end":2416952,"line_start":790,"line_end":790,"column_start":15,"column_end":30},"name":"_mm_set1_epi64x","qualname":"::coresimd::x86::sse2::_mm_set1_epi64x","value":"fn (a: i64) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Broadcast 64-bit integer `a` to all elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2416841,"byte_end":2416850,"line_start":787,"line_end":787,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2416851,"byte_end":2416885,"line_start":788,"line_end":788,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9520},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2417148,"byte_end":2417162,"line_start":798,"line_end":798,"column_start":15,"column_end":29},"name":"_mm_set1_epi32","qualname":"::coresimd::x86::sse2::_mm_set1_epi32","value":"fn (a: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Broadcast 32-bit integer `a` to all elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2417052,"byte_end":2417061,"line_start":795,"line_end":795,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2417062,"byte_end":2417096,"line_start":796,"line_end":796,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9522},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2417363,"byte_end":2417377,"line_start":806,"line_end":806,"column_start":15,"column_end":29},"name":"_mm_set1_epi16","qualname":"::coresimd::x86::sse2::_mm_set1_epi16","value":"fn (a: i16) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Broadcast 16-bit integer `a` to all elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2417267,"byte_end":2417276,"line_start":803,"line_end":803,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2417277,"byte_end":2417311,"line_start":804,"line_end":804,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9524},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2417589,"byte_end":2417602,"line_start":814,"line_end":814,"column_start":15,"column_end":28},"name":"_mm_set1_epi8","qualname":"::coresimd::x86::sse2::_mm_set1_epi8","value":"fn (a: i8) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Broadcast 8-bit integer `a` to all elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2417493,"byte_end":2417502,"line_start":811,"line_end":811,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2417503,"byte_end":2417537,"line_start":812,"line_end":812,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9526},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2417861,"byte_end":2417875,"line_start":822,"line_end":822,"column_start":15,"column_end":29},"name":"_mm_setr_epi32","qualname":"::coresimd::x86::sse2::_mm_setr_epi32","value":"fn (e3: i32, e2: i32, e1: i32, e0: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Set packed 32-bit integers with the supplied values in reverse order.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2417765,"byte_end":2417774,"line_start":819,"line_end":819,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2417775,"byte_end":2417809,"line_start":820,"line_end":820,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9528},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2418132,"byte_end":2418146,"line_start":830,"line_end":830,"column_start":15,"column_end":29},"name":"_mm_setr_epi16","qualname":"::coresimd::x86::sse2::_mm_setr_epi16","value":"fn (e7: i16, e6: i16, e5: i16, e4: i16, e3: i16, e2: i16, e1: i16, e0: i16) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Set packed 16-bit integers with the supplied values in reverse order.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2418036,"byte_end":2418045,"line_start":827,"line_end":827,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2418046,"byte_end":2418080,"line_start":828,"line_end":828,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9530},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2418460,"byte_end":2418473,"line_start":840,"line_end":840,"column_start":15,"column_end":28},"name":"_mm_setr_epi8","qualname":"::coresimd::x86::sse2::_mm_setr_epi8","value":"fn (e15: i8, e14: i8, e13: i8, e12: i8, e11: i8, e10: i8, e9: i8, e8: i8, e7: i8, e6: i8, e5: i8, e4: i8, e3: i8, e2: i8, e1: i8, e0: i8) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Set packed 8-bit integers with the supplied values in reverse order.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2418364,"byte_end":2418373,"line_start":837,"line_end":837,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2418374,"byte_end":2418408,"line_start":838,"line_end":838,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9532},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2418926,"byte_end":2418943,"line_start":854,"line_end":854,"column_start":15,"column_end":32},"name":"_mm_setzero_si128","qualname":"::coresimd::x86::sse2::_mm_setzero_si128","value":"fn () -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector with all elements set to zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2418828,"byte_end":2418837,"line_start":851,"line_end":851,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2418838,"byte_end":2418872,"line_start":852,"line_end":852,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9534},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2419322,"byte_end":2419337,"line_start":866,"line_end":866,"column_start":15,"column_end":30},"name":"_mm_loadl_epi64","qualname":"::coresimd::x86::sse2::_mm_loadl_epi64","value":"fn (mem_addr: *const __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Load 64-bit integer from memory into first element of returned vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2419060,"byte_end":2419069,"line_start":859,"line_end":859,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2419070,"byte_end":2419104,"line_start":860,"line_end":860,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9536},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2419665,"byte_end":2419679,"line_start":876,"line_end":876,"column_start":15,"column_end":29},"name":"_mm_load_si128","qualname":"::coresimd::x86::sse2::_mm_load_si128","value":"fn (mem_addr: *const __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Load 128-bits of integer data from memory into a new vector.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2419566,"byte_end":2419575,"line_start":873,"line_end":873,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2419576,"byte_end":2419610,"line_start":874,"line_end":874,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9538},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2419975,"byte_end":2419990,"line_start":886,"line_end":886,"column_start":15,"column_end":30},"name":"_mm_loadu_si128","qualname":"::coresimd::x86::sse2::_mm_loadu_si128","value":"fn (mem_addr: *const __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Load 128-bits of integer data from memory into a new vector.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2419876,"byte_end":2419885,"line_start":883,"line_end":883,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2419886,"byte_end":2419920,"line_start":884,"line_end":884,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9540},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2420656,"byte_end":2420675,"line_start":907,"line_end":907,"column_start":15,"column_end":34},"name":"_mm_maskmoveu_si128","qualname":"::coresimd::x86::sse2::_mm_maskmoveu_si128","value":"fn (a: __m128i, mask: __m128i, mem_addr: *mut i8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Conditionally store 8-bit integer elements from `a` into memory using\n `mask`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2420553,"byte_end":2420562,"line_start":904,"line_end":904,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2420563,"byte_end":2420597,"line_start":905,"line_end":905,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9542},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2421003,"byte_end":2421018,"line_start":919,"line_end":919,"column_start":15,"column_end":30},"name":"_mm_store_si128","qualname":"::coresimd::x86::sse2::_mm_store_si128","value":"fn (mem_addr: *mut __m128i, a: __m128i) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store 128-bits of integer data from `a` into memory.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2420904,"byte_end":2420913,"line_start":916,"line_end":916,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2420914,"byte_end":2420948,"line_start":917,"line_end":917,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9544},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2421335,"byte_end":2421351,"line_start":929,"line_end":929,"column_start":15,"column_end":31},"name":"_mm_storeu_si128","qualname":"::coresimd::x86::sse2::_mm_storeu_si128","value":"fn (mem_addr: *mut __m128i, a: __m128i) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store 128-bits of integer data from `a` into memory.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2421211,"byte_end":2421220,"line_start":926,"line_end":926,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2421221,"byte_end":2421255,"line_start":927,"line_end":927,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9546},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2421843,"byte_end":2421859,"line_start":943,"line_end":943,"column_start":15,"column_end":31},"name":"_mm_storel_epi64","qualname":"::coresimd::x86::sse2::_mm_storel_epi64","value":"fn (mem_addr: *mut __m128i, a: __m128i) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store the lower 64-bit integer `a` to a memory location.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2421567,"byte_end":2421576,"line_start":936,"line_end":936,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2421577,"byte_end":2421611,"line_start":937,"line_end":937,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9548},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2422305,"byte_end":2422321,"line_start":957,"line_end":957,"column_start":15,"column_end":31},"name":"_mm_stream_si128","qualname":"::coresimd::x86::sse2::_mm_stream_si128","value":"fn (mem_addr: *mut __m128i, a: __m128i) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores a 128-bit integer vector to a 128-bit aligned memory location.\n To minimize caching, the data is flagged as non-temporal (unlikely to be\n used again soon).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2422188,"byte_end":2422197,"line_start":954,"line_end":954,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2422198,"byte_end":2422232,"line_start":955,"line_end":955,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9550},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2422679,"byte_end":2422694,"line_start":967,"line_end":967,"column_start":15,"column_end":30},"name":"_mm_stream_si32","qualname":"::coresimd::x86::sse2::_mm_stream_si32","value":"fn (mem_addr: *mut i32, a: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores a 32-bit integer value in the specified memory location.\n To minimize caching, the data is flagged as non-temporal (unlikely to be\n used again soon).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2422580,"byte_end":2422589,"line_start":964,"line_end":964,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2422590,"byte_end":2422624,"line_start":965,"line_end":965,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9552},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2423067,"byte_end":2423081,"line_start":978,"line_end":978,"column_start":15,"column_end":29},"name":"_mm_move_epi64","qualname":"::coresimd::x86::sse2::_mm_move_epi64","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return a vector where the low element is extracted from `a` and its upper\n element is zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2422877,"byte_end":2422886,"line_start":973,"line_end":973,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2422887,"byte_end":2422921,"line_start":974,"line_end":974,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9554},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2423448,"byte_end":2423463,"line_start":989,"line_end":989,"column_start":15,"column_end":30},"name":"_mm_packs_epi16","qualname":"::coresimd::x86::sse2::_mm_packs_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers\n using signed saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2423347,"byte_end":2423356,"line_start":986,"line_end":986,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2423357,"byte_end":2423391,"line_start":987,"line_end":987,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9556},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2423769,"byte_end":2423784,"line_start":998,"line_end":998,"column_start":15,"column_end":30},"name":"_mm_packs_epi32","qualname":"::coresimd::x86::sse2::_mm_packs_epi32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers\n using signed saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2423668,"byte_end":2423677,"line_start":995,"line_end":995,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2423678,"byte_end":2423712,"line_start":996,"line_end":996,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9558},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2424091,"byte_end":2424107,"line_start":1007,"line_end":1007,"column_start":15,"column_end":31},"name":"_mm_packus_epi16","qualname":"::coresimd::x86::sse2::_mm_packus_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers\n using unsigned saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2423990,"byte_end":2423999,"line_start":1004,"line_end":1004,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2424000,"byte_end":2424034,"line_start":1005,"line_end":1005,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9560},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2424384,"byte_end":2424401,"line_start":1016,"line_end":1016,"column_start":15,"column_end":32},"name":"_mm_extract_epi16","qualname":"::coresimd::x86::sse2::_mm_extract_epi16","value":"fn (a: __m128i, imm8: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Return the `imm8` element of `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2424243,"byte_end":2424252,"line_start":1012,"line_end":1012,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2424253,"byte_end":2424287,"line_start":1013,"line_end":1013,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2424338,"byte_end":2424369,"line_start":1015,"line_end":1015,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9562},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2424723,"byte_end":2424739,"line_start":1025,"line_end":1025,"column_start":15,"column_end":31},"name":"_mm_insert_epi16","qualname":"::coresimd::x86::sse2::_mm_insert_epi16","value":"fn (a: __m128i, i: i32, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector where the `imm8` element of `a` is replaced with `i`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2424582,"byte_end":2424591,"line_start":1021,"line_end":1021,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2424592,"byte_end":2424626,"line_start":1022,"line_end":1022,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2424677,"byte_end":2424708,"line_start":1024,"line_end":1024,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9564},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2425033,"byte_end":2425050,"line_start":1033,"line_end":1033,"column_start":15,"column_end":32},"name":"_mm_movemask_epi8","qualname":"::coresimd::x86::sse2::_mm_movemask_epi8","value":"fn (a: __m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Return a mask of the most significant bit of each element in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2424932,"byte_end":2424941,"line_start":1030,"line_end":1030,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2424942,"byte_end":2424976,"line_start":1031,"line_end":1031,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9566},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2425307,"byte_end":2425324,"line_start":1042,"line_end":1042,"column_start":15,"column_end":32},"name":"_mm_shuffle_epi32","qualname":"::coresimd::x86::sse2::_mm_shuffle_epi32","value":"fn (a: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle 32-bit integers in `a` using the control in `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2425166,"byte_end":2425175,"line_start":1038,"line_end":1038,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2425176,"byte_end":2425210,"line_start":1039,"line_end":1039,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2425261,"byte_end":2425292,"line_start":1041,"line_end":1041,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9576},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2427605,"byte_end":2427624,"line_start":1106,"line_end":1106,"column_start":15,"column_end":34},"name":"_mm_shufflehi_epi16","qualname":"::coresimd::x86::sse2::_mm_shufflehi_epi16","value":"fn (a: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle 16-bit integers in the high 64 bits of `a` using the control in\n `imm8`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2427463,"byte_end":2427472,"line_start":1102,"line_end":1102,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2427473,"byte_end":2427507,"line_start":1103,"line_end":1103,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2427559,"byte_end":2427590,"line_start":1105,"line_end":1105,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9586},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2429565,"byte_end":2429584,"line_start":1165,"line_end":1165,"column_start":15,"column_end":34},"name":"_mm_shufflelo_epi16","qualname":"::coresimd::x86::sse2::_mm_shufflelo_epi16","value":"fn (a: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle 16-bit integers in the low 64 bits of `a` using the control in\n `imm8`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2429423,"byte_end":2429432,"line_start":1161,"line_end":1161,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2429433,"byte_end":2429467,"line_start":1162,"line_end":1162,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2429519,"byte_end":2429550,"line_start":1164,"line_end":1164,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9596},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2431307,"byte_end":2431324,"line_start":1218,"line_end":1218,"column_start":15,"column_end":32},"name":"_mm_unpackhi_epi8","qualname":"::coresimd::x86::sse2::_mm_unpackhi_epi8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave 8-bit integers from the high half of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2431205,"byte_end":2431214,"line_start":1215,"line_end":1215,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2431215,"byte_end":2431249,"line_start":1216,"line_end":1216,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9598},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2431714,"byte_end":2431732,"line_start":1230,"line_end":1230,"column_start":15,"column_end":33},"name":"_mm_unpackhi_epi16","qualname":"::coresimd::x86::sse2::_mm_unpackhi_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave 16-bit integers from the high half of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2431612,"byte_end":2431621,"line_start":1227,"line_end":1227,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2431622,"byte_end":2431656,"line_start":1228,"line_end":1228,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9600},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2432101,"byte_end":2432119,"line_start":1243,"line_end":1243,"column_start":15,"column_end":33},"name":"_mm_unpackhi_epi32","qualname":"::coresimd::x86::sse2::_mm_unpackhi_epi32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave 32-bit integers from the high half of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2432000,"byte_end":2432009,"line_start":1240,"line_end":1240,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2432010,"byte_end":2432044,"line_start":1241,"line_end":1241,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9602},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2432457,"byte_end":2432475,"line_start":1255,"line_end":1255,"column_start":15,"column_end":33},"name":"_mm_unpackhi_epi64","qualname":"::coresimd::x86::sse2::_mm_unpackhi_epi64","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave 64-bit integers from the high half of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2432356,"byte_end":2432365,"line_start":1252,"line_end":1252,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2432366,"byte_end":2432400,"line_start":1253,"line_end":1253,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9604},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2432806,"byte_end":2432823,"line_start":1267,"line_end":1267,"column_start":15,"column_end":32},"name":"_mm_unpacklo_epi8","qualname":"::coresimd::x86::sse2::_mm_unpacklo_epi8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave 8-bit integers from the low half of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2432704,"byte_end":2432713,"line_start":1264,"line_end":1264,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2432714,"byte_end":2432748,"line_start":1265,"line_end":1265,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9606},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2433206,"byte_end":2433224,"line_start":1279,"line_end":1279,"column_start":15,"column_end":33},"name":"_mm_unpacklo_epi16","qualname":"::coresimd::x86::sse2::_mm_unpacklo_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave 16-bit integers from the low half of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2433104,"byte_end":2433113,"line_start":1276,"line_end":1276,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2433114,"byte_end":2433148,"line_start":1277,"line_end":1277,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9608},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2433567,"byte_end":2433585,"line_start":1289,"line_end":1289,"column_start":15,"column_end":33},"name":"_mm_unpacklo_epi32","qualname":"::coresimd::x86::sse2::_mm_unpacklo_epi32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave 32-bit integers from the low half of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2433466,"byte_end":2433475,"line_start":1286,"line_end":1286,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2433476,"byte_end":2433510,"line_start":1287,"line_end":1287,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9610},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2433921,"byte_end":2433939,"line_start":1301,"line_end":1301,"column_start":15,"column_end":33},"name":"_mm_unpacklo_epi64","qualname":"::coresimd::x86::sse2::_mm_unpacklo_epi64","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave 64-bit integers from the low half of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2433821,"byte_end":2433830,"line_start":1298,"line_end":1298,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2433831,"byte_end":2433865,"line_start":1299,"line_end":1299,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9612},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2434303,"byte_end":2434313,"line_start":1314,"line_end":1314,"column_start":15,"column_end":25},"name":"_mm_add_sd","qualname":"::coresimd::x86::sse2::_mm_add_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by the sum of the\n low elements of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2434205,"byte_end":2434214,"line_start":1311,"line_end":1311,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2434215,"byte_end":2434249,"line_start":1312,"line_end":1312,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9614},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2434596,"byte_end":2434606,"line_start":1323,"line_end":1323,"column_start":15,"column_end":25},"name":"_mm_add_pd","qualname":"::coresimd::x86::sse2::_mm_add_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Add packed double-precision (64-bit) floating-point elements in `a` and\n `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2434498,"byte_end":2434507,"line_start":1320,"line_end":1320,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2434508,"byte_end":2434542,"line_start":1321,"line_end":1321,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9616},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2434907,"byte_end":2434917,"line_start":1332,"line_end":1332,"column_start":15,"column_end":25},"name":"_mm_div_sd","qualname":"::coresimd::x86::sse2::_mm_div_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by the result of\n diving the lower element of `a` by the lower element of `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2434809,"byte_end":2434818,"line_start":1329,"line_end":1329,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2434819,"byte_end":2434853,"line_start":1330,"line_end":1330,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9618},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2435221,"byte_end":2435231,"line_start":1341,"line_end":1341,"column_start":15,"column_end":25},"name":"_mm_div_pd","qualname":"::coresimd::x86::sse2::_mm_div_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Divide packed double-precision (64-bit) floating-point elements in `a` by\n packed elements in `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2435123,"byte_end":2435132,"line_start":1338,"line_end":1338,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2435133,"byte_end":2435167,"line_start":1339,"line_end":1339,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9620},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2435507,"byte_end":2435517,"line_start":1350,"line_end":1350,"column_start":15,"column_end":25},"name":"_mm_max_sd","qualname":"::coresimd::x86::sse2::_mm_max_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by the maximum\n of the lower elements of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2435409,"byte_end":2435418,"line_start":1347,"line_end":1347,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2435419,"byte_end":2435453,"line_start":1348,"line_end":1348,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9622},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2435768,"byte_end":2435778,"line_start":1359,"line_end":1359,"column_start":15,"column_end":25},"name":"_mm_max_pd","qualname":"::coresimd::x86::sse2::_mm_max_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the maximum values from corresponding elements in\n `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2435670,"byte_end":2435679,"line_start":1356,"line_end":1356,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2435680,"byte_end":2435714,"line_start":1357,"line_end":1357,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9624},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2436051,"byte_end":2436061,"line_start":1368,"line_end":1368,"column_start":15,"column_end":25},"name":"_mm_min_sd","qualname":"::coresimd::x86::sse2::_mm_min_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by the minimum\n of the lower elements of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2435953,"byte_end":2435962,"line_start":1365,"line_end":1365,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2435963,"byte_end":2435997,"line_start":1366,"line_end":1366,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9626},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2436312,"byte_end":2436322,"line_start":1377,"line_end":1377,"column_start":15,"column_end":25},"name":"_mm_min_pd","qualname":"::coresimd::x86::sse2::_mm_min_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the minimum values from corresponding elements in\n `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2436214,"byte_end":2436223,"line_start":1374,"line_end":1374,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2436224,"byte_end":2436258,"line_start":1375,"line_end":1375,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9628},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2436590,"byte_end":2436600,"line_start":1386,"line_end":1386,"column_start":15,"column_end":25},"name":"_mm_mul_sd","qualname":"::coresimd::x86::sse2::_mm_mul_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by multiplying the\n low elements of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2436492,"byte_end":2436501,"line_start":1383,"line_end":1383,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2436502,"byte_end":2436536,"line_start":1384,"line_end":1384,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9630},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2436888,"byte_end":2436898,"line_start":1395,"line_end":1395,"column_start":15,"column_end":25},"name":"_mm_mul_pd","qualname":"::coresimd::x86::sse2::_mm_mul_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Multiply packed double-precision (64-bit) floating-point elements in `a`\n and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2436790,"byte_end":2436799,"line_start":1392,"line_end":1392,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2436800,"byte_end":2436834,"line_start":1393,"line_end":1393,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9632},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2437167,"byte_end":2437178,"line_start":1404,"line_end":1404,"column_start":15,"column_end":26},"name":"_mm_sqrt_sd","qualname":"::coresimd::x86::sse2::_mm_sqrt_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by the square\n root of the lower element `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2437068,"byte_end":2437077,"line_start":1401,"line_end":1401,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2437078,"byte_end":2437112,"line_start":1402,"line_end":1402,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9634},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2437441,"byte_end":2437452,"line_start":1412,"line_end":1412,"column_start":15,"column_end":26},"name":"_mm_sqrt_pd","qualname":"::coresimd::x86::sse2::_mm_sqrt_pd","value":"fn (a: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the square root of each of the values in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2437342,"byte_end":2437351,"line_start":1409,"line_end":1409,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2437352,"byte_end":2437386,"line_start":1410,"line_end":1410,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9636},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2437725,"byte_end":2437735,"line_start":1421,"line_end":1421,"column_start":15,"column_end":25},"name":"_mm_sub_sd","qualname":"::coresimd::x86::sse2::_mm_sub_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by subtracting the\n low element by `b` from the low element of `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2437627,"byte_end":2437636,"line_start":1418,"line_end":1418,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2437637,"byte_end":2437671,"line_start":1419,"line_end":1419,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9638},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2438024,"byte_end":2438034,"line_start":1430,"line_end":1430,"column_start":15,"column_end":25},"name":"_mm_sub_pd","qualname":"::coresimd::x86::sse2::_mm_sub_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed double-precision (64-bit) floating-point elements in `b`\n from `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2437926,"byte_end":2437935,"line_start":1427,"line_end":1427,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2437936,"byte_end":2437970,"line_start":1428,"line_end":1428,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9640},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2438300,"byte_end":2438310,"line_start":1439,"line_end":1439,"column_start":15,"column_end":25},"name":"_mm_and_pd","qualname":"::coresimd::x86::sse2::_mm_and_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of packed double-precision (64-bit) floating-point\n elements in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2438202,"byte_end":2438211,"line_start":1436,"line_end":1436,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2438212,"byte_end":2438246,"line_start":1437,"line_end":1437,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9642},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2438628,"byte_end":2438641,"line_start":1449,"line_end":1449,"column_start":15,"column_end":28},"name":"_mm_andnot_pd","qualname":"::coresimd::x86::sse2::_mm_andnot_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise NOT of `a` and then AND with `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2438529,"byte_end":2438538,"line_start":1446,"line_end":1446,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2438539,"byte_end":2438573,"line_start":1447,"line_end":1447,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9644},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2438945,"byte_end":2438954,"line_start":1459,"line_end":1459,"column_start":15,"column_end":24},"name":"_mm_or_pd","qualname":"::coresimd::x86::sse2::_mm_or_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise OR of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2438848,"byte_end":2438857,"line_start":1456,"line_end":1456,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2438858,"byte_end":2438892,"line_start":1457,"line_end":1457,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9646},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2439255,"byte_end":2439265,"line_start":1469,"line_end":1469,"column_start":15,"column_end":25},"name":"_mm_xor_pd","qualname":"::coresimd::x86::sse2::_mm_xor_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise OR of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2439157,"byte_end":2439166,"line_start":1466,"line_end":1466,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2439167,"byte_end":2439201,"line_start":1467,"line_end":1467,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9648},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2439656,"byte_end":2439668,"line_start":1480,"line_end":1480,"column_start":15,"column_end":27},"name":"_mm_cmpeq_sd","qualname":"::coresimd::x86::sse2::_mm_cmpeq_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by the equality\n comparison of the lower elements of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2439556,"byte_end":2439565,"line_start":1477,"line_end":1477,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2439566,"byte_end":2439600,"line_start":1478,"line_end":1478,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9650},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2439959,"byte_end":2439971,"line_start":1489,"line_end":1489,"column_start":15,"column_end":27},"name":"_mm_cmplt_sd","qualname":"::coresimd::x86::sse2::_mm_cmplt_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by the less-than\n comparison of the lower elements of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2439859,"byte_end":2439868,"line_start":1486,"line_end":1486,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2439869,"byte_end":2439903,"line_start":1487,"line_end":1487,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9652},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2440271,"byte_end":2440283,"line_start":1498,"line_end":1498,"column_start":15,"column_end":27},"name":"_mm_cmple_sd","qualname":"::coresimd::x86::sse2::_mm_cmple_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by the\n less-than-or-equal comparison of the lower elements of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2440171,"byte_end":2440180,"line_start":1495,"line_end":1495,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2440181,"byte_end":2440215,"line_start":1496,"line_end":1496,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9654},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2440577,"byte_end":2440589,"line_start":1507,"line_end":1507,"column_start":15,"column_end":27},"name":"_mm_cmpgt_sd","qualname":"::coresimd::x86::sse2::_mm_cmpgt_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by the\n greater-than comparison of the lower elements of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2440477,"byte_end":2440486,"line_start":1504,"line_end":1504,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2440487,"byte_end":2440521,"line_start":1505,"line_end":1505,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9656},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2440942,"byte_end":2440954,"line_start":1516,"line_end":1516,"column_start":15,"column_end":27},"name":"_mm_cmpge_sd","qualname":"::coresimd::x86::sse2::_mm_cmpge_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by the\n greater-than-or-equal comparison of the lower elements of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2440842,"byte_end":2440851,"line_start":1513,"line_end":1513,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2440852,"byte_end":2440886,"line_start":1514,"line_end":1514,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9658},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2441400,"byte_end":2441413,"line_start":1527,"line_end":1527,"column_start":15,"column_end":28},"name":"_mm_cmpord_sd","qualname":"::coresimd::x86::sse2::_mm_cmpord_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by the result\n of comparing both of the lower elements of `a` and `b` to `NaN`. If\n neither are equal to `NaN` then `0xFFFFFFFFFFFFFFFF` is used and `0`\n otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2441299,"byte_end":2441308,"line_start":1524,"line_end":1524,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2441309,"byte_end":2441343,"line_start":1525,"line_end":1525,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9660},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2441805,"byte_end":2441820,"line_start":1537,"line_end":1537,"column_start":15,"column_end":30},"name":"_mm_cmpunord_sd","qualname":"::coresimd::x86::sse2::_mm_cmpunord_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by the result of\n comparing both of the lower elements of `a` and `b` to `NaN`. If either is\n equal to `NaN` then `0xFFFFFFFFFFFFFFFF` is used and `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2441702,"byte_end":2441711,"line_start":1534,"line_end":1534,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2441712,"byte_end":2441746,"line_start":1535,"line_end":1535,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9662},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2442112,"byte_end":2442125,"line_start":1546,"line_end":1546,"column_start":15,"column_end":28},"name":"_mm_cmpneq_sd","qualname":"::coresimd::x86::sse2::_mm_cmpneq_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by the not-equal\n comparison of the lower elements of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2442011,"byte_end":2442020,"line_start":1543,"line_end":1543,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2442021,"byte_end":2442055,"line_start":1544,"line_end":1544,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9664},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2442421,"byte_end":2442434,"line_start":1555,"line_end":1555,"column_start":15,"column_end":28},"name":"_mm_cmpnlt_sd","qualname":"::coresimd::x86::sse2::_mm_cmpnlt_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by the\n not-less-than comparison of the lower elements of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2442320,"byte_end":2442329,"line_start":1552,"line_end":1552,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2442330,"byte_end":2442364,"line_start":1553,"line_end":1553,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9666},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2442739,"byte_end":2442752,"line_start":1564,"line_end":1564,"column_start":15,"column_end":28},"name":"_mm_cmpnle_sd","qualname":"::coresimd::x86::sse2::_mm_cmpnle_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by the\n not-less-than-or-equal comparison of the lower elements of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2442638,"byte_end":2442647,"line_start":1561,"line_end":1561,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2442648,"byte_end":2442682,"line_start":1562,"line_end":1562,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9668},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2443051,"byte_end":2443064,"line_start":1573,"line_end":1573,"column_start":15,"column_end":28},"name":"_mm_cmpngt_sd","qualname":"::coresimd::x86::sse2::_mm_cmpngt_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by the\n not-greater-than comparison of the lower elements of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2442950,"byte_end":2442959,"line_start":1570,"line_end":1570,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2442960,"byte_end":2442994,"line_start":1571,"line_end":1571,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9670},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2443423,"byte_end":2443436,"line_start":1582,"line_end":1582,"column_start":15,"column_end":28},"name":"_mm_cmpnge_sd","qualname":"::coresimd::x86::sse2::_mm_cmpnge_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return a new vector with the low element of `a` replaced by the\n not-greater-than-or-equal comparison of the lower elements of `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2443322,"byte_end":2443331,"line_start":1579,"line_end":1579,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2443332,"byte_end":2443366,"line_start":1580,"line_end":1580,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9672},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2443711,"byte_end":2443723,"line_start":1590,"line_end":1590,"column_start":15,"column_end":27},"name":"_mm_cmpeq_pd","qualname":"::coresimd::x86::sse2::_mm_cmpeq_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compare corresponding elements in `a` and `b` for equality.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2443611,"byte_end":2443620,"line_start":1587,"line_end":1587,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2443621,"byte_end":2443655,"line_start":1588,"line_end":1588,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9674},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2443948,"byte_end":2443960,"line_start":1598,"line_end":1598,"column_start":15,"column_end":27},"name":"_mm_cmplt_pd","qualname":"::coresimd::x86::sse2::_mm_cmplt_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compare corresponding elements in `a` and `b` for less-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2443848,"byte_end":2443857,"line_start":1595,"line_end":1595,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2443858,"byte_end":2443892,"line_start":1596,"line_end":1596,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9676},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2444193,"byte_end":2444205,"line_start":1606,"line_end":1606,"column_start":15,"column_end":27},"name":"_mm_cmple_pd","qualname":"::coresimd::x86::sse2::_mm_cmple_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compare corresponding elements in `a` and `b` for less-than-or-equal\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2444093,"byte_end":2444102,"line_start":1603,"line_end":1603,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2444103,"byte_end":2444137,"line_start":1604,"line_end":1604,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9678},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2444433,"byte_end":2444445,"line_start":1614,"line_end":1614,"column_start":15,"column_end":27},"name":"_mm_cmpgt_pd","qualname":"::coresimd::x86::sse2::_mm_cmpgt_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compare corresponding elements in `a` and `b` for greater-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2444333,"byte_end":2444342,"line_start":1611,"line_end":1611,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2444343,"byte_end":2444377,"line_start":1612,"line_end":1612,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9680},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2444686,"byte_end":2444698,"line_start":1622,"line_end":1622,"column_start":15,"column_end":27},"name":"_mm_cmpge_pd","qualname":"::coresimd::x86::sse2::_mm_cmpge_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compare corresponding elements in `a` and `b` for greater-than-or-equal.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2444586,"byte_end":2444595,"line_start":1619,"line_end":1619,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2444596,"byte_end":2444630,"line_start":1620,"line_end":1620,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9682},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2444941,"byte_end":2444954,"line_start":1630,"line_end":1630,"column_start":15,"column_end":28},"name":"_mm_cmpord_pd","qualname":"::coresimd::x86::sse2::_mm_cmpord_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compare corresponding elements in `a` and `b` to see if neither is `NaN`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2444840,"byte_end":2444849,"line_start":1627,"line_end":1627,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2444850,"byte_end":2444884,"line_start":1628,"line_end":1628,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9684},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2445194,"byte_end":2445209,"line_start":1638,"line_end":1638,"column_start":15,"column_end":30},"name":"_mm_cmpunord_pd","qualname":"::coresimd::x86::sse2::_mm_cmpunord_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compare corresponding elements in `a` and `b` to see if either is `NaN`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2445091,"byte_end":2445100,"line_start":1635,"line_end":1635,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2445101,"byte_end":2445135,"line_start":1636,"line_end":1636,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9686},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2445435,"byte_end":2445448,"line_start":1646,"line_end":1646,"column_start":15,"column_end":28},"name":"_mm_cmpneq_pd","qualname":"::coresimd::x86::sse2::_mm_cmpneq_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compare corresponding elements in `a` and `b` for not-equal.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2445334,"byte_end":2445343,"line_start":1643,"line_end":1643,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2445344,"byte_end":2445378,"line_start":1644,"line_end":1644,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9688},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2445678,"byte_end":2445691,"line_start":1654,"line_end":1654,"column_start":15,"column_end":28},"name":"_mm_cmpnlt_pd","qualname":"::coresimd::x86::sse2::_mm_cmpnlt_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compare corresponding elements in `a` and `b` for not-less-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2445577,"byte_end":2445586,"line_start":1651,"line_end":1651,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2445587,"byte_end":2445621,"line_start":1652,"line_end":1652,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9690},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2445930,"byte_end":2445943,"line_start":1662,"line_end":1662,"column_start":15,"column_end":28},"name":"_mm_cmpnle_pd","qualname":"::coresimd::x86::sse2::_mm_cmpnle_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compare corresponding elements in `a` and `b` for not-less-than-or-equal.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2445829,"byte_end":2445838,"line_start":1659,"line_end":1659,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2445839,"byte_end":2445873,"line_start":1660,"line_end":1660,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9692},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2446176,"byte_end":2446189,"line_start":1670,"line_end":1670,"column_start":15,"column_end":28},"name":"_mm_cmpngt_pd","qualname":"::coresimd::x86::sse2::_mm_cmpngt_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compare corresponding elements in `a` and `b` for not-greater-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2446075,"byte_end":2446084,"line_start":1667,"line_end":1667,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2446085,"byte_end":2446119,"line_start":1668,"line_end":1668,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9694},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2446440,"byte_end":2446453,"line_start":1679,"line_end":1679,"column_start":15,"column_end":28},"name":"_mm_cmpnge_pd","qualname":"::coresimd::x86::sse2::_mm_cmpnge_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compare corresponding elements in `a` and `b` for\n not-greater-than-or-equal.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2446339,"byte_end":2446348,"line_start":1676,"line_end":1676,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2446349,"byte_end":2446383,"line_start":1677,"line_end":1677,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9696},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2446676,"byte_end":2446689,"line_start":1687,"line_end":1687,"column_start":15,"column_end":28},"name":"_mm_comieq_sd","qualname":"::coresimd::x86::sse2::_mm_comieq_sd","value":"fn (a: __m128d, b: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare the lower element of `a` and `b` for equality.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2446577,"byte_end":2446586,"line_start":1684,"line_end":1684,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2446587,"byte_end":2446621,"line_start":1685,"line_end":1685,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9698},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2446904,"byte_end":2446917,"line_start":1695,"line_end":1695,"column_start":15,"column_end":28},"name":"_mm_comilt_sd","qualname":"::coresimd::x86::sse2::_mm_comilt_sd","value":"fn (a: __m128d, b: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare the lower element of `a` and `b` for less-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2446805,"byte_end":2446814,"line_start":1692,"line_end":1692,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2446815,"byte_end":2446849,"line_start":1693,"line_end":1693,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9700},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2447141,"byte_end":2447154,"line_start":1703,"line_end":1703,"column_start":15,"column_end":28},"name":"_mm_comile_sd","qualname":"::coresimd::x86::sse2::_mm_comile_sd","value":"fn (a: __m128d, b: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare the lower element of `a` and `b` for less-than-or-equal.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2447042,"byte_end":2447051,"line_start":1700,"line_end":1700,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2447052,"byte_end":2447086,"line_start":1701,"line_end":1701,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9702},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2447372,"byte_end":2447385,"line_start":1711,"line_end":1711,"column_start":15,"column_end":28},"name":"_mm_comigt_sd","qualname":"::coresimd::x86::sse2::_mm_comigt_sd","value":"fn (a: __m128d, b: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare the lower element of `a` and `b` for greater-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2447273,"byte_end":2447282,"line_start":1708,"line_end":1708,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2447283,"byte_end":2447317,"line_start":1709,"line_end":1709,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9704},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2447612,"byte_end":2447625,"line_start":1719,"line_end":1719,"column_start":15,"column_end":28},"name":"_mm_comige_sd","qualname":"::coresimd::x86::sse2::_mm_comige_sd","value":"fn (a: __m128d, b: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare the lower element of `a` and `b` for greater-than-or-equal.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2447513,"byte_end":2447522,"line_start":1716,"line_end":1716,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2447523,"byte_end":2447557,"line_start":1717,"line_end":1717,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9706},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2447840,"byte_end":2447854,"line_start":1727,"line_end":1727,"column_start":15,"column_end":29},"name":"_mm_comineq_sd","qualname":"::coresimd::x86::sse2::_mm_comineq_sd","value":"fn (a: __m128d, b: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare the lower element of `a` and `b` for not-equal.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2447741,"byte_end":2447750,"line_start":1724,"line_end":1724,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2447751,"byte_end":2447785,"line_start":1725,"line_end":1725,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9708},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2448070,"byte_end":2448084,"line_start":1735,"line_end":1735,"column_start":15,"column_end":29},"name":"_mm_ucomieq_sd","qualname":"::coresimd::x86::sse2::_mm_ucomieq_sd","value":"fn (a: __m128d, b: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare the lower element of `a` and `b` for equality.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2447970,"byte_end":2447979,"line_start":1732,"line_end":1732,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2447980,"byte_end":2448014,"line_start":1733,"line_end":1733,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9710},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2448301,"byte_end":2448315,"line_start":1743,"line_end":1743,"column_start":15,"column_end":29},"name":"_mm_ucomilt_sd","qualname":"::coresimd::x86::sse2::_mm_ucomilt_sd","value":"fn (a: __m128d, b: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare the lower element of `a` and `b` for less-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2448201,"byte_end":2448210,"line_start":1740,"line_end":1740,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2448211,"byte_end":2448245,"line_start":1741,"line_end":1741,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9712},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2448541,"byte_end":2448555,"line_start":1751,"line_end":1751,"column_start":15,"column_end":29},"name":"_mm_ucomile_sd","qualname":"::coresimd::x86::sse2::_mm_ucomile_sd","value":"fn (a: __m128d, b: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare the lower element of `a` and `b` for less-than-or-equal.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2448441,"byte_end":2448450,"line_start":1748,"line_end":1748,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2448451,"byte_end":2448485,"line_start":1749,"line_end":1749,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9714},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2448775,"byte_end":2448789,"line_start":1759,"line_end":1759,"column_start":15,"column_end":29},"name":"_mm_ucomigt_sd","qualname":"::coresimd::x86::sse2::_mm_ucomigt_sd","value":"fn (a: __m128d, b: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare the lower element of `a` and `b` for greater-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2448675,"byte_end":2448684,"line_start":1756,"line_end":1756,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2448685,"byte_end":2448719,"line_start":1757,"line_end":1757,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9716},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2449018,"byte_end":2449032,"line_start":1767,"line_end":1767,"column_start":15,"column_end":29},"name":"_mm_ucomige_sd","qualname":"::coresimd::x86::sse2::_mm_ucomige_sd","value":"fn (a: __m128d, b: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare the lower element of `a` and `b` for greater-than-or-equal.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2448918,"byte_end":2448927,"line_start":1764,"line_end":1764,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2448928,"byte_end":2448962,"line_start":1765,"line_end":1765,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9718},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2449249,"byte_end":2449264,"line_start":1775,"line_end":1775,"column_start":15,"column_end":30},"name":"_mm_ucomineq_sd","qualname":"::coresimd::x86::sse2::_mm_ucomineq_sd","value":"fn (a: __m128d, b: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare the lower element of `a` and `b` for not-equal.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2449149,"byte_end":2449158,"line_start":1772,"line_end":1772,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2449159,"byte_end":2449193,"line_start":1773,"line_end":1773,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9720},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2449563,"byte_end":2449575,"line_start":1784,"line_end":1784,"column_start":15,"column_end":27},"name":"_mm_cvtpd_ps","qualname":"::coresimd::x86::sse2::_mm_cvtpd_ps","value":"fn (a: __m128d) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Convert packed double-precision (64-bit) floating-point elements in \"a\" to\n packed single-precision (32-bit) floating-point elements\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2449462,"byte_end":2449471,"line_start":1781,"line_end":1781,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2449472,"byte_end":2449506,"line_start":1782,"line_end":1782,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9722},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2449865,"byte_end":2449877,"line_start":1794,"line_end":1794,"column_start":15,"column_end":27},"name":"_mm_cvtps_pd","qualname":"::coresimd::x86::sse2::_mm_cvtps_pd","value":"fn (a: __m128) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert packed single-precision (32-bit) floating-point elements in `a` to\n packed\n double-precision (64-bit) floating-point elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2449764,"byte_end":2449773,"line_start":1791,"line_end":1791,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2449774,"byte_end":2449808,"line_start":1792,"line_end":1792,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9724},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2450129,"byte_end":2450144,"line_start":1803,"line_end":1803,"column_start":15,"column_end":30},"name":"_mm_cvtpd_epi32","qualname":"::coresimd::x86::sse2::_mm_cvtpd_epi32","value":"fn (a: __m128d) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Convert packed double-precision (64-bit) floating-point elements in `a` to\n packed 32-bit integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2450028,"byte_end":2450037,"line_start":1800,"line_end":1800,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2450038,"byte_end":2450072,"line_start":1801,"line_end":1801,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9726},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2450407,"byte_end":2450421,"line_start":1812,"line_end":1812,"column_start":15,"column_end":29},"name":"_mm_cvtsd_si32","qualname":"::coresimd::x86::sse2::_mm_cvtsd_si32","value":"fn (a: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Convert the lower double-precision (64-bit) floating-point element in a to\n a 32-bit integer.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2450306,"byte_end":2450315,"line_start":1809,"line_end":1809,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2450316,"byte_end":2450350,"line_start":1810,"line_end":1810,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9728},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2450842,"byte_end":2450854,"line_start":1823,"line_end":1823,"column_start":15,"column_end":27},"name":"_mm_cvtsd_ss","qualname":"::coresimd::x86::sse2::_mm_cvtsd_ss","value":"fn (a: __m128, b: __m128d) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Convert the lower double-precision (64-bit) floating-point element in `b`\n to a single-precision (32-bit) floating-point element, store the result in\n the lower element of the return value, and copy the upper element from `a`\n to the upper element the return value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2450741,"byte_end":2450750,"line_start":1820,"line_end":1820,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2450751,"byte_end":2450785,"line_start":1821,"line_end":1821,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9730},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2451049,"byte_end":2451062,"line_start":1830,"line_end":1830,"column_start":15,"column_end":28},"name":"_mm_cvtsd_f64","qualname":"::coresimd::x86::sse2::_mm_cvtsd_f64","value":"fn (a: __m128d) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Return the lower double-precision (64-bit) floating-point element of \"a\".\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2450990,"byte_end":2450999,"line_start":1828,"line_end":1828,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2451000,"byte_end":2451034,"line_start":1829,"line_end":1829,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9732},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2451490,"byte_end":2451502,"line_start":1841,"line_end":1841,"column_start":15,"column_end":27},"name":"_mm_cvtss_sd","qualname":"::coresimd::x86::sse2::_mm_cvtss_sd","value":"fn (a: __m128d, b: __m128) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert the lower single-precision (32-bit) floating-point element in `b`\n to a double-precision (64-bit) floating-point element, store the result in\n the lower element of the return value, and copy the upper element from `a`\n to the upper element the return value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2451389,"byte_end":2451398,"line_start":1838,"line_end":1838,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2451399,"byte_end":2451433,"line_start":1839,"line_end":1839,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9734},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2451786,"byte_end":2451802,"line_start":1850,"line_end":1850,"column_start":15,"column_end":31},"name":"_mm_cvttpd_epi32","qualname":"::coresimd::x86::sse2::_mm_cvttpd_epi32","value":"fn (a: __m128d) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Convert packed double-precision (64-bit) floating-point elements in `a` to\n packed 32-bit integers with truncation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2451684,"byte_end":2451693,"line_start":1847,"line_end":1847,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2451694,"byte_end":2451728,"line_start":1848,"line_end":1848,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9736},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2452085,"byte_end":2452100,"line_start":1859,"line_end":1859,"column_start":15,"column_end":30},"name":"_mm_cvttsd_si32","qualname":"::coresimd::x86::sse2::_mm_cvttsd_si32","value":"fn (a: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Convert the lower double-precision (64-bit) floating-point element in `a`\n to a 32-bit integer with truncation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2451983,"byte_end":2451992,"line_start":1856,"line_end":1856,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2451993,"byte_end":2452027,"line_start":1857,"line_end":1857,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9738},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2452367,"byte_end":2452383,"line_start":1868,"line_end":1868,"column_start":15,"column_end":31},"name":"_mm_cvttps_epi32","qualname":"::coresimd::x86::sse2::_mm_cvttps_epi32","value":"fn (a: __m128) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Convert packed single-precision (32-bit) floating-point elements in `a` to\n packed 32-bit integers with truncation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2452265,"byte_end":2452274,"line_start":1865,"line_end":1865,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2452275,"byte_end":2452309,"line_start":1866,"line_end":1866,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9740},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2452625,"byte_end":2452635,"line_start":1876,"line_end":1876,"column_start":15,"column_end":25},"name":"_mm_set_sd","qualname":"::coresimd::x86::sse2::_mm_set_sd","value":"fn (a: f64) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Copy double-precision (64-bit) floating-point element `a` to the lower\n element of the packed 64-bit return value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2452566,"byte_end":2452575,"line_start":1874,"line_end":1874,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2452576,"byte_end":2452610,"line_start":1875,"line_end":1875,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9742},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2452846,"byte_end":2452857,"line_start":1884,"line_end":1884,"column_start":15,"column_end":26},"name":"_mm_set1_pd","qualname":"::coresimd::x86::sse2::_mm_set1_pd","value":"fn (a: f64) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Broadcast double-precision (64-bit) floating-point value a to all elements\n of the return value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2452787,"byte_end":2452796,"line_start":1882,"line_end":1882,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2452797,"byte_end":2452831,"line_start":1883,"line_end":1883,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9744},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2453066,"byte_end":2453077,"line_start":1892,"line_end":1892,"column_start":15,"column_end":26},"name":"_mm_set_pd1","qualname":"::coresimd::x86::sse2::_mm_set_pd1","value":"fn (a: f64) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Broadcast double-precision (64-bit) floating-point value a to all elements\n of the return value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2453007,"byte_end":2453016,"line_start":1890,"line_end":1890,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2453017,"byte_end":2453051,"line_start":1891,"line_end":1891,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9746},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2453297,"byte_end":2453307,"line_start":1900,"line_end":1900,"column_start":15,"column_end":25},"name":"_mm_set_pd","qualname":"::coresimd::x86::sse2::_mm_set_pd","value":"fn (a: f64, b: f64) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Set packed double-precision (64-bit) floating-point elements in the return\n value with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2453238,"byte_end":2453247,"line_start":1898,"line_end":1898,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2453248,"byte_end":2453282,"line_start":1899,"line_end":1899,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9748},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2453549,"byte_end":2453560,"line_start":1908,"line_end":1908,"column_start":15,"column_end":26},"name":"_mm_setr_pd","qualname":"::coresimd::x86::sse2::_mm_setr_pd","value":"fn (a: f64, b: f64) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Set packed double-precision (64-bit) floating-point elements in the return\n value with the supplied values in reverse order.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2453490,"byte_end":2453499,"line_start":1906,"line_end":1906,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2453500,"byte_end":2453534,"line_start":1907,"line_end":1907,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9750},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2453825,"byte_end":2453839,"line_start":1917,"line_end":1917,"column_start":15,"column_end":29},"name":"_mm_setzero_pd","qualname":"::coresimd::x86::sse2::_mm_setzero_pd","value":"fn () -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Returns packed double-precision (64-bit) floating-point elements with all\n zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2453703,"byte_end":2453712,"line_start":1914,"line_end":1914,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2453713,"byte_end":2453747,"line_start":1915,"line_end":1915,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9752},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2454169,"byte_end":2454184,"line_start":1928,"line_end":1928,"column_start":15,"column_end":30},"name":"_mm_movemask_pd","qualname":"::coresimd::x86::sse2::_mm_movemask_pd","value":"fn (a: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Return a mask of the most significant bit of each element in `a`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2454068,"byte_end":2454077,"line_start":1925,"line_end":1925,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2454078,"byte_end":2454112,"line_start":1926,"line_end":1926,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9754},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2454566,"byte_end":2454577,"line_start":1939,"line_end":1939,"column_start":15,"column_end":26},"name":"_mm_load_pd","qualname":"::coresimd::x86::sse2::_mm_load_pd","value":"fn (mem_addr: *const f64) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Load 128-bits (composed of 2 packed double-precision (64-bit)\n floating-point elements) from memory into the returned vector.\n `mem_addr` must be aligned on a 16-byte boundary or a general-protection\n exception may be generated.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2454467,"byte_end":2454476,"line_start":1936,"line_end":1936,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2454477,"byte_end":2454511,"line_start":1937,"line_end":1937,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9756},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2454871,"byte_end":2454882,"line_start":1948,"line_end":1948,"column_start":15,"column_end":26},"name":"_mm_load_sd","qualname":"::coresimd::x86::sse2::_mm_load_sd","value":"fn (mem_addr: *const f64) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads a 64-bit double-precision value to the low element of a\n 128-bit integer vector and clears the upper element.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2454773,"byte_end":2454782,"line_start":1945,"line_end":1945,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2454783,"byte_end":2454817,"line_start":1946,"line_end":1946,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9758},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2455232,"byte_end":2455244,"line_start":1958,"line_end":1958,"column_start":15,"column_end":27},"name":"_mm_loadh_pd","qualname":"::coresimd::x86::sse2::_mm_loadh_pd","value":"fn (a: __m128d, mem_addr: *const f64) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads a double-precision value into the high-order bits of a 128-bit\n vector of [2 x double]. The low-order bits are copied from the low-order\n bits of the first operand.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2455133,"byte_end":2455142,"line_start":1955,"line_end":1955,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2455143,"byte_end":2455177,"line_start":1956,"line_end":1956,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9760},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2455623,"byte_end":2455635,"line_start":1968,"line_end":1968,"column_start":15,"column_end":27},"name":"_mm_loadl_pd","qualname":"::coresimd::x86::sse2::_mm_loadl_pd","value":"fn (a: __m128d, mem_addr: *const f64) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads a double-precision value into the low-order bits of a 128-bit\n vector of [2 x double]. The high-order bits are copied from the\n high-order bits of the first operand.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2455524,"byte_end":2455533,"line_start":1965,"line_end":1965,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2455534,"byte_end":2455568,"line_start":1966,"line_end":1966,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9762},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2456050,"byte_end":2456063,"line_start":1979,"line_end":1979,"column_start":15,"column_end":28},"name":"_mm_stream_pd","qualname":"::coresimd::x86::sse2::_mm_stream_pd","value":"fn (mem_addr: *mut f64, a: __m128d) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores a 128-bit floating point vector of [2 x double] to a 128-bit\n aligned memory location.\n To minimize caching, the data is flagged as non-temporal (unlikely to be\n used again soon).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2455933,"byte_end":2455942,"line_start":1976,"line_end":1976,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2455943,"byte_end":2455977,"line_start":1977,"line_end":1977,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9764},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2456355,"byte_end":2456367,"line_start":1988,"line_end":1988,"column_start":15,"column_end":27},"name":"_mm_store_sd","qualname":"::coresimd::x86::sse2::_mm_store_sd","value":"fn (mem_addr: *mut f64, a: __m128d) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores the lower 64 bits of a 128-bit vector of [2 x double] to a\n memory location.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2456256,"byte_end":2456265,"line_start":1985,"line_end":1985,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2456266,"byte_end":2456300,"line_start":1986,"line_end":1986,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9766},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2456762,"byte_end":2456774,"line_start":1998,"line_end":1998,"column_start":15,"column_end":27},"name":"_mm_store_pd","qualname":"::coresimd::x86::sse2::_mm_store_pd","value":"fn (mem_addr: *mut f64, a: __m128d) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store 128-bits (composed of 2 packed double-precision (64-bit)\n floating-point elements) from `a` into memory. `mem_addr` must be aligned\n on a 16-byte boundary or a general-protection exception may be generated.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2456663,"byte_end":2456672,"line_start":1995,"line_end":1995,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2456673,"byte_end":2456707,"line_start":1996,"line_end":1996,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9768},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2457162,"byte_end":2457175,"line_start":2008,"line_end":2008,"column_start":15,"column_end":28},"name":"_mm_storeu_pd","qualname":"::coresimd::x86::sse2::_mm_storeu_pd","value":"fn (mem_addr: *mut f64, a: __m128d) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store 128-bits (composed of 2 packed double-precision (64-bit)\n floating-point elements) from `a` into memory.\n `mem_addr` does not need to be aligned on any particular boundary.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2457038,"byte_end":2457047,"line_start":2005,"line_end":2005,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2457048,"byte_end":2457082,"line_start":2006,"line_end":2006,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9770},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2457535,"byte_end":2457548,"line_start":2017,"line_end":2017,"column_start":15,"column_end":28},"name":"_mm_store1_pd","qualname":"::coresimd::x86::sse2::_mm_store1_pd","value":"fn (mem_addr: *mut f64, a: __m128d) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store the lower double-precision (64-bit) floating-point element from `a`\n into 2 contiguous elements in memory. `mem_addr` must be aligned on a\n 16-byte boundary or a general-protection exception may be generated.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2457476,"byte_end":2457485,"line_start":2015,"line_end":2015,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2457486,"byte_end":2457520,"line_start":2016,"line_end":2016,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9772},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2457957,"byte_end":2457970,"line_start":2027,"line_end":2027,"column_start":15,"column_end":28},"name":"_mm_store_pd1","qualname":"::coresimd::x86::sse2::_mm_store_pd1","value":"fn (mem_addr: *mut f64, a: __m128d) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store the lower double-precision (64-bit) floating-point element from `a`\n into 2 contiguous elements in memory. `mem_addr` must be aligned on a\n 16-byte boundary or a general-protection exception may be generated.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2457898,"byte_end":2457907,"line_start":2025,"line_end":2025,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2457908,"byte_end":2457942,"line_start":2026,"line_end":2026,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9774},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2458368,"byte_end":2458381,"line_start":2038,"line_end":2038,"column_start":15,"column_end":28},"name":"_mm_storer_pd","qualname":"::coresimd::x86::sse2::_mm_storer_pd","value":"fn (mem_addr: *mut f64, a: __m128d) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store 2 double-precision (64-bit) floating-point elements from `a` into\n memory in reverse order.\n `mem_addr` must be aligned on a 16-byte boundary or a general-protection\n exception may be generated.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2458309,"byte_end":2458318,"line_start":2036,"line_end":2036,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2458319,"byte_end":2458353,"line_start":2037,"line_end":2037,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9776},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2458696,"byte_end":2458709,"line_start":2048,"line_end":2048,"column_start":15,"column_end":28},"name":"_mm_storeh_pd","qualname":"::coresimd::x86::sse2::_mm_storeh_pd","value":"fn (mem_addr: *mut f64, a: __m128d) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores the upper 64 bits of a 128-bit vector of [2 x double] to a\n memory location.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2458597,"byte_end":2458606,"line_start":2045,"line_end":2045,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2458607,"byte_end":2458641,"line_start":2046,"line_end":2046,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9778},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2458989,"byte_end":2459002,"line_start":2057,"line_end":2057,"column_start":15,"column_end":28},"name":"_mm_storel_pd","qualname":"::coresimd::x86::sse2::_mm_storel_pd","value":"fn (mem_addr: *mut f64, a: __m128d) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores the lower 64 bits of a 128-bit vector of [2 x double] to a\n memory location.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2458874,"byte_end":2458883,"line_start":2054,"line_end":2054,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2458884,"byte_end":2458918,"line_start":2055,"line_end":2055,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9780},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2459330,"byte_end":2459342,"line_start":2066,"line_end":2066,"column_start":15,"column_end":27},"name":"_mm_load1_pd","qualname":"::coresimd::x86::sse2::_mm_load1_pd","value":"fn (mem_addr: *const f64) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Load a double-precision (64-bit) floating-point element from memory\n into both elements of returned vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2459191,"byte_end":2459200,"line_start":2063,"line_end":2063,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2459201,"byte_end":2459235,"line_start":2064,"line_end":2064,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9782},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2459673,"byte_end":2459685,"line_start":2076,"line_end":2076,"column_start":15,"column_end":27},"name":"_mm_load_pd1","qualname":"::coresimd::x86::sse2::_mm_load_pd1","value":"fn (mem_addr: *const f64) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Load a double-precision (64-bit) floating-point element from memory\n into both elements of returned vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2459541,"byte_end":2459550,"line_start":2073,"line_end":2073,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2459551,"byte_end":2459585,"line_start":2074,"line_end":2074,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9784},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2460075,"byte_end":2460087,"line_start":2086,"line_end":2086,"column_start":15,"column_end":27},"name":"_mm_loadr_pd","qualname":"::coresimd::x86::sse2::_mm_loadr_pd","value":"fn (mem_addr: *const f64) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Load 2 double-precision (64-bit) floating-point elements from memory into\n the returned vector in reverse order. `mem_addr` must be aligned on a\n 16-byte boundary or a general-protection exception may be generated.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2459976,"byte_end":2459985,"line_start":2083,"line_end":2083,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2459986,"byte_end":2460020,"line_start":2084,"line_end":2084,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9786},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2460496,"byte_end":2460508,"line_start":2097,"line_end":2097,"column_start":15,"column_end":27},"name":"_mm_loadu_pd","qualname":"::coresimd::x86::sse2::_mm_loadu_pd","value":"fn (mem_addr: *const f64) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Load 128-bits (composed of 2 packed double-precision (64-bit)\n floating-point elements) from memory into the returned vector.\n `mem_addr` does not need to be aligned on any particular boundary.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2460397,"byte_end":2460406,"line_start":2094,"line_end":2094,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2460407,"byte_end":2460441,"line_start":2095,"line_end":2095,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9788},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2461057,"byte_end":2461071,"line_start":2114,"line_end":2114,"column_start":15,"column_end":29},"name":"_mm_shuffle_pd","qualname":"::coresimd::x86::sse2::_mm_shuffle_pd","value":"fn (a: __m128d, b: __m128d, imm8: i32) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 128-bit floating-point vector of [2 x double] from two\n 128-bit vector parameters of [2 x double], using the immediate-value\n parameter as a specifier.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2460916,"byte_end":2460925,"line_start":2110,"line_end":2110,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2460926,"byte_end":2460960,"line_start":2111,"line_end":2111,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2461011,"byte_end":2461042,"line_start":2113,"line_end":2113,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9790},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2461643,"byte_end":2461654,"line_start":2129,"line_end":2129,"column_start":15,"column_end":26},"name":"_mm_move_sd","qualname":"::coresimd::x86::sse2::_mm_move_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 128-bit floating-point vector of [2 x double]. The lower\n 64 bits are set to the lower 64 bits of the second parameter. The upper\n 64 bits are set to the upper 64 bits of the first parameter.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2461545,"byte_end":2461554,"line_start":2126,"line_end":2126,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2461555,"byte_end":2461589,"line_start":2127,"line_end":2127,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9792},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2461925,"byte_end":2461938,"line_start":2137,"line_end":2137,"column_start":15,"column_end":28},"name":"_mm_castpd_ps","qualname":"::coresimd::x86::sse2::_mm_castpd_ps","value":"fn (a: __m128d) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Casts a 128-bit floating-point vector of [2 x double] into a 128-bit\n floating-point vector of [4 x float].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2461866,"byte_end":2461875,"line_start":2135,"line_end":2135,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2461876,"byte_end":2461910,"line_start":2136,"line_end":2136,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9794},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2462140,"byte_end":2462156,"line_start":2145,"line_end":2145,"column_start":15,"column_end":31},"name":"_mm_castpd_si128","qualname":"::coresimd::x86::sse2::_mm_castpd_si128","value":"fn (a: __m128d) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Casts a 128-bit floating-point vector of [2 x double] into a 128-bit\n integer vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2462081,"byte_end":2462090,"line_start":2143,"line_end":2143,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2462091,"byte_end":2462125,"line_start":2144,"line_end":2144,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9796},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2462404,"byte_end":2462417,"line_start":2153,"line_end":2153,"column_start":15,"column_end":28},"name":"_mm_castps_pd","qualname":"::coresimd::x86::sse2::_mm_castps_pd","value":"fn (a: __m128) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Casts a 128-bit floating-point vector of [4 x float] into a 128-bit\n floating-point vector of [2 x double].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2462345,"byte_end":2462354,"line_start":2151,"line_end":2151,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2462355,"byte_end":2462389,"line_start":2152,"line_end":2152,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9798},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2462618,"byte_end":2462634,"line_start":2161,"line_end":2161,"column_start":15,"column_end":31},"name":"_mm_castps_si128","qualname":"::coresimd::x86::sse2::_mm_castps_si128","value":"fn (a: __m128) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Casts a 128-bit floating-point vector of [4 x float] into a 128-bit\n integer vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2462559,"byte_end":2462568,"line_start":2159,"line_end":2159,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2462569,"byte_end":2462603,"line_start":2160,"line_end":2160,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9800},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2462836,"byte_end":2462852,"line_start":2169,"line_end":2169,"column_start":15,"column_end":31},"name":"_mm_castsi128_pd","qualname":"::coresimd::x86::sse2::_mm_castsi128_pd","value":"fn (a: __m128i) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Casts a 128-bit integer vector into a 128-bit floating-point vector\n of [2 x double].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2462777,"byte_end":2462786,"line_start":2167,"line_end":2167,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2462787,"byte_end":2462821,"line_start":2168,"line_end":2168,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9802},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2463060,"byte_end":2463076,"line_start":2177,"line_end":2177,"column_start":15,"column_end":31},"name":"_mm_castsi128_ps","qualname":"::coresimd::x86::sse2::_mm_castsi128_ps","value":"fn (a: __m128i) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Casts a 128-bit integer vector into a 128-bit floating-point vector\n of [4 x float].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2463001,"byte_end":2463010,"line_start":2175,"line_end":2175,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2463011,"byte_end":2463045,"line_start":2176,"line_end":2176,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9804},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2463244,"byte_end":2463260,"line_start":2184,"line_end":2184,"column_start":15,"column_end":31},"name":"_mm_undefined_pd","qualname":"::coresimd::x86::sse2::_mm_undefined_pd","value":"fn () -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return vector of type __m128d with undefined elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2463185,"byte_end":2463194,"line_start":2182,"line_end":2182,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2463195,"byte_end":2463229,"line_start":2183,"line_end":2183,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9806},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2463435,"byte_end":2463454,"line_start":2191,"line_end":2191,"column_start":15,"column_end":34},"name":"_mm_undefined_si128","qualname":"::coresimd::x86::sse2::_mm_undefined_si128","value":"fn () -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return vector of type __m128i with undefined elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2463376,"byte_end":2463385,"line_start":2189,"line_end":2189,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2463386,"byte_end":2463420,"line_start":2190,"line_end":2190,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9808},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2463902,"byte_end":2463917,"line_start":2203,"line_end":2203,"column_start":15,"column_end":30},"name":"_mm_unpackhi_pd","qualname":"::coresimd::x86::sse2::_mm_unpackhi_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" The resulting `__m128d` element is composed by the low-order values of\n the two `__m128d` interleaved input elements, i.e.:","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2463801,"byte_end":2463810,"line_start":2200,"line_end":2200,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2463811,"byte_end":2463845,"line_start":2201,"line_end":2201,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9810},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2464375,"byte_end":2464390,"line_start":2215,"line_end":2215,"column_start":15,"column_end":30},"name":"_mm_unpacklo_pd","qualname":"::coresimd::x86::sse2::_mm_unpacklo_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" The resulting `__m128d` element is composed by the high-order values of\n the two `__m128d` interleaved input elements, i.e.:","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2464275,"byte_end":2464284,"line_start":2212,"line_end":2212,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2464285,"byte_end":2464319,"line_start":2213,"line_end":2213,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9812},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2464664,"byte_end":2464676,"line_start":2224,"line_end":2224,"column_start":15,"column_end":27},"name":"_mm_add_si64","qualname":"::coresimd::x86::sse2::_mm_add_si64","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Adds two signed or unsigned 64-bit integer values, returning the\n lower 64 bits of the sum.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2464562,"byte_end":2464571,"line_start":2221,"line_end":2221,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2464572,"byte_end":2464610,"line_start":2222,"line_end":2222,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":9814},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2464988,"byte_end":2465000,"line_start":2234,"line_end":2234,"column_start":15,"column_end":27},"name":"_mm_mul_su32","qualname":"::coresimd::x86::sse2::_mm_mul_su32","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Multiplies 32-bit unsigned integer values contained in the lower bits\n of the two 64-bit integer vectors and returns the 64-bit unsigned\n product.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2464884,"byte_end":2464893,"line_start":2231,"line_end":2231,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2464894,"byte_end":2464932,"line_start":2232,"line_end":2232,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":9816},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2465287,"byte_end":2465299,"line_start":2243,"line_end":2243,"column_start":15,"column_end":27},"name":"_mm_sub_si64","qualname":"::coresimd::x86::sse2::_mm_sub_si64","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Subtracts signed or unsigned 64-bit integer values and writes the\n difference to the corresponding bits in the destination.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2465185,"byte_end":2465194,"line_start":2240,"line_end":2240,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2465195,"byte_end":2465233,"line_start":2241,"line_end":2241,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":9818},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2465642,"byte_end":2465656,"line_start":2253,"line_end":2253,"column_start":15,"column_end":29},"name":"_mm_cvtpi32_pd","qualname":"::coresimd::x86::sse2::_mm_cvtpi32_pd","value":"fn (a: __m64) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Converts the two signed 32-bit integer elements of a 64-bit vector of\n [2 x i32] into two double-precision floating-point values, returned in a\n 128-bit vector of [2 x double].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2465537,"byte_end":2465546,"line_start":2250,"line_end":2250,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2465547,"byte_end":2465585,"line_start":2251,"line_end":2251,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":9820},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2465913,"byte_end":2465926,"line_start":2262,"line_end":2262,"column_start":15,"column_end":28},"name":"_mm_set_epi64","qualname":"::coresimd::x86::sse2::_mm_set_epi64","value":"fn (e1: __m64, e0: __m64) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Initializes both 64-bit values in a 128-bit vector of [2 x i64] with\n the specified 64-bit integer values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2465813,"byte_end":2465822,"line_start":2259,"line_end":2259,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2465823,"byte_end":2465861,"line_start":2260,"line_end":2260,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":9822},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2466222,"byte_end":2466236,"line_start":2271,"line_end":2271,"column_start":15,"column_end":29},"name":"_mm_set1_epi64","qualname":"::coresimd::x86::sse2::_mm_set1_epi64","value":"fn (a: __m64) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Initializes both values in a 128-bit vector of [2 x i64] with the\n specified 64-bit value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2466122,"byte_end":2466131,"line_start":2268,"line_end":2268,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2466132,"byte_end":2466170,"line_start":2269,"line_end":2269,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":9824},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2466537,"byte_end":2466551,"line_start":2280,"line_end":2280,"column_start":15,"column_end":29},"name":"_mm_setr_epi64","qualname":"::coresimd::x86::sse2::_mm_setr_epi64","value":"fn (e1: __m64, e0: __m64) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 128-bit integer vector, initialized in reverse order\n with the specified 64-bit integral values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2466437,"byte_end":2466446,"line_start":2277,"line_end":2277,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2466447,"byte_end":2466485,"line_start":2278,"line_end":2278,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":9826},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2466879,"byte_end":2466896,"line_start":2290,"line_end":2290,"column_start":15,"column_end":32},"name":"_mm_movepi64_pi64","qualname":"::coresimd::x86::sse2::_mm_movepi64_pi64","value":"fn (a: __m128i) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Returns the lower 64 bits of a 128-bit integer vector as a 64-bit\n integer.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2466732,"byte_end":2466741,"line_start":2286,"line_end":2286,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2466742,"byte_end":2466780,"line_start":2287,"line_end":2287,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":9828},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2467216,"byte_end":2467233,"line_start":2300,"line_end":2300,"column_start":15,"column_end":32},"name":"_mm_movpi64_epi64","qualname":"::coresimd::x86::sse2::_mm_movpi64_epi64","value":"fn (a: __m64) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Moves the 64-bit operand to a 128-bit integer vector, zeroing the\n upper bits.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2467069,"byte_end":2467078,"line_start":2296,"line_end":2296,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2467079,"byte_end":2467117,"line_start":2297,"line_end":2297,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":9830},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2467593,"byte_end":2467607,"line_start":2310,"line_end":2310,"column_start":15,"column_end":29},"name":"_mm_cvtpd_pi32","qualname":"::coresimd::x86::sse2::_mm_cvtpd_pi32","value":"fn (a: __m128d) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Converts the two double-precision floating-point elements of a\n 128-bit vector of [2 x double] into two signed 32-bit integer values,\n returned in a 64-bit vector of [2 x i32].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2467488,"byte_end":2467497,"line_start":2307,"line_end":2307,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2467498,"byte_end":2467536,"line_start":2308,"line_end":2308,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":9832},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2468086,"byte_end":2468101,"line_start":2322,"line_end":2322,"column_start":15,"column_end":30},"name":"_mm_cvttpd_pi32","qualname":"::coresimd::x86::sse2::_mm_cvttpd_pi32","value":"fn (a: __m128d) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Converts the two double-precision floating-point elements of a\n 128-bit vector of [2 x double] into two signed 32-bit integer values,\n returned in a 64-bit vector of [2 x i32].\n If the result of either conversion is inexact, the result is truncated\n (rounded towards zero) regardless of the current MXCSR setting.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2467980,"byte_end":2467989,"line_start":2319,"line_end":2319,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,50,46,114,115],"byte_start":2467990,"byte_end":2468028,"line_start":2320,"line_end":2320,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":9850},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2540772,"byte_end":2540785,"line_start":15,"line_end":15,"column_start":15,"column_end":28},"name":"_mm_addsub_ps","qualname":"::coresimd::x86::sse3::_mm_addsub_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Alternatively add and subtract packed single-precision (32-bit)\n floating-point elements in `a` to/from packed elements in `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2540671,"byte_end":2540680,"line_start":12,"line_end":12,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2540681,"byte_end":2540715,"line_start":13,"line_end":13,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9852},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2541078,"byte_end":2541091,"line_start":24,"line_end":24,"column_start":15,"column_end":28},"name":"_mm_addsub_pd","qualname":"::coresimd::x86::sse3::_mm_addsub_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Alternatively add and subtract packed double-precision (64-bit)\n floating-point elements in `a` to/from packed elements in `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2540977,"byte_end":2540986,"line_start":21,"line_end":21,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2540987,"byte_end":2541021,"line_start":22,"line_end":22,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9854},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2541381,"byte_end":2541392,"line_start":33,"line_end":33,"column_start":15,"column_end":26},"name":"_mm_hadd_pd","qualname":"::coresimd::x86::sse3::_mm_hadd_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Horizontally add adjacent pairs of double-precision (64-bit)\n floating-point elements in `a` and `b`, and pack the results.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2541282,"byte_end":2541291,"line_start":30,"line_end":30,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2541292,"byte_end":2541326,"line_start":31,"line_end":31,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9856},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2541680,"byte_end":2541691,"line_start":42,"line_end":42,"column_start":15,"column_end":26},"name":"_mm_hadd_ps","qualname":"::coresimd::x86::sse3::_mm_hadd_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Horizontally add adjacent pairs of single-precision (32-bit)\n floating-point elements in `a` and `b`, and pack the results.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2541581,"byte_end":2541590,"line_start":39,"line_end":39,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2541591,"byte_end":2541625,"line_start":40,"line_end":40,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9858},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2541981,"byte_end":2541992,"line_start":51,"line_end":51,"column_start":15,"column_end":26},"name":"_mm_hsub_pd","qualname":"::coresimd::x86::sse3::_mm_hsub_pd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Horizontally subtract adjacent pairs of double-precision (64-bit)\n floating-point elements in `a` and `b`, and pack the results.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2541882,"byte_end":2541891,"line_start":48,"line_end":48,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2541892,"byte_end":2541926,"line_start":49,"line_end":49,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9860},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2542280,"byte_end":2542291,"line_start":60,"line_end":60,"column_start":15,"column_end":26},"name":"_mm_hsub_ps","qualname":"::coresimd::x86::sse3::_mm_hsub_ps","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Horizontally add adjacent pairs of single-precision (32-bit)\n floating-point elements in `a` and `b`, and pack the results.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2542181,"byte_end":2542190,"line_start":57,"line_end":57,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2542191,"byte_end":2542225,"line_start":58,"line_end":58,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9862},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2542611,"byte_end":2542626,"line_start":70,"line_end":70,"column_start":15,"column_end":30},"name":"_mm_lddqu_si128","qualname":"::coresimd::x86::sse3::_mm_lddqu_si128","value":"fn (mem_addr: *const __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Load 128-bits of integer data from unaligned memory.\n This intrinsic may perform better than `_mm_loadu_si128`\n when the data crosses a cache line boundary.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2542513,"byte_end":2542522,"line_start":67,"line_end":67,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2542523,"byte_end":2542557,"line_start":68,"line_end":68,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9864},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2542902,"byte_end":2542916,"line_start":79,"line_end":79,"column_start":15,"column_end":29},"name":"_mm_movedup_pd","qualname":"::coresimd::x86::sse3::_mm_movedup_pd","value":"fn (a: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Duplicate the low double-precision (64-bit) floating-point element\n from `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2542802,"byte_end":2542811,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2542812,"byte_end":2542846,"line_start":77,"line_end":77,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9866},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2543190,"byte_end":2543204,"line_start":88,"line_end":88,"column_start":15,"column_end":29},"name":"_mm_loaddup_pd","qualname":"::coresimd::x86::sse3::_mm_loaddup_pd","value":"fn (mem_addr: *const f64) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Load a double-precision (64-bit) floating-point element from memory\n into both elements of return vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2543090,"byte_end":2543099,"line_start":85,"line_end":85,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2543100,"byte_end":2543134,"line_start":86,"line_end":86,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9868},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2543461,"byte_end":2543476,"line_start":97,"line_end":97,"column_start":15,"column_end":30},"name":"_mm_movehdup_ps","qualname":"::coresimd::x86::sse3::_mm_movehdup_ps","value":"fn (a: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Duplicate odd-indexed single-precision (32-bit) floating-point elements\n from `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2543360,"byte_end":2543369,"line_start":94,"line_end":94,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2543370,"byte_end":2543404,"line_start":95,"line_end":95,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9870},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2543733,"byte_end":2543748,"line_start":106,"line_end":106,"column_start":15,"column_end":30},"name":"_mm_moveldup_ps","qualname":"::coresimd::x86::sse3::_mm_moveldup_ps","value":"fn (a: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Duplicate even-indexed single-precision (32-bit) floating-point elements\n from `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2543632,"byte_end":2543641,"line_start":103,"line_end":103,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,51,46,114,115],"byte_start":2543642,"byte_end":2543676,"line_start":104,"line_end":104,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":9886},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2547674,"byte_end":2547686,"line_start":16,"line_end":16,"column_start":15,"column_end":27},"name":"_mm_abs_epi8","qualname":"::coresimd::x86::ssse3::_mm_abs_epi8","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compute the absolute value of packed 8-bit signed integers in `a` and\n return the unsigned results.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2547575,"byte_end":2547584,"line_start":13,"line_end":13,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2547585,"byte_end":2547620,"line_start":14,"line_end":14,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":9888},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2547987,"byte_end":2548000,"line_start":26,"line_end":26,"column_start":15,"column_end":28},"name":"_mm_abs_epi16","qualname":"::coresimd::x86::ssse3::_mm_abs_epi16","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compute the absolute value of each of the packed 16-bit signed integers in\n `a` and\n return the 16-bit unsigned integer\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2547888,"byte_end":2547897,"line_start":23,"line_end":23,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2547898,"byte_end":2547933,"line_start":24,"line_end":24,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":9890},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2548301,"byte_end":2548314,"line_start":36,"line_end":36,"column_start":15,"column_end":28},"name":"_mm_abs_epi32","qualname":"::coresimd::x86::ssse3::_mm_abs_epi32","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compute the absolute value of each of the packed 32-bit signed integers in\n `a` and\n return the 32-bit unsigned integer\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2548202,"byte_end":2548211,"line_start":33,"line_end":33,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2548212,"byte_end":2548247,"line_start":34,"line_end":34,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":9892},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2549237,"byte_end":2549253,"line_start":67,"line_end":67,"column_start":15,"column_end":31},"name":"_mm_shuffle_epi8","qualname":"::coresimd::x86::ssse3::_mm_shuffle_epi8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle bytes from `a` according to the content of `b`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2549137,"byte_end":2549146,"line_start":64,"line_end":64,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2549147,"byte_end":2549182,"line_start":65,"line_end":65,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":9894},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2549642,"byte_end":2549657,"line_start":77,"line_end":77,"column_start":15,"column_end":30},"name":"_mm_alignr_epi8","qualname":"::coresimd::x86::ssse3::_mm_alignr_epi8","value":"fn (a: __m128i, b: __m128i, n: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Concatenate 16-byte blocks in `a` and `b` into a 32-byte temporary result,\n shift the result right by `n` bytes, and return the low 16 bytes.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2549501,"byte_end":2549510,"line_start":73,"line_end":73,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2549511,"byte_end":2549546,"line_start":74,"line_end":74,"column_start":1,"column_end":36}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2549596,"byte_end":2549627,"line_start":76,"line_end":76,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9898},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2551349,"byte_end":2551363,"line_start":135,"line_end":135,"column_start":15,"column_end":29},"name":"_mm_hadd_epi16","qualname":"::coresimd::x86::ssse3::_mm_hadd_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Horizontally add the adjacent pairs of values contained in 2 packed\n 128-bit vectors of [8 x i16].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2551249,"byte_end":2551258,"line_start":132,"line_end":132,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2551259,"byte_end":2551294,"line_start":133,"line_end":133,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":9900},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2551784,"byte_end":2551799,"line_start":145,"line_end":145,"column_start":15,"column_end":30},"name":"_mm_hadds_epi16","qualname":"::coresimd::x86::ssse3::_mm_hadds_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Horizontally add the adjacent pairs of values contained in 2 packed\n 128-bit vectors of [8 x i16]. Positive sums greater than 7FFFh are\n saturated to 7FFFh. Negative sums less than 8000h are saturated to 8000h.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2551683,"byte_end":2551692,"line_start":142,"line_end":142,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2551693,"byte_end":2551728,"line_start":143,"line_end":143,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":9902},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2552105,"byte_end":2552119,"line_start":154,"line_end":154,"column_start":15,"column_end":29},"name":"_mm_hadd_epi32","qualname":"::coresimd::x86::ssse3::_mm_hadd_epi32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Horizontally add the adjacent pairs of values contained in 2 packed\n 128-bit vectors of [4 x i32].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2552005,"byte_end":2552014,"line_start":151,"line_end":151,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2552015,"byte_end":2552050,"line_start":152,"line_end":152,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":9904},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2552429,"byte_end":2552443,"line_start":163,"line_end":163,"column_start":15,"column_end":29},"name":"_mm_hsub_epi16","qualname":"::coresimd::x86::ssse3::_mm_hsub_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Horizontally subtract the adjacent pairs of values contained in 2\n packed 128-bit vectors of [8 x i16].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2552329,"byte_end":2552338,"line_start":160,"line_end":160,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2552339,"byte_end":2552374,"line_start":161,"line_end":161,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":9906},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2552887,"byte_end":2552902,"line_start":174,"line_end":174,"column_start":15,"column_end":30},"name":"_mm_hsubs_epi16","qualname":"::coresimd::x86::ssse3::_mm_hsubs_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Horizontally subtract the adjacent pairs of values contained in 2\n packed 128-bit vectors of [8 x i16]. Positive differences greater than\n 7FFFh are saturated to 7FFFh. Negative differences less than 8000h are\n saturated to 8000h.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2552786,"byte_end":2552795,"line_start":171,"line_end":171,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2552796,"byte_end":2552831,"line_start":172,"line_end":172,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":9908},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2553213,"byte_end":2553227,"line_start":183,"line_end":183,"column_start":15,"column_end":29},"name":"_mm_hsub_epi32","qualname":"::coresimd::x86::ssse3::_mm_hsub_epi32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Horizontally subtract the adjacent pairs of values contained in 2\n packed 128-bit vectors of [4 x i32].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2553113,"byte_end":2553122,"line_start":180,"line_end":180,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2553123,"byte_end":2553158,"line_start":181,"line_end":181,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":9910},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2553765,"byte_end":2553782,"line_start":195,"line_end":195,"column_start":15,"column_end":32},"name":"_mm_maddubs_epi16","qualname":"::coresimd::x86::ssse3::_mm_maddubs_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply corresponding pairs of packed 8-bit unsigned integer\n values contained in the first source operand and packed 8-bit signed\n integer values contained in the second source operand, add pairs of\n contiguous products with signed saturation, and writes the 16-bit sums to\n the corresponding bits in the destination.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2553662,"byte_end":2553671,"line_start":192,"line_end":192,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2553672,"byte_end":2553707,"line_start":193,"line_end":193,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":9912},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2554204,"byte_end":2554220,"line_start":205,"line_end":205,"column_start":15,"column_end":31},"name":"_mm_mulhrs_epi16","qualname":"::coresimd::x86::ssse3::_mm_mulhrs_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply packed 16-bit signed integer values, truncate the 32-bit\n product to the 18 most significant bits by right-shifting, round the\n truncated value by adding 1, and write bits [16:1] to the destination.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2554102,"byte_end":2554111,"line_start":202,"line_end":202,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2554112,"byte_end":2554147,"line_start":203,"line_end":203,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":9914},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2554641,"byte_end":2554654,"line_start":216,"line_end":216,"column_start":15,"column_end":28},"name":"_mm_sign_epi8","qualname":"::coresimd::x86::ssse3::_mm_sign_epi8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Negate packed 8-bit integers in `a` when the corresponding signed 8-bit\n integer in `b` is negative, and return the result.\n Elements in result are zeroed out when the corresponding element in `b`\n is zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2554541,"byte_end":2554550,"line_start":213,"line_end":213,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2554551,"byte_end":2554586,"line_start":214,"line_end":214,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":9916},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2555076,"byte_end":2555090,"line_start":227,"line_end":227,"column_start":15,"column_end":29},"name":"_mm_sign_epi16","qualname":"::coresimd::x86::ssse3::_mm_sign_epi16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Negate packed 16-bit integers in `a` when the corresponding signed 16-bit\n integer in `b` is negative, and return the results.\n Elements in result are zeroed out when the corresponding element in `b`\n is zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2554976,"byte_end":2554985,"line_start":224,"line_end":224,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2554986,"byte_end":2555021,"line_start":225,"line_end":225,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":9918},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2555511,"byte_end":2555525,"line_start":238,"line_end":238,"column_start":15,"column_end":29},"name":"_mm_sign_epi32","qualname":"::coresimd::x86::ssse3::_mm_sign_epi32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Negate packed 32-bit integers in `a` when the corresponding signed 32-bit\n integer in `b` is negative, and return the results.\n Element in result are zeroed out when the corresponding element in `b`\n is zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2555411,"byte_end":2555420,"line_start":235,"line_end":235,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2555421,"byte_end":2555456,"line_start":236,"line_end":236,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":9920},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2555827,"byte_end":2555838,"line_start":247,"line_end":247,"column_start":15,"column_end":26},"name":"_mm_abs_pi8","qualname":"::coresimd::x86::ssse3::_mm_abs_pi8","value":"fn (a: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Compute the absolute value of packed 8-bit integers in `a` and\n return the unsigned results.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2555724,"byte_end":2555733,"line_start":244,"line_end":244,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2555734,"byte_end":2555773,"line_start":245,"line_end":245,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":9922},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2556080,"byte_end":2556092,"line_start":256,"line_end":256,"column_start":15,"column_end":27},"name":"_mm_abs_pi16","qualname":"::coresimd::x86::ssse3::_mm_abs_pi16","value":"fn (a: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Compute the absolute value of packed 8-bit integers in `a`, and return the\n unsigned results.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2555977,"byte_end":2555986,"line_start":253,"line_end":253,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2555987,"byte_end":2556026,"line_start":254,"line_end":254,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":9924},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2556335,"byte_end":2556347,"line_start":265,"line_end":265,"column_start":15,"column_end":27},"name":"_mm_abs_pi32","qualname":"::coresimd::x86::ssse3::_mm_abs_pi32","value":"fn (a: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Compute the absolute value of packed 32-bit integers in `a`, and return the\n unsigned results.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2556232,"byte_end":2556241,"line_start":262,"line_end":262,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2556242,"byte_end":2556281,"line_start":263,"line_end":263,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":9926},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2556634,"byte_end":2556649,"line_start":274,"line_end":274,"column_start":15,"column_end":30},"name":"_mm_shuffle_pi8","qualname":"::coresimd::x86::ssse3::_mm_shuffle_pi8","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Shuffle packed 8-bit integers in `a` according to shuffle control mask in\n the corresponding 8-bit element of `b`, and return the results\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2556530,"byte_end":2556539,"line_start":271,"line_end":271,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2556540,"byte_end":2556579,"line_start":272,"line_end":272,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":9928},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2556994,"byte_end":2557008,"line_start":284,"line_end":284,"column_start":15,"column_end":29},"name":"_mm_alignr_pi8","qualname":"::coresimd::x86::ssse3::_mm_alignr_pi8","value":"fn (a: __m64, b: __m64, n: i32) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Concatenates the two 64-bit integer vector operands, and right-shifts\n the result by the number of bytes specified in the immediate operand.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2556849,"byte_end":2556858,"line_start":280,"line_end":280,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2556859,"byte_end":2556898,"line_start":281,"line_end":281,"column_start":1,"column_end":40}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2556948,"byte_end":2556979,"line_start":283,"line_end":283,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":9932},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2557388,"byte_end":2557401,"line_start":298,"line_end":298,"column_start":15,"column_end":28},"name":"_mm_hadd_pi16","qualname":"::coresimd::x86::ssse3::_mm_hadd_pi16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Horizontally add the adjacent pairs of values contained in 2 packed\n 64-bit vectors of [4 x i16].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2557284,"byte_end":2557293,"line_start":295,"line_end":295,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2557294,"byte_end":2557333,"line_start":296,"line_end":296,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":9934},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2557662,"byte_end":2557675,"line_start":307,"line_end":307,"column_start":15,"column_end":28},"name":"_mm_hadd_pi32","qualname":"::coresimd::x86::ssse3::_mm_hadd_pi32","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Horizontally add the adjacent pairs of values contained in 2 packed\n 64-bit vectors of [2 x i32].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2557558,"byte_end":2557567,"line_start":304,"line_end":304,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2557568,"byte_end":2557607,"line_start":305,"line_end":305,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":9936},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2558052,"byte_end":2558066,"line_start":317,"line_end":317,"column_start":15,"column_end":29},"name":"_mm_hadds_pi16","qualname":"::coresimd::x86::ssse3::_mm_hadds_pi16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Horizontally add the adjacent pairs of values contained in 2 packed\n 64-bit vectors of [4 x i16]. Positive sums greater than 7FFFh are\n saturated to 7FFFh. Negative sums less than 8000h are saturated to 8000h.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2557947,"byte_end":2557956,"line_start":314,"line_end":314,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2557957,"byte_end":2557996,"line_start":315,"line_end":315,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":9938},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2558334,"byte_end":2558347,"line_start":326,"line_end":326,"column_start":15,"column_end":28},"name":"_mm_hsub_pi16","qualname":"::coresimd::x86::ssse3::_mm_hsub_pi16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Horizontally subtracts the adjacent pairs of values contained in 2\n packed 64-bit vectors of [4 x i16].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2558230,"byte_end":2558239,"line_start":323,"line_end":323,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2558240,"byte_end":2558279,"line_start":324,"line_end":324,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":9940},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2558614,"byte_end":2558627,"line_start":335,"line_end":335,"column_start":15,"column_end":28},"name":"_mm_hsub_pi32","qualname":"::coresimd::x86::ssse3::_mm_hsub_pi32","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Horizontally subtracts the adjacent pairs of values contained in 2\n packed 64-bit vectors of [2 x i32].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2558510,"byte_end":2558519,"line_start":332,"line_end":332,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2558520,"byte_end":2558559,"line_start":333,"line_end":333,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":9942},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2559028,"byte_end":2559042,"line_start":346,"line_end":346,"column_start":15,"column_end":29},"name":"_mm_hsubs_pi16","qualname":"::coresimd::x86::ssse3::_mm_hsubs_pi16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Horizontally subtracts the adjacent pairs of values contained in 2\n packed 64-bit vectors of [4 x i16]. Positive differences greater than\n 7FFFh are saturated to 7FFFh. Negative differences less than 8000h are\n saturated to 8000h.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2558923,"byte_end":2558932,"line_start":343,"line_end":343,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2558933,"byte_end":2558972,"line_start":344,"line_end":344,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":9944},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2559541,"byte_end":2559557,"line_start":358,"line_end":358,"column_start":15,"column_end":31},"name":"_mm_maddubs_pi16","qualname":"::coresimd::x86::ssse3::_mm_maddubs_pi16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Multiplies corresponding pairs of packed 8-bit unsigned integer\n values contained in the first source operand and packed 8-bit signed\n integer values contained in the second source operand, adds pairs of\n contiguous products with signed saturation, and writes the 16-bit sums to\n the corresponding bits in the destination.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2559434,"byte_end":2559443,"line_start":355,"line_end":355,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2559444,"byte_end":2559483,"line_start":356,"line_end":356,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":9946},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2559942,"byte_end":2559957,"line_start":368,"line_end":368,"column_start":15,"column_end":30},"name":"_mm_mulhrs_pi16","qualname":"::coresimd::x86::ssse3::_mm_mulhrs_pi16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Multiplies packed 16-bit signed integer values, truncates the 32-bit\n products to the 18 most significant bits by right-shifting, rounds the\n truncated value by adding 1, and writes bits [16:1] to the destination.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2559836,"byte_end":2559845,"line_start":365,"line_end":365,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2559846,"byte_end":2559885,"line_start":366,"line_end":366,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":9948},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2560335,"byte_end":2560347,"line_start":379,"line_end":379,"column_start":15,"column_end":27},"name":"_mm_sign_pi8","qualname":"::coresimd::x86::ssse3::_mm_sign_pi8","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Negate packed 8-bit integers in `a` when the corresponding signed 8-bit\n integer in `b` is negative, and return the results.\n Element in result are zeroed out when the corresponding element in `b` is\n zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2560231,"byte_end":2560240,"line_start":376,"line_end":376,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2560241,"byte_end":2560280,"line_start":377,"line_end":377,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":9950},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2560725,"byte_end":2560738,"line_start":390,"line_end":390,"column_start":15,"column_end":28},"name":"_mm_sign_pi16","qualname":"::coresimd::x86::ssse3::_mm_sign_pi16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Negate packed 16-bit integers in `a` when the corresponding signed 16-bit\n integer in `b` is negative, and return the results.\n Element in result are zeroed out when the corresponding element in `b` is\n zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2560621,"byte_end":2560630,"line_start":387,"line_end":387,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2560631,"byte_end":2560670,"line_start":388,"line_end":388,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":9952},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2561116,"byte_end":2561129,"line_start":401,"line_end":401,"column_start":15,"column_end":28},"name":"_mm_sign_pi32","qualname":"::coresimd::x86::ssse3::_mm_sign_pi32","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Negate packed 32-bit integers in `a` when the corresponding signed 32-bit\n integer in `b` is negative, and return the results.\n Element in result are zeroed out when the corresponding element in `b` is\n zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2561012,"byte_end":2561021,"line_start":398,"line_end":398,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"ssse3,mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,115,101,51,46,114,115],"byte_start":2561022,"byte_end":2561061,"line_start":399,"line_end":399,"column_start":1,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":9968},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2575178,"byte_end":2575203,"line_start":13,"line_end":13,"column_start":11,"column_end":36},"name":"_MM_FROUND_TO_NEAREST_INT","qualname":"::coresimd::x86::sse41::_MM_FROUND_TO_NEAREST_INT","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" round to nearest\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9970},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2575242,"byte_end":2575263,"line_start":15,"line_end":15,"column_start":11,"column_end":32},"name":"_MM_FROUND_TO_NEG_INF","qualname":"::coresimd::x86::sse41::_MM_FROUND_TO_NEG_INF","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" round down\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9972},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2575300,"byte_end":2575321,"line_start":17,"line_end":17,"column_start":11,"column_end":32},"name":"_MM_FROUND_TO_POS_INF","qualname":"::coresimd::x86::sse41::_MM_FROUND_TO_POS_INF","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" round up\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9974},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2575358,"byte_end":2575376,"line_start":19,"line_end":19,"column_start":11,"column_end":29},"name":"_MM_FROUND_TO_ZERO","qualname":"::coresimd::x86::sse41::_MM_FROUND_TO_ZERO","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" truncate\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9976},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2575454,"byte_end":2575478,"line_start":21,"line_end":21,"column_start":11,"column_end":35},"name":"_MM_FROUND_CUR_DIRECTION","qualname":"::coresimd::x86::sse41::_MM_FROUND_CUR_DIRECTION","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" use MXCSR.RC; see `vendor::_MM_SET_ROUNDING_MODE`\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9978},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2575533,"byte_end":2575553,"line_start":23,"line_end":23,"column_start":11,"column_end":31},"name":"_MM_FROUND_RAISE_EXC","qualname":"::coresimd::x86::sse41::_MM_FROUND_RAISE_EXC","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" do not suppress exceptions\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9980},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2575601,"byte_end":2575618,"line_start":25,"line_end":25,"column_start":11,"column_end":28},"name":"_MM_FROUND_NO_EXC","qualname":"::coresimd::x86::sse41::_MM_FROUND_NO_EXC","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" suppress exceptions\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9982},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2575694,"byte_end":2575709,"line_start":27,"line_end":27,"column_start":11,"column_end":26},"name":"_MM_FROUND_NINT","qualname":"::coresimd::x86::sse41::_MM_FROUND_NINT","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" round to nearest and do not suppress exceptions\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9984},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2575779,"byte_end":2575795,"line_start":29,"line_end":29,"column_start":11,"column_end":27},"name":"_MM_FROUND_FLOOR","qualname":"::coresimd::x86::sse41::_MM_FROUND_FLOOR","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" round down and do not suppress exceptions\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9986},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2575909,"byte_end":2575924,"line_start":32,"line_end":32,"column_start":11,"column_end":26},"name":"_MM_FROUND_CEIL","qualname":"::coresimd::x86::sse41::_MM_FROUND_CEIL","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" round up and do not suppress exceptions\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9988},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2576038,"byte_end":2576054,"line_start":35,"line_end":35,"column_start":11,"column_end":27},"name":"_MM_FROUND_TRUNC","qualname":"::coresimd::x86::sse41::_MM_FROUND_TRUNC","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" truncate and do not suppress exceptions\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9990},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2576206,"byte_end":2576221,"line_start":38,"line_end":38,"column_start":11,"column_end":26},"name":"_MM_FROUND_RINT","qualname":"::coresimd::x86::sse41::_MM_FROUND_RINT","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" use MXCSR.RC and do not suppress exceptions; see\n `vendor::_MM_SET_ROUNDING_MODE`\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9992},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2576372,"byte_end":2576392,"line_start":41,"line_end":41,"column_start":11,"column_end":31},"name":"_MM_FROUND_NEARBYINT","qualname":"::coresimd::x86::sse41::_MM_FROUND_NEARBYINT","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" use MXCSR.RC and suppress exceptions; see `vendor::_MM_SET_ROUNDING_MODE`\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":9994},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2576802,"byte_end":2576817,"line_start":52,"line_end":52,"column_start":15,"column_end":30},"name":"_mm_blendv_epi8","qualname":"::coresimd::x86::sse41::_mm_blendv_epi8","value":"fn (a: __m128i, b: __m128i, mask: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Blend packed 8-bit integers from `a` and `b` using `mask`","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2576699,"byte_end":2576708,"line_start":49,"line_end":49,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2576709,"byte_end":2576745,"line_start":50,"line_end":50,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":9996},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2577330,"byte_end":2577345,"line_start":67,"line_end":67,"column_start":15,"column_end":30},"name":"_mm_blend_epi16","qualname":"::coresimd::x86::sse41::_mm_blend_epi16","value":"fn (a: __m128i, b: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Blend packed 16-bit integers from `a` and `b` using the mask `imm8`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2577183,"byte_end":2577192,"line_start":63,"line_end":63,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2577193,"byte_end":2577229,"line_start":64,"line_end":64,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2577284,"byte_end":2577315,"line_start":66,"line_end":66,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10000},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2577779,"byte_end":2577792,"line_start":81,"line_end":81,"column_start":15,"column_end":28},"name":"_mm_blendv_pd","qualname":"::coresimd::x86::sse41::_mm_blendv_pd","value":"fn (a: __m128d, b: __m128d, mask: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Blend packed double-precision (64-bit) floating-point elements from `a`\n and `b` using `mask`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2577676,"byte_end":2577685,"line_start":78,"line_end":78,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2577686,"byte_end":2577722,"line_start":79,"line_end":79,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10002},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2578077,"byte_end":2578090,"line_start":90,"line_end":90,"column_start":15,"column_end":28},"name":"_mm_blendv_ps","qualname":"::coresimd::x86::sse41::_mm_blendv_ps","value":"fn (a: __m128, b: __m128, mask: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Blend packed single-precision (32-bit) floating-point elements from `a`\n and `b` using `mask`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2577974,"byte_end":2577983,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2577984,"byte_end":2578020,"line_start":88,"line_end":88,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10004},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2578428,"byte_end":2578440,"line_start":100,"line_end":100,"column_start":15,"column_end":27},"name":"_mm_blend_pd","qualname":"::coresimd::x86::sse41::_mm_blend_pd","value":"fn (a: __m128d, b: __m128d, imm2: i32) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Blend packed double-precision (64-bit) floating-point elements from `a`\n and `b` using control mask `imm2`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2578281,"byte_end":2578290,"line_start":96,"line_end":96,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2578291,"byte_end":2578327,"line_start":97,"line_end":97,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2578382,"byte_end":2578413,"line_start":99,"line_end":99,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10008},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2578857,"byte_end":2578869,"line_start":113,"line_end":113,"column_start":15,"column_end":27},"name":"_mm_blend_ps","qualname":"::coresimd::x86::sse41::_mm_blend_ps","value":"fn (a: __m128, b: __m128, imm4: i32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Blend packed single-precision (32-bit) floating-point elements from `a`\n and `b` using mask `imm4`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2578708,"byte_end":2578717,"line_start":109,"line_end":109,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2578718,"byte_end":2578754,"line_start":110,"line_end":110,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2578811,"byte_end":2578842,"line_start":112,"line_end":112,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10012},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2579302,"byte_end":2579316,"line_start":127,"line_end":127,"column_start":15,"column_end":29},"name":"_mm_extract_ps","qualname":"::coresimd::x86::sse41::_mm_extract_ps","value":"fn (a: __m128, imm8: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Extract a single-precision (32-bit) floating-point element from `a`,\n selected with `imm8`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2579126,"byte_end":2579135,"line_start":122,"line_end":122,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2579136,"byte_end":2579172,"line_start":123,"line_end":123,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2579256,"byte_end":2579287,"line_start":126,"line_end":126,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10014},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2579760,"byte_end":2579776,"line_start":139,"line_end":139,"column_start":15,"column_end":31},"name":"_mm_extract_epi8","qualname":"::coresimd::x86::sse41::_mm_extract_epi8","value":"fn (a: __m128i, imm8: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Extract an 8-bit integer from `a`, selected with `imm8`. Returns a 32-bit\n integer containing the zero-extended integer data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2579617,"byte_end":2579626,"line_start":135,"line_end":135,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2579627,"byte_end":2579663,"line_start":136,"line_end":136,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2579714,"byte_end":2579745,"line_start":138,"line_end":138,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10016},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2580136,"byte_end":2580153,"line_start":150,"line_end":150,"column_start":15,"column_end":32},"name":"_mm_extract_epi32","qualname":"::coresimd::x86::sse41::_mm_extract_epi32","value":"fn (a: __m128i, imm8: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Extract an 32-bit integer from `a` selected with `imm8`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2579960,"byte_end":2579969,"line_start":145,"line_end":145,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2579970,"byte_end":2580006,"line_start":146,"line_end":146,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2580090,"byte_end":2580121,"line_start":149,"line_end":149,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10018},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2581554,"byte_end":2581567,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"name":"_mm_insert_ps","qualname":"::coresimd::x86::sse41::_mm_insert_ps","value":"fn (a: __m128, b: __m128, imm8: i32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Select a single value in `a` to store at some position in `b`,\n Then zero elements according to `imm8`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2581404,"byte_end":2581413,"line_start":177,"line_end":177,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2581414,"byte_end":2581450,"line_start":178,"line_end":178,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2581508,"byte_end":2581539,"line_start":180,"line_end":180,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10022},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2581975,"byte_end":2581990,"line_start":194,"line_end":194,"column_start":15,"column_end":30},"name":"_mm_insert_epi8","qualname":"::coresimd::x86::sse41::_mm_insert_epi8","value":"fn (a: __m128i, i: i32, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return a copy of `a` with the 8-bit integer from `i` inserted at a\n location specified by `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2581832,"byte_end":2581841,"line_start":190,"line_end":190,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2581842,"byte_end":2581878,"line_start":191,"line_end":191,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2581929,"byte_end":2581960,"line_start":193,"line_end":193,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10024},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2582366,"byte_end":2582382,"line_start":204,"line_end":204,"column_start":15,"column_end":31},"name":"_mm_insert_epi32","qualname":"::coresimd::x86::sse41::_mm_insert_epi32","value":"fn (a: __m128i, i: i32, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return a copy of `a` with the 32-bit integer from `i` inserted at a\n location specified by `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2582223,"byte_end":2582232,"line_start":200,"line_end":200,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2582233,"byte_end":2582269,"line_start":201,"line_end":201,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2582320,"byte_end":2582351,"line_start":203,"line_end":203,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10026},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2582696,"byte_end":2582708,"line_start":213,"line_end":213,"column_start":15,"column_end":27},"name":"_mm_max_epi8","qualname":"::coresimd::x86::sse41::_mm_max_epi8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 8-bit integers in `a` and `b` and return packed maximum\n values in dst.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2582595,"byte_end":2582604,"line_start":210,"line_end":210,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2582605,"byte_end":2582641,"line_start":211,"line_end":211,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10028},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2582996,"byte_end":2583009,"line_start":222,"line_end":222,"column_start":15,"column_end":28},"name":"_mm_max_epu16","qualname":"::coresimd::x86::sse41::_mm_max_epu16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed unsigned 16-bit integers in `a` and `b`, and return packed\n maximum.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2582895,"byte_end":2582904,"line_start":219,"line_end":219,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2582905,"byte_end":2582941,"line_start":220,"line_end":220,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10030},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2583295,"byte_end":2583308,"line_start":231,"line_end":231,"column_start":15,"column_end":28},"name":"_mm_max_epi32","qualname":"::coresimd::x86::sse41::_mm_max_epi32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 32-bit integers in `a` and `b`, and return packed maximum\n values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2583194,"byte_end":2583203,"line_start":228,"line_end":228,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2583204,"byte_end":2583240,"line_start":229,"line_end":229,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10032},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2583603,"byte_end":2583616,"line_start":240,"line_end":240,"column_start":15,"column_end":28},"name":"_mm_max_epu32","qualname":"::coresimd::x86::sse41::_mm_max_epu32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed unsigned 32-bit integers in `a` and `b`, and return packed\n maximum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2583502,"byte_end":2583511,"line_start":237,"line_end":237,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2583512,"byte_end":2583548,"line_start":238,"line_end":238,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10034},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2583907,"byte_end":2583919,"line_start":249,"line_end":249,"column_start":15,"column_end":27},"name":"_mm_min_epi8","qualname":"::coresimd::x86::sse41::_mm_min_epi8","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 8-bit integers in `a` and `b` and return packed minimum\n values in dst.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2583806,"byte_end":2583815,"line_start":246,"line_end":246,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2583816,"byte_end":2583852,"line_start":247,"line_end":247,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10036},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2584207,"byte_end":2584220,"line_start":258,"line_end":258,"column_start":15,"column_end":28},"name":"_mm_min_epu16","qualname":"::coresimd::x86::sse41::_mm_min_epu16","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed unsigned 16-bit integers in `a` and `b`, and return packed\n minimum.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2584106,"byte_end":2584115,"line_start":255,"line_end":255,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2584116,"byte_end":2584152,"line_start":256,"line_end":256,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10038},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2584506,"byte_end":2584519,"line_start":267,"line_end":267,"column_start":15,"column_end":28},"name":"_mm_min_epi32","qualname":"::coresimd::x86::sse41::_mm_min_epi32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 32-bit integers in `a` and `b`, and return packed minimum\n values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2584405,"byte_end":2584414,"line_start":264,"line_end":264,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2584415,"byte_end":2584451,"line_start":265,"line_end":265,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10040},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2584814,"byte_end":2584827,"line_start":276,"line_end":276,"column_start":15,"column_end":28},"name":"_mm_min_epu32","qualname":"::coresimd::x86::sse41::_mm_min_epu32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed unsigned 32-bit integers in `a` and `b`, and return packed\n minimum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2584713,"byte_end":2584722,"line_start":273,"line_end":273,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2584723,"byte_end":2584759,"line_start":274,"line_end":274,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10042},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2585134,"byte_end":2585150,"line_start":285,"line_end":285,"column_start":15,"column_end":31},"name":"_mm_packus_epi32","qualname":"::coresimd::x86::sse41::_mm_packus_epi32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers\n using unsigned saturation\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2585031,"byte_end":2585040,"line_start":282,"line_end":282,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2585041,"byte_end":2585077,"line_start":283,"line_end":283,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10044},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2585413,"byte_end":2585428,"line_start":293,"line_end":293,"column_start":15,"column_end":30},"name":"_mm_cmpeq_epi64","qualname":"::coresimd::x86::sse41::_mm_cmpeq_epi64","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 64-bit integers in `a` and `b` for equality\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2585311,"byte_end":2585320,"line_start":290,"line_end":290,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2585321,"byte_end":2585357,"line_start":291,"line_end":291,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10046},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2585711,"byte_end":2585728,"line_start":301,"line_end":301,"column_start":15,"column_end":32},"name":"_mm_cvtepi8_epi16","qualname":"::coresimd::x86::sse41::_mm_cvtepi8_epi16","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Sign extend packed 8-bit integers in `a` to packed 16-bit integers\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2585608,"byte_end":2585617,"line_start":298,"line_end":298,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2585618,"byte_end":2585654,"line_start":299,"line_end":299,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10048},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2586072,"byte_end":2586089,"line_start":311,"line_end":311,"column_start":15,"column_end":32},"name":"_mm_cvtepi8_epi32","qualname":"::coresimd::x86::sse41::_mm_cvtepi8_epi32","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Sign extend packed 8-bit integers in `a` to packed 32-bit integers\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2585969,"byte_end":2585978,"line_start":308,"line_end":308,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2585979,"byte_end":2586015,"line_start":309,"line_end":309,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10050},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2586444,"byte_end":2586461,"line_start":322,"line_end":322,"column_start":15,"column_end":32},"name":"_mm_cvtepi8_epi64","qualname":"::coresimd::x86::sse41::_mm_cvtepi8_epi64","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Sign extend packed 8-bit integers in the low 8 bytes of `a` to packed\n 64-bit integers\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2586341,"byte_end":2586350,"line_start":319,"line_end":319,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2586351,"byte_end":2586387,"line_start":320,"line_end":320,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10052},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2586788,"byte_end":2586806,"line_start":332,"line_end":332,"column_start":15,"column_end":33},"name":"_mm_cvtepi16_epi32","qualname":"::coresimd::x86::sse41::_mm_cvtepi16_epi32","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Sign extend packed 16-bit integers in `a` to packed 32-bit integers\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2586685,"byte_end":2586694,"line_start":329,"line_end":329,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2586695,"byte_end":2586731,"line_start":330,"line_end":330,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10054},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2587140,"byte_end":2587158,"line_start":342,"line_end":342,"column_start":15,"column_end":33},"name":"_mm_cvtepi16_epi64","qualname":"::coresimd::x86::sse41::_mm_cvtepi16_epi64","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Sign extend packed 16-bit integers in `a` to packed 64-bit integers\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2587037,"byte_end":2587046,"line_start":339,"line_end":339,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2587047,"byte_end":2587083,"line_start":340,"line_end":340,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10056},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2587486,"byte_end":2587504,"line_start":352,"line_end":352,"column_start":15,"column_end":33},"name":"_mm_cvtepi32_epi64","qualname":"::coresimd::x86::sse41::_mm_cvtepi32_epi64","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Sign extend packed 32-bit integers in `a` to packed 64-bit integers\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2587383,"byte_end":2587392,"line_start":349,"line_end":349,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2587393,"byte_end":2587429,"line_start":350,"line_end":350,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10058},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2587840,"byte_end":2587857,"line_start":362,"line_end":362,"column_start":15,"column_end":32},"name":"_mm_cvtepu8_epi16","qualname":"::coresimd::x86::sse41::_mm_cvtepu8_epi16","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Zero extend packed unsigned 8-bit integers in `a` to packed 16-bit integers\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2587737,"byte_end":2587746,"line_start":359,"line_end":359,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2587747,"byte_end":2587783,"line_start":360,"line_end":360,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10060},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2588210,"byte_end":2588227,"line_start":372,"line_end":372,"column_start":15,"column_end":32},"name":"_mm_cvtepu8_epi32","qualname":"::coresimd::x86::sse41::_mm_cvtepu8_epi32","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Zero extend packed unsigned 8-bit integers in `a` to packed 32-bit integers\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2588107,"byte_end":2588116,"line_start":369,"line_end":369,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2588117,"byte_end":2588153,"line_start":370,"line_end":370,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10062},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2588568,"byte_end":2588585,"line_start":382,"line_end":382,"column_start":15,"column_end":32},"name":"_mm_cvtepu8_epi64","qualname":"::coresimd::x86::sse41::_mm_cvtepu8_epi64","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Zero extend packed unsigned 8-bit integers in `a` to packed 64-bit integers\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2588465,"byte_end":2588474,"line_start":379,"line_end":379,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2588475,"byte_end":2588511,"line_start":380,"line_end":380,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10064},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2588925,"byte_end":2588943,"line_start":393,"line_end":393,"column_start":15,"column_end":33},"name":"_mm_cvtepu16_epi32","qualname":"::coresimd::x86::sse41::_mm_cvtepu16_epi32","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Zero extend packed unsigned 16-bit integers in `a`\n to packed 32-bit integers\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2588822,"byte_end":2588831,"line_start":390,"line_end":390,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2588832,"byte_end":2588868,"line_start":391,"line_end":391,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10066},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2589290,"byte_end":2589308,"line_start":404,"line_end":404,"column_start":15,"column_end":33},"name":"_mm_cvtepu16_epi64","qualname":"::coresimd::x86::sse41::_mm_cvtepu16_epi64","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Zero extend packed unsigned 16-bit integers in `a`\n to packed 64-bit integers\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2589187,"byte_end":2589196,"line_start":401,"line_end":401,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2589197,"byte_end":2589233,"line_start":402,"line_end":402,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10068},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2589649,"byte_end":2589667,"line_start":415,"line_end":415,"column_start":15,"column_end":33},"name":"_mm_cvtepu32_epi64","qualname":"::coresimd::x86::sse41::_mm_cvtepu32_epi64","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Zero extend packed unsigned 32-bit integers in `a`\n to packed 64-bit integers\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2589546,"byte_end":2589555,"line_start":412,"line_end":412,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2589556,"byte_end":2589592,"line_start":413,"line_end":413,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10070},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2590402,"byte_end":2590411,"line_start":432,"line_end":432,"column_start":15,"column_end":24},"name":"_mm_dp_pd","qualname":"::coresimd::x86::sse41::_mm_dp_pd","value":"fn (a: __m128d, b: __m128d, imm8: i32) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Returns the dot product of two __m128d vectors.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2590261,"byte_end":2590270,"line_start":428,"line_end":428,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2590271,"byte_end":2590307,"line_start":429,"line_end":429,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2590356,"byte_end":2590387,"line_start":431,"line_end":431,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10074},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2591151,"byte_end":2591160,"line_start":450,"line_end":450,"column_start":15,"column_end":24},"name":"_mm_dp_ps","qualname":"::coresimd::x86::sse41::_mm_dp_ps","value":"fn (a: __m128, b: __m128, imm8: i32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Returns the dot product of two __m128 vectors.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2591010,"byte_end":2591019,"line_start":446,"line_end":446,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2591020,"byte_end":2591056,"line_start":447,"line_end":447,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2591105,"byte_end":2591136,"line_start":449,"line_end":449,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10078},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2591604,"byte_end":2591616,"line_start":463,"line_end":463,"column_start":15,"column_end":27},"name":"_mm_floor_pd","qualname":"::coresimd::x86::sse41::_mm_floor_pd","value":"fn (a: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Round the packed double-precision (64-bit) floating-point elements in `a`\n down to an integer value, and store the results as packed double-precision\n floating-point elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2591502,"byte_end":2591511,"line_start":460,"line_end":460,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2591512,"byte_end":2591548,"line_start":461,"line_end":461,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10080},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2591966,"byte_end":2591978,"line_start":473,"line_end":473,"column_start":15,"column_end":27},"name":"_mm_floor_ps","qualname":"::coresimd::x86::sse41::_mm_floor_ps","value":"fn (a: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Round the packed single-precision (32-bit) floating-point elements in `a`\n down to an integer value, and store the results as packed single-precision\n floating-point elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2591864,"byte_end":2591873,"line_start":470,"line_end":470,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2591874,"byte_end":2591910,"line_start":471,"line_end":471,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10082},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2592448,"byte_end":2592460,"line_start":485,"line_end":485,"column_start":15,"column_end":27},"name":"_mm_floor_sd","qualname":"::coresimd::x86::sse41::_mm_floor_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Round the lower double-precision (64-bit) floating-point element in `b`\n down to an integer value, store the result as a double-precision\n floating-point element in the lower element of the intrinsic result,\n and copy the upper element from `a` to the upper element of the intrinsic\n result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2592346,"byte_end":2592355,"line_start":482,"line_end":482,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2592356,"byte_end":2592392,"line_start":483,"line_end":483,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10084},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2592958,"byte_end":2592970,"line_start":497,"line_end":497,"column_start":15,"column_end":27},"name":"_mm_floor_ss","qualname":"::coresimd::x86::sse41::_mm_floor_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Round the lower single-precision (32-bit) floating-point element in `b`\n down to an integer value, store the result as a single-precision\n floating-point element in the lower element of the intrinsic result,\n and copy the upper 3 packed elements from `a` to the upper elements\n of the intrinsic result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2592856,"byte_end":2592865,"line_start":494,"line_end":494,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2592866,"byte_end":2592902,"line_start":495,"line_end":495,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10086},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2593330,"byte_end":2593341,"line_start":507,"line_end":507,"column_start":15,"column_end":26},"name":"_mm_ceil_pd","qualname":"::coresimd::x86::sse41::_mm_ceil_pd","value":"fn (a: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Round the packed double-precision (64-bit) floating-point elements in `a`\n up to an integer value, and store the results as packed double-precision\n floating-point elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2593228,"byte_end":2593237,"line_start":504,"line_end":504,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2593238,"byte_end":2593274,"line_start":505,"line_end":505,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10088},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2593688,"byte_end":2593699,"line_start":517,"line_end":517,"column_start":15,"column_end":26},"name":"_mm_ceil_ps","qualname":"::coresimd::x86::sse41::_mm_ceil_ps","value":"fn (a: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Round the packed single-precision (32-bit) floating-point elements in `a`\n up to an integer value, and store the results as packed single-precision\n floating-point elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2593586,"byte_end":2593595,"line_start":514,"line_end":514,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2593596,"byte_end":2593632,"line_start":515,"line_end":515,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10090},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2594165,"byte_end":2594176,"line_start":529,"line_end":529,"column_start":15,"column_end":26},"name":"_mm_ceil_sd","qualname":"::coresimd::x86::sse41::_mm_ceil_sd","value":"fn (a: __m128d, b: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Round the lower double-precision (64-bit) floating-point element in `b`\n up to an integer value, store the result as a double-precision\n floating-point element in the lower element of the intrisic result,\n and copy the upper element from `a` to the upper element\n of the intrinsic result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2594063,"byte_end":2594072,"line_start":526,"line_end":526,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2594073,"byte_end":2594109,"line_start":527,"line_end":527,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10092},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2594671,"byte_end":2594682,"line_start":541,"line_end":541,"column_start":15,"column_end":26},"name":"_mm_ceil_ss","qualname":"::coresimd::x86::sse41::_mm_ceil_ss","value":"fn (a: __m128, b: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Round the lower single-precision (32-bit) floating-point element in `b`\n up to an integer value, store the result as a single-precision\n floating-point element in the lower element of the intrinsic result,\n and copy the upper 3 packed elements from `a` to the upper elements\n of the intrinsic result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2594569,"byte_end":2594578,"line_start":538,"line_end":538,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2594579,"byte_end":2594615,"line_start":539,"line_end":539,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10094},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2596053,"byte_end":2596065,"line_start":585,"line_end":585,"column_start":15,"column_end":27},"name":"_mm_round_pd","qualname":"::coresimd::x86::sse41::_mm_round_pd","value":"fn (a: __m128d, rounding: i32) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Round the packed double-precision (64-bit) floating-point elements in `a`\n using the `rounding` parameter, and store the results as packed\n double-precision floating-point elements.\n Rounding is done according to the rounding parameter, which can be one of:","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2595905,"byte_end":2595914,"line_start":581,"line_end":581,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2595915,"byte_end":2595951,"line_start":582,"line_end":582,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2596007,"byte_end":2596038,"line_start":584,"line_end":584,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10098},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2597522,"byte_end":2597534,"line_start":633,"line_end":633,"column_start":15,"column_end":27},"name":"_mm_round_ps","qualname":"::coresimd::x86::sse41::_mm_round_ps","value":"fn (a: __m128, rounding: i32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Round the packed single-precision (32-bit) floating-point elements in `a`\n using the `rounding` parameter, and store the results as packed\n single-precision floating-point elements.\n Rounding is done according to the rounding parameter, which can be one of:","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2597374,"byte_end":2597383,"line_start":629,"line_end":629,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2597384,"byte_end":2597420,"line_start":630,"line_end":630,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2597476,"byte_end":2597507,"line_start":632,"line_end":632,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10102},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2599107,"byte_end":2599119,"line_start":682,"line_end":682,"column_start":15,"column_end":27},"name":"_mm_round_sd","qualname":"::coresimd::x86::sse41::_mm_round_sd","value":"fn (a: __m128d, b: __m128d, rounding: i32) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Round the lower double-precision (64-bit) floating-point element in `b`\n using the `rounding` parameter, store the result as a double-precision\n floating-point element in the lower element of the intrinsic result,\n and copy the upper element from `a` to the upper element of the intrinsic\n result.\n Rounding is done according to the rounding parameter, which can be one of:","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2598959,"byte_end":2598968,"line_start":678,"line_end":678,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2598969,"byte_end":2599005,"line_start":679,"line_end":679,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2599061,"byte_end":2599092,"line_start":681,"line_end":681,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10106},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2600721,"byte_end":2600733,"line_start":731,"line_end":731,"column_start":15,"column_end":27},"name":"_mm_round_ss","qualname":"::coresimd::x86::sse41::_mm_round_ss","value":"fn (a: __m128, b: __m128, rounding: i32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Round the lower single-precision (32-bit) floating-point element in `b`\n using the `rounding` parameter, store the result as a single-precision\n floating-point element in the lower element of the intrinsic result,\n and copy the upper 3 packed elements from `a` to the upper elements\n of the instrinsic result.\n Rounding is done according to the rounding parameter, which can be one of:","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2600573,"byte_end":2600582,"line_start":727,"line_end":727,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2600583,"byte_end":2600619,"line_start":728,"line_end":728,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2600675,"byte_end":2600706,"line_start":730,"line_end":730,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10110},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2601618,"byte_end":2601634,"line_start":760,"line_end":760,"column_start":15,"column_end":31},"name":"_mm_minpos_epu16","qualname":"::coresimd::x86::sse41::_mm_minpos_epu16","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Finds the minimum unsigned 16-bit element in the 128-bit __m128i vector,\n returning a vector containing its value in its first position, and its\n index\n in its second position; all other elements are set to zero.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2601513,"byte_end":2601522,"line_start":757,"line_end":757,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2601523,"byte_end":2601559,"line_start":758,"line_end":758,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10112},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2601935,"byte_end":2601948,"line_start":769,"line_end":769,"column_start":15,"column_end":28},"name":"_mm_mul_epi32","qualname":"::coresimd::x86::sse41::_mm_mul_epi32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply the low 32-bit integers from each packed 64-bit\n element in `a` and `b`, and return the signed 64-bit result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2601834,"byte_end":2601843,"line_start":766,"line_end":766,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2601844,"byte_end":2601880,"line_start":767,"line_end":767,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10114},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2602556,"byte_end":2602571,"line_start":782,"line_end":782,"column_start":15,"column_end":30},"name":"_mm_mullo_epi32","qualname":"::coresimd::x86::sse41::_mm_mullo_epi32","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply the packed 32-bit integers in `a` and `b`, producing intermediate\n 64-bit integers, and returns the lowest 32-bit, whatever they might be,\n reinterpreted as a signed integer. While `pmulld __m128i::splat(2),\n __m128i::splat(2)` returns the obvious `__m128i::splat(4)`, due to wrapping\n arithmetic `pmulld __m128i::splat(i32::MAX), __m128i::splat(2)` would\n return a negative number.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2602455,"byte_end":2602464,"line_start":779,"line_end":779,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2602465,"byte_end":2602501,"line_start":780,"line_end":780,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10116},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2603888,"byte_end":2603904,"line_start":821,"line_end":821,"column_start":15,"column_end":31},"name":"_mm_mpsadbw_epu8","qualname":"::coresimd::x86::sse41::_mm_mpsadbw_epu8","value":"fn (a: __m128i, b: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Subtracts 8-bit unsigned integer values and computes the absolute\n values of the differences to the corresponding bits in the destination.\n Then sums of the absolute differences are returned according to the bit\n fields in the immediate operand.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2603744,"byte_end":2603753,"line_start":817,"line_end":817,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2603754,"byte_end":2603790,"line_start":818,"line_end":818,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2603842,"byte_end":2603873,"line_start":820,"line_end":820,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10120},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2604605,"byte_end":2604620,"line_start":846,"line_end":846,"column_start":15,"column_end":30},"name":"_mm_testz_si128","qualname":"::coresimd::x86::sse41::_mm_testz_si128","value":"fn (a: __m128i, mask: __m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the specified bits in a 128-bit integer vector are all\n zeros.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2604505,"byte_end":2604514,"line_start":843,"line_end":843,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2604515,"byte_end":2604551,"line_start":844,"line_end":844,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10122},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2605171,"byte_end":2605186,"line_start":866,"line_end":866,"column_start":15,"column_end":30},"name":"_mm_testc_si128","qualname":"::coresimd::x86::sse41::_mm_testc_si128","value":"fn (a: __m128i, mask: __m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the specified bits in a 128-bit integer vector are all\n ones.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2605071,"byte_end":2605080,"line_start":863,"line_end":863,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2605081,"byte_end":2605117,"line_start":864,"line_end":864,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10124},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2605781,"byte_end":2605798,"line_start":886,"line_end":886,"column_start":15,"column_end":32},"name":"_mm_testnzc_si128","qualname":"::coresimd::x86::sse41::_mm_testnzc_si128","value":"fn (a: __m128i, mask: __m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the specified bits in a 128-bit integer vector are\n neither all zeros nor all ones.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2605681,"byte_end":2605690,"line_start":883,"line_end":883,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2605691,"byte_end":2605727,"line_start":884,"line_end":884,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10126},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2606353,"byte_end":2606371,"line_start":906,"line_end":906,"column_start":15,"column_end":33},"name":"_mm_test_all_zeros","qualname":"::coresimd::x86::sse41::_mm_test_all_zeros","value":"fn (a: __m128i, mask: __m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the specified bits in a 128-bit integer vector are all\n zeros.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2606253,"byte_end":2606262,"line_start":903,"line_end":903,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2606263,"byte_end":2606299,"line_start":904,"line_end":904,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10128},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2606870,"byte_end":2606887,"line_start":925,"line_end":925,"column_start":15,"column_end":32},"name":"_mm_test_all_ones","qualname":"::coresimd::x86::sse41::_mm_test_all_ones","value":"fn (a: __m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the specified bits in `a` 128-bit integer vector are all\n ones.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2606729,"byte_end":2606738,"line_start":921,"line_end":921,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2606739,"byte_end":2606775,"line_start":922,"line_end":922,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10130},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2607471,"byte_end":2607494,"line_start":945,"line_end":945,"column_start":15,"column_end":38},"name":"_mm_test_mix_ones_zeros","qualname":"::coresimd::x86::sse41::_mm_test_mix_ones_zeros","value":"fn (a: __m128i, mask: __m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the specified bits in a 128-bit integer vector are\n neither all zeros nor all ones.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2607371,"byte_end":2607380,"line_start":942,"line_end":942,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,49,46,114,115],"byte_start":2607381,"byte_end":2607417,"line_start":943,"line_end":943,"column_start":1,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":10144},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2632997,"byte_end":2633012,"line_start":13,"line_end":13,"column_start":11,"column_end":26},"name":"_SIDD_UBYTE_OPS","qualname":"::coresimd::x86::sse42::_SIDD_UBYTE_OPS","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" String contains unsigned 8-bit characters *(Default)*\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10146},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2633090,"byte_end":2633105,"line_start":15,"line_end":15,"column_start":11,"column_end":26},"name":"_SIDD_UWORD_OPS","qualname":"::coresimd::x86::sse42::_SIDD_UWORD_OPS","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" String contains unsigned 16-bit characters\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10148},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2633180,"byte_end":2633195,"line_start":17,"line_end":17,"column_start":11,"column_end":26},"name":"_SIDD_SBYTE_OPS","qualname":"::coresimd::x86::sse42::_SIDD_SBYTE_OPS","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" String contains signed 8-bit characters\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10150},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2633273,"byte_end":2633288,"line_start":19,"line_end":19,"column_start":11,"column_end":26},"name":"_SIDD_SWORD_OPS","qualname":"::coresimd::x86::sse42::_SIDD_SWORD_OPS","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" String contains unsigned 16-bit characters\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10152},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2633384,"byte_end":2633403,"line_start":22,"line_end":22,"column_start":11,"column_end":30},"name":"_SIDD_CMP_EQUAL_ANY","qualname":"::coresimd::x86::sse42::_SIDD_CMP_EQUAL_ANY","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" For each character in `a`, find if it is in `b` *(Default)*\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10154},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2633526,"byte_end":2633542,"line_start":25,"line_end":25,"column_start":11,"column_end":27},"name":"_SIDD_CMP_RANGES","qualname":"::coresimd::x86::sse42::_SIDD_CMP_RANGES","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" For each character in `a`, determine if\n `b[0] <= c <= b[1] or b[1] <= c <= b[2]...`\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10156},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2633622,"byte_end":2633642,"line_start":27,"line_end":27,"column_start":11,"column_end":31},"name":"_SIDD_CMP_EQUAL_EACH","qualname":"::coresimd::x86::sse42::_SIDD_CMP_EQUAL_EACH","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" The strings defined by `a` and `b` are equal\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10158},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2633724,"byte_end":2633747,"line_start":29,"line_end":29,"column_start":11,"column_end":34},"name":"_SIDD_CMP_EQUAL_ORDERED","qualname":"::coresimd::x86::sse42::_SIDD_CMP_EQUAL_ORDERED","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Search for the defined substring in the target\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10160},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2633817,"byte_end":2633840,"line_start":32,"line_end":32,"column_start":11,"column_end":34},"name":"_SIDD_POSITIVE_POLARITY","qualname":"::coresimd::x86::sse42::_SIDD_POSITIVE_POLARITY","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Do not negate results *(Default)*\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10162},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2633890,"byte_end":2633913,"line_start":34,"line_end":34,"column_start":11,"column_end":34},"name":"_SIDD_NEGATIVE_POLARITY","qualname":"::coresimd::x86::sse42::_SIDD_NEGATIVE_POLARITY","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Negate results\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10164},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2633999,"byte_end":2634029,"line_start":36,"line_end":36,"column_start":11,"column_end":41},"name":"_SIDD_MASKED_POSITIVE_POLARITY","qualname":"::coresimd::x86::sse42::_SIDD_MASKED_POSITIVE_POLARITY","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Do not negate results before the end of the string\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10166},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2634113,"byte_end":2634143,"line_start":38,"line_end":38,"column_start":11,"column_end":41},"name":"_SIDD_MASKED_NEGATIVE_POLARITY","qualname":"::coresimd::x86::sse42::_SIDD_MASKED_NEGATIVE_POLARITY","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Negate results only before the end of the string\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10168},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2634240,"byte_end":2634263,"line_start":41,"line_end":41,"column_start":11,"column_end":34},"name":"_SIDD_LEAST_SIGNIFICANT","qualname":"::coresimd::x86::sse42::_SIDD_LEAST_SIGNIFICANT","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" **Index only**: return the least significant bit *(Default)*\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10170},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2634346,"byte_end":2634368,"line_start":43,"line_end":43,"column_start":11,"column_end":33},"name":"_SIDD_MOST_SIGNIFICANT","qualname":"::coresimd::x86::sse42::_SIDD_MOST_SIGNIFICANT","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" **Index only**: return the most significant bit\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10172},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2634439,"byte_end":2634453,"line_start":46,"line_end":46,"column_start":11,"column_end":25},"name":"_SIDD_BIT_MASK","qualname":"::coresimd::x86::sse42::_SIDD_BIT_MASK","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" **Mask only**: return the bit mask\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10174},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2634524,"byte_end":2634539,"line_start":48,"line_end":48,"column_start":11,"column_end":26},"name":"_SIDD_UNIT_MASK","qualname":"::coresimd::x86::sse42::_SIDD_UNIT_MASK","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" **Mask only**: return the byte mask\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":10176},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2634835,"byte_end":2634847,"line_start":56,"line_end":56,"column_start":15,"column_end":27},"name":"_mm_cmpistrm","qualname":"::coresimd::x86::sse42::_mm_cmpistrm","value":"fn (a: __m128i, b: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed strings with implicit lengths in `a` and `b` using the\n control in `imm8`, and return the generated mask.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2634689,"byte_end":2634698,"line_start":52,"line_end":52,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2634699,"byte_end":2634735,"line_start":53,"line_end":53,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2634789,"byte_end":2634820,"line_start":55,"line_end":55,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10180},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2642795,"byte_end":2642807,"line_start":301,"line_end":301,"column_start":15,"column_end":27},"name":"_mm_cmpistri","qualname":"::coresimd::x86::sse42::_mm_cmpistri","value":"fn (a: __m128i, b: __m128i, imm8: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare packed strings with implicit lengths in `a` and `b` using the\n control in `imm8` and return the generated index. Similar to\n [`_mm_cmpestri`] with the exception that [`_mm_cmpestri`] requires the\n lengths of `a` and `b` to be explicitly specified.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2642649,"byte_end":2642658,"line_start":297,"line_end":297,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2642659,"byte_end":2642695,"line_start":298,"line_end":298,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2642749,"byte_end":2642780,"line_start":300,"line_end":300,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10184},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2643337,"byte_end":2643349,"line_start":317,"line_end":317,"column_start":15,"column_end":27},"name":"_mm_cmpistrz","qualname":"::coresimd::x86::sse42::_mm_cmpistrz","value":"fn (a: __m128i, b: __m128i, imm8: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare packed strings with implicit lengths in `a` and `b` using the\n control in `imm8`, and return `1` if any character in `b` was null.\n and `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2643191,"byte_end":2643200,"line_start":313,"line_end":313,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2643201,"byte_end":2643237,"line_start":314,"line_end":314,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2643291,"byte_end":2643322,"line_start":316,"line_end":316,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10188},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2643882,"byte_end":2643894,"line_start":333,"line_end":333,"column_start":15,"column_end":27},"name":"_mm_cmpistrc","qualname":"::coresimd::x86::sse42::_mm_cmpistrc","value":"fn (a: __m128i, b: __m128i, imm8: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare packed strings with implicit lengths in `a` and `b` using the\n control in `imm8`, and return `1` if the resulting mask was non-zero,\n and `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2643736,"byte_end":2643745,"line_start":329,"line_end":329,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2643746,"byte_end":2643782,"line_start":330,"line_end":330,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2643836,"byte_end":2643867,"line_start":332,"line_end":332,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10192},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2644426,"byte_end":2644438,"line_start":349,"line_end":349,"column_start":15,"column_end":27},"name":"_mm_cmpistrs","qualname":"::coresimd::x86::sse42::_mm_cmpistrs","value":"fn (a: __m128i, b: __m128i, imm8: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare packed strings with implicit lengths in `a` and `b` using the\n control in `imm8`, and returns `1` if any character in `a` was null,\n and `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2644280,"byte_end":2644289,"line_start":345,"line_end":345,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2644290,"byte_end":2644326,"line_start":346,"line_end":346,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2644380,"byte_end":2644411,"line_start":348,"line_end":348,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10196},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2644943,"byte_end":2644955,"line_start":364,"line_end":364,"column_start":15,"column_end":27},"name":"_mm_cmpistro","qualname":"::coresimd::x86::sse42::_mm_cmpistro","value":"fn (a: __m128i, b: __m128i, imm8: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare packed strings with implicit lengths in `a` and `b` using the\n control in `imm8`, and return bit `0` of the resulting bit mask.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2644797,"byte_end":2644806,"line_start":360,"line_end":360,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2644807,"byte_end":2644843,"line_start":361,"line_end":361,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2644897,"byte_end":2644928,"line_start":363,"line_end":363,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10200},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2645525,"byte_end":2645537,"line_start":380,"line_end":380,"column_start":15,"column_end":27},"name":"_mm_cmpistra","qualname":"::coresimd::x86::sse42::_mm_cmpistra","value":"fn (a: __m128i, b: __m128i, imm8: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare packed strings with implicit lengths in `a` and `b` using the\n control in `imm8`, and return `1` if `b` did not contain a null\n character and the resulting mask was zero, and `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2645379,"byte_end":2645388,"line_start":376,"line_end":376,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2645389,"byte_end":2645425,"line_start":377,"line_end":377,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2645479,"byte_end":2645510,"line_start":379,"line_end":379,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10204},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2646032,"byte_end":2646044,"line_start":395,"line_end":395,"column_start":15,"column_end":27},"name":"_mm_cmpestrm","qualname":"::coresimd::x86::sse42::_mm_cmpestrm","value":"fn (a: __m128i, la: i32, b: __m128i, lb: i32, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed strings in `a` and `b` with lengths `la` and `lb`\n using the control in `imm8`, and return the generated mask.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2645886,"byte_end":2645895,"line_start":391,"line_end":391,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2645896,"byte_end":2645932,"line_start":392,"line_end":392,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2645986,"byte_end":2646017,"line_start":394,"line_end":394,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10208},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2649398,"byte_end":2649410,"line_start":497,"line_end":497,"column_start":15,"column_end":27},"name":"_mm_cmpestri","qualname":"::coresimd::x86::sse42::_mm_cmpestri","value":"fn (a: __m128i, la: i32, b: __m128i, lb: i32, imm8: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare packed strings `a` and `b` with lengths `la` and `lb` using the\n control in `imm8` and return the generated index. Similar to\n [`_mm_cmpistri`] with the exception that [`_mm_cmpistri`] implicitly\n determines the length of `a` and `b`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2649252,"byte_end":2649261,"line_start":493,"line_end":493,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2649262,"byte_end":2649298,"line_start":494,"line_end":494,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2649352,"byte_end":2649383,"line_start":496,"line_end":496,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10212},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2649977,"byte_end":2649989,"line_start":515,"line_end":515,"column_start":15,"column_end":27},"name":"_mm_cmpestrz","qualname":"::coresimd::x86::sse42::_mm_cmpestrz","value":"fn (a: __m128i, la: i32, b: __m128i, lb: i32, imm8: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare packed strings in `a` and `b` with lengths `la` and `lb`\n using the control in `imm8`, and return `1` if any character in\n `b` was null, and `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2649831,"byte_end":2649840,"line_start":511,"line_end":511,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2649841,"byte_end":2649877,"line_start":512,"line_end":512,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2649931,"byte_end":2649962,"line_start":514,"line_end":514,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10216},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2650559,"byte_end":2650571,"line_start":533,"line_end":533,"column_start":15,"column_end":27},"name":"_mm_cmpestrc","qualname":"::coresimd::x86::sse42::_mm_cmpestrc","value":"fn (a: __m128i, la: i32, b: __m128i, lb: i32, imm8: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare packed strings in `a` and `b` with lengths `la` and `lb`\n using the control in `imm8`, and return `1` if the resulting mask\n was non-zero, and `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2650413,"byte_end":2650422,"line_start":529,"line_end":529,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2650423,"byte_end":2650459,"line_start":530,"line_end":530,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2650513,"byte_end":2650544,"line_start":532,"line_end":532,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10220},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2651137,"byte_end":2651149,"line_start":551,"line_end":551,"column_start":15,"column_end":27},"name":"_mm_cmpestrs","qualname":"::coresimd::x86::sse42::_mm_cmpestrs","value":"fn (a: __m128i, la: i32, b: __m128i, lb: i32, imm8: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare packed strings in `a` and `b` with lengths `la` and `lb`\n using the control in `imm8`, and return `1` if any character in\n a was null, and `0` otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2650991,"byte_end":2651000,"line_start":547,"line_end":547,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2651001,"byte_end":2651037,"line_start":548,"line_end":548,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2651091,"byte_end":2651122,"line_start":550,"line_end":550,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10224},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2651695,"byte_end":2651707,"line_start":569,"line_end":569,"column_start":15,"column_end":27},"name":"_mm_cmpestro","qualname":"::coresimd::x86::sse42::_mm_cmpestro","value":"fn (a: __m128i, la: i32, b: __m128i, lb: i32, imm8: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare packed strings in `a` and `b` with lengths `la` and `lb`\n using the control in `imm8`, and return bit `0` of the resulting\n bit mask.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2651549,"byte_end":2651558,"line_start":565,"line_end":565,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2651559,"byte_end":2651595,"line_start":566,"line_end":566,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2651649,"byte_end":2651680,"line_start":568,"line_end":568,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10228},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2652318,"byte_end":2652330,"line_start":588,"line_end":588,"column_start":15,"column_end":27},"name":"_mm_cmpestra","qualname":"::coresimd::x86::sse42::_mm_cmpestra","value":"fn (a: __m128i, la: i32, b: __m128i, lb: i32, imm8: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compare packed strings in `a` and `b` with lengths `la` and `lb`\n using the control in `imm8`, and return `1` if `b` did not\n contain a null character and the resulting mask was zero, and `0`\n otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2652172,"byte_end":2652181,"line_start":584,"line_end":584,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2652182,"byte_end":2652218,"line_start":585,"line_end":585,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2652272,"byte_end":2652303,"line_start":587,"line_end":587,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10232},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2652795,"byte_end":2652807,"line_start":604,"line_end":604,"column_start":15,"column_end":27},"name":"_mm_crc32_u8","qualname":"::coresimd::x86::sse42::_mm_crc32_u8","value":"fn (crc: u32, v: u8) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Starting with the initial value in `crc`, return the accumulated\n CRC32 value for unsigned 8-bit integer `v`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2652695,"byte_end":2652704,"line_start":601,"line_end":601,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2652705,"byte_end":2652741,"line_start":602,"line_end":602,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10234},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2653078,"byte_end":2653091,"line_start":613,"line_end":613,"column_start":15,"column_end":28},"name":"_mm_crc32_u16","qualname":"::coresimd::x86::sse42::_mm_crc32_u16","value":"fn (crc: u32, v: u16) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Starting with the initial value in `crc`, return the accumulated\n CRC32 value for unsigned 16-bit integer `v`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2652978,"byte_end":2652987,"line_start":610,"line_end":610,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2652988,"byte_end":2653024,"line_start":611,"line_end":611,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10236},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2653364,"byte_end":2653377,"line_start":622,"line_end":622,"column_start":15,"column_end":28},"name":"_mm_crc32_u32","qualname":"::coresimd::x86::sse42::_mm_crc32_u32","value":"fn (crc: u32, v: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Starting with the initial value in `crc`, return the accumulated\n CRC32 value for unsigned 32-bit integer `v`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2653264,"byte_end":2653273,"line_start":619,"line_end":619,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2653274,"byte_end":2653310,"line_start":620,"line_end":620,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10238},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2653626,"byte_end":2653641,"line_start":631,"line_end":631,"column_start":15,"column_end":30},"name":"_mm_cmpgt_epi64","qualname":"::coresimd::x86::sse42::_mm_cmpgt_epi64","value":"fn (a: __m128i, b: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 64-bit integers in `a` and `b` for greater-than,\n return the results.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2653524,"byte_end":2653533,"line_start":628,"line_end":628,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,50,46,114,115],"byte_start":2653534,"byte_end":2653570,"line_start":629,"line_end":629,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":10258},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2662958,"byte_end":2662971,"line_start":31,"line_end":31,"column_start":15,"column_end":28},"name":"_mm256_add_pd","qualname":"::coresimd::x86::avx::_mm256_add_pd","value":"fn (a: __m256d, b: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Add packed double-precision (64-bit) floating-point elements\n in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2662860,"byte_end":2662869,"line_start":28,"line_end":28,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2662870,"byte_end":2662903,"line_start":29,"line_end":29,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10260},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2663214,"byte_end":2663227,"line_start":40,"line_end":40,"column_start":15,"column_end":28},"name":"_mm256_add_ps","qualname":"::coresimd::x86::avx::_mm256_add_ps","value":"fn (a: __m256, b: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Add packed single-precision (32-bit) floating-point elements in `a` and\n `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2663116,"byte_end":2663125,"line_start":37,"line_end":37,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2663126,"byte_end":2663159,"line_start":38,"line_end":38,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10262},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2663599,"byte_end":2663612,"line_start":52,"line_end":52,"column_start":15,"column_end":28},"name":"_mm256_and_pd","qualname":"::coresimd::x86::avx::_mm256_and_pd","value":"fn (a: __m256d, b: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of a packed double-precision (64-bit)\n floating-point elements\n in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2663398,"byte_end":2663407,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2663408,"byte_end":2663441,"line_start":48,"line_end":48,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10264},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2663961,"byte_end":2663974,"line_start":63,"line_end":63,"column_start":15,"column_end":28},"name":"_mm256_and_ps","qualname":"::coresimd::x86::avx::_mm256_and_ps","value":"fn (a: __m256, b: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of packed single-precision (32-bit) floating-point\n elements in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2663863,"byte_end":2663872,"line_start":60,"line_end":60,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2663873,"byte_end":2663906,"line_start":61,"line_end":61,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10266},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2664417,"byte_end":2664429,"line_start":76,"line_end":76,"column_start":15,"column_end":27},"name":"_mm256_or_pd","qualname":"::coresimd::x86::avx::_mm256_or_pd","value":"fn (a: __m256d, b: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise OR packed double-precision (64-bit) floating-point\n elements in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2664218,"byte_end":2664227,"line_start":71,"line_end":71,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2664228,"byte_end":2664261,"line_start":72,"line_end":72,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10268},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2664773,"byte_end":2664785,"line_start":87,"line_end":87,"column_start":15,"column_end":27},"name":"_mm256_or_ps","qualname":"::coresimd::x86::avx::_mm256_or_ps","value":"fn (a: __m256, b: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise OR packed single-precision (32-bit) floating-point\n elements in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2664676,"byte_end":2664685,"line_start":84,"line_end":84,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2664686,"byte_end":2664719,"line_start":85,"line_end":85,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10270},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2665184,"byte_end":2665201,"line_start":99,"line_end":99,"column_start":15,"column_end":32},"name":"_mm256_shuffle_pd","qualname":"::coresimd::x86::avx::_mm256_shuffle_pd","value":"fn (a: __m256d, b: __m256d, imm8: i32) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Shuffle double-precision (64-bit) floating-point elements within 128-bit\n lanes using the control in `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2665041,"byte_end":2665050,"line_start":95,"line_end":95,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2665051,"byte_end":2665084,"line_start":96,"line_end":96,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2665138,"byte_end":2665169,"line_start":98,"line_end":98,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10280},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2666427,"byte_end":2666444,"line_start":142,"line_end":142,"column_start":15,"column_end":32},"name":"_mm256_shuffle_ps","qualname":"::coresimd::x86::avx::_mm256_shuffle_ps","value":"fn (a: __m256, b: __m256, imm8: i32) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Shuffle single-precision (32-bit) floating-point elements in `a` within\n 128-bit lanes using the control in `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2666284,"byte_end":2666293,"line_start":138,"line_end":138,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2666294,"byte_end":2666327,"line_start":139,"line_end":139,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2666381,"byte_end":2666412,"line_start":141,"line_end":141,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10290},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2668245,"byte_end":2668261,"line_start":194,"line_end":194,"column_start":15,"column_end":31},"name":"_mm256_andnot_pd","qualname":"::coresimd::x86::avx::_mm256_andnot_pd","value":"fn (a: __m256d, b: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise NOT of packed double-precision (64-bit) floating-point\n elements in `a`\n and then AND with `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2668103,"byte_end":2668112,"line_start":190,"line_end":190,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2668113,"byte_end":2668146,"line_start":191,"line_end":191,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10292},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2668632,"byte_end":2668648,"line_start":206,"line_end":206,"column_start":15,"column_end":31},"name":"_mm256_andnot_ps","qualname":"::coresimd::x86::avx::_mm256_andnot_ps","value":"fn (a: __m256, b: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise NOT of packed single-precision (32-bit) floating-point\n elements in `a`\n and then AND with `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2668533,"byte_end":2668542,"line_start":203,"line_end":203,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2668543,"byte_end":2668576,"line_start":204,"line_end":204,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10294},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2669011,"byte_end":2669024,"line_start":217,"line_end":217,"column_start":15,"column_end":28},"name":"_mm256_max_pd","qualname":"::coresimd::x86::avx::_mm256_max_pd","value":"fn (a: __m256d, b: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Compare packed double-precision (64-bit) floating-point elements\n in `a` and `b`, and return packed maximum values\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2668913,"byte_end":2668922,"line_start":214,"line_end":214,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2668923,"byte_end":2668956,"line_start":215,"line_end":215,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10296},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2669304,"byte_end":2669317,"line_start":226,"line_end":226,"column_start":15,"column_end":28},"name":"_mm256_max_ps","qualname":"::coresimd::x86::avx::_mm256_max_ps","value":"fn (a: __m256, b: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Compare packed single-precision (32-bit) floating-point elements in `a`\n and `b`, and return packed maximum values\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2669206,"byte_end":2669215,"line_start":223,"line_end":223,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2669216,"byte_end":2669249,"line_start":224,"line_end":224,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10298},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2669594,"byte_end":2669607,"line_start":235,"line_end":235,"column_start":15,"column_end":28},"name":"_mm256_min_pd","qualname":"::coresimd::x86::avx::_mm256_min_pd","value":"fn (a: __m256d, b: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Compare packed double-precision (64-bit) floating-point elements\n in `a` and `b`, and return packed minimum values\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2669496,"byte_end":2669505,"line_start":232,"line_end":232,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2669506,"byte_end":2669539,"line_start":233,"line_end":233,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10300},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2669887,"byte_end":2669900,"line_start":244,"line_end":244,"column_start":15,"column_end":28},"name":"_mm256_min_ps","qualname":"::coresimd::x86::avx::_mm256_min_ps","value":"fn (a: __m256, b: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Compare packed single-precision (32-bit) floating-point elements in `a`\n and `b`, and return packed minimum values\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2669789,"byte_end":2669798,"line_start":241,"line_end":241,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2669799,"byte_end":2669832,"line_start":242,"line_end":242,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10302},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2670140,"byte_end":2670153,"line_start":253,"line_end":253,"column_start":15,"column_end":28},"name":"_mm256_mul_pd","qualname":"::coresimd::x86::avx::_mm256_mul_pd","value":"fn (a: __m256d, b: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Add packed double-precision (64-bit) floating-point elements\n in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2670042,"byte_end":2670051,"line_start":250,"line_end":250,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2670052,"byte_end":2670085,"line_start":251,"line_end":251,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10304},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2670396,"byte_end":2670409,"line_start":262,"line_end":262,"column_start":15,"column_end":28},"name":"_mm256_mul_ps","qualname":"::coresimd::x86::avx::_mm256_mul_ps","value":"fn (a: __m256, b: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Add packed single-precision (32-bit) floating-point elements in `a` and\n `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2670298,"byte_end":2670307,"line_start":259,"line_end":259,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2670308,"byte_end":2670341,"line_start":260,"line_end":260,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10306},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2670702,"byte_end":2670718,"line_start":271,"line_end":271,"column_start":15,"column_end":31},"name":"_mm256_addsub_pd","qualname":"::coresimd::x86::avx::_mm256_addsub_pd","value":"fn (a: __m256d, b: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Alternatively add and subtract packed double-precision (64-bit)\n floating-point elements in `a` to/from packed elements in `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2670601,"byte_end":2670610,"line_start":268,"line_end":268,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2670611,"byte_end":2670644,"line_start":269,"line_end":269,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10308},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2671017,"byte_end":2671033,"line_start":280,"line_end":280,"column_start":15,"column_end":31},"name":"_mm256_addsub_ps","qualname":"::coresimd::x86::avx::_mm256_addsub_ps","value":"fn (a: __m256, b: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Alternatively add and subtract packed single-precision (32-bit)\n floating-point elements in `a` to/from packed elements in `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2670916,"byte_end":2670925,"line_start":277,"line_end":277,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2670926,"byte_end":2670959,"line_start":278,"line_end":278,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10310},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2671301,"byte_end":2671314,"line_start":289,"line_end":289,"column_start":15,"column_end":28},"name":"_mm256_sub_pd","qualname":"::coresimd::x86::avx::_mm256_sub_pd","value":"fn (a: __m256d, b: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed double-precision (64-bit) floating-point elements in `b`\n from packed elements in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2671203,"byte_end":2671212,"line_start":286,"line_end":286,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2671213,"byte_end":2671246,"line_start":287,"line_end":287,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10312},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2671582,"byte_end":2671595,"line_start":298,"line_end":298,"column_start":15,"column_end":28},"name":"_mm256_sub_ps","qualname":"::coresimd::x86::avx::_mm256_sub_ps","value":"fn (a: __m256, b: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed single-precision (32-bit) floating-point elements in `b`\n from packed elements in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2671484,"byte_end":2671493,"line_start":295,"line_end":295,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2671494,"byte_end":2671527,"line_start":296,"line_end":296,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10314},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2671886,"byte_end":2671899,"line_start":307,"line_end":307,"column_start":15,"column_end":28},"name":"_mm256_div_ps","qualname":"::coresimd::x86::avx::_mm256_div_ps","value":"fn (a: __m256, b: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Compute the division of each of the 8 packed 32-bit floating-point elements\n in `a` by the corresponding packed elements in `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2671788,"byte_end":2671797,"line_start":304,"line_end":304,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2671798,"byte_end":2671831,"line_start":305,"line_end":305,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10316},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2672190,"byte_end":2672203,"line_start":316,"line_end":316,"column_start":15,"column_end":28},"name":"_mm256_div_pd","qualname":"::coresimd::x86::avx::_mm256_div_pd","value":"fn (a: __m256d, b: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Compute the division of each of the 4 packed 64-bit floating-point elements\n in `a` by the corresponding packed elements in `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2672092,"byte_end":2672101,"line_start":313,"line_end":313,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2672102,"byte_end":2672135,"line_start":314,"line_end":314,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10318},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2672942,"byte_end":2672957,"line_start":335,"line_end":335,"column_start":15,"column_end":30},"name":"_mm256_round_pd","qualname":"::coresimd::x86::avx::_mm256_round_pd","value":"fn (a: __m256d, b: i32) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Round packed double-precision (64-bit) floating point elements in `a`\n according to the flag `b`. The value of `b` may be as follows:","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2672801,"byte_end":2672810,"line_start":331,"line_end":331,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2672811,"byte_end":2672844,"line_start":332,"line_end":332,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2672896,"byte_end":2672927,"line_start":334,"line_end":334,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10322},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2673305,"byte_end":2673319,"line_start":347,"line_end":347,"column_start":15,"column_end":29},"name":"_mm256_ceil_pd","qualname":"::coresimd::x86::avx::_mm256_ceil_pd","value":"fn (a: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Round packed double-precision (64-bit) floating point elements in `a`\n toward positive infinity.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2673205,"byte_end":2673214,"line_start":344,"line_end":344,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2673215,"byte_end":2673248,"line_start":345,"line_end":345,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10324},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2673576,"byte_end":2673591,"line_start":356,"line_end":356,"column_start":15,"column_end":30},"name":"_mm256_floor_pd","qualname":"::coresimd::x86::avx::_mm256_floor_pd","value":"fn (a: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Round packed double-precision (64-bit) floating point elements in `a`\n toward negative infinity.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2673476,"byte_end":2673485,"line_start":353,"line_end":353,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2673486,"byte_end":2673519,"line_start":354,"line_end":354,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10326},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2674324,"byte_end":2674339,"line_start":375,"line_end":375,"column_start":15,"column_end":30},"name":"_mm256_round_ps","qualname":"::coresimd::x86::avx::_mm256_round_ps","value":"fn (a: __m256, b: i32) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Round packed single-precision (32-bit) floating point elements in `a`\n according to the flag `b`. The value of `b` may be as follows:","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2674182,"byte_end":2674191,"line_start":371,"line_end":371,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2674192,"byte_end":2674225,"line_start":372,"line_end":372,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2674278,"byte_end":2674309,"line_start":374,"line_end":374,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10330},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2674705,"byte_end":2674719,"line_start":389,"line_end":389,"column_start":15,"column_end":29},"name":"_mm256_ceil_ps","qualname":"::coresimd::x86::avx::_mm256_ceil_ps","value":"fn (a: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Round packed single-precision (32-bit) floating point elements in `a`\n toward positive infinity.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2674605,"byte_end":2674614,"line_start":386,"line_end":386,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2674615,"byte_end":2674648,"line_start":387,"line_end":387,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10332},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2674974,"byte_end":2674989,"line_start":398,"line_end":398,"column_start":15,"column_end":30},"name":"_mm256_floor_ps","qualname":"::coresimd::x86::avx::_mm256_floor_ps","value":"fn (a: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Round packed single-precision (32-bit) floating point elements in `a`\n toward negative infinity.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2674874,"byte_end":2674883,"line_start":395,"line_end":395,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2674884,"byte_end":2674917,"line_start":396,"line_end":396,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10334},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2675238,"byte_end":2675252,"line_start":407,"line_end":407,"column_start":15,"column_end":29},"name":"_mm256_sqrt_ps","qualname":"::coresimd::x86::avx::_mm256_sqrt_ps","value":"fn (a: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Return the square root of packed single-precision (32-bit) floating point\n elements in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2675139,"byte_end":2675148,"line_start":404,"line_end":404,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2675149,"byte_end":2675182,"line_start":405,"line_end":405,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10336},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2675494,"byte_end":2675508,"line_start":416,"line_end":416,"column_start":15,"column_end":29},"name":"_mm256_sqrt_pd","qualname":"::coresimd::x86::avx::_mm256_sqrt_pd","value":"fn (a: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Return the square root of packed double-precision (64-bit) floating point\n elements in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2675395,"byte_end":2675404,"line_start":413,"line_end":413,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2675405,"byte_end":2675438,"line_start":414,"line_end":414,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10338},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2675811,"byte_end":2675826,"line_start":426,"line_end":426,"column_start":15,"column_end":30},"name":"_mm256_blend_pd","qualname":"::coresimd::x86::avx::_mm256_blend_pd","value":"fn (a: __m256d, b: __m256d, imm8: i32) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Blend packed double-precision (64-bit) floating-point elements from\n `a` and `b` using control mask `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2675669,"byte_end":2675678,"line_start":422,"line_end":422,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2675679,"byte_end":2675712,"line_start":423,"line_end":423,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2675765,"byte_end":2675796,"line_start":425,"line_end":425,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10348},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2676998,"byte_end":2677013,"line_start":469,"line_end":469,"column_start":15,"column_end":30},"name":"_mm256_blend_ps","qualname":"::coresimd::x86::avx::_mm256_blend_ps","value":"fn (a: __m256, b: __m256, imm8: i32) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Blend packed single-precision (32-bit) floating-point elements from\n `a` and `b` using control mask `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2676856,"byte_end":2676865,"line_start":465,"line_end":465,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2676866,"byte_end":2676899,"line_start":466,"line_end":466,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2676952,"byte_end":2676983,"line_start":468,"line_end":468,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10358},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2678752,"byte_end":2678768,"line_start":519,"line_end":519,"column_start":15,"column_end":31},"name":"_mm256_blendv_pd","qualname":"::coresimd::x86::avx::_mm256_blendv_pd","value":"fn (a: __m256d, b: __m256d, c: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Blend packed double-precision (64-bit) floating-point elements from\n `a` and `b` using `c` as a mask.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2678651,"byte_end":2678660,"line_start":516,"line_end":516,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2678661,"byte_end":2678694,"line_start":517,"line_end":517,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10360},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2679054,"byte_end":2679070,"line_start":528,"line_end":528,"column_start":15,"column_end":31},"name":"_mm256_blendv_ps","qualname":"::coresimd::x86::avx::_mm256_blendv_ps","value":"fn (a: __m256, b: __m256, c: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Blend packed single-precision (32-bit) floating-point elements from\n `a` and `b` using `c` as a mask.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2678953,"byte_end":2678962,"line_start":525,"line_end":525,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2678963,"byte_end":2678996,"line_start":526,"line_end":526,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10362},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2679520,"byte_end":2679532,"line_start":540,"line_end":540,"column_start":15,"column_end":27},"name":"_mm256_dp_ps","qualname":"::coresimd::x86::avx::_mm256_dp_ps","value":"fn (a: __m256, b: __m256, imm8: i32) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Conditionally multiply the packed single-precision (32-bit) floating-point\n elements in `a` and `b` using the high 4 bits in `imm8`,\n sum the four products, and conditionally return the sum\n  using the low 4 bits of `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2679379,"byte_end":2679388,"line_start":536,"line_end":536,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2679389,"byte_end":2679422,"line_start":537,"line_end":537,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2679474,"byte_end":2679505,"line_start":539,"line_end":539,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10366},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2680045,"byte_end":2680059,"line_start":554,"line_end":554,"column_start":15,"column_end":29},"name":"_mm256_hadd_pd","qualname":"::coresimd::x86::avx::_mm256_hadd_pd","value":"fn (a: __m256d, b: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Horizontal addition of adjacent pairs in the two packed vectors\n of 4 64-bit floating points `a` and `b`.\n In the result, sums of elements from `a` are returned in even locations,\n while sums of elements from `b` are returned in odd locations.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2679946,"byte_end":2679955,"line_start":551,"line_end":551,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2679956,"byte_end":2679989,"line_start":552,"line_end":552,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10368},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2680490,"byte_end":2680504,"line_start":566,"line_end":566,"column_start":15,"column_end":29},"name":"_mm256_hadd_ps","qualname":"::coresimd::x86::avx::_mm256_hadd_ps","value":"fn (a: __m256, b: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Horizontal addition of adjacent pairs in the two packed vectors\n of 8 32-bit floating points `a` and `b`.\n In the result, sums of elements from `a` are returned in locations of\n indices 0, 1, 4, 5; while sums of elements from `b` are locations\n 2, 3, 6, 7.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2680391,"byte_end":2680400,"line_start":563,"line_end":563,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2680401,"byte_end":2680434,"line_start":564,"line_end":564,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10370},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2680919,"byte_end":2680933,"line_start":577,"line_end":577,"column_start":15,"column_end":29},"name":"_mm256_hsub_pd","qualname":"::coresimd::x86::avx::_mm256_hsub_pd","value":"fn (a: __m256d, b: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Horizontal subtraction of adjacent pairs in the two packed vectors\n of 4 64-bit floating points `a` and `b`.\n In the result, sums of elements from `a` are returned in even locations,\n while sums of elements from `b` are returned in odd locations.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2680820,"byte_end":2680829,"line_start":574,"line_end":574,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2680830,"byte_end":2680863,"line_start":575,"line_end":575,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10372},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2681367,"byte_end":2681381,"line_start":589,"line_end":589,"column_start":15,"column_end":29},"name":"_mm256_hsub_ps","qualname":"::coresimd::x86::avx::_mm256_hsub_ps","value":"fn (a: __m256, b: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Horizontal subtraction of adjacent pairs in the two packed vectors\n of 8 32-bit floating points `a` and `b`.\n In the result, sums of elements from `a` are returned in locations of\n indices 0, 1, 4, 5; while sums of elements from `b` are locations\n 2, 3, 6, 7.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2681268,"byte_end":2681277,"line_start":586,"line_end":586,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2681278,"byte_end":2681311,"line_start":587,"line_end":587,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10374},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2681684,"byte_end":2681697,"line_start":599,"line_end":599,"column_start":15,"column_end":28},"name":"_mm256_xor_pd","qualname":"::coresimd::x86::avx::_mm256_xor_pd","value":"fn (a: __m256d, b: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise XOR of packed double-precision (64-bit) floating-point\n elements in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2681545,"byte_end":2681554,"line_start":595,"line_end":595,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2681555,"byte_end":2681588,"line_start":596,"line_end":596,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10376},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2682046,"byte_end":2682059,"line_start":610,"line_end":610,"column_start":15,"column_end":28},"name":"_mm256_xor_ps","qualname":"::coresimd::x86::avx::_mm256_xor_ps","value":"fn (a: __m256, b: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise XOR of packed single-precision (32-bit) floating-point\n elements in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2681948,"byte_end":2681957,"line_start":607,"line_end":607,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2681958,"byte_end":2681991,"line_start":608,"line_end":608,"column_start":1,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":10378},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2682244,"byte_end":2682254,"line_start":617,"line_end":617,"column_start":11,"column_end":21},"name":"_CMP_EQ_OQ","qualname":"::coresimd::x86::avx::_CMP_EQ_OQ","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Equal (ordered, non-signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10380},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2682313,"byte_end":2682323,"line_start":619,"line_end":619,"column_start":11,"column_end":21},"name":"_CMP_LT_OS","qualname":"::coresimd::x86::avx::_CMP_LT_OS","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Less-than (ordered, signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10382},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2682391,"byte_end":2682401,"line_start":621,"line_end":621,"column_start":11,"column_end":21},"name":"_CMP_LE_OS","qualname":"::coresimd::x86::avx::_CMP_LE_OS","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Less-than-or-equal (ordered, signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10384},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2682455,"byte_end":2682467,"line_start":623,"line_end":623,"column_start":11,"column_end":23},"name":"_CMP_UNORD_Q","qualname":"::coresimd::x86::avx::_CMP_UNORD_Q","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Unordered (non-signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10386},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2682532,"byte_end":2682543,"line_start":625,"line_end":625,"column_start":11,"column_end":22},"name":"_CMP_NEQ_UQ","qualname":"::coresimd::x86::avx::_CMP_NEQ_UQ","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Not-equal (unordered, non-signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10388},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2682608,"byte_end":2682619,"line_start":627,"line_end":627,"column_start":11,"column_end":22},"name":"_CMP_NLT_US","qualname":"::coresimd::x86::avx::_CMP_NLT_US","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Not-less-than (unordered, signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10390},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2682693,"byte_end":2682704,"line_start":629,"line_end":629,"column_start":11,"column_end":22},"name":"_CMP_NLE_US","qualname":"::coresimd::x86::avx::_CMP_NLE_US","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Not-less-than-or-equal (unordered, signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10392},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2682756,"byte_end":2682766,"line_start":631,"line_end":631,"column_start":11,"column_end":21},"name":"_CMP_ORD_Q","qualname":"::coresimd::x86::avx::_CMP_ORD_Q","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Ordered (non-signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10394},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2682827,"byte_end":2682837,"line_start":633,"line_end":633,"column_start":11,"column_end":21},"name":"_CMP_EQ_UQ","qualname":"::coresimd::x86::avx::_CMP_EQ_UQ","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Equal (unordered, non-signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10396},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2682914,"byte_end":2682925,"line_start":635,"line_end":635,"column_start":11,"column_end":22},"name":"_CMP_NGE_US","qualname":"::coresimd::x86::avx::_CMP_NGE_US","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Not-greater-than-or-equal (unordered, signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10398},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2682993,"byte_end":2683004,"line_start":637,"line_end":637,"column_start":11,"column_end":22},"name":"_CMP_NGT_US","qualname":"::coresimd::x86::avx::_CMP_NGT_US","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Not-greater-than (unordered, signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10400},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2683063,"byte_end":2683076,"line_start":639,"line_end":639,"column_start":11,"column_end":24},"name":"_CMP_FALSE_OQ","qualname":"::coresimd::x86::avx::_CMP_FALSE_OQ","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" False (ordered, non-signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10402},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2683139,"byte_end":2683150,"line_start":641,"line_end":641,"column_start":11,"column_end":22},"name":"_CMP_NEQ_OQ","qualname":"::coresimd::x86::avx::_CMP_NEQ_OQ","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Not-equal (ordered, non-signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10404},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2683221,"byte_end":2683231,"line_start":643,"line_end":643,"column_start":11,"column_end":21},"name":"_CMP_GE_OS","qualname":"::coresimd::x86::avx::_CMP_GE_OS","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Greater-than-or-equal (ordered, signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10406},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2683293,"byte_end":2683303,"line_start":645,"line_end":645,"column_start":11,"column_end":21},"name":"_CMP_GT_OS","qualname":"::coresimd::x86::avx::_CMP_GT_OS","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Greater-than (ordered, signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10408},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2683363,"byte_end":2683375,"line_start":647,"line_end":647,"column_start":11,"column_end":23},"name":"_CMP_TRUE_UQ","qualname":"::coresimd::x86::avx::_CMP_TRUE_UQ","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" True (unordered, non-signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10410},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2683430,"byte_end":2683440,"line_start":649,"line_end":649,"column_start":11,"column_end":21},"name":"_CMP_EQ_OS","qualname":"::coresimd::x86::avx::_CMP_EQ_OS","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Equal (ordered, signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10412},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2683503,"byte_end":2683513,"line_start":651,"line_end":651,"column_start":11,"column_end":21},"name":"_CMP_LT_OQ","qualname":"::coresimd::x86::avx::_CMP_LT_OQ","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Less-than (ordered, non-signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10414},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2683585,"byte_end":2683595,"line_start":653,"line_end":653,"column_start":11,"column_end":21},"name":"_CMP_LE_OQ","qualname":"::coresimd::x86::avx::_CMP_LE_OQ","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Less-than-or-equal (ordered, non-signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10416},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2683645,"byte_end":2683657,"line_start":655,"line_end":655,"column_start":11,"column_end":23},"name":"_CMP_UNORD_S","qualname":"::coresimd::x86::avx::_CMP_UNORD_S","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Unordered (signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10418},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2683718,"byte_end":2683729,"line_start":657,"line_end":657,"column_start":11,"column_end":22},"name":"_CMP_NEQ_US","qualname":"::coresimd::x86::avx::_CMP_NEQ_US","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Not-equal (unordered, signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10420},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2683798,"byte_end":2683809,"line_start":659,"line_end":659,"column_start":11,"column_end":22},"name":"_CMP_NLT_UQ","qualname":"::coresimd::x86::avx::_CMP_NLT_UQ","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Not-less-than (unordered, non-signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10422},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2683887,"byte_end":2683898,"line_start":661,"line_end":661,"column_start":11,"column_end":22},"name":"_CMP_NLE_UQ","qualname":"::coresimd::x86::avx::_CMP_NLE_UQ","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Not-less-than-or-equal (unordered, non-signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10424},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2683946,"byte_end":2683956,"line_start":663,"line_end":663,"column_start":11,"column_end":21},"name":"_CMP_ORD_S","qualname":"::coresimd::x86::avx::_CMP_ORD_S","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Ordered (signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10426},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2684013,"byte_end":2684023,"line_start":665,"line_end":665,"column_start":11,"column_end":21},"name":"_CMP_EQ_US","qualname":"::coresimd::x86::avx::_CMP_EQ_US","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Equal (unordered, signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10428},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2684104,"byte_end":2684115,"line_start":667,"line_end":667,"column_start":11,"column_end":22},"name":"_CMP_NGE_UQ","qualname":"::coresimd::x86::avx::_CMP_NGE_UQ","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Not-greater-than-or-equal (unordered, non-signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10430},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2684187,"byte_end":2684198,"line_start":669,"line_end":669,"column_start":11,"column_end":22},"name":"_CMP_NGT_UQ","qualname":"::coresimd::x86::avx::_CMP_NGT_UQ","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Not-greater-than (unordered, non-signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10432},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2684253,"byte_end":2684266,"line_start":671,"line_end":671,"column_start":11,"column_end":24},"name":"_CMP_FALSE_OS","qualname":"::coresimd::x86::avx::_CMP_FALSE_OS","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" False (ordered, signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10434},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2684325,"byte_end":2684336,"line_start":673,"line_end":673,"column_start":11,"column_end":22},"name":"_CMP_NEQ_OS","qualname":"::coresimd::x86::avx::_CMP_NEQ_OS","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Not-equal (ordered, signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10436},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2684411,"byte_end":2684421,"line_start":675,"line_end":675,"column_start":11,"column_end":21},"name":"_CMP_GE_OQ","qualname":"::coresimd::x86::avx::_CMP_GE_OQ","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Greater-than-or-equal (ordered, non-signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10438},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2684487,"byte_end":2684497,"line_start":677,"line_end":677,"column_start":11,"column_end":21},"name":"_CMP_GT_OQ","qualname":"::coresimd::x86::avx::_CMP_GT_OQ","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Greater-than (ordered, non-signaling)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10440},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2684553,"byte_end":2684565,"line_start":679,"line_end":679,"column_start":11,"column_end":23},"name":"_CMP_TRUE_US","qualname":"::coresimd::x86::avx::_CMP_TRUE_US","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" True (unordered, signaling)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":10442},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2684896,"byte_end":2684906,"line_start":688,"line_end":688,"column_start":15,"column_end":25},"name":"_mm_cmp_pd","qualname":"::coresimd::x86::avx::_mm_cmp_pd","value":"fn (a: __m128d, b: __m128d, imm8: i32) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compare packed double-precision (64-bit) floating-point\n elements in `a` and `b` based on the comparison operand\n specified by `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2684725,"byte_end":2684734,"line_start":684,"line_end":684,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx,sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2684735,"byte_end":2684773,"line_start":685,"line_end":685,"column_start":1,"column_end":39}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2684850,"byte_end":2684881,"line_start":687,"line_end":687,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10446},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2685378,"byte_end":2685391,"line_start":702,"line_end":702,"column_start":15,"column_end":28},"name":"_mm256_cmp_pd","qualname":"::coresimd::x86::avx::_mm256_cmp_pd","value":"fn (a: __m256d, b: __m256d, imm8: i32) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Compare packed double-precision (64-bit) floating-point\n elements in `a` and `b` based on the comparison operand\n specified by `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2685212,"byte_end":2685221,"line_start":698,"line_end":698,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2685222,"byte_end":2685255,"line_start":699,"line_end":699,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2685332,"byte_end":2685363,"line_start":701,"line_end":701,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10450},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2685870,"byte_end":2685880,"line_start":716,"line_end":716,"column_start":15,"column_end":25},"name":"_mm_cmp_ps","qualname":"::coresimd::x86::avx::_mm_cmp_ps","value":"fn (a: __m128, b: __m128, imm8: i32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare packed single-precision (32-bit) floating-point\n elements in `a` and `b` based on the comparison operand\n specified by `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2685700,"byte_end":2685709,"line_start":712,"line_end":712,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx,sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2685710,"byte_end":2685747,"line_start":713,"line_end":713,"column_start":1,"column_end":38}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2685824,"byte_end":2685855,"line_start":715,"line_end":715,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10454},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2686349,"byte_end":2686362,"line_start":730,"line_end":730,"column_start":15,"column_end":28},"name":"_mm256_cmp_ps","qualname":"::coresimd::x86::avx::_mm256_cmp_ps","value":"fn (a: __m256, b: __m256, imm8: i32) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Compare packed single-precision (32-bit) floating-point\n elements in `a` and `b` based on the comparison operand\n specified by `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2686183,"byte_end":2686192,"line_start":726,"line_end":726,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2686193,"byte_end":2686226,"line_start":727,"line_end":727,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2686303,"byte_end":2686334,"line_start":729,"line_end":729,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10458},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2686984,"byte_end":2686994,"line_start":746,"line_end":746,"column_start":15,"column_end":25},"name":"_mm_cmp_sd","qualname":"::coresimd::x86::avx::_mm_cmp_sd","value":"fn (a: __m128d, b: __m128d, imm8: i32) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Compare the lower double-precision (64-bit) floating-point element in\n `a` and `b` based on the comparison operand specified by `imm8`,\n store the result in the lower element of returned vector,\n and copy the upper element from `a` to the upper element of returned\n vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2686813,"byte_end":2686822,"line_start":742,"line_end":742,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx,sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2686823,"byte_end":2686861,"line_start":743,"line_end":743,"column_start":1,"column_end":39}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2686938,"byte_end":2686969,"line_start":745,"line_end":745,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10462},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2687626,"byte_end":2687636,"line_start":762,"line_end":762,"column_start":15,"column_end":25},"name":"_mm_cmp_ss","qualname":"::coresimd::x86::avx::_mm_cmp_ss","value":"fn (a: __m128, b: __m128, imm8: i32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Compare the lower single-precision (32-bit) floating-point element in\n `a` and `b` based on the comparison operand specified by `imm8`,\n store the result in the lower element of returned vector,\n and copy the upper 3 packed elements from `a` to the upper elements of\n returned vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2687456,"byte_end":2687465,"line_start":758,"line_end":758,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx,sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2687466,"byte_end":2687503,"line_start":759,"line_end":759,"column_start":1,"column_end":38}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2687580,"byte_end":2687611,"line_start":761,"line_end":761,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10466},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2688002,"byte_end":2688020,"line_start":774,"line_end":774,"column_start":15,"column_end":33},"name":"_mm256_cvtepi32_pd","qualname":"::coresimd::x86::avx::_mm256_cvtepi32_pd","value":"fn (a: __m128i) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Convert packed 32-bit integers in `a` to packed double-precision (64-bit)\n floating-point elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2687901,"byte_end":2687910,"line_start":771,"line_end":771,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2687911,"byte_end":2687944,"line_start":772,"line_end":772,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10468},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2688285,"byte_end":2688303,"line_start":783,"line_end":783,"column_start":15,"column_end":33},"name":"_mm256_cvtepi32_ps","qualname":"::coresimd::x86::avx::_mm256_cvtepi32_ps","value":"fn (a: __m256i) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Convert packed 32-bit integers in `a` to packed single-precision (32-bit)\n floating-point elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2688184,"byte_end":2688193,"line_start":780,"line_end":780,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2688194,"byte_end":2688227,"line_start":781,"line_end":781,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10470},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2688601,"byte_end":2688616,"line_start":792,"line_end":792,"column_start":15,"column_end":30},"name":"_mm256_cvtpd_ps","qualname":"::coresimd::x86::avx::_mm256_cvtpd_ps","value":"fn (a: __m256d) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Convert packed double-precision (64-bit) floating-point elements in `a`\n to packed single-precision (32-bit) floating-point elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2688500,"byte_end":2688509,"line_start":789,"line_end":789,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2688510,"byte_end":2688543,"line_start":790,"line_end":790,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10472},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2688869,"byte_end":2688887,"line_start":801,"line_end":801,"column_start":15,"column_end":33},"name":"_mm256_cvtps_epi32","qualname":"::coresimd::x86::avx::_mm256_cvtps_epi32","value":"fn (a: __m256) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Convert packed single-precision (32-bit) floating-point elements in `a`\n to packed 32-bit integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2688768,"byte_end":2688777,"line_start":798,"line_end":798,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2688778,"byte_end":2688811,"line_start":799,"line_end":799,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10474},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2689190,"byte_end":2689205,"line_start":810,"line_end":810,"column_start":15,"column_end":30},"name":"_mm256_cvtps_pd","qualname":"::coresimd::x86::avx::_mm256_cvtps_pd","value":"fn (a: __m128) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Convert packed single-precision (32-bit) floating-point elements in `a`\n to packed double-precision (64-bit) floating-point elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2689089,"byte_end":2689098,"line_start":807,"line_end":807,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2689099,"byte_end":2689132,"line_start":808,"line_end":808,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10476},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2689475,"byte_end":2689494,"line_start":819,"line_end":819,"column_start":15,"column_end":34},"name":"_mm256_cvttpd_epi32","qualname":"::coresimd::x86::avx::_mm256_cvttpd_epi32","value":"fn (a: __m256d) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Convert packed double-precision (64-bit) floating-point elements in `a`\n to packed 32-bit integers with truncation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2689373,"byte_end":2689382,"line_start":816,"line_end":816,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2689383,"byte_end":2689416,"line_start":817,"line_end":817,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10478},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2689765,"byte_end":2689783,"line_start":828,"line_end":828,"column_start":15,"column_end":33},"name":"_mm256_cvtpd_epi32","qualname":"::coresimd::x86::avx::_mm256_cvtpd_epi32","value":"fn (a: __m256d) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Convert packed double-precision (64-bit) floating-point elements in `a`\n to packed 32-bit integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2689664,"byte_end":2689673,"line_start":825,"line_end":825,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2689674,"byte_end":2689707,"line_start":826,"line_end":826,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10480},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2690070,"byte_end":2690089,"line_start":837,"line_end":837,"column_start":15,"column_end":34},"name":"_mm256_cvttps_epi32","qualname":"::coresimd::x86::avx::_mm256_cvttps_epi32","value":"fn (a: __m256) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Convert packed single-precision (32-bit) floating-point elements in `a`\n to packed 32-bit integers with truncation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2689968,"byte_end":2689977,"line_start":834,"line_end":834,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2689978,"byte_end":2690011,"line_start":835,"line_end":835,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10482},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2690427,"byte_end":2690448,"line_start":847,"line_end":847,"column_start":15,"column_end":36},"name":"_mm256_extractf128_ps","qualname":"::coresimd::x86::avx::_mm256_extractf128_ps","value":"fn (a: __m256, imm8: i32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Extract 128 bits (composed of 4 packed single-precision (32-bit)\n floating-point elements) from `a`, selected with `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2690281,"byte_end":2690290,"line_start":843,"line_end":843,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2690291,"byte_end":2690324,"line_start":844,"line_end":844,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2690381,"byte_end":2690412,"line_start":846,"line_end":846,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10484},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2690925,"byte_end":2690946,"line_start":860,"line_end":860,"column_start":15,"column_end":36},"name":"_mm256_extractf128_pd","qualname":"::coresimd::x86::avx::_mm256_extractf128_pd","value":"fn (a: __m256d, imm8: i32) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Extract 128 bits (composed of 2 packed double-precision (64-bit)\n floating-point elements) from `a`, selected with `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2690779,"byte_end":2690788,"line_start":856,"line_end":856,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2690789,"byte_end":2690822,"line_start":857,"line_end":857,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2690879,"byte_end":2690910,"line_start":859,"line_end":859,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10486},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2691363,"byte_end":2691387,"line_start":872,"line_end":872,"column_start":15,"column_end":39},"name":"_mm256_extractf128_si256","qualname":"::coresimd::x86::avx::_mm256_extractf128_si256","value":"fn (a: __m256i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Extract 128 bits (composed of integer data) from `a`, selected with `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2691217,"byte_end":2691226,"line_start":868,"line_end":868,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2691227,"byte_end":2691260,"line_start":869,"line_end":869,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2691317,"byte_end":2691348,"line_start":871,"line_end":871,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10488},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2691802,"byte_end":2691816,"line_start":885,"line_end":885,"column_start":15,"column_end":29},"name":"_mm256_zeroall","qualname":"::coresimd::x86::avx::_mm256_zeroall","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" Zero the contents of all XMM or YMM registers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2691702,"byte_end":2691711,"line_start":882,"line_end":882,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2691712,"byte_end":2691745,"line_start":883,"line_end":883,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10490},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2692047,"byte_end":2692063,"line_start":894,"line_end":894,"column_start":15,"column_end":31},"name":"_mm256_zeroupper","qualname":"::coresimd::x86::avx::_mm256_zeroupper","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" Zero the upper 128 bits of all YMM registers;\n the lower 128-bits of the registers are unmodified.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2691945,"byte_end":2691954,"line_start":891,"line_end":891,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2691955,"byte_end":2691988,"line_start":892,"line_end":892,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10492},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2692309,"byte_end":2692329,"line_start":903,"line_end":903,"column_start":15,"column_end":35},"name":"_mm256_permutevar_ps","qualname":"::coresimd::x86::avx::_mm256_permutevar_ps","value":"fn (a: __m256, b: __m256i) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Shuffle single-precision (32-bit) floating-point elements in `a`\n within 128-bit lanes using the control in `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2692208,"byte_end":2692217,"line_start":900,"line_end":900,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2692218,"byte_end":2692251,"line_start":901,"line_end":901,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10494},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2692602,"byte_end":2692619,"line_start":912,"line_end":912,"column_start":15,"column_end":32},"name":"_mm_permutevar_ps","qualname":"::coresimd::x86::avx::_mm_permutevar_ps","value":"fn (a: __m128, b: __m128i) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Shuffle single-precision (32-bit) floating-point elements in `a`\n using the control in `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2692501,"byte_end":2692510,"line_start":909,"line_end":909,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2692511,"byte_end":2692544,"line_start":910,"line_end":910,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10496},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2692955,"byte_end":2692972,"line_start":922,"line_end":922,"column_start":15,"column_end":32},"name":"_mm256_permute_ps","qualname":"::coresimd::x86::avx::_mm256_permute_ps","value":"fn (a: __m256, imm8: i32) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Shuffle single-precision (32-bit) floating-point elements in `a`\n within 128-bit lanes using the control in `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2692812,"byte_end":2692821,"line_start":918,"line_end":918,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2692822,"byte_end":2692855,"line_start":919,"line_end":919,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2692909,"byte_end":2692940,"line_start":921,"line_end":921,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10506},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2694598,"byte_end":2694612,"line_start":975,"line_end":975,"column_start":15,"column_end":29},"name":"_mm_permute_ps","qualname":"::coresimd::x86::avx::_mm_permute_ps","value":"fn (a: __m128, imm8: i32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Shuffle single-precision (32-bit) floating-point elements in `a`\n using the control in `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2694451,"byte_end":2694460,"line_start":971,"line_end":971,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx,sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2694461,"byte_end":2694498,"line_start":972,"line_end":972,"column_start":1,"column_end":38}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2694552,"byte_end":2694583,"line_start":974,"line_end":974,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10516},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2696175,"byte_end":2696195,"line_start":1027,"line_end":1027,"column_start":15,"column_end":35},"name":"_mm256_permutevar_pd","qualname":"::coresimd::x86::avx::_mm256_permutevar_pd","value":"fn (a: __m256d, b: __m256i) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Shuffle double-precision (64-bit) floating-point elements in `a`\n within 256-bit lanes using the control in `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2696074,"byte_end":2696083,"line_start":1024,"line_end":1024,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2696084,"byte_end":2696117,"line_start":1025,"line_end":1025,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10518},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2696470,"byte_end":2696487,"line_start":1036,"line_end":1036,"column_start":15,"column_end":32},"name":"_mm_permutevar_pd","qualname":"::coresimd::x86::avx::_mm_permutevar_pd","value":"fn (a: __m128d, b: __m128i) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Shuffle double-precision (64-bit) floating-point elements in `a`\n using the control in `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2696369,"byte_end":2696378,"line_start":1033,"line_end":1033,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2696379,"byte_end":2696412,"line_start":1034,"line_end":1034,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10520},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2696827,"byte_end":2696844,"line_start":1046,"line_end":1046,"column_start":15,"column_end":32},"name":"_mm256_permute_pd","qualname":"::coresimd::x86::avx::_mm256_permute_pd","value":"fn (a: __m256d, imm8: i32) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Shuffle double-precision (64-bit) floating-point elements in `a`\n within 128-bit lanes using the control in `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2696682,"byte_end":2696691,"line_start":1042,"line_end":1042,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2696692,"byte_end":2696725,"line_start":1043,"line_end":1043,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2696781,"byte_end":2696812,"line_start":1045,"line_end":1045,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10530},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2698064,"byte_end":2698078,"line_start":1089,"line_end":1089,"column_start":15,"column_end":29},"name":"_mm_permute_pd","qualname":"::coresimd::x86::avx::_mm_permute_pd","value":"fn (a: __m128d, imm8: i32) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Shuffle double-precision (64-bit) floating-point elements in `a`\n using the control in `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2697914,"byte_end":2697923,"line_start":1085,"line_end":1085,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx,sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2697924,"byte_end":2697962,"line_start":1086,"line_end":1086,"column_start":1,"column_end":39}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2698018,"byte_end":2698049,"line_start":1088,"line_end":1088,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10536},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2698851,"byte_end":2698873,"line_start":1116,"line_end":1116,"column_start":15,"column_end":37},"name":"_mm256_permute2f128_ps","qualname":"::coresimd::x86::avx::_mm256_permute2f128_ps","value":"fn (a: __m256, b: __m256, imm8: i32) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Shuffle 256-bits (composed of 8 packed single-precision (32-bit)\n floating-point elements) selected by `imm8` from `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2698705,"byte_end":2698714,"line_start":1112,"line_end":1112,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2698715,"byte_end":2698748,"line_start":1113,"line_end":1113,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2698805,"byte_end":2698836,"line_start":1115,"line_end":1115,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10540},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2699328,"byte_end":2699350,"line_start":1131,"line_end":1131,"column_start":15,"column_end":37},"name":"_mm256_permute2f128_pd","qualname":"::coresimd::x86::avx::_mm256_permute2f128_pd","value":"fn (a: __m256d, b: __m256d, imm8: i32) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Shuffle 256-bits (composed of 4 packed double-precision (64-bit)\n floating-point elements) selected by `imm8` from `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2699181,"byte_end":2699190,"line_start":1127,"line_end":1127,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2699191,"byte_end":2699224,"line_start":1128,"line_end":1128,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2699282,"byte_end":2699313,"line_start":1130,"line_end":1130,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10544},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2699762,"byte_end":2699787,"line_start":1146,"line_end":1146,"column_start":15,"column_end":40},"name":"_mm256_permute2f128_si256","qualname":"::coresimd::x86::avx::_mm256_permute2f128_si256","value":"fn (a: __m256i, b: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle 258-bits (composed of integer data) selected by `imm8`\n from `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2699615,"byte_end":2699624,"line_start":1142,"line_end":1142,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2699625,"byte_end":2699658,"line_start":1143,"line_end":1143,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2699716,"byte_end":2699747,"line_start":1145,"line_end":1145,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10548},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2700271,"byte_end":2700290,"line_start":1163,"line_end":1163,"column_start":15,"column_end":34},"name":"_mm256_broadcast_ss","qualname":"::coresimd::x86::avx::_mm256_broadcast_ss","value":"fn (f: &f32) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Broadcast a single-precision (32-bit) floating-point element from memory\n to all elements of the returned vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2700167,"byte_end":2700176,"line_start":1160,"line_end":1160,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2700177,"byte_end":2700210,"line_start":1161,"line_end":1161,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10550},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2700563,"byte_end":2700579,"line_start":1172,"line_end":1172,"column_start":15,"column_end":31},"name":"_mm_broadcast_ss","qualname":"::coresimd::x86::avx::_mm_broadcast_ss","value":"fn (f: &f32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Broadcast a single-precision (32-bit) floating-point element from memory\n to all elements of the returned vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2700459,"byte_end":2700468,"line_start":1169,"line_end":1169,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2700469,"byte_end":2700502,"line_start":1170,"line_end":1170,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10552},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2700849,"byte_end":2700868,"line_start":1181,"line_end":1181,"column_start":15,"column_end":34},"name":"_mm256_broadcast_sd","qualname":"::coresimd::x86::avx::_mm256_broadcast_sd","value":"fn (f: &f64) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Broadcast a double-precision (64-bit) floating-point element from memory\n to all elements of the returned vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2700745,"byte_end":2700754,"line_start":1178,"line_end":1178,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2700755,"byte_end":2700788,"line_start":1179,"line_end":1179,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10554},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2701175,"byte_end":2701194,"line_start":1190,"line_end":1190,"column_start":15,"column_end":34},"name":"_mm256_broadcast_ps","qualname":"::coresimd::x86::avx::_mm256_broadcast_ps","value":"fn (a: &__m128) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Broadcast 128 bits from memory (composed of 4 packed single-precision\n (32-bit) floating-point elements) to all elements of the returned vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2701069,"byte_end":2701078,"line_start":1187,"line_end":1187,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2701079,"byte_end":2701112,"line_start":1188,"line_end":1188,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10556},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2701507,"byte_end":2701526,"line_start":1199,"line_end":1199,"column_start":15,"column_end":34},"name":"_mm256_broadcast_pd","qualname":"::coresimd::x86::avx::_mm256_broadcast_pd","value":"fn (a: &__m128d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Broadcast 128 bits from memory (composed of 2 packed double-precision\n (64-bit) floating-point elements) to all elements of the returned vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2701401,"byte_end":2701410,"line_start":1196,"line_end":1196,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2701411,"byte_end":2701444,"line_start":1197,"line_end":1197,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10558},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2701912,"byte_end":2701932,"line_start":1210,"line_end":1210,"column_start":15,"column_end":35},"name":"_mm256_insertf128_ps","qualname":"::coresimd::x86::avx::_mm256_insertf128_ps","value":"fn (a: __m256, b: __m128, imm8: i32) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Copy `a` to result, then insert 128 bits (composed of 4 packed\n single-precision (32-bit) floating-point elements) from `b` into result\n at the location specified by `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2701767,"byte_end":2701776,"line_start":1206,"line_end":1206,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2701777,"byte_end":2701810,"line_start":1207,"line_end":1207,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2701866,"byte_end":2701897,"line_start":1209,"line_end":1209,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10560},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2702500,"byte_end":2702520,"line_start":1225,"line_end":1225,"column_start":15,"column_end":35},"name":"_mm256_insertf128_pd","qualname":"::coresimd::x86::avx::_mm256_insertf128_pd","value":"fn (a: __m256d, b: __m128d, imm8: i32) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Copy `a` to result, then insert 128 bits (composed of 2 packed\n double-precision (64-bit) floating-point elements) from `b` into result\n at the location specified by `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2702355,"byte_end":2702364,"line_start":1221,"line_end":1221,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2702365,"byte_end":2702398,"line_start":1222,"line_end":1222,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2702454,"byte_end":2702485,"line_start":1224,"line_end":1224,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10562},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2703001,"byte_end":2703024,"line_start":1240,"line_end":1240,"column_start":15,"column_end":38},"name":"_mm256_insertf128_si256","qualname":"::coresimd::x86::avx::_mm256_insertf128_si256","value":"fn (a: __m256i, b: __m128i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Copy `a` to result, then insert 128 bits from `b` into result\n at the location specified by `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2702856,"byte_end":2702865,"line_start":1236,"line_end":1236,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2702866,"byte_end":2702899,"line_start":1237,"line_end":1237,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2702955,"byte_end":2702986,"line_start":1239,"line_end":1239,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10564},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2703572,"byte_end":2703590,"line_start":1257,"line_end":1257,"column_start":15,"column_end":33},"name":"_mm256_insert_epi8","qualname":"::coresimd::x86::avx::_mm256_insert_epi8","value":"fn (a: __m256i, i: i8, index: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Copy `a` to result, and insert the 8-bit integer `i` into result\n at the location specified by `index`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2703430,"byte_end":2703439,"line_start":1253,"line_end":1253,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2703440,"byte_end":2703473,"line_start":1254,"line_end":1254,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2703526,"byte_end":2703557,"line_start":1256,"line_end":1256,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10566},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2703962,"byte_end":2703981,"line_start":1267,"line_end":1267,"column_start":15,"column_end":34},"name":"_mm256_insert_epi16","qualname":"::coresimd::x86::avx::_mm256_insert_epi16","value":"fn (a: __m256i, i: i16, index: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Copy `a` to result, and insert the 16-bit integer `i` into result\n at the location specified by `index`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2703820,"byte_end":2703829,"line_start":1263,"line_end":1263,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2703830,"byte_end":2703863,"line_start":1264,"line_end":1264,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2703916,"byte_end":2703947,"line_start":1266,"line_end":1266,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10568},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2704355,"byte_end":2704374,"line_start":1277,"line_end":1277,"column_start":15,"column_end":34},"name":"_mm256_insert_epi32","qualname":"::coresimd::x86::avx::_mm256_insert_epi32","value":"fn (a: __m256i, i: i32, index: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Copy `a` to result, and insert the 32-bit integer `i` into result\n at the location specified by `index`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2704213,"byte_end":2704222,"line_start":1273,"line_end":1273,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2704223,"byte_end":2704256,"line_start":1274,"line_end":1274,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2704309,"byte_end":2704340,"line_start":1276,"line_end":1276,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10570},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2704846,"byte_end":2704860,"line_start":1288,"line_end":1288,"column_start":15,"column_end":29},"name":"_mm256_load_pd","qualname":"::coresimd::x86::avx::_mm256_load_pd","value":"fn (mem_addr: *const f64) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Load 256-bits (composed of 4 packed double-precision (64-bit)\n floating-point elements) from memory into result.\n `mem_addr` must be aligned on a 32-byte boundary or a\n general-protection exception may be generated.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2704721,"byte_end":2704730,"line_start":1285,"line_end":1285,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2704731,"byte_end":2704764,"line_start":1286,"line_end":1286,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10572},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2705285,"byte_end":2705300,"line_start":1299,"line_end":1299,"column_start":15,"column_end":30},"name":"_mm256_store_pd","qualname":"::coresimd::x86::avx::_mm256_store_pd","value":"fn (mem_addr: *const f64, a: __m256d) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store 256-bits (composed of 4 packed double-precision (64-bit)\n floating-point elements) from `a` into memory.\n `mem_addr` must be aligned on a 32-byte boundary or a\n general-protection exception may be generated.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2705160,"byte_end":2705169,"line_start":1296,"line_end":1296,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2705170,"byte_end":2705203,"line_start":1297,"line_end":1297,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10574},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2705705,"byte_end":2705719,"line_start":1310,"line_end":1310,"column_start":15,"column_end":29},"name":"_mm256_load_ps","qualname":"::coresimd::x86::avx::_mm256_load_ps","value":"fn (mem_addr: *const f32) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Load 256-bits (composed of 8 packed single-precision (32-bit)\n floating-point elements) from memory into result.\n `mem_addr` must be aligned on a 32-byte boundary or a\n general-protection exception may be generated.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2705606,"byte_end":2705615,"line_start":1307,"line_end":1307,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2705616,"byte_end":2705649,"line_start":1308,"line_end":1308,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10576},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2706116,"byte_end":2706131,"line_start":1321,"line_end":1321,"column_start":15,"column_end":30},"name":"_mm256_store_ps","qualname":"::coresimd::x86::avx::_mm256_store_ps","value":"fn (mem_addr: *const f32, a: __m256) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store 256-bits (composed of 8 packed single-precision (32-bit)\n floating-point elements) from `a` into memory.\n `mem_addr` must be aligned on a 32-byte boundary or a\n general-protection exception may be generated.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2706017,"byte_end":2706026,"line_start":1318,"line_end":1318,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2706027,"byte_end":2706060,"line_start":1319,"line_end":1319,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10578},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2706522,"byte_end":2706537,"line_start":1331,"line_end":1331,"column_start":15,"column_end":30},"name":"_mm256_loadu_pd","qualname":"::coresimd::x86::avx::_mm256_loadu_pd","value":"fn (mem_addr: *const f64) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Load 256-bits (composed of 4 packed double-precision (64-bit)\n floating-point elements) from memory into result.\n `mem_addr` does not need to be aligned on any particular boundary.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2706397,"byte_end":2706406,"line_start":1328,"line_end":1328,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2706407,"byte_end":2706440,"line_start":1329,"line_end":1329,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10580},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2707087,"byte_end":2707103,"line_start":1347,"line_end":1347,"column_start":15,"column_end":31},"name":"_mm256_storeu_pd","qualname":"::coresimd::x86::avx::_mm256_storeu_pd","value":"fn (mem_addr: *mut f64, a: __m256d) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store 256-bits (composed of 4 packed double-precision (64-bit)\n floating-point elements) from `a` into memory.\n `mem_addr` does not need to be aligned on any particular boundary.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2706962,"byte_end":2706971,"line_start":1344,"line_end":1344,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2706972,"byte_end":2707005,"line_start":1345,"line_end":1345,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10582},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2707461,"byte_end":2707476,"line_start":1357,"line_end":1357,"column_start":15,"column_end":30},"name":"_mm256_loadu_ps","qualname":"::coresimd::x86::avx::_mm256_loadu_ps","value":"fn (mem_addr: *const f32) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Load 256-bits (composed of 8 packed single-precision (32-bit)\n floating-point elements) from memory into result.\n `mem_addr` does not need to be aligned on any particular boundary.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2707362,"byte_end":2707371,"line_start":1354,"line_end":1354,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2707372,"byte_end":2707405,"line_start":1355,"line_end":1355,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10584},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2707997,"byte_end":2708013,"line_start":1373,"line_end":1373,"column_start":15,"column_end":31},"name":"_mm256_storeu_ps","qualname":"::coresimd::x86::avx::_mm256_storeu_ps","value":"fn (mem_addr: *mut f32, a: __m256) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store 256-bits (composed of 8 packed single-precision (32-bit)\n floating-point elements) from `a` into memory.\n `mem_addr` does not need to be aligned on any particular boundary.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2707898,"byte_end":2707907,"line_start":1370,"line_end":1370,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2707908,"byte_end":2707941,"line_start":1371,"line_end":1371,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10586},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2708373,"byte_end":2708390,"line_start":1383,"line_end":1383,"column_start":15,"column_end":32},"name":"_mm256_load_si256","qualname":"::coresimd::x86::avx::_mm256_load_si256","value":"fn (mem_addr: *const __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Load 256-bits of integer data from memory into result.\n `mem_addr` must be aligned on a 32-byte boundary or a\n general-protection exception may be generated.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2708248,"byte_end":2708257,"line_start":1380,"line_end":1380,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2708258,"byte_end":2708291,"line_start":1381,"line_end":1381,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10588},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2708738,"byte_end":2708756,"line_start":1393,"line_end":1393,"column_start":15,"column_end":33},"name":"_mm256_store_si256","qualname":"::coresimd::x86::avx::_mm256_store_si256","value":"fn (mem_addr: *mut __m256i, a: __m256i) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store 256-bits of integer data from `a` into memory.\n `mem_addr` must be aligned on a 32-byte boundary or a\n general-protection exception may be generated.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2708613,"byte_end":2708622,"line_start":1390,"line_end":1390,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2708623,"byte_end":2708656,"line_start":1391,"line_end":1391,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10590},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2709072,"byte_end":2709090,"line_start":1402,"line_end":1402,"column_start":15,"column_end":33},"name":"_mm256_loadu_si256","qualname":"::coresimd::x86::avx::_mm256_loadu_si256","value":"fn (mem_addr: *const __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Load 256-bits of integer data from memory into result.\n `mem_addr` does not need to be aligned on any particular boundary.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2708947,"byte_end":2708956,"line_start":1399,"line_end":1399,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2708957,"byte_end":2708990,"line_start":1400,"line_end":1400,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10592},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2709587,"byte_end":2709606,"line_start":1417,"line_end":1417,"column_start":15,"column_end":34},"name":"_mm256_storeu_si256","qualname":"::coresimd::x86::avx::_mm256_storeu_si256","value":"fn (mem_addr: *mut __m256i, a: __m256i) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store 256-bits of integer data from `a` into memory.\n \t`mem_addr` does not need to be aligned on any particular boundary.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2709462,"byte_end":2709471,"line_start":1414,"line_end":1414,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2709472,"byte_end":2709505,"line_start":1415,"line_end":1415,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10594},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2709998,"byte_end":2710016,"line_start":1427,"line_end":1427,"column_start":15,"column_end":33},"name":"_mm256_maskload_pd","qualname":"::coresimd::x86::avx::_mm256_maskload_pd","value":"fn (mem_addr: *const f64, mask: __m256i) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Load packed double-precision (64-bit) floating-point elements from memory\n into result using `mask` (elements are zeroed out when the high bit of the\n corresponding element is not set).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2709896,"byte_end":2709905,"line_start":1424,"line_end":1424,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2709906,"byte_end":2709939,"line_start":1425,"line_end":1425,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10596},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2710342,"byte_end":2710361,"line_start":1438,"line_end":1438,"column_start":15,"column_end":34},"name":"_mm256_maskstore_pd","qualname":"::coresimd::x86::avx::_mm256_maskstore_pd","value":"fn (mem_addr: *mut f64, mask: __m256i, a: __m256d) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store packed double-precision (64-bit) floating-point elements from `a`\n into memory using `mask`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2710240,"byte_end":2710249,"line_start":1435,"line_end":1435,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2710250,"byte_end":2710283,"line_start":1436,"line_end":1436,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10598},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2710779,"byte_end":2710794,"line_start":1450,"line_end":1450,"column_start":15,"column_end":30},"name":"_mm_maskload_pd","qualname":"::coresimd::x86::avx::_mm_maskload_pd","value":"fn (mem_addr: *const f64, mask: __m128i) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Load packed double-precision (64-bit) floating-point elements from memory\n into result using `mask` (elements are zeroed out when the high bit of the\n corresponding element is not set).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2710677,"byte_end":2710686,"line_start":1447,"line_end":1447,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2710687,"byte_end":2710720,"line_start":1448,"line_end":1448,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10600},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2711111,"byte_end":2711127,"line_start":1459,"line_end":1459,"column_start":15,"column_end":31},"name":"_mm_maskstore_pd","qualname":"::coresimd::x86::avx::_mm_maskstore_pd","value":"fn (mem_addr: *mut f64, mask: __m128i, a: __m128d) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store packed double-precision (64-bit) floating-point elements from `a`\n into memory using `mask`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2711009,"byte_end":2711018,"line_start":1456,"line_end":1456,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2711019,"byte_end":2711052,"line_start":1457,"line_end":1457,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10602},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2711536,"byte_end":2711554,"line_start":1469,"line_end":1469,"column_start":15,"column_end":33},"name":"_mm256_maskload_ps","qualname":"::coresimd::x86::avx::_mm256_maskload_ps","value":"fn (mem_addr: *const f32, mask: __m256i) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Load packed single-precision (32-bit) floating-point elements from memory\n into result using `mask` (elements are zeroed out when the high bit of the\n corresponding element is not set).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2711434,"byte_end":2711443,"line_start":1466,"line_end":1466,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2711444,"byte_end":2711477,"line_start":1467,"line_end":1467,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10604},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2711879,"byte_end":2711898,"line_start":1480,"line_end":1480,"column_start":15,"column_end":34},"name":"_mm256_maskstore_ps","qualname":"::coresimd::x86::avx::_mm256_maskstore_ps","value":"fn (mem_addr: *mut f32, mask: __m256i, a: __m256) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store packed single-precision (32-bit) floating-point elements from `a`\n into memory using `mask`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2711777,"byte_end":2711786,"line_start":1477,"line_end":1477,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2711787,"byte_end":2711820,"line_start":1478,"line_end":1478,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10606},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2712315,"byte_end":2712330,"line_start":1492,"line_end":1492,"column_start":15,"column_end":30},"name":"_mm_maskload_ps","qualname":"::coresimd::x86::avx::_mm_maskload_ps","value":"fn (mem_addr: *const f32, mask: __m128i) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Load packed single-precision (32-bit) floating-point elements from memory\n into result using `mask` (elements are zeroed out when the high bit of the\n corresponding element is not set).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2712213,"byte_end":2712222,"line_start":1489,"line_end":1489,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2712223,"byte_end":2712256,"line_start":1490,"line_end":1490,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10608},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2712646,"byte_end":2712662,"line_start":1501,"line_end":1501,"column_start":15,"column_end":31},"name":"_mm_maskstore_ps","qualname":"::coresimd::x86::avx::_mm_maskstore_ps","value":"fn (mem_addr: *mut f32, mask: __m128i, a: __m128) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store packed single-precision (32-bit) floating-point elements from `a`\n into memory using `mask`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2712544,"byte_end":2712553,"line_start":1498,"line_end":1498,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2712554,"byte_end":2712587,"line_start":1499,"line_end":1499,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10610},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2712987,"byte_end":2713005,"line_start":1510,"line_end":1510,"column_start":15,"column_end":33},"name":"_mm256_movehdup_ps","qualname":"::coresimd::x86::avx::_mm256_movehdup_ps","value":"fn (a: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Duplicate odd-indexed single-precision (32-bit) floating-point elements\n from `a`, and return the results.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2712886,"byte_end":2712895,"line_start":1507,"line_end":1507,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2712896,"byte_end":2712929,"line_start":1508,"line_end":1508,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10612},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2713298,"byte_end":2713316,"line_start":1519,"line_end":1519,"column_start":15,"column_end":33},"name":"_mm256_moveldup_ps","qualname":"::coresimd::x86::avx::_mm256_moveldup_ps","value":"fn (a: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Duplicate even-indexed single-precision (32-bit) floating-point elements\n from `a`, and return the results.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2713197,"byte_end":2713206,"line_start":1516,"line_end":1516,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2713207,"byte_end":2713240,"line_start":1517,"line_end":1517,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10614},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2713608,"byte_end":2713625,"line_start":1528,"line_end":1528,"column_start":15,"column_end":32},"name":"_mm256_movedup_pd","qualname":"::coresimd::x86::avx::_mm256_movedup_pd","value":"fn (a: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Duplicate even-indexed double-precision (64-bit) floating-point elements\n from \"a\", and return the results.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2713508,"byte_end":2713517,"line_start":1525,"line_end":1525,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2713518,"byte_end":2713551,"line_start":1526,"line_end":1526,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10616},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2713972,"byte_end":2713990,"line_start":1538,"line_end":1538,"column_start":15,"column_end":33},"name":"_mm256_lddqu_si256","qualname":"::coresimd::x86::avx::_mm256_lddqu_si256","value":"fn (mem_addr: *const __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Load 256-bits of integer data from unaligned memory into result.\n This intrinsic may perform better than `_mm256_loadu_si256` when the\n data crosses a cache line boundary.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2713874,"byte_end":2713883,"line_start":1535,"line_end":1535,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2713884,"byte_end":2713917,"line_start":1536,"line_end":1536,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10618},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2714390,"byte_end":2714409,"line_start":1548,"line_end":1548,"column_start":15,"column_end":34},"name":"_mm256_stream_si256","qualname":"::coresimd::x86::avx::_mm256_stream_si256","value":"fn (mem_addr: *const __m256i, a: __m256i) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves integer data from a 256-bit integer vector to a 32-byte\n aligned memory location. To minimize caching, the data is flagged as\n non-temporal (unlikely to be used again soon)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2714272,"byte_end":2714281,"line_start":1545,"line_end":1545,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2714282,"byte_end":2714315,"line_start":1546,"line_end":1546,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10620},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2714844,"byte_end":2714860,"line_start":1558,"line_end":1558,"column_start":15,"column_end":31},"name":"_mm256_stream_pd","qualname":"::coresimd::x86::avx::_mm256_stream_pd","value":"fn (mem_addr: *const f64, a: __m256d) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves double-precision values from a 256-bit vector of [4 x double]\n to a 32-byte aligned memory location. To minimize caching, the data is\n flagged as non-temporal (unlikely to be used again soon).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2714726,"byte_end":2714735,"line_start":1555,"line_end":1555,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2714736,"byte_end":2714769,"line_start":1556,"line_end":1556,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10622},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2715291,"byte_end":2715307,"line_start":1569,"line_end":1569,"column_start":15,"column_end":31},"name":"_mm256_stream_ps","qualname":"::coresimd::x86::avx::_mm256_stream_ps","value":"fn (mem_addr: *const f32, a: __m256) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves single-precision floating point values from a 256-bit vector\n of [8 x float] to a 32-byte aligned memory location. To minimize\n caching, the data is flagged as non-temporal (unlikely to be used again\n soon).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2715191,"byte_end":2715200,"line_start":1566,"line_end":1566,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2715201,"byte_end":2715234,"line_start":1567,"line_end":1567,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10624},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2715721,"byte_end":2715734,"line_start":1579,"line_end":1579,"column_start":15,"column_end":28},"name":"_mm256_rcp_ps","qualname":"::coresimd::x86::avx::_mm256_rcp_ps","value":"fn (a: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Compute the approximate reciprocal of packed single-precision (32-bit)\n floating-point elements in `a`, and return the results. The maximum\n relative error for this approximation is less than 1.5*2^-12.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2715623,"byte_end":2715632,"line_start":1576,"line_end":1576,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2715633,"byte_end":2715666,"line_start":1577,"line_end":1577,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10626},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2716100,"byte_end":2716115,"line_start":1589,"line_end":1589,"column_start":15,"column_end":30},"name":"_mm256_rsqrt_ps","qualname":"::coresimd::x86::avx::_mm256_rsqrt_ps","value":"fn (a: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Compute the approximate reciprocal square root of packed single-precision\n (32-bit) floating-point elements in `a`, and return the results.\n The maximum relative error for this approximation is less than 1.5*2^-12.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2716000,"byte_end":2716009,"line_start":1586,"line_end":1586,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2716010,"byte_end":2716043,"line_start":1587,"line_end":1587,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10628},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2716395,"byte_end":2716413,"line_start":1598,"line_end":1598,"column_start":15,"column_end":33},"name":"_mm256_unpackhi_pd","qualname":"::coresimd::x86::avx::_mm256_unpackhi_pd","value":"fn (a: __m256d, b: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave double-precision (64-bit) floating-point elements\n from the high half of each 128-bit lane in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2716294,"byte_end":2716303,"line_start":1595,"line_end":1595,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2716304,"byte_end":2716337,"line_start":1596,"line_end":1596,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10630},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2716729,"byte_end":2716747,"line_start":1607,"line_end":1607,"column_start":15,"column_end":33},"name":"_mm256_unpackhi_ps","qualname":"::coresimd::x86::avx::_mm256_unpackhi_ps","value":"fn (a: __m256, b: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave single-precision (32-bit) floating-point elements\n from the high half of each 128-bit lane in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2716628,"byte_end":2716637,"line_start":1604,"line_end":1604,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2716638,"byte_end":2716671,"line_start":1605,"line_end":1605,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10632},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2717075,"byte_end":2717093,"line_start":1616,"line_end":1616,"column_start":15,"column_end":33},"name":"_mm256_unpacklo_pd","qualname":"::coresimd::x86::avx::_mm256_unpacklo_pd","value":"fn (a: __m256d, b: __m256d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave double-precision (64-bit) floating-point elements\n from the low half of each 128-bit lane in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2716974,"byte_end":2716983,"line_start":1613,"line_end":1613,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2716984,"byte_end":2717017,"line_start":1614,"line_end":1614,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10634},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2717408,"byte_end":2717426,"line_start":1625,"line_end":1625,"column_start":15,"column_end":33},"name":"_mm256_unpacklo_ps","qualname":"::coresimd::x86::avx::_mm256_unpacklo_ps","value":"fn (a: __m256, b: __m256) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave single-precision (32-bit) floating-point elements\n from the low half of each 128-bit lane in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2717307,"byte_end":2717316,"line_start":1622,"line_end":1622,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2717317,"byte_end":2717350,"line_start":1623,"line_end":1623,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10636},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2717919,"byte_end":2717937,"line_start":1636,"line_end":1636,"column_start":15,"column_end":33},"name":"_mm256_testz_si256","qualname":"::coresimd::x86::avx::_mm256_testz_si256","value":"fn (a: __m256i, b: __m256i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of 256 bits (representing integer data) in `a` and\n `b`, and set `ZF` to 1 if the result is zero, otherwise set `ZF` to 0.\n Compute the bitwise NOT of `a` and then AND with `b`, and set `CF` to 1 if\n the result is zero, otherwise set `CF` to 0. Return the `ZF` value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2717821,"byte_end":2717830,"line_start":1633,"line_end":1633,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2717831,"byte_end":2717864,"line_start":1634,"line_end":1634,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10638},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2718419,"byte_end":2718437,"line_start":1647,"line_end":1647,"column_start":15,"column_end":33},"name":"_mm256_testc_si256","qualname":"::coresimd::x86::avx::_mm256_testc_si256","value":"fn (a: __m256i, b: __m256i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of 256 bits (representing integer data) in `a` and\n `b`, and set `ZF` to 1 if the result is zero, otherwise set `ZF` to 0.\n Compute the bitwise NOT of `a` and then AND with `b`, and set `CF` to 1 if\n the result is zero, otherwise set `CF` to 0. Return the `CF` value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2718321,"byte_end":2718330,"line_start":1644,"line_end":1644,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2718331,"byte_end":2718364,"line_start":1645,"line_end":1645,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10640},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2718972,"byte_end":2718992,"line_start":1659,"line_end":1659,"column_start":15,"column_end":35},"name":"_mm256_testnzc_si256","qualname":"::coresimd::x86::avx::_mm256_testnzc_si256","value":"fn (a: __m256i, b: __m256i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of 256 bits (representing integer data) in `a` and\n `b`, and set `ZF` to 1 if the result is zero, otherwise set `ZF` to 0.\n Compute the bitwise NOT of `a` and then AND with `b`, and set `CF` to 1 if\n the result is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and\n `CF` values are zero, otherwise return 0.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2718874,"byte_end":2718883,"line_start":1656,"line_end":1656,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2718884,"byte_end":2718917,"line_start":1657,"line_end":1657,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10642},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2719702,"byte_end":2719717,"line_start":1673,"line_end":1673,"column_start":15,"column_end":30},"name":"_mm256_testz_pd","qualname":"::coresimd::x86::avx::_mm256_testz_pd","value":"fn (a: __m256d, b: __m256d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of 256 bits (representing double-precision (64-bit)\n floating-point elements) in `a` and `b`, producing an intermediate 256-bit\n value, and set `ZF` to 1 if the sign bit of each 64-bit element in the\n intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise\n NOT of `a` and then AND with `b`, producing an intermediate value, and set\n `CF` to 1 if the sign bit of each 64-bit element in the intermediate value\n is zero, otherwise set `CF` to 0. Return the `ZF` value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2719603,"byte_end":2719612,"line_start":1670,"line_end":1670,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2719613,"byte_end":2719646,"line_start":1671,"line_end":1671,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10644},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2720405,"byte_end":2720420,"line_start":1687,"line_end":1687,"column_start":15,"column_end":30},"name":"_mm256_testc_pd","qualname":"::coresimd::x86::avx::_mm256_testc_pd","value":"fn (a: __m256d, b: __m256d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of 256 bits (representing double-precision (64-bit)\n floating-point elements) in `a` and `b`, producing an intermediate 256-bit\n value, and set `ZF` to 1 if the sign bit of each 64-bit element in the\n intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise\n NOT of `a` and then AND with `b`, producing an intermediate value, and set\n `CF` to 1 if the sign bit of each 64-bit element in the intermediate value\n is zero, otherwise set `CF` to 0. Return the `CF` value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2720306,"byte_end":2720315,"line_start":1684,"line_end":1684,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2720316,"byte_end":2720349,"line_start":1685,"line_end":1685,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10646},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2721161,"byte_end":2721178,"line_start":1702,"line_end":1702,"column_start":15,"column_end":32},"name":"_mm256_testnzc_pd","qualname":"::coresimd::x86::avx::_mm256_testnzc_pd","value":"fn (a: __m256d, b: __m256d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of 256 bits (representing double-precision (64-bit)\n floating-point elements) in `a` and `b`, producing an intermediate 256-bit\n value, and set `ZF` to 1 if the sign bit of each 64-bit element in the\n intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise\n NOT of `a` and then AND with `b`, producing an intermediate value, and set\n `CF` to 1 if the sign bit of each 64-bit element in the intermediate value\n is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values\n are zero, otherwise return 0.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2721062,"byte_end":2721071,"line_start":1699,"line_end":1699,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2721072,"byte_end":2721105,"line_start":1700,"line_end":1700,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10648},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2721868,"byte_end":2721880,"line_start":1716,"line_end":1716,"column_start":15,"column_end":27},"name":"_mm_testz_pd","qualname":"::coresimd::x86::avx::_mm_testz_pd","value":"fn (a: __m128d, b: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of 128 bits (representing double-precision (64-bit)\n floating-point elements) in `a` and `b`, producing an intermediate 128-bit\n value, and set `ZF` to 1 if the sign bit of each 64-bit element in the\n intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise\n NOT of `a` and then AND with `b`, producing an intermediate value, and set\n `CF` to 1 if the sign bit of each 64-bit element in the intermediate value\n is zero, otherwise set `CF` to 0. Return the `ZF` value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2721769,"byte_end":2721778,"line_start":1713,"line_end":1713,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2721779,"byte_end":2721812,"line_start":1714,"line_end":1714,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10650},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2722565,"byte_end":2722577,"line_start":1730,"line_end":1730,"column_start":15,"column_end":27},"name":"_mm_testc_pd","qualname":"::coresimd::x86::avx::_mm_testc_pd","value":"fn (a: __m128d, b: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of 128 bits (representing double-precision (64-bit)\n floating-point elements) in `a` and `b`, producing an intermediate 128-bit\n value, and set `ZF` to 1 if the sign bit of each 64-bit element in the\n intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise\n NOT of `a` and then AND with `b`, producing an intermediate value, and set\n `CF` to 1 if the sign bit of each 64-bit element in the intermediate value\n is zero, otherwise set `CF` to 0. Return the `CF` value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2722466,"byte_end":2722475,"line_start":1727,"line_end":1727,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2722476,"byte_end":2722509,"line_start":1728,"line_end":1728,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10652},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2723315,"byte_end":2723329,"line_start":1745,"line_end":1745,"column_start":15,"column_end":29},"name":"_mm_testnzc_pd","qualname":"::coresimd::x86::avx::_mm_testnzc_pd","value":"fn (a: __m128d, b: __m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of 128 bits (representing double-precision (64-bit)\n floating-point elements) in `a` and `b`, producing an intermediate 128-bit\n value, and set `ZF` to 1 if the sign bit of each 64-bit element in the\n intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise\n NOT of `a` and then AND with `b`, producing an intermediate value, and set\n `CF` to 1 if the sign bit of each 64-bit element in the intermediate value\n is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values\n are zero, otherwise return 0.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2723216,"byte_end":2723225,"line_start":1742,"line_end":1742,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2723226,"byte_end":2723259,"line_start":1743,"line_end":1743,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10654},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2724016,"byte_end":2724031,"line_start":1759,"line_end":1759,"column_start":15,"column_end":30},"name":"_mm256_testz_ps","qualname":"::coresimd::x86::avx::_mm256_testz_ps","value":"fn (a: __m256, b: __m256) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of 256 bits (representing single-precision (32-bit)\n floating-point elements) in `a` and `b`, producing an intermediate 256-bit\n value, and set `ZF` to 1 if the sign bit of each 32-bit element in the\n intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise\n NOT of `a` and then AND with `b`, producing an intermediate value, and set\n `CF` to 1 if the sign bit of each 32-bit element in the intermediate value\n is zero, otherwise set `CF` to 0. Return the `ZF` value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2723917,"byte_end":2723926,"line_start":1756,"line_end":1756,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2723927,"byte_end":2723960,"line_start":1757,"line_end":1757,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10656},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2724717,"byte_end":2724732,"line_start":1773,"line_end":1773,"column_start":15,"column_end":30},"name":"_mm256_testc_ps","qualname":"::coresimd::x86::avx::_mm256_testc_ps","value":"fn (a: __m256, b: __m256) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of 256 bits (representing single-precision (32-bit)\n floating-point elements) in `a` and `b`, producing an intermediate 256-bit\n value, and set `ZF` to 1 if the sign bit of each 32-bit element in the\n intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise\n NOT of `a` and then AND with `b`, producing an intermediate value, and set\n `CF` to 1 if the sign bit of each 32-bit element in the intermediate value\n is zero, otherwise set `CF` to 0. Return the `CF` value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2724618,"byte_end":2724627,"line_start":1770,"line_end":1770,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2724628,"byte_end":2724661,"line_start":1771,"line_end":1771,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10658},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2725471,"byte_end":2725488,"line_start":1788,"line_end":1788,"column_start":15,"column_end":32},"name":"_mm256_testnzc_ps","qualname":"::coresimd::x86::avx::_mm256_testnzc_ps","value":"fn (a: __m256, b: __m256) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of 256 bits (representing single-precision (32-bit)\n floating-point elements) in `a` and `b`, producing an intermediate 256-bit\n value, and set `ZF` to 1 if the sign bit of each 32-bit element in the\n intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise\n NOT of `a` and then AND with `b`, producing an intermediate value, and set\n `CF` to 1 if the sign bit of each 32-bit element in the intermediate value\n is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values\n are zero, otherwise return 0.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2725372,"byte_end":2725381,"line_start":1785,"line_end":1785,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2725382,"byte_end":2725415,"line_start":1786,"line_end":1786,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10660},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2726176,"byte_end":2726188,"line_start":1802,"line_end":1802,"column_start":15,"column_end":27},"name":"_mm_testz_ps","qualname":"::coresimd::x86::avx::_mm_testz_ps","value":"fn (a: __m128, b: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of 128 bits (representing single-precision (32-bit)\n floating-point elements) in `a` and `b`, producing an intermediate 128-bit\n value, and set `ZF` to 1 if the sign bit of each 32-bit element in the\n intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise\n NOT of `a` and then AND with `b`, producing an intermediate value, and set\n `CF` to 1 if the sign bit of each 32-bit element in the intermediate value\n is zero, otherwise set `CF` to 0. Return the `ZF` value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2726077,"byte_end":2726086,"line_start":1799,"line_end":1799,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2726087,"byte_end":2726120,"line_start":1800,"line_end":1800,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10662},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2726871,"byte_end":2726883,"line_start":1816,"line_end":1816,"column_start":15,"column_end":27},"name":"_mm_testc_ps","qualname":"::coresimd::x86::avx::_mm_testc_ps","value":"fn (a: __m128, b: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of 128 bits (representing single-precision (32-bit)\n floating-point elements) in `a` and `b`, producing an intermediate 128-bit\n value, and set `ZF` to 1 if the sign bit of each 32-bit element in the\n intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise\n NOT of `a` and then AND with `b`, producing an intermediate value, and set\n `CF` to 1 if the sign bit of each 32-bit element in the intermediate value\n is zero, otherwise set `CF` to 0. Return the `CF` value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2726772,"byte_end":2726781,"line_start":1813,"line_end":1813,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2726782,"byte_end":2726815,"line_start":1814,"line_end":1814,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10664},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2727619,"byte_end":2727633,"line_start":1831,"line_end":1831,"column_start":15,"column_end":29},"name":"_mm_testnzc_ps","qualname":"::coresimd::x86::avx::_mm_testnzc_ps","value":"fn (a: __m128, b: __m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of 128 bits (representing single-precision (32-bit)\n floating-point elements) in `a` and `b`, producing an intermediate 128-bit\n value, and set `ZF` to 1 if the sign bit of each 32-bit element in the\n intermediate value is zero, otherwise set `ZF` to 0. Compute the bitwise\n NOT of `a` and then AND with `b`, producing an intermediate value, and set\n `CF` to 1 if the sign bit of each 32-bit element in the intermediate value\n is zero, otherwise set `CF` to 0. Return 1 if both the `ZF` and `CF` values\n are zero, otherwise return 0.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2727520,"byte_end":2727529,"line_start":1828,"line_end":1828,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2727530,"byte_end":2727563,"line_start":1829,"line_end":1829,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10666},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2727955,"byte_end":2727973,"line_start":1841,"line_end":1841,"column_start":15,"column_end":33},"name":"_mm256_movemask_pd","qualname":"::coresimd::x86::avx::_mm256_movemask_pd","value":"fn (a: __m256d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Set each bit of the returned mask based on the most significant bit of the\n corresponding packed double-precision (64-bit) floating-point element in\n `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2727854,"byte_end":2727863,"line_start":1838,"line_end":1838,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2727864,"byte_end":2727897,"line_start":1839,"line_end":1839,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10668},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2728283,"byte_end":2728301,"line_start":1851,"line_end":1851,"column_start":15,"column_end":33},"name":"_mm256_movemask_ps","qualname":"::coresimd::x86::avx::_mm256_movemask_ps","value":"fn (a: __m256) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Set each bit of the returned mask based on the most significant bit of the\n corresponding packed single-precision (32-bit) floating-point element in\n `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2728182,"byte_end":2728191,"line_start":1848,"line_end":1848,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2728192,"byte_end":2728225,"line_start":1849,"line_end":1849,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10670},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2728532,"byte_end":2728549,"line_start":1859,"line_end":1859,"column_start":15,"column_end":32},"name":"_mm256_setzero_pd","qualname":"::coresimd::x86::avx::_mm256_setzero_pd","value":"fn () -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Return vector of type __m256d with all elements set to zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2728409,"byte_end":2728418,"line_start":1856,"line_end":1856,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2728419,"byte_end":2728452,"line_start":1857,"line_end":1857,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10672},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2728754,"byte_end":2728771,"line_start":1867,"line_end":1867,"column_start":15,"column_end":32},"name":"_mm256_setzero_ps","qualname":"::coresimd::x86::avx::_mm256_setzero_ps","value":"fn () -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Return vector of type __m256 with all elements set to zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2728656,"byte_end":2728665,"line_start":1864,"line_end":1864,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2728666,"byte_end":2728699,"line_start":1865,"line_end":1865,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10674},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2728974,"byte_end":2728994,"line_start":1875,"line_end":1875,"column_start":15,"column_end":35},"name":"_mm256_setzero_si256","qualname":"::coresimd::x86::avx::_mm256_setzero_si256","value":"fn () -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Return vector of type __m256i with all elements set to zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2728878,"byte_end":2728887,"line_start":1872,"line_end":1872,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2728888,"byte_end":2728921,"line_start":1873,"line_end":1873,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10676},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2729306,"byte_end":2729319,"line_start":1885,"line_end":1885,"column_start":15,"column_end":28},"name":"_mm256_set_pd","qualname":"::coresimd::x86::avx::_mm256_set_pd","value":"fn (a: f64, b: f64, c: f64, d: f64) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Set packed double-precision (64-bit) floating-point elements in returned\n vector with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2729151,"byte_end":2729160,"line_start":1881,"line_end":1881,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2729161,"byte_end":2729194,"line_start":1882,"line_end":1882,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10678},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2729623,"byte_end":2729636,"line_start":1894,"line_end":1894,"column_start":15,"column_end":28},"name":"_mm256_set_ps","qualname":"::coresimd::x86::avx::_mm256_set_ps","value":"fn (a: f32, b: f32, c: f32, d: f32, e: f32, f: f32, g: f32, h: f32) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Set packed single-precision (32-bit) floating-point elements in returned\n vector with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2729513,"byte_end":2729522,"line_start":1891,"line_end":1891,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2729523,"byte_end":2729556,"line_start":1892,"line_end":1892,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10680},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2729971,"byte_end":2729986,"line_start":1905,"line_end":1905,"column_start":15,"column_end":30},"name":"_mm256_set_epi8","qualname":"::coresimd::x86::avx::_mm256_set_epi8","value":"fn (e00: i8, e01: i8, e02: i8, e03: i8, e04: i8, e05: i8, e06: i8, e07: i8, e08: i8, e09: i8, e10: i8, e11: i8, e12: i8, e13: i8, e14: i8, e15: i8, e16: i8, e17: i8, e18: i8, e19: i8, e20: i8, e21: i8, e22: i8, e23: i8, e24: i8, e25: i8, e26: i8, e27: i8, e28: i8, e29: i8, e30: i8, e31: i8) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Set packed 8-bit integers in returned vector with the supplied values in\n reverse order.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2729861,"byte_end":2729870,"line_start":1902,"line_end":1902,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2729871,"byte_end":2729904,"line_start":1903,"line_end":1903,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10682},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2730755,"byte_end":2730771,"line_start":1924,"line_end":1924,"column_start":15,"column_end":31},"name":"_mm256_set_epi16","qualname":"::coresimd::x86::avx::_mm256_set_epi16","value":"fn (e00: i16, e01: i16, e02: i16, e03: i16, e04: i16, e05: i16, e06: i16, e07: i16, e08: i16, e09: i16, e10: i16, e11: i16, e12: i16, e13: i16, e14: i16, e15: i16) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Set packed 16-bit integers in returned vector with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2730645,"byte_end":2730654,"line_start":1921,"line_end":1921,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2730655,"byte_end":2730688,"line_start":1922,"line_end":1922,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10684},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2731329,"byte_end":2731345,"line_start":1942,"line_end":1942,"column_start":15,"column_end":31},"name":"_mm256_set_epi32","qualname":"::coresimd::x86::avx::_mm256_set_epi32","value":"fn (e0: i32, e1: i32, e2: i32, e3: i32, e4: i32, e5: i32, e6: i32, e7: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Set packed 32-bit integers in returned vector with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2731219,"byte_end":2731228,"line_start":1939,"line_end":1939,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2731229,"byte_end":2731262,"line_start":1940,"line_end":1940,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10686},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2731680,"byte_end":2731697,"line_start":1952,"line_end":1952,"column_start":15,"column_end":32},"name":"_mm256_set_epi64x","qualname":"::coresimd::x86::avx::_mm256_set_epi64x","value":"fn (a: i64, b: i64, c: i64, d: i64) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Set packed 64-bit integers in returned vector with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2731570,"byte_end":2731579,"line_start":1949,"line_end":1949,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2731580,"byte_end":2731613,"line_start":1950,"line_end":1950,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10688},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2732022,"byte_end":2732036,"line_start":1961,"line_end":1961,"column_start":15,"column_end":29},"name":"_mm256_setr_pd","qualname":"::coresimd::x86::avx::_mm256_setr_pd","value":"fn (a: f64, b: f64, c: f64, d: f64) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Set packed double-precision (64-bit) floating-point elements in returned\n vector with the supplied values in reverse order.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2731912,"byte_end":2731921,"line_start":1958,"line_end":1958,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2731922,"byte_end":2731955,"line_start":1959,"line_end":1959,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10690},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2732350,"byte_end":2732364,"line_start":1970,"line_end":1970,"column_start":15,"column_end":29},"name":"_mm256_setr_ps","qualname":"::coresimd::x86::avx::_mm256_setr_ps","value":"fn (a: f32, b: f32, c: f32, d: f32, e: f32, f: f32, g: f32, h: f32) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Set packed single-precision (32-bit) floating-point elements in returned\n vector with the supplied values in reverse order.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2732240,"byte_end":2732249,"line_start":1967,"line_end":1967,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2732250,"byte_end":2732283,"line_start":1968,"line_end":1968,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10692},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2732691,"byte_end":2732707,"line_start":1981,"line_end":1981,"column_start":15,"column_end":31},"name":"_mm256_setr_epi8","qualname":"::coresimd::x86::avx::_mm256_setr_epi8","value":"fn (e00: i8, e01: i8, e02: i8, e03: i8, e04: i8, e05: i8, e06: i8, e07: i8, e08: i8, e09: i8, e10: i8, e11: i8, e12: i8, e13: i8, e14: i8, e15: i8, e16: i8, e17: i8, e18: i8, e19: i8, e20: i8, e21: i8, e22: i8, e23: i8, e24: i8, e25: i8, e26: i8, e27: i8, e28: i8, e29: i8, e30: i8, e31: i8) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Set packed 8-bit integers in returned vector with the supplied values in\n reverse order.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2732581,"byte_end":2732590,"line_start":1978,"line_end":1978,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2732591,"byte_end":2732624,"line_start":1979,"line_end":1979,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10694},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2733507,"byte_end":2733524,"line_start":2001,"line_end":2001,"column_start":15,"column_end":32},"name":"_mm256_setr_epi16","qualname":"::coresimd::x86::avx::_mm256_setr_epi16","value":"fn (e00: i16, e01: i16, e02: i16, e03: i16, e04: i16, e05: i16, e06: i16, e07: i16, e08: i16, e09: i16, e10: i16, e11: i16, e12: i16, e13: i16, e14: i16, e15: i16) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Set packed 16-bit integers in returned vector with the supplied values in\n reverse order.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2733397,"byte_end":2733406,"line_start":1998,"line_end":1998,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2733407,"byte_end":2733440,"line_start":1999,"line_end":1999,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10696},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2734113,"byte_end":2734130,"line_start":2020,"line_end":2020,"column_start":15,"column_end":32},"name":"_mm256_setr_epi32","qualname":"::coresimd::x86::avx::_mm256_setr_epi32","value":"fn (e0: i32, e1: i32, e2: i32, e3: i32, e4: i32, e5: i32, e6: i32, e7: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Set packed 32-bit integers in returned vector with the supplied values in\n reverse order.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2734003,"byte_end":2734012,"line_start":2017,"line_end":2017,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2734013,"byte_end":2734046,"line_start":2018,"line_end":2018,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10698},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2734495,"byte_end":2734513,"line_start":2031,"line_end":2031,"column_start":15,"column_end":33},"name":"_mm256_setr_epi64x","qualname":"::coresimd::x86::avx::_mm256_setr_epi64x","value":"fn (a: i64, b: i64, c: i64, d: i64) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Set packed 64-bit integers in returned vector with the supplied values in\n reverse order.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2734385,"byte_end":2734394,"line_start":2028,"line_end":2028,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2734395,"byte_end":2734428,"line_start":2029,"line_end":2029,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10700},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2734820,"byte_end":2734834,"line_start":2040,"line_end":2040,"column_start":15,"column_end":29},"name":"_mm256_set1_pd","qualname":"::coresimd::x86::avx::_mm256_set1_pd","value":"fn (a: f64) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Broadcast double-precision (64-bit) floating-point value `a` to all\n elements of returned vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2734710,"byte_end":2734719,"line_start":2037,"line_end":2037,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2734720,"byte_end":2734753,"line_start":2038,"line_end":2038,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10702},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2735105,"byte_end":2735119,"line_start":2049,"line_end":2049,"column_start":15,"column_end":29},"name":"_mm256_set1_ps","qualname":"::coresimd::x86::avx::_mm256_set1_ps","value":"fn (a: f32) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Broadcast single-precision (32-bit) floating-point value `a` to all\n elements of returned vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2734995,"byte_end":2735004,"line_start":2046,"line_end":2046,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2735005,"byte_end":2735038,"line_start":2047,"line_end":2047,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10704},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2735502,"byte_end":2735518,"line_start":2060,"line_end":2060,"column_start":15,"column_end":31},"name":"_mm256_set1_epi8","qualname":"::coresimd::x86::avx::_mm256_set1_epi8","value":"fn (a: i8) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Broadcast 8-bit integer `a` to all elements of returned vector.\n This intrinsic may generate the `vpbroadcastb`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2735306,"byte_end":2735315,"line_start":2055,"line_end":2055,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2735316,"byte_end":2735349,"line_start":2056,"line_end":2056,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10706},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2736060,"byte_end":2736077,"line_start":2077,"line_end":2077,"column_start":15,"column_end":32},"name":"_mm256_set1_epi16","qualname":"::coresimd::x86::avx::_mm256_set1_epi16","value":"fn (a: i16) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Broadcast 16-bit integer `a` to all all elements of returned vector.\n This intrinsic may generate the `vpbroadcastw`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2735862,"byte_end":2735871,"line_start":2072,"line_end":2072,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2735872,"byte_end":2735905,"line_start":2073,"line_end":2073,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10708},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2736403,"byte_end":2736420,"line_start":2086,"line_end":2086,"column_start":15,"column_end":32},"name":"_mm256_set1_epi32","qualname":"::coresimd::x86::avx::_mm256_set1_epi32","value":"fn (a: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Broadcast 32-bit integer `a` to all elements of returned vector.\n This intrinsic may generate the `vpbroadcastd`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2736293,"byte_end":2736302,"line_start":2083,"line_end":2083,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2736303,"byte_end":2736336,"line_start":2084,"line_end":2084,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10710},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2736811,"byte_end":2736829,"line_start":2097,"line_end":2097,"column_start":15,"column_end":33},"name":"_mm256_set1_epi64x","qualname":"::coresimd::x86::avx::_mm256_set1_epi64x","value":"fn (a: i64) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Broadcast 64-bit integer `a` to all elements of returned vector.\n This intrinsic may generate the `vpbroadcastq`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2736612,"byte_end":2736621,"line_start":2092,"line_end":2092,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2736622,"byte_end":2736655,"line_start":2093,"line_end":2093,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10712},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2737111,"byte_end":2737127,"line_start":2106,"line_end":2106,"column_start":15,"column_end":31},"name":"_mm256_castpd_ps","qualname":"::coresimd::x86::avx::_mm256_castpd_ps","value":"fn (a: __m256d) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Cast vector of type __m256d to type __m256.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2736937,"byte_end":2736946,"line_start":2102,"line_end":2102,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2736947,"byte_end":2736980,"line_start":2103,"line_end":2103,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10714},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2737399,"byte_end":2737415,"line_start":2115,"line_end":2115,"column_start":15,"column_end":31},"name":"_mm256_castps_pd","qualname":"::coresimd::x86::avx::_mm256_castps_pd","value":"fn (a: __m256) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Cast vector of type __m256 to type __m256d.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2737225,"byte_end":2737234,"line_start":2111,"line_end":2111,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2737235,"byte_end":2737268,"line_start":2112,"line_end":2112,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10716},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2737688,"byte_end":2737707,"line_start":2124,"line_end":2124,"column_start":15,"column_end":34},"name":"_mm256_castps_si256","qualname":"::coresimd::x86::avx::_mm256_castps_si256","value":"fn (a: __m256) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Casts vector of type __m256 to type __m256i.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2737514,"byte_end":2737523,"line_start":2120,"line_end":2120,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2737524,"byte_end":2737557,"line_start":2121,"line_end":2121,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10718},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2737980,"byte_end":2737999,"line_start":2133,"line_end":2133,"column_start":15,"column_end":34},"name":"_mm256_castsi256_ps","qualname":"::coresimd::x86::avx::_mm256_castsi256_ps","value":"fn (a: __m256i) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Casts vector of type __m256i to type __m256.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2737806,"byte_end":2737815,"line_start":2129,"line_end":2129,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2737816,"byte_end":2737849,"line_start":2130,"line_end":2130,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10720},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2738273,"byte_end":2738292,"line_start":2142,"line_end":2142,"column_start":15,"column_end":34},"name":"_mm256_castpd_si256","qualname":"::coresimd::x86::avx::_mm256_castpd_si256","value":"fn (a: __m256d) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Casts vector of type __m256d to type __m256i.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2738099,"byte_end":2738108,"line_start":2138,"line_end":2138,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2738109,"byte_end":2738142,"line_start":2139,"line_end":2139,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10722},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2738567,"byte_end":2738586,"line_start":2151,"line_end":2151,"column_start":15,"column_end":34},"name":"_mm256_castsi256_pd","qualname":"::coresimd::x86::avx::_mm256_castsi256_pd","value":"fn (a: __m256i) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Casts vector of type __m256i to type __m256d.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2738393,"byte_end":2738402,"line_start":2147,"line_end":2147,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2738403,"byte_end":2738436,"line_start":2148,"line_end":2148,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10724},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2738859,"byte_end":2738881,"line_start":2160,"line_end":2160,"column_start":15,"column_end":37},"name":"_mm256_castps256_ps128","qualname":"::coresimd::x86::avx::_mm256_castps256_ps128","value":"fn (a: __m256) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Casts vector of type __m256 to type __m128.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2738685,"byte_end":2738694,"line_start":2156,"line_end":2156,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2738695,"byte_end":2738728,"line_start":2157,"line_end":2157,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10726},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2739170,"byte_end":2739192,"line_start":2169,"line_end":2169,"column_start":15,"column_end":37},"name":"_mm256_castpd256_pd128","qualname":"::coresimd::x86::avx::_mm256_castpd256_pd128","value":"fn (a: __m256d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Casts vector of type __m256d to type __m128d.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2738996,"byte_end":2739005,"line_start":2165,"line_end":2165,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2739006,"byte_end":2739039,"line_start":2166,"line_end":2166,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10728},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2739477,"byte_end":2739499,"line_start":2178,"line_end":2178,"column_start":15,"column_end":37},"name":"_mm256_castsi256_si128","qualname":"::coresimd::x86::avx::_mm256_castsi256_si128","value":"fn (a: __m256i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Casts vector of type __m256i to type __m128i.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2739303,"byte_end":2739312,"line_start":2174,"line_end":2174,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2739313,"byte_end":2739346,"line_start":2175,"line_end":2175,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10730},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2739902,"byte_end":2739924,"line_start":2190,"line_end":2190,"column_start":15,"column_end":37},"name":"_mm256_castps128_ps256","qualname":"::coresimd::x86::avx::_mm256_castps128_ps256","value":"fn (a: __m128) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Casts vector of type __m128 to type __m256;\n the upper 128 bits of the result are undefined.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2739728,"byte_end":2739737,"line_start":2186,"line_end":2186,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2739738,"byte_end":2739771,"line_start":2187,"line_end":2187,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10732},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2740340,"byte_end":2740362,"line_start":2201,"line_end":2201,"column_start":15,"column_end":37},"name":"_mm256_castpd128_pd256","qualname":"::coresimd::x86::avx::_mm256_castpd128_pd256","value":"fn (a: __m128d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Casts vector of type __m128d to type __m256d;\n the upper 128 bits of the result are undefined.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2740166,"byte_end":2740175,"line_start":2197,"line_end":2197,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2740176,"byte_end":2740209,"line_start":2198,"line_end":2198,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10734},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2740754,"byte_end":2740776,"line_start":2212,"line_end":2212,"column_start":15,"column_end":37},"name":"_mm256_castsi128_si256","qualname":"::coresimd::x86::avx::_mm256_castsi128_si256","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Casts vector of type __m128i to type __m256i;\n the upper 128 bits of the result are undefined.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2740580,"byte_end":2740589,"line_start":2208,"line_end":2208,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2740590,"byte_end":2740623,"line_start":2209,"line_end":2209,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10736},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2741356,"byte_end":2741378,"line_start":2226,"line_end":2226,"column_start":15,"column_end":37},"name":"_mm256_zextps128_ps256","qualname":"::coresimd::x86::avx::_mm256_zextps128_ps256","value":"fn (a: __m128) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 256-bit floating-point vector of [8 x float] from a\n 128-bit floating-point vector of [4 x float]. The lower 128 bits contain\n the value of the source vector. The upper 128 bits are set to zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2741178,"byte_end":2741187,"line_start":2222,"line_end":2222,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx,sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2741188,"byte_end":2741225,"line_start":2223,"line_end":2223,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":10738},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2741823,"byte_end":2741845,"line_start":2237,"line_end":2237,"column_start":15,"column_end":37},"name":"_mm256_zextsi128_si256","qualname":"::coresimd::x86::avx::_mm256_zextsi128_si256","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 256-bit integer vector from a 128-bit integer vector.\n The lower 128 bits contain the value of the source vector. The upper\n 128 bits are set to zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2741644,"byte_end":2741653,"line_start":2233,"line_end":2233,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx,sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2741654,"byte_end":2741692,"line_start":2234,"line_end":2234,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":10740},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2742412,"byte_end":2742434,"line_start":2251,"line_end":2251,"column_start":15,"column_end":37},"name":"_mm256_zextpd128_pd256","qualname":"::coresimd::x86::avx::_mm256_zextpd128_pd256","value":"fn (a: __m128d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 256-bit floating-point vector of [4 x double] from a\n 128-bit floating-point vector of [2 x double]. The lower 128 bits\n contain the value of the source vector. The upper 128 bits are set\n to zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2742233,"byte_end":2742242,"line_start":2247,"line_end":2247,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx,sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2742243,"byte_end":2742281,"line_start":2248,"line_end":2248,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":10742},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2742686,"byte_end":2742705,"line_start":2259,"line_end":2259,"column_start":15,"column_end":34},"name":"_mm256_undefined_ps","qualname":"::coresimd::x86::avx::_mm256_undefined_ps","value":"fn () -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Return vector of type `__m256` with undefined elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2742576,"byte_end":2742585,"line_start":2256,"line_end":2256,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2742586,"byte_end":2742619,"line_start":2257,"line_end":2257,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10744},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2742935,"byte_end":2742954,"line_start":2267,"line_end":2267,"column_start":15,"column_end":34},"name":"_mm256_undefined_pd","qualname":"::coresimd::x86::avx::_mm256_undefined_pd","value":"fn () -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Return vector of type `__m256d` with undefined elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2742825,"byte_end":2742834,"line_start":2264,"line_end":2264,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2742835,"byte_end":2742868,"line_start":2265,"line_end":2265,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10746},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2743183,"byte_end":2743205,"line_start":2275,"line_end":2275,"column_start":15,"column_end":37},"name":"_mm256_undefined_si256","qualname":"::coresimd::x86::avx::_mm256_undefined_si256","value":"fn () -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Return vector of type __m256i with undefined elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2743073,"byte_end":2743082,"line_start":2272,"line_end":2272,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2743083,"byte_end":2743116,"line_start":2273,"line_end":2273,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10748},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2743434,"byte_end":2743449,"line_start":2283,"line_end":2283,"column_start":15,"column_end":30},"name":"_mm256_set_m128","qualname":"::coresimd::x86::avx::_mm256_set_m128","value":"fn (hi: __m128, lo: __m128) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Set packed __m256 returned vector with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2743331,"byte_end":2743340,"line_start":2280,"line_end":2280,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2743341,"byte_end":2743374,"line_start":2281,"line_end":2281,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10750},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2743709,"byte_end":2743725,"line_start":2291,"line_end":2291,"column_start":15,"column_end":31},"name":"_mm256_set_m128d","qualname":"::coresimd::x86::avx::_mm256_set_m128d","value":"fn (hi: __m128d, lo: __m128d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Set packed __m256d returned vector with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2743606,"byte_end":2743615,"line_start":2288,"line_end":2288,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2743616,"byte_end":2743649,"line_start":2289,"line_end":2289,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10752},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2744062,"byte_end":2744078,"line_start":2301,"line_end":2301,"column_start":15,"column_end":31},"name":"_mm256_set_m128i","qualname":"::coresimd::x86::avx::_mm256_set_m128i","value":"fn (hi: __m128i, lo: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Set packed __m256i returned vector with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2743959,"byte_end":2743968,"line_start":2298,"line_end":2298,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2743969,"byte_end":2744002,"line_start":2299,"line_end":2299,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10754},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2744414,"byte_end":2744430,"line_start":2311,"line_end":2311,"column_start":15,"column_end":31},"name":"_mm256_setr_m128","qualname":"::coresimd::x86::avx::_mm256_setr_m128","value":"fn (lo: __m128, hi: __m128) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Set packed __m256 returned vector with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2744311,"byte_end":2744320,"line_start":2308,"line_end":2308,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2744321,"byte_end":2744354,"line_start":2309,"line_end":2309,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10756},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2744666,"byte_end":2744683,"line_start":2319,"line_end":2319,"column_start":15,"column_end":32},"name":"_mm256_setr_m128d","qualname":"::coresimd::x86::avx::_mm256_setr_m128d","value":"fn (lo: __m128d, hi: __m128d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Set packed __m256d returned vector with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2744563,"byte_end":2744572,"line_start":2316,"line_end":2316,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2744573,"byte_end":2744606,"line_start":2317,"line_end":2317,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10758},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2744923,"byte_end":2744940,"line_start":2327,"line_end":2327,"column_start":15,"column_end":32},"name":"_mm256_setr_m128i","qualname":"::coresimd::x86::avx::_mm256_setr_m128i","value":"fn (lo: __m128i, hi: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Set packed __m256i returned vector with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2744820,"byte_end":2744829,"line_start":2324,"line_end":2324,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2744830,"byte_end":2744863,"line_start":2325,"line_end":2325,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10760},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2745367,"byte_end":2745385,"line_start":2338,"line_end":2338,"column_start":15,"column_end":33},"name":"_mm256_loadu2_m128","qualname":"::coresimd::x86::avx::_mm256_loadu2_m128","value":"fn (hiaddr: *const f32, loaddr: *const f32) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Load two 128-bit values (composed of 4 packed single-precision (32-bit)\n floating-point elements) from memory, and combine them into a 256-bit\n value.\n `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2745253,"byte_end":2745262,"line_start":2335,"line_end":2335,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx,sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2745263,"byte_end":2745300,"line_start":2336,"line_end":2336,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":10762},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2745914,"byte_end":2745933,"line_start":2352,"line_end":2352,"column_start":15,"column_end":34},"name":"_mm256_loadu2_m128d","qualname":"::coresimd::x86::avx::_mm256_loadu2_m128d","value":"fn (hiaddr: *const f64, loaddr: *const f64) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Load two 128-bit values (composed of 2 packed double-precision (64-bit)\n floating-point elements) from memory, and combine them into a 256-bit\n value.\n `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2745799,"byte_end":2745808,"line_start":2349,"line_end":2349,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx,sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2745809,"byte_end":2745847,"line_start":2350,"line_end":2350,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":10764},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2746413,"byte_end":2746432,"line_start":2365,"line_end":2365,"column_start":15,"column_end":34},"name":"_mm256_loadu2_m128i","qualname":"::coresimd::x86::avx::_mm256_loadu2_m128i","value":"fn (hiaddr: *const __m128i, loaddr: *const __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Load two 128-bit values (composed of integer data) from memory, and combine\n them into a 256-bit value.\n `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2746298,"byte_end":2746307,"line_start":2362,"line_end":2362,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx,sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2746308,"byte_end":2746346,"line_start":2363,"line_end":2363,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":10766},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2746999,"byte_end":2747018,"line_start":2379,"line_end":2379,"column_start":15,"column_end":34},"name":"_mm256_storeu2_m128","qualname":"::coresimd::x86::avx::_mm256_storeu2_m128","value":"fn (hiaddr: *mut f32, loaddr: *mut f32, a: __m256) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store the high and low 128-bit halves (each composed of 4 packed\n single-precision (32-bit) floating-point elements) from `a` into memory two\n different 128-bit locations.\n `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2746885,"byte_end":2746894,"line_start":2376,"line_end":2376,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx,sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2746895,"byte_end":2746932,"line_start":2377,"line_end":2377,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":10768},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2747598,"byte_end":2747618,"line_start":2395,"line_end":2395,"column_start":15,"column_end":35},"name":"_mm256_storeu2_m128d","qualname":"::coresimd::x86::avx::_mm256_storeu2_m128d","value":"fn (hiaddr: *mut f64, loaddr: *mut f64, a: __m256d) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store the high and low 128-bit halves (each composed of 2 packed\n double-precision (64-bit) floating-point elements) from `a` into memory two\n different 128-bit locations.\n `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2747483,"byte_end":2747492,"line_start":2392,"line_end":2392,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx,sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2747493,"byte_end":2747531,"line_start":2393,"line_end":2393,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":10770},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2748149,"byte_end":2748169,"line_start":2410,"line_end":2410,"column_start":15,"column_end":35},"name":"_mm256_storeu2_m128i","qualname":"::coresimd::x86::avx::_mm256_storeu2_m128i","value":"fn (hiaddr: *mut __m128i, loaddr: *mut __m128i, a: __m256i) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store the high and low 128-bit halves (each composed of integer data) from\n `a` into memory two different 128-bit locations.\n `hiaddr` and `loaddr` do not need to be aligned on any particular boundary.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2748034,"byte_end":2748043,"line_start":2407,"line_end":2407,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx,sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2748044,"byte_end":2748082,"line_start":2408,"line_end":2408,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":10772},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2748561,"byte_end":2748577,"line_start":2423,"line_end":2423,"column_start":15,"column_end":31},"name":"_mm256_cvtss_f32","qualname":"::coresimd::x86::avx::_mm256_cvtss_f32","value":"fn (a: __m256) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the first element of the input vector of [8 x float].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2748456,"byte_end":2748465,"line_start":2420,"line_end":2420,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,46,114,115],"byte_start":2748466,"byte_end":2748499,"line_start":2421,"line_end":2421,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":10788},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2813438,"byte_end":2813454,"line_start":33,"line_end":33,"column_start":15,"column_end":31},"name":"_mm256_abs_epi32","qualname":"::coresimd::x86::avx2::_mm256_abs_epi32","value":"fn (a: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute values of packed 32-bit integers in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2813339,"byte_end":2813348,"line_start":30,"line_end":30,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2813349,"byte_end":2813383,"line_start":31,"line_end":31,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10790},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2813689,"byte_end":2813705,"line_start":41,"line_end":41,"column_start":15,"column_end":31},"name":"_mm256_abs_epi16","qualname":"::coresimd::x86::avx2::_mm256_abs_epi16","value":"fn (a: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute values of packed 16-bit integers in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2813590,"byte_end":2813599,"line_start":38,"line_end":38,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2813600,"byte_end":2813634,"line_start":39,"line_end":39,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10792},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2813940,"byte_end":2813955,"line_start":49,"line_end":49,"column_start":15,"column_end":30},"name":"_mm256_abs_epi8","qualname":"::coresimd::x86::avx2::_mm256_abs_epi8","value":"fn (a: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute values of packed 8-bit integers in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2813841,"byte_end":2813850,"line_start":46,"line_end":46,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2813851,"byte_end":2813885,"line_start":47,"line_end":47,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10794},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2814170,"byte_end":2814186,"line_start":57,"line_end":57,"column_start":15,"column_end":31},"name":"_mm256_add_epi64","qualname":"::coresimd::x86::avx2::_mm256_add_epi64","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Add packed 64-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2814071,"byte_end":2814080,"line_start":54,"line_end":54,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2814081,"byte_end":2814115,"line_start":55,"line_end":55,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10796},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2814430,"byte_end":2814446,"line_start":65,"line_end":65,"column_start":15,"column_end":31},"name":"_mm256_add_epi32","qualname":"::coresimd::x86::avx2::_mm256_add_epi32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Add packed 32-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2814331,"byte_end":2814340,"line_start":62,"line_end":62,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2814341,"byte_end":2814375,"line_start":63,"line_end":63,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10798},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2814690,"byte_end":2814706,"line_start":73,"line_end":73,"column_start":15,"column_end":31},"name":"_mm256_add_epi16","qualname":"::coresimd::x86::avx2::_mm256_add_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Add packed 16-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2814591,"byte_end":2814600,"line_start":70,"line_end":70,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2814601,"byte_end":2814635,"line_start":71,"line_end":71,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10800},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2814951,"byte_end":2814966,"line_start":81,"line_end":81,"column_start":15,"column_end":30},"name":"_mm256_add_epi8","qualname":"::coresimd::x86::avx2::_mm256_add_epi8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Add packed 8-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2814852,"byte_end":2814861,"line_start":78,"line_end":78,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2814862,"byte_end":2814896,"line_start":79,"line_end":79,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10802},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2815227,"byte_end":2815243,"line_start":89,"line_end":89,"column_start":15,"column_end":31},"name":"_mm256_adds_epi8","qualname":"::coresimd::x86::avx2::_mm256_adds_epi8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Add packed 8-bit integers in `a` and `b` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2815127,"byte_end":2815136,"line_start":86,"line_end":86,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2815137,"byte_end":2815171,"line_start":87,"line_end":87,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10804},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2815503,"byte_end":2815520,"line_start":97,"line_end":97,"column_start":15,"column_end":32},"name":"_mm256_adds_epi16","qualname":"::coresimd::x86::avx2::_mm256_adds_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Add packed 16-bit integers in `a` and `b` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2815403,"byte_end":2815412,"line_start":94,"line_end":94,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2815413,"byte_end":2815447,"line_start":95,"line_end":95,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10806},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2815791,"byte_end":2815807,"line_start":105,"line_end":105,"column_start":15,"column_end":31},"name":"_mm256_adds_epu8","qualname":"::coresimd::x86::avx2::_mm256_adds_epu8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Add packed unsigned 8-bit integers in `a` and `b` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2815690,"byte_end":2815699,"line_start":102,"line_end":102,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2815700,"byte_end":2815734,"line_start":103,"line_end":103,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10808},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2816078,"byte_end":2816095,"line_start":113,"line_end":113,"column_start":15,"column_end":32},"name":"_mm256_adds_epu16","qualname":"::coresimd::x86::avx2::_mm256_adds_epu16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Add packed unsigned 16-bit integers in `a` and `b` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2815977,"byte_end":2815986,"line_start":110,"line_end":110,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2815987,"byte_end":2816021,"line_start":111,"line_end":111,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10810},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2816492,"byte_end":2816510,"line_start":123,"line_end":123,"column_start":15,"column_end":33},"name":"_mm256_alignr_epi8","qualname":"::coresimd::x86::avx2::_mm256_alignr_epi8","value":"fn (a: __m256i, b: __m256i, n: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Concatenate pairs of 16-byte blocks in `a` and `b` into a 32-byte temporary\n result, shift the result right by `n` bytes, and return the low 16 bytes.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2816352,"byte_end":2816361,"line_start":119,"line_end":119,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2816362,"byte_end":2816396,"line_start":120,"line_end":120,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2816446,"byte_end":2816477,"line_start":122,"line_end":122,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10812},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2821560,"byte_end":2821576,"line_start":290,"line_end":290,"column_start":15,"column_end":31},"name":"_mm256_and_si256","qualname":"::coresimd::x86::avx2::_mm256_and_si256","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise AND of 256 bits (representing integer data)\n in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2821461,"byte_end":2821470,"line_start":287,"line_end":287,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2821471,"byte_end":2821505,"line_start":288,"line_end":288,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10814},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2821876,"byte_end":2821895,"line_start":299,"line_end":299,"column_start":15,"column_end":34},"name":"_mm256_andnot_si256","qualname":"::coresimd::x86::avx2::_mm256_andnot_si256","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise NOT of 256 bits (representing integer data)\n in `a` and then AND with `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2821776,"byte_end":2821785,"line_start":296,"line_end":296,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2821786,"byte_end":2821820,"line_start":297,"line_end":297,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10816},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2822247,"byte_end":2822263,"line_start":311,"line_end":311,"column_start":15,"column_end":31},"name":"_mm256_avg_epu16","qualname":"::coresimd::x86::avx2::_mm256_avg_epu16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Average packed unsigned 16-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2822148,"byte_end":2822157,"line_start":308,"line_end":308,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2822158,"byte_end":2822192,"line_start":309,"line_end":309,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10818},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2822518,"byte_end":2822533,"line_start":319,"line_end":319,"column_start":15,"column_end":30},"name":"_mm256_avg_epu8","qualname":"::coresimd::x86::avx2::_mm256_avg_epu8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Average packed unsigned 8-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2822419,"byte_end":2822428,"line_start":316,"line_end":316,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2822429,"byte_end":2822463,"line_start":317,"line_end":317,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10820},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2822848,"byte_end":2822863,"line_start":328,"line_end":328,"column_start":15,"column_end":30},"name":"_mm_blend_epi32","qualname":"::coresimd::x86::avx2::_mm_blend_epi32","value":"fn (a: __m128i, b: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Blend packed 32-bit integers from `a` and `b` using control mask `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2822705,"byte_end":2822714,"line_start":324,"line_end":324,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2822715,"byte_end":2822749,"line_start":325,"line_end":325,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2822802,"byte_end":2822833,"line_start":327,"line_end":327,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10826},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2823867,"byte_end":2823885,"line_start":361,"line_end":361,"column_start":15,"column_end":33},"name":"_mm256_blend_epi32","qualname":"::coresimd::x86::avx2::_mm256_blend_epi32","value":"fn (a: __m256i, b: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Blend packed 32-bit integers from `a` and `b` using control mask `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2823724,"byte_end":2823733,"line_start":357,"line_end":357,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2823734,"byte_end":2823768,"line_start":358,"line_end":358,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2823821,"byte_end":2823852,"line_start":360,"line_end":360,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10836},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2825733,"byte_end":2825751,"line_start":416,"line_end":416,"column_start":15,"column_end":33},"name":"_mm256_blend_epi16","qualname":"::coresimd::x86::avx2::_mm256_blend_epi16","value":"fn (a: __m256i, b: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Blend packed 16-bit integers from `a` and `b` using control mask `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2825590,"byte_end":2825599,"line_start":412,"line_end":412,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2825600,"byte_end":2825634,"line_start":413,"line_end":413,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2825687,"byte_end":2825718,"line_start":415,"line_end":415,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10846},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2828173,"byte_end":2828191,"line_start":472,"line_end":472,"column_start":15,"column_end":33},"name":"_mm256_blendv_epi8","qualname":"::coresimd::x86::avx2::_mm256_blendv_epi8","value":"fn (a: __m256i, b: __m256i, mask: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Blend packed 8-bit integers from `a` and `b` using `mask`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2828071,"byte_end":2828080,"line_start":469,"line_end":469,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2828081,"byte_end":2828115,"line_start":470,"line_end":470,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10848},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2828535,"byte_end":2828554,"line_start":483,"line_end":483,"column_start":15,"column_end":34},"name":"_mm_broadcastb_epi8","qualname":"::coresimd::x86::avx2::_mm_broadcastb_epi8","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Broadcast the low packed 8-bit integer from `a` to all elements of\n the 128-bit returned value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2828430,"byte_end":2828439,"line_start":480,"line_end":480,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2828440,"byte_end":2828474,"line_start":481,"line_end":481,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10850},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2828937,"byte_end":2828959,"line_start":494,"line_end":494,"column_start":15,"column_end":37},"name":"_mm256_broadcastb_epi8","qualname":"::coresimd::x86::avx2::_mm256_broadcastb_epi8","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Broadcast the low packed 8-bit integer from `a` to all elements of\n the 256-bit returned value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2828832,"byte_end":2828841,"line_start":491,"line_end":491,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2828842,"byte_end":2828876,"line_start":492,"line_end":492,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10852},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2829442,"byte_end":2829462,"line_start":507,"line_end":507,"column_start":15,"column_end":35},"name":"_mm_broadcastd_epi32","qualname":"::coresimd::x86::avx2::_mm_broadcastd_epi32","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Broadcast the low packed 32-bit integer from `a` to all elements of\n the 128-bit returned value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2829337,"byte_end":2829346,"line_start":504,"line_end":504,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2829347,"byte_end":2829381,"line_start":505,"line_end":505,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10854},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2829943,"byte_end":2829966,"line_start":520,"line_end":520,"column_start":15,"column_end":38},"name":"_mm256_broadcastd_epi32","qualname":"::coresimd::x86::avx2::_mm256_broadcastd_epi32","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Broadcast the low packed 32-bit integer from `a` to all elements of\n the 256-bit returned value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2829838,"byte_end":2829847,"line_start":517,"line_end":517,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2829848,"byte_end":2829882,"line_start":518,"line_end":518,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10856},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2830348,"byte_end":2830368,"line_start":531,"line_end":531,"column_start":15,"column_end":35},"name":"_mm_broadcastq_epi64","qualname":"::coresimd::x86::avx2::_mm_broadcastq_epi64","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Broadcast the low packed 64-bit integer from `a` to all elements of\n the 128-bit returned value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2830243,"byte_end":2830252,"line_start":528,"line_end":528,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2830253,"byte_end":2830287,"line_start":529,"line_end":529,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10858},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2830849,"byte_end":2830872,"line_start":544,"line_end":544,"column_start":15,"column_end":38},"name":"_mm256_broadcastq_epi64","qualname":"::coresimd::x86::avx2::_mm256_broadcastq_epi64","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Broadcast the low packed 64-bit integer from `a` to all elements of\n the 256-bit returned value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2830744,"byte_end":2830753,"line_start":541,"line_end":541,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2830754,"byte_end":2830788,"line_start":542,"line_end":542,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10860},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2831277,"byte_end":2831295,"line_start":555,"line_end":555,"column_start":15,"column_end":33},"name":"_mm_broadcastsd_pd","qualname":"::coresimd::x86::avx2::_mm_broadcastsd_pd","value":"fn (a: __m128d) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Broadcast the low double-precision (64-bit) floating-point element\n from `a` to all elements of the 128-bit returned value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2831176,"byte_end":2831185,"line_start":552,"line_end":552,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2831186,"byte_end":2831220,"line_start":553,"line_end":553,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10862},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2831611,"byte_end":2831632,"line_start":564,"line_end":564,"column_start":15,"column_end":36},"name":"_mm256_broadcastsd_pd","qualname":"::coresimd::x86::avx2::_mm256_broadcastsd_pd","value":"fn (a: __m128d) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Broadcast the low double-precision (64-bit) floating-point element\n from `a` to all elements of the 256-bit returned value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2831506,"byte_end":2831515,"line_start":561,"line_end":561,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2831516,"byte_end":2831550,"line_start":562,"line_end":562,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10864},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2831956,"byte_end":2831983,"line_start":574,"line_end":574,"column_start":15,"column_end":42},"name":"_mm256_broadcastsi128_si256","qualname":"::coresimd::x86::avx2::_mm256_broadcastsi128_si256","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Broadcast 128 bits of integer data from a to all 128-bit lanes in\n the 256-bit returned value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2831897,"byte_end":2831906,"line_start":572,"line_end":572,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2831907,"byte_end":2831941,"line_start":573,"line_end":573,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10866},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2832394,"byte_end":2832412,"line_start":585,"line_end":585,"column_start":15,"column_end":33},"name":"_mm_broadcastss_ps","qualname":"::coresimd::x86::avx2::_mm_broadcastss_ps","value":"fn (a: __m128) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Broadcast the low single-precision (32-bit) floating-point element\n from `a` to all elements of the 128-bit returned value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2832289,"byte_end":2832298,"line_start":582,"line_end":582,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2832299,"byte_end":2832333,"line_start":583,"line_end":583,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10868},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2832726,"byte_end":2832747,"line_start":594,"line_end":594,"column_start":15,"column_end":36},"name":"_mm256_broadcastss_ps","qualname":"::coresimd::x86::avx2::_mm256_broadcastss_ps","value":"fn (a: __m128) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Broadcast the low single-precision (32-bit) floating-point element\n from `a` to all elements of the 256-bit returned value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2832621,"byte_end":2832630,"line_start":591,"line_end":591,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2832631,"byte_end":2832665,"line_start":592,"line_end":592,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10870},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2833031,"byte_end":2833051,"line_start":603,"line_end":603,"column_start":15,"column_end":35},"name":"_mm_broadcastw_epi16","qualname":"::coresimd::x86::avx2::_mm_broadcastw_epi16","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Broadcast the low packed 16-bit integer from a to all elements of\n the 128-bit returned value\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2832926,"byte_end":2832935,"line_start":600,"line_end":600,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2832936,"byte_end":2832970,"line_start":601,"line_end":601,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10872},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2833430,"byte_end":2833453,"line_start":614,"line_end":614,"column_start":15,"column_end":38},"name":"_mm256_broadcastw_epi16","qualname":"::coresimd::x86::avx2::_mm256_broadcastw_epi16","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Broadcast the low packed 16-bit integer from a to all elements of\n the 256-bit returned value\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2833325,"byte_end":2833334,"line_start":611,"line_end":611,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2833335,"byte_end":2833369,"line_start":612,"line_end":612,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10874},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2833794,"byte_end":2833812,"line_start":624,"line_end":624,"column_start":15,"column_end":33},"name":"_mm256_cmpeq_epi64","qualname":"::coresimd::x86::avx2::_mm256_cmpeq_epi64","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 64-bit integers in `a` and `b` for equality.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2833693,"byte_end":2833702,"line_start":621,"line_end":621,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2833703,"byte_end":2833737,"line_start":622,"line_end":622,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10876},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2834086,"byte_end":2834104,"line_start":632,"line_end":632,"column_start":15,"column_end":33},"name":"_mm256_cmpeq_epi32","qualname":"::coresimd::x86::avx2::_mm256_cmpeq_epi32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 32-bit integers in `a` and `b` for equality.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2833985,"byte_end":2833994,"line_start":629,"line_end":629,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2833995,"byte_end":2834029,"line_start":630,"line_end":630,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10878},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2834378,"byte_end":2834396,"line_start":640,"line_end":640,"column_start":15,"column_end":33},"name":"_mm256_cmpeq_epi16","qualname":"::coresimd::x86::avx2::_mm256_cmpeq_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 16-bit integers in `a` and `b` for equality.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2834277,"byte_end":2834286,"line_start":637,"line_end":637,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2834287,"byte_end":2834321,"line_start":638,"line_end":638,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10880},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2834672,"byte_end":2834689,"line_start":648,"line_end":648,"column_start":15,"column_end":32},"name":"_mm256_cmpeq_epi8","qualname":"::coresimd::x86::avx2::_mm256_cmpeq_epi8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 8-bit integers in `a` and `b` for equality.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2834571,"byte_end":2834580,"line_start":645,"line_end":645,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2834581,"byte_end":2834615,"line_start":646,"line_end":646,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10882},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2834967,"byte_end":2834985,"line_start":656,"line_end":656,"column_start":15,"column_end":33},"name":"_mm256_cmpgt_epi64","qualname":"::coresimd::x86::avx2::_mm256_cmpgt_epi64","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 64-bit integers in `a` and `b` for greater-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2834866,"byte_end":2834875,"line_start":653,"line_end":653,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2834876,"byte_end":2834910,"line_start":654,"line_end":654,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10884},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2835263,"byte_end":2835281,"line_start":664,"line_end":664,"column_start":15,"column_end":33},"name":"_mm256_cmpgt_epi32","qualname":"::coresimd::x86::avx2::_mm256_cmpgt_epi32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 32-bit integers in `a` and `b` for greater-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2835162,"byte_end":2835171,"line_start":661,"line_end":661,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2835172,"byte_end":2835206,"line_start":662,"line_end":662,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10886},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2835559,"byte_end":2835577,"line_start":672,"line_end":672,"column_start":15,"column_end":33},"name":"_mm256_cmpgt_epi16","qualname":"::coresimd::x86::avx2::_mm256_cmpgt_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 16-bit integers in `a` and `b` for greater-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2835458,"byte_end":2835467,"line_start":669,"line_end":669,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2835468,"byte_end":2835502,"line_start":670,"line_end":670,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10888},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2835857,"byte_end":2835874,"line_start":680,"line_end":680,"column_start":15,"column_end":32},"name":"_mm256_cmpgt_epi8","qualname":"::coresimd::x86::avx2::_mm256_cmpgt_epi8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 8-bit integers in `a` and `b` for greater-than.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2835756,"byte_end":2835765,"line_start":677,"line_end":677,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2835766,"byte_end":2835800,"line_start":678,"line_end":678,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10890},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2836137,"byte_end":2836158,"line_start":688,"line_end":688,"column_start":15,"column_end":36},"name":"_mm256_cvtepi16_epi32","qualname":"::coresimd::x86::avx2::_mm256_cvtepi16_epi32","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Sign-extend 16-bit integers to 32-bit integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2836035,"byte_end":2836044,"line_start":685,"line_end":685,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2836045,"byte_end":2836079,"line_start":686,"line_end":686,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10892},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2836397,"byte_end":2836418,"line_start":696,"line_end":696,"column_start":15,"column_end":36},"name":"_mm256_cvtepi16_epi64","qualname":"::coresimd::x86::avx2::_mm256_cvtepi16_epi64","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Sign-extend 16-bit integers to 64-bit integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2836295,"byte_end":2836304,"line_start":693,"line_end":693,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2836305,"byte_end":2836339,"line_start":694,"line_end":694,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10894},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2836730,"byte_end":2836751,"line_start":706,"line_end":706,"column_start":15,"column_end":36},"name":"_mm256_cvtepi32_epi64","qualname":"::coresimd::x86::avx2::_mm256_cvtepi32_epi64","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Sign-extend 32-bit integers to 64-bit integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2836628,"byte_end":2836637,"line_start":703,"line_end":703,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2836638,"byte_end":2836672,"line_start":704,"line_end":704,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10896},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2836989,"byte_end":2837009,"line_start":714,"line_end":714,"column_start":15,"column_end":35},"name":"_mm256_cvtepi8_epi16","qualname":"::coresimd::x86::avx2::_mm256_cvtepi8_epi16","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Sign-extend 8-bit integers to 16-bit integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2836887,"byte_end":2836896,"line_start":711,"line_end":711,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2836897,"byte_end":2836931,"line_start":712,"line_end":712,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10898},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2837248,"byte_end":2837268,"line_start":722,"line_end":722,"column_start":15,"column_end":35},"name":"_mm256_cvtepi8_epi32","qualname":"::coresimd::x86::avx2::_mm256_cvtepi8_epi32","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Sign-extend 8-bit integers to 32-bit integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2837146,"byte_end":2837155,"line_start":719,"line_end":719,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2837156,"byte_end":2837190,"line_start":720,"line_end":720,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10900},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2837590,"byte_end":2837610,"line_start":732,"line_end":732,"column_start":15,"column_end":35},"name":"_mm256_cvtepi8_epi64","qualname":"::coresimd::x86::avx2::_mm256_cvtepi8_epi64","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Sign-extend 8-bit integers to 64-bit integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2837488,"byte_end":2837497,"line_start":729,"line_end":729,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2837498,"byte_end":2837532,"line_start":730,"line_end":730,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10902},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2837985,"byte_end":2838006,"line_start":743,"line_end":743,"column_start":15,"column_end":36},"name":"_mm256_cvtepu16_epi32","qualname":"::coresimd::x86::avx2::_mm256_cvtepu16_epi32","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Zero extend packed unsigned 16-bit integers in `a` to packed 32-bit\n integers, and store the results in dst.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2837883,"byte_end":2837892,"line_start":740,"line_end":740,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2837893,"byte_end":2837927,"line_start":741,"line_end":741,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10904},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2838323,"byte_end":2838344,"line_start":752,"line_end":752,"column_start":15,"column_end":36},"name":"_mm256_cvtepu16_epi64","qualname":"::coresimd::x86::avx2::_mm256_cvtepu16_epi64","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Zero-extend the lower four unsigned 16-bit integers in `a` to 64-bit\n integers. The upper four elements of `a` are unused.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2838221,"byte_end":2838230,"line_start":749,"line_end":749,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2838231,"byte_end":2838265,"line_start":750,"line_end":750,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10906},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2838672,"byte_end":2838693,"line_start":762,"line_end":762,"column_start":15,"column_end":36},"name":"_mm256_cvtepu32_epi64","qualname":"::coresimd::x86::avx2::_mm256_cvtepu32_epi64","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Zero-extend unsigned 32-bit integers in `a` to 64-bit integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2838570,"byte_end":2838579,"line_start":759,"line_end":759,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2838580,"byte_end":2838614,"line_start":760,"line_end":760,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10908},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2838947,"byte_end":2838967,"line_start":770,"line_end":770,"column_start":15,"column_end":35},"name":"_mm256_cvtepu8_epi16","qualname":"::coresimd::x86::avx2::_mm256_cvtepu8_epi16","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Zero-extend unsigned 8-bit integers in `a` to 16-bit integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2838845,"byte_end":2838854,"line_start":767,"line_end":767,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2838855,"byte_end":2838889,"line_start":768,"line_end":768,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10910},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2839286,"byte_end":2839306,"line_start":779,"line_end":779,"column_start":15,"column_end":35},"name":"_mm256_cvtepu8_epi32","qualname":"::coresimd::x86::avx2::_mm256_cvtepu8_epi32","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Zero-extend the lower eight unsigned 8-bit integers in `a` to 32-bit\n integers. The upper eight elements of `a` are unused.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2839184,"byte_end":2839193,"line_start":776,"line_end":776,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2839194,"byte_end":2839228,"line_start":777,"line_end":777,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10912},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2839708,"byte_end":2839728,"line_start":790,"line_end":790,"column_start":15,"column_end":35},"name":"_mm256_cvtepu8_epi64","qualname":"::coresimd::x86::avx2::_mm256_cvtepu8_epi64","value":"fn (a: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Zero-extend the lower four unsigned 8-bit integers in `a` to 64-bit\n integers. The upper twelve elements of `a` are unused.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2839606,"byte_end":2839615,"line_start":787,"line_end":787,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2839616,"byte_end":2839650,"line_start":788,"line_end":788,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10914},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2840102,"byte_end":2840126,"line_start":801,"line_end":801,"column_start":15,"column_end":39},"name":"_mm256_extracti128_si256","qualname":"::coresimd::x86::avx2::_mm256_extracti128_si256","value":"fn (a: __m256i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Extract 128 bits (of integer data) from `a` selected with `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2839955,"byte_end":2839964,"line_start":797,"line_end":797,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2839965,"byte_end":2839999,"line_start":798,"line_end":798,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2840056,"byte_end":2840087,"line_start":800,"line_end":800,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10916},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2840568,"byte_end":2840585,"line_start":815,"line_end":815,"column_start":15,"column_end":32},"name":"_mm256_hadd_epi16","qualname":"::coresimd::x86::avx2::_mm256_hadd_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Horizontally add adjacent pairs of 16-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2840468,"byte_end":2840477,"line_start":812,"line_end":812,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2840478,"byte_end":2840512,"line_start":813,"line_end":813,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10918},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2840854,"byte_end":2840871,"line_start":823,"line_end":823,"column_start":15,"column_end":32},"name":"_mm256_hadd_epi32","qualname":"::coresimd::x86::avx2::_mm256_hadd_epi32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Horizontally add adjacent pairs of 32-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2840754,"byte_end":2840763,"line_start":820,"line_end":820,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2840764,"byte_end":2840798,"line_start":821,"line_end":821,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10920},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2841160,"byte_end":2841178,"line_start":832,"line_end":832,"column_start":15,"column_end":33},"name":"_mm256_hadds_epi16","qualname":"::coresimd::x86::avx2::_mm256_hadds_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Horizontally add adjacent pairs of 16-bit integers in `a` and `b`\n using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2841059,"byte_end":2841068,"line_start":829,"line_end":829,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2841069,"byte_end":2841103,"line_start":830,"line_end":830,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10922},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2841453,"byte_end":2841470,"line_start":840,"line_end":840,"column_start":15,"column_end":32},"name":"_mm256_hsub_epi16","qualname":"::coresimd::x86::avx2::_mm256_hsub_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Horizontally subtract adjacent pairs of 16-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2841353,"byte_end":2841362,"line_start":837,"line_end":837,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2841363,"byte_end":2841397,"line_start":838,"line_end":838,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10924},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2841744,"byte_end":2841761,"line_start":848,"line_end":848,"column_start":15,"column_end":32},"name":"_mm256_hsub_epi32","qualname":"::coresimd::x86::avx2::_mm256_hsub_epi32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Horizontally subtract adjacent pairs of 32-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2841644,"byte_end":2841653,"line_start":845,"line_end":845,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2841654,"byte_end":2841688,"line_start":846,"line_end":846,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10926},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2842055,"byte_end":2842073,"line_start":857,"line_end":857,"column_start":15,"column_end":33},"name":"_mm256_hsubs_epi16","qualname":"::coresimd::x86::avx2::_mm256_hsubs_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Horizontally subtract adjacent pairs of 16-bit integers in `a` and `b`\n using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2841954,"byte_end":2841963,"line_start":854,"line_end":854,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2841964,"byte_end":2841998,"line_start":855,"line_end":855,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":10928},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2842435,"byte_end":2842454,"line_start":868,"line_end":868,"column_start":15,"column_end":34},"name":"_mm_i32gather_epi32","qualname":"::coresimd::x86::avx2::_mm_i32gather_epi32","value":"fn (slice: *const i32, offsets: __m128i, scale: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2842289,"byte_end":2842298,"line_start":864,"line_end":864,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2842299,"byte_end":2842333,"line_start":865,"line_end":865,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2842389,"byte_end":2842420,"line_start":867,"line_end":867,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10932},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2843198,"byte_end":2843222,"line_start":890,"line_end":890,"column_start":15,"column_end":39},"name":"_mm_mask_i32gather_epi32","qualname":"::coresimd::x86::avx2::_mm_mask_i32gather_epi32","value":"fn (src: __m128i, slice: *const i32, offsets: __m128i, mask: __m128i, scale: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8. If mask is set, load the value from `src` in\n that position instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2843052,"byte_end":2843061,"line_start":886,"line_end":886,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2843062,"byte_end":2843096,"line_start":887,"line_end":887,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2843152,"byte_end":2843183,"line_start":889,"line_end":889,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10936},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2843890,"byte_end":2843912,"line_start":912,"line_end":912,"column_start":15,"column_end":37},"name":"_mm256_i32gather_epi32","qualname":"::coresimd::x86::avx2::_mm256_i32gather_epi32","value":"fn (slice: *const i32, offsets: __m256i, scale: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2843744,"byte_end":2843753,"line_start":908,"line_end":908,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2843754,"byte_end":2843788,"line_start":909,"line_end":909,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2843844,"byte_end":2843875,"line_start":911,"line_end":911,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10940},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2844663,"byte_end":2844690,"line_start":934,"line_end":934,"column_start":15,"column_end":42},"name":"_mm256_mask_i32gather_epi32","qualname":"::coresimd::x86::avx2::_mm256_mask_i32gather_epi32","value":"fn (src: __m256i, slice: *const i32, offsets: __m256i, mask: __m256i, scale: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8. If mask is set, load the value from `src` in\n that position instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2844517,"byte_end":2844526,"line_start":930,"line_end":930,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2844527,"byte_end":2844561,"line_start":931,"line_end":931,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2844617,"byte_end":2844648,"line_start":933,"line_end":933,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10944},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2845359,"byte_end":2845375,"line_start":956,"line_end":956,"column_start":15,"column_end":31},"name":"_mm_i32gather_ps","qualname":"::coresimd::x86::avx2::_mm_i32gather_ps","value":"fn (slice: *const f32, offsets: __m128i, scale: i32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2845213,"byte_end":2845222,"line_start":952,"line_end":952,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2845223,"byte_end":2845257,"line_start":953,"line_end":953,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2845313,"byte_end":2845344,"line_start":955,"line_end":955,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10948},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2846062,"byte_end":2846083,"line_start":977,"line_end":977,"column_start":15,"column_end":36},"name":"_mm_mask_i32gather_ps","qualname":"::coresimd::x86::avx2::_mm_mask_i32gather_ps","value":"fn (src: __m128, slice: *const f32, offsets: __m128i, mask: __m128, scale: i32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8. If mask is set, load the value from `src` in\n that position instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2845916,"byte_end":2845925,"line_start":973,"line_end":973,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2845926,"byte_end":2845960,"line_start":974,"line_end":974,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2846016,"byte_end":2846047,"line_start":976,"line_end":976,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10952},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2846651,"byte_end":2846670,"line_start":995,"line_end":995,"column_start":15,"column_end":34},"name":"_mm256_i32gather_ps","qualname":"::coresimd::x86::avx2::_mm256_i32gather_ps","value":"fn (slice: *const f32, offsets: __m256i, scale: i32) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2846505,"byte_end":2846514,"line_start":991,"line_end":991,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2846515,"byte_end":2846549,"line_start":992,"line_end":992,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2846605,"byte_end":2846636,"line_start":994,"line_end":994,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10956},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2847364,"byte_end":2847388,"line_start":1016,"line_end":1016,"column_start":15,"column_end":39},"name":"_mm256_mask_i32gather_ps","qualname":"::coresimd::x86::avx2::_mm256_mask_i32gather_ps","value":"fn (src: __m256, slice: *const f32, offsets: __m256i, mask: __m256, scale: i32) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8. If mask is set, load the value from `src` in\n that position instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2847218,"byte_end":2847227,"line_start":1012,"line_end":1012,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2847228,"byte_end":2847262,"line_start":1013,"line_end":1013,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2847318,"byte_end":2847349,"line_start":1015,"line_end":1015,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10960},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2847957,"byte_end":2847976,"line_start":1034,"line_end":1034,"column_start":15,"column_end":34},"name":"_mm_i32gather_epi64","qualname":"::coresimd::x86::avx2::_mm_i32gather_epi64","value":"fn (slice: *const i64, offsets: __m128i, scale: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2847811,"byte_end":2847820,"line_start":1030,"line_end":1030,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2847821,"byte_end":2847855,"line_start":1031,"line_end":1031,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2847911,"byte_end":2847942,"line_start":1033,"line_end":1033,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10964},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2848721,"byte_end":2848745,"line_start":1056,"line_end":1056,"column_start":15,"column_end":39},"name":"_mm_mask_i32gather_epi64","qualname":"::coresimd::x86::avx2::_mm_mask_i32gather_epi64","value":"fn (src: __m128i, slice: *const i64, offsets: __m128i, mask: __m128i, scale: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8. If mask is set, load the value from `src` in\n that position instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2848575,"byte_end":2848584,"line_start":1052,"line_end":1052,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2848585,"byte_end":2848619,"line_start":1053,"line_end":1053,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2848675,"byte_end":2848706,"line_start":1055,"line_end":1055,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10968},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2849413,"byte_end":2849435,"line_start":1078,"line_end":1078,"column_start":15,"column_end":37},"name":"_mm256_i32gather_epi64","qualname":"::coresimd::x86::avx2::_mm256_i32gather_epi64","value":"fn (slice: *const i64, offsets: __m128i, scale: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2849267,"byte_end":2849276,"line_start":1074,"line_end":1074,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2849277,"byte_end":2849311,"line_start":1075,"line_end":1075,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2849367,"byte_end":2849398,"line_start":1077,"line_end":1077,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10972},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2850187,"byte_end":2850214,"line_start":1100,"line_end":1100,"column_start":15,"column_end":42},"name":"_mm256_mask_i32gather_epi64","qualname":"::coresimd::x86::avx2::_mm256_mask_i32gather_epi64","value":"fn (src: __m256i, slice: *const i64, offsets: __m128i, mask: __m256i, scale: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8. If mask is set, load the value from `src` in\n that position instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2850041,"byte_end":2850050,"line_start":1096,"line_end":1096,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2850051,"byte_end":2850085,"line_start":1097,"line_end":1097,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2850141,"byte_end":2850172,"line_start":1099,"line_end":1099,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10976},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2850883,"byte_end":2850899,"line_start":1122,"line_end":1122,"column_start":15,"column_end":31},"name":"_mm_i32gather_pd","qualname":"::coresimd::x86::avx2::_mm_i32gather_pd","value":"fn (slice: *const f64, offsets: __m128i, scale: i32) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2850737,"byte_end":2850746,"line_start":1118,"line_end":1118,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2850747,"byte_end":2850781,"line_start":1119,"line_end":1119,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2850837,"byte_end":2850868,"line_start":1121,"line_end":1121,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10980},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2851587,"byte_end":2851608,"line_start":1143,"line_end":1143,"column_start":15,"column_end":36},"name":"_mm_mask_i32gather_pd","qualname":"::coresimd::x86::avx2::_mm_mask_i32gather_pd","value":"fn (src: __m128d, slice: *const f64, offsets: __m128i, mask: __m128d, scale: i32) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8. If mask is set, load the value from `src` in\n that position instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2851441,"byte_end":2851450,"line_start":1139,"line_end":1139,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2851451,"byte_end":2851485,"line_start":1140,"line_end":1140,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2851541,"byte_end":2851572,"line_start":1142,"line_end":1142,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10984},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2852184,"byte_end":2852203,"line_start":1162,"line_end":1162,"column_start":15,"column_end":34},"name":"_mm256_i32gather_pd","qualname":"::coresimd::x86::avx2::_mm256_i32gather_pd","value":"fn (slice: *const f64, offsets: __m128i, scale: i32) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2852038,"byte_end":2852047,"line_start":1158,"line_end":1158,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2852048,"byte_end":2852082,"line_start":1159,"line_end":1159,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2852138,"byte_end":2852169,"line_start":1161,"line_end":1161,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10988},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2852898,"byte_end":2852922,"line_start":1183,"line_end":1183,"column_start":15,"column_end":39},"name":"_mm256_mask_i32gather_pd","qualname":"::coresimd::x86::avx2::_mm256_mask_i32gather_pd","value":"fn (src: __m256d, slice: *const f64, offsets: __m128i, mask: __m256d, scale: i32) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8. If mask is set, load the value from `src` in\n that position instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2852752,"byte_end":2852761,"line_start":1179,"line_end":1179,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2852762,"byte_end":2852796,"line_start":1180,"line_end":1180,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2852852,"byte_end":2852883,"line_start":1182,"line_end":1182,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10992},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2853499,"byte_end":2853518,"line_start":1202,"line_end":1202,"column_start":15,"column_end":34},"name":"_mm_i64gather_epi32","qualname":"::coresimd::x86::avx2::_mm_i64gather_epi32","value":"fn (slice: *const i32, offsets: __m128i, scale: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2853353,"byte_end":2853362,"line_start":1198,"line_end":1198,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2853363,"byte_end":2853397,"line_start":1199,"line_end":1199,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2853453,"byte_end":2853484,"line_start":1201,"line_end":1201,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":10996},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2854263,"byte_end":2854287,"line_start":1224,"line_end":1224,"column_start":15,"column_end":39},"name":"_mm_mask_i64gather_epi32","qualname":"::coresimd::x86::avx2::_mm_mask_i64gather_epi32","value":"fn (src: __m128i, slice: *const i32, offsets: __m128i, mask: __m128i, scale: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8. If mask is set, load the value from `src` in\n that position instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2854117,"byte_end":2854126,"line_start":1220,"line_end":1220,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2854127,"byte_end":2854161,"line_start":1221,"line_end":1221,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2854217,"byte_end":2854248,"line_start":1223,"line_end":1223,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11000},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2854955,"byte_end":2854977,"line_start":1246,"line_end":1246,"column_start":15,"column_end":37},"name":"_mm256_i64gather_epi32","qualname":"::coresimd::x86::avx2::_mm256_i64gather_epi32","value":"fn (slice: *const i32, offsets: __m256i, scale: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2854809,"byte_end":2854818,"line_start":1242,"line_end":1242,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2854819,"byte_end":2854853,"line_start":1243,"line_end":1243,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2854909,"byte_end":2854940,"line_start":1245,"line_end":1245,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11004},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2855723,"byte_end":2855750,"line_start":1268,"line_end":1268,"column_start":15,"column_end":42},"name":"_mm256_mask_i64gather_epi32","qualname":"::coresimd::x86::avx2::_mm256_mask_i64gather_epi32","value":"fn (src: __m128i, slice: *const i32, offsets: __m256i, mask: __m128i, scale: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8. If mask is set, load the value from `src` in\n that position instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2855577,"byte_end":2855586,"line_start":1264,"line_end":1264,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2855587,"byte_end":2855621,"line_start":1265,"line_end":1265,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2855677,"byte_end":2855708,"line_start":1267,"line_end":1267,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11008},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2856419,"byte_end":2856435,"line_start":1290,"line_end":1290,"column_start":15,"column_end":31},"name":"_mm_i64gather_ps","qualname":"::coresimd::x86::avx2::_mm_i64gather_ps","value":"fn (slice: *const f32, offsets: __m128i, scale: i32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2856273,"byte_end":2856282,"line_start":1286,"line_end":1286,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2856283,"byte_end":2856317,"line_start":1287,"line_end":1287,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2856373,"byte_end":2856404,"line_start":1289,"line_end":1289,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11012},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2857122,"byte_end":2857143,"line_start":1311,"line_end":1311,"column_start":15,"column_end":36},"name":"_mm_mask_i64gather_ps","qualname":"::coresimd::x86::avx2::_mm_mask_i64gather_ps","value":"fn (src: __m128, slice: *const f32, offsets: __m128i, mask: __m128, scale: i32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8. If mask is set, load the value from `src` in\n that position instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2856976,"byte_end":2856985,"line_start":1307,"line_end":1307,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2856986,"byte_end":2857020,"line_start":1308,"line_end":1308,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2857076,"byte_end":2857107,"line_start":1310,"line_end":1310,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11016},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2857711,"byte_end":2857730,"line_start":1329,"line_end":1329,"column_start":15,"column_end":34},"name":"_mm256_i64gather_ps","qualname":"::coresimd::x86::avx2::_mm256_i64gather_ps","value":"fn (slice: *const f32, offsets: __m256i, scale: i32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2857565,"byte_end":2857574,"line_start":1325,"line_end":1325,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2857575,"byte_end":2857609,"line_start":1326,"line_end":1326,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2857665,"byte_end":2857696,"line_start":1328,"line_end":1328,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11020},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2858418,"byte_end":2858442,"line_start":1350,"line_end":1350,"column_start":15,"column_end":39},"name":"_mm256_mask_i64gather_ps","qualname":"::coresimd::x86::avx2::_mm256_mask_i64gather_ps","value":"fn (src: __m128, slice: *const f32, offsets: __m256i, mask: __m128, scale: i32) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8. If mask is set, load the value from `src` in\n that position instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2858272,"byte_end":2858281,"line_start":1346,"line_end":1346,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2858282,"byte_end":2858316,"line_start":1347,"line_end":1347,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2858372,"byte_end":2858403,"line_start":1349,"line_end":1349,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11024},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2859011,"byte_end":2859030,"line_start":1368,"line_end":1368,"column_start":15,"column_end":34},"name":"_mm_i64gather_epi64","qualname":"::coresimd::x86::avx2::_mm_i64gather_epi64","value":"fn (slice: *const i64, offsets: __m128i, scale: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2858865,"byte_end":2858874,"line_start":1364,"line_end":1364,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2858875,"byte_end":2858909,"line_start":1365,"line_end":1365,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2858965,"byte_end":2858996,"line_start":1367,"line_end":1367,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11028},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2859775,"byte_end":2859799,"line_start":1390,"line_end":1390,"column_start":15,"column_end":39},"name":"_mm_mask_i64gather_epi64","qualname":"::coresimd::x86::avx2::_mm_mask_i64gather_epi64","value":"fn (src: __m128i, slice: *const i64, offsets: __m128i, mask: __m128i, scale: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8. If mask is set, load the value from `src` in\n that position instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2859629,"byte_end":2859638,"line_start":1386,"line_end":1386,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2859639,"byte_end":2859673,"line_start":1387,"line_end":1387,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2859729,"byte_end":2859760,"line_start":1389,"line_end":1389,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11032},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2860467,"byte_end":2860489,"line_start":1412,"line_end":1412,"column_start":15,"column_end":37},"name":"_mm256_i64gather_epi64","qualname":"::coresimd::x86::avx2::_mm256_i64gather_epi64","value":"fn (slice: *const i64, offsets: __m256i, scale: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2860321,"byte_end":2860330,"line_start":1408,"line_end":1408,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2860331,"byte_end":2860365,"line_start":1409,"line_end":1409,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2860421,"byte_end":2860452,"line_start":1411,"line_end":1411,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11036},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2861241,"byte_end":2861268,"line_start":1434,"line_end":1434,"column_start":15,"column_end":42},"name":"_mm256_mask_i64gather_epi64","qualname":"::coresimd::x86::avx2::_mm256_mask_i64gather_epi64","value":"fn (src: __m256i, slice: *const i64, offsets: __m256i, mask: __m256i, scale: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8. If mask is set, load the value from `src` in\n that position instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2861095,"byte_end":2861104,"line_start":1430,"line_end":1430,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2861105,"byte_end":2861139,"line_start":1431,"line_end":1431,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2861195,"byte_end":2861226,"line_start":1433,"line_end":1433,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11040},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2861937,"byte_end":2861953,"line_start":1456,"line_end":1456,"column_start":15,"column_end":31},"name":"_mm_i64gather_pd","qualname":"::coresimd::x86::avx2::_mm_i64gather_pd","value":"fn (slice: *const f64, offsets: __m128i, scale: i32) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2861791,"byte_end":2861800,"line_start":1452,"line_end":1452,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2861801,"byte_end":2861835,"line_start":1453,"line_end":1453,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2861891,"byte_end":2861922,"line_start":1455,"line_end":1455,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11044},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2862641,"byte_end":2862662,"line_start":1477,"line_end":1477,"column_start":15,"column_end":36},"name":"_mm_mask_i64gather_pd","qualname":"::coresimd::x86::avx2::_mm_mask_i64gather_pd","value":"fn (src: __m128d, slice: *const f64, offsets: __m128i, mask: __m128d, scale: i32) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8. If mask is set, load the value from `src` in\n that position instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2862495,"byte_end":2862504,"line_start":1473,"line_end":1473,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2862505,"byte_end":2862539,"line_start":1474,"line_end":1474,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2862595,"byte_end":2862626,"line_start":1476,"line_end":1476,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11048},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2863238,"byte_end":2863257,"line_start":1496,"line_end":1496,"column_start":15,"column_end":34},"name":"_mm256_i64gather_pd","qualname":"::coresimd::x86::avx2::_mm256_i64gather_pd","value":"fn (slice: *const f64, offsets: __m256i, scale: i32) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2863092,"byte_end":2863101,"line_start":1492,"line_end":1492,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2863102,"byte_end":2863136,"line_start":1493,"line_end":1493,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2863192,"byte_end":2863223,"line_start":1495,"line_end":1495,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11052},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2863952,"byte_end":2863976,"line_start":1517,"line_end":1517,"column_start":15,"column_end":39},"name":"_mm256_mask_i64gather_pd","qualname":"::coresimd::x86::avx2::_mm256_mask_i64gather_pd","value":"fn (src: __m256d, slice: *const f64, offsets: __m256i, mask: __m256d, scale: i32) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Return values from `slice` at offsets determined by `offsets * scale`,\n where\n `scale` is between 1 and 8. If mask is set, load the value from `src` in\n that position instead.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2863806,"byte_end":2863815,"line_start":1513,"line_end":1513,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2863816,"byte_end":2863850,"line_start":1514,"line_end":1514,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(4)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2863906,"byte_end":2863937,"line_start":1516,"line_end":1516,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11056},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2864548,"byte_end":2864571,"line_start":1535,"line_end":1535,"column_start":15,"column_end":38},"name":"_mm256_inserti128_si256","qualname":"::coresimd::x86::avx2::_mm256_inserti128_si256","value":"fn (a: __m256i, b: __m128i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Copy `a` to `dst`, then insert 128 bits (of integer data) from `b` at the\n location specified by `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2864402,"byte_end":2864411,"line_start":1531,"line_end":1531,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2864412,"byte_end":2864446,"line_start":1532,"line_end":1532,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2864502,"byte_end":2864533,"line_start":1534,"line_end":1534,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11058},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2865153,"byte_end":2865170,"line_start":1553,"line_end":1553,"column_start":15,"column_end":32},"name":"_mm256_madd_epi16","qualname":"::coresimd::x86::avx2::_mm256_madd_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Multiply packed signed 16-bit integers in `a` and `b`, producing\n intermediate signed 32-bit integers. Horizontally add adjacent pairs\n of intermediate 32-bit integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2865052,"byte_end":2865061,"line_start":1550,"line_end":1550,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2865062,"byte_end":2865096,"line_start":1551,"line_end":1551,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11060},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2865617,"byte_end":2865637,"line_start":1564,"line_end":1564,"column_start":15,"column_end":35},"name":"_mm256_maddubs_epi16","qualname":"::coresimd::x86::avx2::_mm256_maddubs_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Vertically multiply each unsigned 8-bit integer from `a` with the\n corresponding signed 8-bit integer from `b`, producing intermediate\n signed 16-bit integers. Horizontally add adjacent pairs of intermediate\n signed 16-bit integers\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2865514,"byte_end":2865523,"line_start":1561,"line_end":1561,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2865524,"byte_end":2865558,"line_start":1562,"line_end":1562,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11062},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2866014,"byte_end":2866032,"line_start":1574,"line_end":1574,"column_start":15,"column_end":33},"name":"_mm_maskload_epi32","qualname":"::coresimd::x86::avx2::_mm_maskload_epi32","value":"fn (mem_addr: *const i32, mask: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Load packed 32-bit integers from memory pointed by `mem_addr` using `mask`\n (elements are zeroed out when the highest bit is not set in the\n corresponding element).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2865911,"byte_end":2865920,"line_start":1571,"line_end":1571,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2865921,"byte_end":2865955,"line_start":1572,"line_end":1572,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11064},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2866440,"byte_end":2866461,"line_start":1586,"line_end":1586,"column_start":15,"column_end":36},"name":"_mm256_maskload_epi32","qualname":"::coresimd::x86::avx2::_mm256_maskload_epi32","value":"fn (mem_addr: *const i32, mask: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Load packed 32-bit integers from memory pointed by `mem_addr` using `mask`\n (elements are zeroed out when the highest bit is not set in the\n corresponding element).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2866337,"byte_end":2866346,"line_start":1583,"line_end":1583,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2866347,"byte_end":2866381,"line_start":1584,"line_end":1584,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11066},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2866872,"byte_end":2866890,"line_start":1598,"line_end":1598,"column_start":15,"column_end":33},"name":"_mm_maskload_epi64","qualname":"::coresimd::x86::avx2::_mm_maskload_epi64","value":"fn (mem_addr: *const i64, mask: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Load packed 64-bit integers from memory pointed by `mem_addr` using `mask`\n (elements are zeroed out when the highest bit is not set in the\n corresponding element).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2866769,"byte_end":2866778,"line_start":1595,"line_end":1595,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2866779,"byte_end":2866813,"line_start":1596,"line_end":1596,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11068},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2867298,"byte_end":2867319,"line_start":1610,"line_end":1610,"column_start":15,"column_end":36},"name":"_mm256_maskload_epi64","qualname":"::coresimd::x86::avx2::_mm256_maskload_epi64","value":"fn (mem_addr: *const i64, mask: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Load packed 64-bit integers from memory pointed by `mem_addr` using `mask`\n (elements are zeroed out when the highest bit is not set in the\n corresponding element).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2867195,"byte_end":2867204,"line_start":1607,"line_end":1607,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2867205,"byte_end":2867239,"line_start":1608,"line_end":1608,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11070},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2867740,"byte_end":2867759,"line_start":1622,"line_end":1622,"column_start":15,"column_end":34},"name":"_mm_maskstore_epi32","qualname":"::coresimd::x86::avx2::_mm_maskstore_epi32","value":"fn (mem_addr: *mut i32, mask: __m128i, a: __m128i) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store packed 32-bit integers from `a` into memory pointed by `mem_addr`\n using `mask` (elements are not stored when the highest bit is not set\n in the corresponding element).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2867637,"byte_end":2867646,"line_start":1619,"line_end":1619,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2867647,"byte_end":2867681,"line_start":1620,"line_end":1620,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11072},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2868173,"byte_end":2868195,"line_start":1634,"line_end":1634,"column_start":15,"column_end":37},"name":"_mm256_maskstore_epi32","qualname":"::coresimd::x86::avx2::_mm256_maskstore_epi32","value":"fn (mem_addr: *mut i32, mask: __m256i, a: __m256i) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store packed 32-bit integers from `a` into memory pointed by `mem_addr`\n using `mask` (elements are not stored when the highest bit is not set\n in the corresponding element).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2868070,"byte_end":2868079,"line_start":1631,"line_end":1631,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2868080,"byte_end":2868114,"line_start":1632,"line_end":1632,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11074},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2868612,"byte_end":2868631,"line_start":1646,"line_end":1646,"column_start":15,"column_end":34},"name":"_mm_maskstore_epi64","qualname":"::coresimd::x86::avx2::_mm_maskstore_epi64","value":"fn (mem_addr: *mut i64, mask: __m128i, a: __m128i) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store packed 64-bit integers from `a` into memory pointed by `mem_addr`\n using `mask` (elements are not stored when the highest bit is not set\n in the corresponding element).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2868509,"byte_end":2868518,"line_start":1643,"line_end":1643,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2868519,"byte_end":2868553,"line_start":1644,"line_end":1644,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11076},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2869045,"byte_end":2869067,"line_start":1658,"line_end":1658,"column_start":15,"column_end":37},"name":"_mm256_maskstore_epi64","qualname":"::coresimd::x86::avx2::_mm256_maskstore_epi64","value":"fn (mem_addr: *mut i64, mask: __m256i, a: __m256i) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Store packed 64-bit integers from `a` into memory pointed by `mem_addr`\n using `mask` (elements are not stored when the highest bit is not set\n in the corresponding element).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2868942,"byte_end":2868951,"line_start":1655,"line_end":1655,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2868952,"byte_end":2868986,"line_start":1656,"line_end":1656,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11078},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2869389,"byte_end":2869405,"line_start":1669,"line_end":1669,"column_start":15,"column_end":31},"name":"_mm256_max_epi16","qualname":"::coresimd::x86::avx2::_mm256_max_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 16-bit integers in `a` and `b`, and return the packed\n maximum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2869289,"byte_end":2869298,"line_start":1666,"line_end":1666,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2869299,"byte_end":2869333,"line_start":1667,"line_end":1667,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11080},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2869696,"byte_end":2869712,"line_start":1678,"line_end":1678,"column_start":15,"column_end":31},"name":"_mm256_max_epi32","qualname":"::coresimd::x86::avx2::_mm256_max_epi32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 32-bit integers in `a` and `b`, and return the packed\n maximum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2869596,"byte_end":2869605,"line_start":1675,"line_end":1675,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2869606,"byte_end":2869640,"line_start":1676,"line_end":1676,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11082},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2870000,"byte_end":2870015,"line_start":1687,"line_end":1687,"column_start":15,"column_end":30},"name":"_mm256_max_epi8","qualname":"::coresimd::x86::avx2::_mm256_max_epi8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 8-bit integers in `a` and `b`, and return the packed\n maximum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2869900,"byte_end":2869909,"line_start":1684,"line_end":1684,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2869910,"byte_end":2869944,"line_start":1685,"line_end":1685,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11084},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2870313,"byte_end":2870329,"line_start":1696,"line_end":1696,"column_start":15,"column_end":31},"name":"_mm256_max_epu16","qualname":"::coresimd::x86::avx2::_mm256_max_epu16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed unsigned 16-bit integers in `a` and `b`, and return\n the packed maximum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2870213,"byte_end":2870222,"line_start":1693,"line_end":1693,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2870223,"byte_end":2870257,"line_start":1694,"line_end":1694,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11086},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2870629,"byte_end":2870645,"line_start":1705,"line_end":1705,"column_start":15,"column_end":31},"name":"_mm256_max_epu32","qualname":"::coresimd::x86::avx2::_mm256_max_epu32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed unsigned 32-bit integers in `a` and `b`, and return\n the packed maximum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2870529,"byte_end":2870538,"line_start":1702,"line_end":1702,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2870539,"byte_end":2870573,"line_start":1703,"line_end":1703,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11088},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2870942,"byte_end":2870957,"line_start":1714,"line_end":1714,"column_start":15,"column_end":30},"name":"_mm256_max_epu8","qualname":"::coresimd::x86::avx2::_mm256_max_epu8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed unsigned 8-bit integers in `a` and `b`, and return\n the packed maximum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2870842,"byte_end":2870851,"line_start":1711,"line_end":1711,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2870852,"byte_end":2870886,"line_start":1712,"line_end":1712,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11090},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2871246,"byte_end":2871262,"line_start":1723,"line_end":1723,"column_start":15,"column_end":31},"name":"_mm256_min_epi16","qualname":"::coresimd::x86::avx2::_mm256_min_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 16-bit integers in `a` and `b`, and return the packed\n minimum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2871146,"byte_end":2871155,"line_start":1720,"line_end":1720,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2871156,"byte_end":2871190,"line_start":1721,"line_end":1721,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11092},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2871553,"byte_end":2871569,"line_start":1732,"line_end":1732,"column_start":15,"column_end":31},"name":"_mm256_min_epi32","qualname":"::coresimd::x86::avx2::_mm256_min_epi32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 32-bit integers in `a` and `b`, and return the packed\n minimum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2871453,"byte_end":2871462,"line_start":1729,"line_end":1729,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2871463,"byte_end":2871497,"line_start":1730,"line_end":1730,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11094},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2871857,"byte_end":2871872,"line_start":1741,"line_end":1741,"column_start":15,"column_end":30},"name":"_mm256_min_epi8","qualname":"::coresimd::x86::avx2::_mm256_min_epi8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed 8-bit integers in `a` and `b`, and return the packed\n minimum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2871757,"byte_end":2871766,"line_start":1738,"line_end":1738,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2871767,"byte_end":2871801,"line_start":1739,"line_end":1739,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11096},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2872170,"byte_end":2872186,"line_start":1750,"line_end":1750,"column_start":15,"column_end":31},"name":"_mm256_min_epu16","qualname":"::coresimd::x86::avx2::_mm256_min_epu16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed unsigned 16-bit integers in `a` and `b`, and return\n the packed minimum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2872070,"byte_end":2872079,"line_start":1747,"line_end":1747,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2872080,"byte_end":2872114,"line_start":1748,"line_end":1748,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11098},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2872486,"byte_end":2872502,"line_start":1759,"line_end":1759,"column_start":15,"column_end":31},"name":"_mm256_min_epu32","qualname":"::coresimd::x86::avx2::_mm256_min_epu32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed unsigned 32-bit integers in `a` and `b`, and return\n the packed minimum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2872386,"byte_end":2872395,"line_start":1756,"line_end":1756,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2872396,"byte_end":2872430,"line_start":1757,"line_end":1757,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11100},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2872799,"byte_end":2872814,"line_start":1768,"line_end":1768,"column_start":15,"column_end":30},"name":"_mm256_min_epu8","qualname":"::coresimd::x86::avx2::_mm256_min_epu8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compare packed unsigned 8-bit integers in `a` and `b`, and return\n the packed minimum values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2872699,"byte_end":2872708,"line_start":1765,"line_end":1765,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2872709,"byte_end":2872743,"line_start":1766,"line_end":1766,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11102},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2873111,"byte_end":2873131,"line_start":1777,"line_end":1777,"column_start":15,"column_end":35},"name":"_mm256_movemask_epi8","qualname":"::coresimd::x86::avx2::_mm256_movemask_epi8","value":"fn (a: __m256i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Create mask from the most significant bit of each 8-bit element in `a`,\n return the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2873009,"byte_end":2873018,"line_start":1774,"line_end":1774,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2873019,"byte_end":2873053,"line_start":1775,"line_end":1775,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11104},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2873827,"byte_end":2873846,"line_start":1792,"line_end":1792,"column_start":15,"column_end":34},"name":"_mm256_mpsadbw_epu8","qualname":"::coresimd::x86::avx2::_mm256_mpsadbw_epu8","value":"fn (a: __m256i, b: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compute the sum of absolute differences (SADs) of quadruplets of unsigned\n 8-bit integers in `a` compared to those in `b`, and store the 16-bit\n results in dst. Eight SADs are performed for each 128-bit lane using one\n quadruplet from `b` and eight quadruplets from `a`. One quadruplet is\n selected from `b` starting at on the offset specified in `imm8`. Eight\n quadruplets are formed from sequential 8-bit integers selected from `a`\n starting at the offset specified in `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2873684,"byte_end":2873693,"line_start":1788,"line_end":1788,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2873694,"byte_end":2873728,"line_start":1789,"line_end":1789,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2873781,"byte_end":2873812,"line_start":1791,"line_end":1791,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11108},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2874318,"byte_end":2874334,"line_start":1811,"line_end":1811,"column_start":15,"column_end":31},"name":"_mm256_mul_epi32","qualname":"::coresimd::x86::avx2::_mm256_mul_epi32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Multiply the low 32-bit integers from each packed 64-bit element in\n `a` and `b`","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2874218,"byte_end":2874227,"line_start":1808,"line_end":1808,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2874228,"byte_end":2874262,"line_start":1809,"line_end":1809,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11110},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2874672,"byte_end":2874688,"line_start":1822,"line_end":1822,"column_start":15,"column_end":31},"name":"_mm256_mul_epu32","qualname":"::coresimd::x86::avx2::_mm256_mul_epu32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Multiply the low unsigned 32-bit integers from each packed 64-bit\n element in `a` and `b`","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2874571,"byte_end":2874580,"line_start":1819,"line_end":1819,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2874581,"byte_end":2874615,"line_start":1820,"line_end":1820,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11112},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2875049,"byte_end":2875067,"line_start":1832,"line_end":1832,"column_start":15,"column_end":33},"name":"_mm256_mulhi_epi16","qualname":"::coresimd::x86::avx2::_mm256_mulhi_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Multiply the packed 16-bit integers in `a` and `b`, producing\n intermediate 32-bit integers and returning the high 16 bits of the\n intermediate integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2874949,"byte_end":2874958,"line_start":1829,"line_end":1829,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2874959,"byte_end":2874993,"line_start":1830,"line_end":1830,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11114},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2875439,"byte_end":2875457,"line_start":1842,"line_end":1842,"column_start":15,"column_end":33},"name":"_mm256_mulhi_epu16","qualname":"::coresimd::x86::avx2::_mm256_mulhi_epu16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Multiply the packed unsigned 16-bit integers in `a` and `b`, producing\n intermediate 32-bit integers and returning the high 16 bits of the\n intermediate integers.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2875338,"byte_end":2875347,"line_start":1839,"line_end":1839,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2875348,"byte_end":2875382,"line_start":1840,"line_end":1840,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11116},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2875816,"byte_end":2875834,"line_start":1852,"line_end":1852,"column_start":15,"column_end":33},"name":"_mm256_mullo_epi16","qualname":"::coresimd::x86::avx2::_mm256_mullo_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Multiply the packed 16-bit integers in `a` and `b`, producing\n intermediate 32-bit integers, and return the low 16 bits of the\n intermediate integers\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2875716,"byte_end":2875725,"line_start":1849,"line_end":1849,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2875726,"byte_end":2875760,"line_start":1850,"line_end":1850,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11118},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2876194,"byte_end":2876212,"line_start":1862,"line_end":1862,"column_start":15,"column_end":33},"name":"_mm256_mullo_epi32","qualname":"::coresimd::x86::avx2::_mm256_mullo_epi32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Multiply the packed 32-bit integers in `a` and `b`, producing\n intermediate 64-bit integers, and return the low 16 bits of the\n intermediate integers\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2876094,"byte_end":2876103,"line_start":1859,"line_end":1859,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2876104,"byte_end":2876138,"line_start":1860,"line_end":1860,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11120},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2876633,"byte_end":2876652,"line_start":1873,"line_end":1873,"column_start":15,"column_end":34},"name":"_mm256_mulhrs_epi16","qualname":"::coresimd::x86::avx2::_mm256_mulhrs_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Multiply packed 16-bit integers in `a` and `b`, producing\n intermediate signed 32-bit integers. Truncate each intermediate\n integer to the 18 most significant bits, round by adding 1, and\n return bits [16:1]\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2876531,"byte_end":2876540,"line_start":1870,"line_end":1870,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2876541,"byte_end":2876575,"line_start":1871,"line_end":1871,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11122},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2876936,"byte_end":2876951,"line_start":1882,"line_end":1882,"column_start":15,"column_end":30},"name":"_mm256_or_si256","qualname":"::coresimd::x86::avx2::_mm256_or_si256","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise OR of 256 bits (representing integer data) in `a`\n and `b`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2876838,"byte_end":2876847,"line_start":1879,"line_end":1879,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2876848,"byte_end":2876882,"line_start":1880,"line_end":1880,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11124},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2877255,"byte_end":2877273,"line_start":1891,"line_end":1891,"column_start":15,"column_end":33},"name":"_mm256_packs_epi16","qualname":"::coresimd::x86::avx2::_mm256_packs_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers\n using signed saturation\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2877153,"byte_end":2877162,"line_start":1888,"line_end":1888,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2877163,"byte_end":2877197,"line_start":1889,"line_end":1889,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11126},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2877581,"byte_end":2877599,"line_start":1900,"line_end":1900,"column_start":15,"column_end":33},"name":"_mm256_packs_epi32","qualname":"::coresimd::x86::avx2::_mm256_packs_epi32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers\n using signed saturation\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2877479,"byte_end":2877488,"line_start":1897,"line_end":1897,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2877489,"byte_end":2877523,"line_start":1898,"line_end":1898,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11128},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2877906,"byte_end":2877925,"line_start":1909,"line_end":1909,"column_start":15,"column_end":34},"name":"_mm256_packus_epi16","qualname":"::coresimd::x86::avx2::_mm256_packus_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers\n using unsigned saturation\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2877804,"byte_end":2877813,"line_start":1906,"line_end":1906,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2877814,"byte_end":2877848,"line_start":1907,"line_end":1907,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11130},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2878235,"byte_end":2878254,"line_start":1918,"line_end":1918,"column_start":15,"column_end":34},"name":"_mm256_packus_epi32","qualname":"::coresimd::x86::avx2::_mm256_packus_epi32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers\n using unsigned saturation\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2878133,"byte_end":2878142,"line_start":1915,"line_end":1915,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2878143,"byte_end":2878177,"line_start":1916,"line_end":1916,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11132},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2878631,"byte_end":2878658,"line_start":1929,"line_end":1929,"column_start":15,"column_end":42},"name":"_mm256_permutevar8x32_epi32","qualname":"::coresimd::x86::avx2::_mm256_permutevar8x32_epi32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Permutes packed 32-bit integers from `a` according to the content of `b`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2878531,"byte_end":2878540,"line_start":1926,"line_end":1926,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2878541,"byte_end":2878575,"line_start":1927,"line_end":1927,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11134},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2878960,"byte_end":2878984,"line_start":1938,"line_end":1938,"column_start":15,"column_end":39},"name":"_mm256_permute4x64_epi64","qualname":"::coresimd::x86::avx2::_mm256_permute4x64_epi64","value":"fn (a: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Permutes 64-bit integers from `a` using control mask `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2878818,"byte_end":2878827,"line_start":1934,"line_end":1934,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2878828,"byte_end":2878862,"line_start":1935,"line_end":1935,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2878914,"byte_end":2878945,"line_start":1937,"line_end":1937,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11144},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2880618,"byte_end":2880643,"line_start":1991,"line_end":1991,"column_start":15,"column_end":40},"name":"_mm256_permute2x128_si256","qualname":"::coresimd::x86::avx2::_mm256_permute2x128_si256","value":"fn (a: __m256i, b: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle 128-bits of integer data selected by `imm8` from `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2880473,"byte_end":2880482,"line_start":1987,"line_end":1987,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2880483,"byte_end":2880517,"line_start":1988,"line_end":1988,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2880572,"byte_end":2880603,"line_start":1990,"line_end":1990,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11148},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2881140,"byte_end":2881161,"line_start":2010,"line_end":2010,"column_start":15,"column_end":36},"name":"_mm256_permute4x64_pd","qualname":"::coresimd::x86::avx2::_mm256_permute4x64_pd","value":"fn (a: __m256d, imm8: i32) -> __m256d","parent":null,"children":[],"decl_id":null,"docs":" Shuffle 64-bit floating-point elements in `a` across lanes using the\n control in `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2880998,"byte_end":2881007,"line_start":2006,"line_end":2006,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2881008,"byte_end":2881042,"line_start":2007,"line_end":2007,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2881094,"byte_end":2881125,"line_start":2009,"line_end":2009,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11158},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2882869,"byte_end":2882893,"line_start":2061,"line_end":2061,"column_start":15,"column_end":39},"name":"_mm256_permutevar8x32_ps","qualname":"::coresimd::x86::avx2::_mm256_permutevar8x32_ps","value":"fn (a: __m256, idx: __m256i) -> __m256","parent":null,"children":[],"decl_id":null,"docs":" Shuffle eight 32-bit foating-point elements in `a` across lanes using\n the corresponding 32-bit integer index in `idx`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2882769,"byte_end":2882778,"line_start":2058,"line_end":2058,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2882779,"byte_end":2882813,"line_start":2059,"line_end":2059,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11160},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2883344,"byte_end":2883359,"line_start":2072,"line_end":2072,"column_start":15,"column_end":30},"name":"_mm256_sad_epu8","qualname":"::coresimd::x86::avx2::_mm256_sad_epu8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compute the absolute differences of packed unsigned 8-bit integers in `a`\n and `b`, then horizontally sum each consecutive 8 differences to\n produce four unsigned 16-bit integers, and pack these unsigned 16-bit\n integers in the low 16 bits of the 64-bit return value\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2883244,"byte_end":2883253,"line_start":2069,"line_end":2069,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2883254,"byte_end":2883288,"line_start":2070,"line_end":2070,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11162},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2884500,"byte_end":2884519,"line_start":2108,"line_end":2108,"column_start":15,"column_end":34},"name":"_mm256_shuffle_epi8","qualname":"::coresimd::x86::avx2::_mm256_shuffle_epi8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle bytes from `a` according to the content of `b`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2884400,"byte_end":2884409,"line_start":2105,"line_end":2105,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2884410,"byte_end":2884444,"line_start":2106,"line_end":2106,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11164},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2885922,"byte_end":2885942,"line_start":2152,"line_end":2152,"column_start":15,"column_end":35},"name":"_mm256_shuffle_epi32","qualname":"::coresimd::x86::avx2::_mm256_shuffle_epi32","value":"fn (a: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle 32-bit integers in 128-bit lanes of `a` using the control in\n `imm8`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2885778,"byte_end":2885787,"line_start":2148,"line_end":2148,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2885788,"byte_end":2885822,"line_start":2149,"line_end":2149,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2885876,"byte_end":2885907,"line_start":2151,"line_end":2151,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11174},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2888222,"byte_end":2888244,"line_start":2214,"line_end":2214,"column_start":15,"column_end":37},"name":"_mm256_shufflehi_epi16","qualname":"::coresimd::x86::avx2::_mm256_shufflehi_epi16","value":"fn (a: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle 16-bit integers in the high 64 bits of 128-bit lanes of `a` using\n the control in `imm8`. The low 64 bits of 128-bit lanes of `a` are copied\n to the output.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2888079,"byte_end":2888088,"line_start":2210,"line_end":2210,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2888089,"byte_end":2888123,"line_start":2211,"line_end":2211,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2888176,"byte_end":2888207,"line_start":2213,"line_end":2213,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11184},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2890231,"byte_end":2890253,"line_start":2272,"line_end":2272,"column_start":15,"column_end":37},"name":"_mm256_shufflelo_epi16","qualname":"::coresimd::x86::avx2::_mm256_shufflelo_epi16","value":"fn (a: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle 16-bit integers in the low 64 bits of 128-bit lanes of `a` using\n the control in `imm8`. The high 64 bits of 128-bit lanes of `a` are copied\n to the output.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2890088,"byte_end":2890097,"line_start":2268,"line_end":2268,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2890098,"byte_end":2890132,"line_start":2269,"line_end":2269,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2890185,"byte_end":2890216,"line_start":2271,"line_end":2271,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11194},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2892229,"byte_end":2892246,"line_start":2329,"line_end":2329,"column_start":15,"column_end":32},"name":"_mm256_sign_epi16","qualname":"::coresimd::x86::avx2::_mm256_sign_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Negate packed 16-bit integers in `a` when the corresponding signed\n 16-bit integer in `b` is negative, and return the results.\n Results are zeroed out when the corresponding element in `b` is zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2892129,"byte_end":2892138,"line_start":2326,"line_end":2326,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2892139,"byte_end":2892173,"line_start":2327,"line_end":2327,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11196},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2892652,"byte_end":2892669,"line_start":2339,"line_end":2339,"column_start":15,"column_end":32},"name":"_mm256_sign_epi32","qualname":"::coresimd::x86::avx2::_mm256_sign_epi32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Negate packed 32-bit integers in `a` when the corresponding signed\n 32-bit integer in `b` is negative, and return the results.\n Results are zeroed out when the corresponding element in `b` is zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2892552,"byte_end":2892561,"line_start":2336,"line_end":2336,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2892562,"byte_end":2892596,"line_start":2337,"line_end":2337,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11198},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2893071,"byte_end":2893087,"line_start":2349,"line_end":2349,"column_start":15,"column_end":31},"name":"_mm256_sign_epi8","qualname":"::coresimd::x86::avx2::_mm256_sign_epi8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Negate packed 8-bit integers in `a` when the corresponding signed\n 8-bit integer in `b` is negative, and return the results.\n Results are zeroed out when the corresponding element in `b` is zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2892971,"byte_end":2892980,"line_start":2346,"line_end":2346,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2892981,"byte_end":2893015,"line_start":2347,"line_end":2347,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11200},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2893389,"byte_end":2893405,"line_start":2358,"line_end":2358,"column_start":15,"column_end":31},"name":"_mm256_sll_epi16","qualname":"::coresimd::x86::avx2::_mm256_sll_epi16","value":"fn (a: __m256i, count: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 16-bit integers in `a` left by `count` while\n shifting in zeros, and return the result\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2893290,"byte_end":2893299,"line_start":2355,"line_end":2355,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2893300,"byte_end":2893334,"line_start":2356,"line_end":2356,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11202},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2893715,"byte_end":2893731,"line_start":2367,"line_end":2367,"column_start":15,"column_end":31},"name":"_mm256_sll_epi32","qualname":"::coresimd::x86::avx2::_mm256_sll_epi32","value":"fn (a: __m256i, count: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` left by `count` while\n shifting in zeros, and return the result\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2893616,"byte_end":2893625,"line_start":2364,"line_end":2364,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2893626,"byte_end":2893660,"line_start":2365,"line_end":2365,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11204},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2894040,"byte_end":2894056,"line_start":2376,"line_end":2376,"column_start":15,"column_end":31},"name":"_mm256_sll_epi64","qualname":"::coresimd::x86::avx2::_mm256_sll_epi64","value":"fn (a: __m256i, count: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 64-bit integers in `a` left by `count` while\n shifting in zeros, and return the result\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2893941,"byte_end":2893950,"line_start":2373,"line_end":2373,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2893951,"byte_end":2893985,"line_start":2374,"line_end":2374,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11206},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2894362,"byte_end":2894379,"line_start":2385,"line_end":2385,"column_start":15,"column_end":32},"name":"_mm256_slli_epi16","qualname":"::coresimd::x86::avx2::_mm256_slli_epi16","value":"fn (a: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 16-bit integers in `a` left by `imm8` while\n shifting in zeros, return the results;\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2894263,"byte_end":2894272,"line_start":2382,"line_end":2382,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2894273,"byte_end":2894307,"line_start":2383,"line_end":2383,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11208},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2894670,"byte_end":2894687,"line_start":2394,"line_end":2394,"column_start":15,"column_end":32},"name":"_mm256_slli_epi32","qualname":"::coresimd::x86::avx2::_mm256_slli_epi32","value":"fn (a: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` left by `imm8` while\n shifting in zeros, return the results;\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2894571,"byte_end":2894580,"line_start":2391,"line_end":2391,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2894581,"byte_end":2894615,"line_start":2392,"line_end":2392,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11210},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2894977,"byte_end":2894994,"line_start":2403,"line_end":2403,"column_start":15,"column_end":32},"name":"_mm256_slli_epi64","qualname":"::coresimd::x86::avx2::_mm256_slli_epi64","value":"fn (a: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 64-bit integers in `a` left by `imm8` while\n shifting in zeros, return the results;\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2894878,"byte_end":2894887,"line_start":2400,"line_end":2400,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2894888,"byte_end":2894922,"line_start":2401,"line_end":2401,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11212},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2895300,"byte_end":2895317,"line_start":2412,"line_end":2412,"column_start":15,"column_end":32},"name":"_mm256_slli_si256","qualname":"::coresimd::x86::avx2::_mm256_slli_si256","value":"fn (a: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift 128-bit lanes in `a` left by `imm8` bytes while shifting in zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2895158,"byte_end":2895167,"line_start":2408,"line_end":2408,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2895168,"byte_end":2895202,"line_start":2409,"line_end":2409,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2895254,"byte_end":2895285,"line_start":2411,"line_end":2411,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11216},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2895749,"byte_end":2895768,"line_start":2427,"line_end":2427,"column_start":15,"column_end":34},"name":"_mm256_bslli_epi128","qualname":"::coresimd::x86::avx2::_mm256_bslli_epi128","value":"fn (a: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift 128-bit lanes in `a` left by `imm8` bytes while shifting in zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2895607,"byte_end":2895616,"line_start":2423,"line_end":2423,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2895617,"byte_end":2895651,"line_start":2424,"line_end":2424,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2895703,"byte_end":2895734,"line_start":2426,"line_end":2426,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11220},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2896246,"byte_end":2896260,"line_start":2443,"line_end":2443,"column_start":15,"column_end":29},"name":"_mm_sllv_epi32","qualname":"::coresimd::x86::avx2::_mm_sllv_epi32","value":"fn (a: __m128i, count: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` left by the amount\n specified by the corresponding element in `count` while\n shifting in zeros, and return the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2896146,"byte_end":2896155,"line_start":2440,"line_end":2440,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2896156,"byte_end":2896190,"line_start":2441,"line_end":2441,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11222},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2896629,"byte_end":2896646,"line_start":2453,"line_end":2453,"column_start":15,"column_end":32},"name":"_mm256_sllv_epi32","qualname":"::coresimd::x86::avx2::_mm256_sllv_epi32","value":"fn (a: __m256i, count: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` left by the amount\n specified by the corresponding element in `count` while\n shifting in zeros, and return the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2896529,"byte_end":2896538,"line_start":2450,"line_end":2450,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2896539,"byte_end":2896573,"line_start":2451,"line_end":2451,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11224},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2897018,"byte_end":2897032,"line_start":2463,"line_end":2463,"column_start":15,"column_end":29},"name":"_mm_sllv_epi64","qualname":"::coresimd::x86::avx2::_mm_sllv_epi64","value":"fn (a: __m128i, count: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 64-bit integers in `a` left by the amount\n specified by the corresponding element in `count` while\n shifting in zeros, and return the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2896918,"byte_end":2896927,"line_start":2460,"line_end":2460,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2896928,"byte_end":2896962,"line_start":2461,"line_end":2461,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11226},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2897401,"byte_end":2897418,"line_start":2473,"line_end":2473,"column_start":15,"column_end":32},"name":"_mm256_sllv_epi64","qualname":"::coresimd::x86::avx2::_mm256_sllv_epi64","value":"fn (a: __m256i, count: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 64-bit integers in `a` left by the amount\n specified by the corresponding element in `count` while\n shifting in zeros, and return the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2897301,"byte_end":2897310,"line_start":2470,"line_end":2470,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2897311,"byte_end":2897345,"line_start":2471,"line_end":2471,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11228},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2897714,"byte_end":2897730,"line_start":2482,"line_end":2482,"column_start":15,"column_end":31},"name":"_mm256_sra_epi16","qualname":"::coresimd::x86::avx2::_mm256_sra_epi16","value":"fn (a: __m256i, count: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 16-bit integers in `a` right by `count` while\n shifting in sign bits.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2897615,"byte_end":2897624,"line_start":2479,"line_end":2479,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2897625,"byte_end":2897659,"line_start":2480,"line_end":2480,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11230},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2898023,"byte_end":2898039,"line_start":2491,"line_end":2491,"column_start":15,"column_end":31},"name":"_mm256_sra_epi32","qualname":"::coresimd::x86::avx2::_mm256_sra_epi32","value":"fn (a: __m256i, count: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` right by `count` while\n shifting in sign bits.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2897924,"byte_end":2897933,"line_start":2488,"line_end":2488,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2897934,"byte_end":2897968,"line_start":2489,"line_end":2489,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11232},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2898330,"byte_end":2898347,"line_start":2500,"line_end":2500,"column_start":15,"column_end":32},"name":"_mm256_srai_epi16","qualname":"::coresimd::x86::avx2::_mm256_srai_epi16","value":"fn (a: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 16-bit integers in `a` right by `imm8` while\n shifting in sign bits.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2898231,"byte_end":2898240,"line_start":2497,"line_end":2497,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2898241,"byte_end":2898275,"line_start":2498,"line_end":2498,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11234},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2898623,"byte_end":2898640,"line_start":2509,"line_end":2509,"column_start":15,"column_end":32},"name":"_mm256_srai_epi32","qualname":"::coresimd::x86::avx2::_mm256_srai_epi32","value":"fn (a: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` right by `imm8` while\n shifting in sign bits.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2898524,"byte_end":2898533,"line_start":2506,"line_end":2506,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2898534,"byte_end":2898568,"line_start":2507,"line_end":2507,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11236},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2898970,"byte_end":2898984,"line_start":2518,"line_end":2518,"column_start":15,"column_end":29},"name":"_mm_srav_epi32","qualname":"::coresimd::x86::avx2::_mm_srav_epi32","value":"fn (a: __m128i, count: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` right by the amount specified by the\n corresponding element in `count` while shifting in sign bits.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2898870,"byte_end":2898879,"line_start":2515,"line_end":2515,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2898880,"byte_end":2898914,"line_start":2516,"line_end":2516,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11238},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2899331,"byte_end":2899348,"line_start":2527,"line_end":2527,"column_start":15,"column_end":32},"name":"_mm256_srav_epi32","qualname":"::coresimd::x86::avx2::_mm256_srav_epi32","value":"fn (a: __m256i, count: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` right by the amount specified by the\n corresponding element in `count` while shifting in sign bits.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2899231,"byte_end":2899240,"line_start":2524,"line_end":2524,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2899241,"byte_end":2899275,"line_start":2525,"line_end":2525,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11240},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2899675,"byte_end":2899692,"line_start":2536,"line_end":2536,"column_start":15,"column_end":32},"name":"_mm256_srli_si256","qualname":"::coresimd::x86::avx2::_mm256_srli_si256","value":"fn (a: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift 128-bit lanes in `a` right by `imm8` bytes while shifting in zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2899533,"byte_end":2899542,"line_start":2532,"line_end":2532,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2899543,"byte_end":2899577,"line_start":2533,"line_end":2533,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2899629,"byte_end":2899660,"line_start":2535,"line_end":2535,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11244},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2900125,"byte_end":2900144,"line_start":2551,"line_end":2551,"column_start":15,"column_end":34},"name":"_mm256_bsrli_epi128","qualname":"::coresimd::x86::avx2::_mm256_bsrli_epi128","value":"fn (a: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift 128-bit lanes in `a` right by `imm8` bytes while shifting in zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2899983,"byte_end":2899992,"line_start":2547,"line_end":2547,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2899993,"byte_end":2900027,"line_start":2548,"line_end":2548,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2900079,"byte_end":2900110,"line_start":2550,"line_end":2550,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11248},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2900542,"byte_end":2900558,"line_start":2566,"line_end":2566,"column_start":15,"column_end":31},"name":"_mm256_srl_epi16","qualname":"::coresimd::x86::avx2::_mm256_srl_epi16","value":"fn (a: __m256i, count: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 16-bit integers in `a` right by `count` while shifting in\n zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2900443,"byte_end":2900452,"line_start":2563,"line_end":2563,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2900453,"byte_end":2900487,"line_start":2564,"line_end":2564,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11250},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2900847,"byte_end":2900863,"line_start":2575,"line_end":2575,"column_start":15,"column_end":31},"name":"_mm256_srl_epi32","qualname":"::coresimd::x86::avx2::_mm256_srl_epi32","value":"fn (a: __m256i, count: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` right by `count` while shifting in\n zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2900748,"byte_end":2900757,"line_start":2572,"line_end":2572,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2900758,"byte_end":2900792,"line_start":2573,"line_end":2573,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11252},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2901151,"byte_end":2901167,"line_start":2584,"line_end":2584,"column_start":15,"column_end":31},"name":"_mm256_srl_epi64","qualname":"::coresimd::x86::avx2::_mm256_srl_epi64","value":"fn (a: __m256i, count: __m128i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 64-bit integers in `a` right by `count` while shifting in\n zeros.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2901052,"byte_end":2901061,"line_start":2581,"line_end":2581,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2901062,"byte_end":2901096,"line_start":2582,"line_end":2582,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11254},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2901453,"byte_end":2901470,"line_start":2593,"line_end":2593,"column_start":15,"column_end":32},"name":"_mm256_srli_epi16","qualname":"::coresimd::x86::avx2::_mm256_srli_epi16","value":"fn (a: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 16-bit integers in `a` right by `imm8` while shifting in\n zeros\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2901354,"byte_end":2901363,"line_start":2590,"line_end":2590,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2901364,"byte_end":2901398,"line_start":2591,"line_end":2591,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11256},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2901741,"byte_end":2901758,"line_start":2602,"line_end":2602,"column_start":15,"column_end":32},"name":"_mm256_srli_epi32","qualname":"::coresimd::x86::avx2::_mm256_srli_epi32","value":"fn (a: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` right by `imm8` while shifting in\n zeros\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2901642,"byte_end":2901651,"line_start":2599,"line_end":2599,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2901652,"byte_end":2901686,"line_start":2600,"line_end":2600,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11258},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2902028,"byte_end":2902045,"line_start":2611,"line_end":2611,"column_start":15,"column_end":32},"name":"_mm256_srli_epi64","qualname":"::coresimd::x86::avx2::_mm256_srli_epi64","value":"fn (a: __m256i, imm8: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 64-bit integers in `a` right by `imm8` while shifting in\n zeros\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2901929,"byte_end":2901938,"line_start":2608,"line_end":2608,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2901939,"byte_end":2901973,"line_start":2609,"line_end":2609,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11260},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2902371,"byte_end":2902385,"line_start":2620,"line_end":2620,"column_start":15,"column_end":29},"name":"_mm_srlv_epi32","qualname":"::coresimd::x86::avx2::_mm_srlv_epi32","value":"fn (a: __m128i, count: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` right by the amount specified by\n the corresponding element in `count` while shifting in zeros,\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2902271,"byte_end":2902280,"line_start":2617,"line_end":2617,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2902281,"byte_end":2902315,"line_start":2618,"line_end":2618,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11262},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2902728,"byte_end":2902745,"line_start":2629,"line_end":2629,"column_start":15,"column_end":32},"name":"_mm256_srlv_epi32","qualname":"::coresimd::x86::avx2::_mm256_srlv_epi32","value":"fn (a: __m256i, count: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 32-bit integers in `a` right by the amount specified by\n the corresponding element in `count` while shifting in zeros,\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2902628,"byte_end":2902637,"line_start":2626,"line_end":2626,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2902638,"byte_end":2902672,"line_start":2627,"line_end":2627,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11264},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2903091,"byte_end":2903105,"line_start":2638,"line_end":2638,"column_start":15,"column_end":29},"name":"_mm_srlv_epi64","qualname":"::coresimd::x86::avx2::_mm_srlv_epi64","value":"fn (a: __m128i, count: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 64-bit integers in `a` right by the amount specified by\n the corresponding element in `count` while shifting in zeros,\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2902991,"byte_end":2903000,"line_start":2635,"line_end":2635,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2903001,"byte_end":2903035,"line_start":2636,"line_end":2636,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11266},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2903448,"byte_end":2903465,"line_start":2647,"line_end":2647,"column_start":15,"column_end":32},"name":"_mm256_srlv_epi64","qualname":"::coresimd::x86::avx2::_mm256_srlv_epi64","value":"fn (a: __m256i, count: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Shift packed 64-bit integers in `a` right by the amount specified by\n the corresponding element in `count` while shifting in zeros,\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2903348,"byte_end":2903357,"line_start":2644,"line_end":2644,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2903358,"byte_end":2903392,"line_start":2645,"line_end":2645,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11268},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2903809,"byte_end":2903825,"line_start":2657,"line_end":2657,"column_start":15,"column_end":31},"name":"_mm256_sub_epi16","qualname":"::coresimd::x86::avx2::_mm256_sub_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2903710,"byte_end":2903719,"line_start":2654,"line_end":2654,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2903720,"byte_end":2903754,"line_start":2655,"line_end":2655,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11270},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2904102,"byte_end":2904118,"line_start":2665,"line_end":2665,"column_start":15,"column_end":31},"name":"_mm256_sub_epi32","qualname":"::coresimd::x86::avx2::_mm256_sub_epi32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 32-bit integers in `b` from packed 16-bit integers in `a`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2904003,"byte_end":2904012,"line_start":2662,"line_end":2662,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2904013,"byte_end":2904047,"line_start":2663,"line_end":2663,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11272},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2904393,"byte_end":2904409,"line_start":2673,"line_end":2673,"column_start":15,"column_end":31},"name":"_mm256_sub_epi64","qualname":"::coresimd::x86::avx2::_mm256_sub_epi64","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 64-bit integers in `b` from packed 16-bit integers in `a`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2904294,"byte_end":2904303,"line_start":2670,"line_end":2670,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2904304,"byte_end":2904338,"line_start":2671,"line_end":2671,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11274},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2904683,"byte_end":2904698,"line_start":2681,"line_end":2681,"column_start":15,"column_end":30},"name":"_mm256_sub_epi8","qualname":"::coresimd::x86::avx2::_mm256_sub_epi8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 8-bit integers in `b` from packed 16-bit integers in `a`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2904584,"byte_end":2904593,"line_start":2678,"line_end":2678,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2904594,"byte_end":2904628,"line_start":2679,"line_end":2679,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11276},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2904996,"byte_end":2905013,"line_start":2690,"line_end":2690,"column_start":15,"column_end":32},"name":"_mm256_subs_epi16","qualname":"::coresimd::x86::avx2::_mm256_subs_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 16-bit integers in `b` from packed 16-bit integers in\n `a` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2904896,"byte_end":2904905,"line_start":2687,"line_end":2687,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2904906,"byte_end":2904940,"line_start":2688,"line_end":2688,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11278},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2905309,"byte_end":2905325,"line_start":2699,"line_end":2699,"column_start":15,"column_end":31},"name":"_mm256_subs_epi8","qualname":"::coresimd::x86::avx2::_mm256_subs_epi8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 8-bit integers in `b` from packed 8-bit integers in\n `a` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2905209,"byte_end":2905218,"line_start":2696,"line_end":2696,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2905219,"byte_end":2905253,"line_start":2697,"line_end":2697,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11280},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2905631,"byte_end":2905648,"line_start":2708,"line_end":2708,"column_start":15,"column_end":32},"name":"_mm256_subs_epu16","qualname":"::coresimd::x86::avx2::_mm256_subs_epu16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed unsigned 16-bit integers in `b` from packed 16-bit\n integers in `a` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2905530,"byte_end":2905539,"line_start":2705,"line_end":2705,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2905540,"byte_end":2905574,"line_start":2706,"line_end":2706,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11282},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2905955,"byte_end":2905971,"line_start":2717,"line_end":2717,"column_start":15,"column_end":31},"name":"_mm256_subs_epu8","qualname":"::coresimd::x86::avx2::_mm256_subs_epu8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed unsigned 8-bit integers in `b` from packed 8-bit\n integers in `a` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2905854,"byte_end":2905863,"line_start":2714,"line_end":2714,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2905864,"byte_end":2905898,"line_start":2715,"line_end":2715,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11284},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2907499,"byte_end":2907519,"line_start":2762,"line_end":2762,"column_start":15,"column_end":35},"name":"_mm256_unpackhi_epi8","qualname":"::coresimd::x86::avx2::_mm256_unpackhi_epi8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave 8-bit integers from the high half of each\n 128-bit lane in `a` and `b`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2907396,"byte_end":2907405,"line_start":2759,"line_end":2759,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2907406,"byte_end":2907440,"line_start":2760,"line_end":2760,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11286},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2909281,"byte_end":2909301,"line_start":2813,"line_end":2813,"column_start":15,"column_end":35},"name":"_mm256_unpacklo_epi8","qualname":"::coresimd::x86::avx2::_mm256_unpacklo_epi8","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave 8-bit integers from the low half of each\n 128-bit lane of `a` and `b`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2909178,"byte_end":2909187,"line_start":2810,"line_end":2810,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2909188,"byte_end":2909222,"line_start":2811,"line_end":2811,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11288},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2910854,"byte_end":2910875,"line_start":2862,"line_end":2862,"column_start":15,"column_end":36},"name":"_mm256_unpackhi_epi16","qualname":"::coresimd::x86::avx2::_mm256_unpackhi_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave 16-bit integers from the high half of each\n 128-bit lane of `a` and `b`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2910751,"byte_end":2910760,"line_start":2859,"line_end":2859,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2910761,"byte_end":2910795,"line_start":2860,"line_end":2860,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11290},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2912323,"byte_end":2912344,"line_start":2910,"line_end":2910,"column_start":15,"column_end":36},"name":"_mm256_unpacklo_epi16","qualname":"::coresimd::x86::avx2::_mm256_unpacklo_epi16","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave 16-bit integers from the low half of each\n 128-bit lane of `a` and `b`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2912220,"byte_end":2912229,"line_start":2907,"line_end":2907,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2912230,"byte_end":2912264,"line_start":2908,"line_end":2908,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11292},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2913694,"byte_end":2913715,"line_start":2956,"line_end":2956,"column_start":15,"column_end":36},"name":"_mm256_unpackhi_epi32","qualname":"::coresimd::x86::avx2::_mm256_unpackhi_epi32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave 32-bit integers from the high half of each\n 128-bit lane of `a` and `b`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2913592,"byte_end":2913601,"line_start":2953,"line_end":2953,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2913602,"byte_end":2913636,"line_start":2954,"line_end":2954,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11294},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2915030,"byte_end":2915051,"line_start":3002,"line_end":3002,"column_start":15,"column_end":36},"name":"_mm256_unpacklo_epi32","qualname":"::coresimd::x86::avx2::_mm256_unpacklo_epi32","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave 32-bit integers from the low half of each\n 128-bit lane of `a` and `b`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2914928,"byte_end":2914937,"line_start":2999,"line_end":2999,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2914938,"byte_end":2914972,"line_start":3000,"line_end":3000,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11296},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2916309,"byte_end":2916330,"line_start":3045,"line_end":3045,"column_start":15,"column_end":36},"name":"_mm256_unpackhi_epi64","qualname":"::coresimd::x86::avx2::_mm256_unpackhi_epi64","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave 64-bit integers from the high half of each\n 128-bit lane of `a` and `b`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2916207,"byte_end":2916216,"line_start":3042,"line_end":3042,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2916217,"byte_end":2916251,"line_start":3043,"line_end":3043,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11298},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2917565,"byte_end":2917586,"line_start":3087,"line_end":3087,"column_start":15,"column_end":36},"name":"_mm256_unpacklo_epi64","qualname":"::coresimd::x86::avx2::_mm256_unpacklo_epi64","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave 64-bit integers from the low half of each\n 128-bit lane of `a` and `b`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2917463,"byte_end":2917472,"line_start":3084,"line_end":3084,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2917473,"byte_end":2917507,"line_start":3085,"line_end":3085,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11300},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2917911,"byte_end":2917927,"line_start":3097,"line_end":3097,"column_start":15,"column_end":31},"name":"_mm256_xor_si256","qualname":"::coresimd::x86::avx2::_mm256_xor_si256","value":"fn (a: __m256i, b: __m256i) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Compute the bitwise XOR of 256 bits (representing integer data)\n in `a` and `b`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2917812,"byte_end":2917821,"line_start":3094,"line_end":3094,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2917822,"byte_end":2917856,"line_start":3095,"line_end":3095,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11302},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2918368,"byte_end":2918387,"line_start":3109,"line_end":3109,"column_start":15,"column_end":34},"name":"_mm256_extract_epi8","qualname":"::coresimd::x86::avx2::_mm256_extract_epi8","value":"fn (a: __m256i, imm8: i32) -> i8","parent":null,"children":[],"decl_id":null,"docs":" Extract an 8-bit integer from `a`, selected with `imm8`. Returns a 32-bit\n integer containing the zero-extended integer data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2918225,"byte_end":2918234,"line_start":3105,"line_end":3105,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2918235,"byte_end":2918269,"line_start":3106,"line_end":3106,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2918322,"byte_end":2918353,"line_start":3108,"line_end":3108,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11304},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2918837,"byte_end":2918857,"line_start":3122,"line_end":3122,"column_start":15,"column_end":35},"name":"_mm256_extract_epi16","qualname":"::coresimd::x86::avx2::_mm256_extract_epi16","value":"fn (a: __m256i, imm8: i32) -> i16","parent":null,"children":[],"decl_id":null,"docs":" Extract a 16-bit integer from `a`, selected with `imm8`. Returns a 32-bit\n integer containing the zero-extended integer data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2918694,"byte_end":2918703,"line_start":3118,"line_end":3118,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2918704,"byte_end":2918738,"line_start":3119,"line_end":3119,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2918791,"byte_end":2918822,"line_start":3121,"line_end":3121,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11306},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2919170,"byte_end":2919190,"line_start":3132,"line_end":3132,"column_start":15,"column_end":35},"name":"_mm256_extract_epi32","qualname":"::coresimd::x86::avx2::_mm256_extract_epi32","value":"fn (a: __m256i, imm8: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Extract a 32-bit integer from `a`, selected with `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2919027,"byte_end":2919036,"line_start":3128,"line_end":3128,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2919037,"byte_end":2919071,"line_start":3129,"line_end":3129,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2919124,"byte_end":2919155,"line_start":3131,"line_end":3131,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11308},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2919470,"byte_end":2919486,"line_start":3141,"line_end":3141,"column_start":15,"column_end":31},"name":"_mm256_cvtsd_f64","qualname":"::coresimd::x86::avx2::_mm256_cvtsd_f64","value":"fn (a: __m256d) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the first element of the input vector of [4 x double].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2919364,"byte_end":2919373,"line_start":3138,"line_end":3138,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2919374,"byte_end":2919408,"line_start":3139,"line_end":3139,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11310},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2919703,"byte_end":2919723,"line_start":3149,"line_end":3149,"column_start":15,"column_end":35},"name":"_mm256_cvtsi256_si32","qualname":"::coresimd::x86::avx2::_mm256_cvtsi256_si32","value":"fn (a: __m256i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the first element of the input vector of [8 x i32].\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2919598,"byte_end":2919607,"line_start":3146,"line_end":3146,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,118,120,50,46,114,115],"byte_start":2919608,"byte_end":2919642,"line_start":3147,"line_end":3147,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11318},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,98,109,46,114,115],"byte_start":2998976,"byte_end":2998986,"line_start":29,"line_end":29,"column_start":15,"column_end":25},"name":"_lzcnt_u32","qualname":"::coresimd::x86::abm::_lzcnt_u32","value":"fn (x: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Counts the leading most significant zero bits.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,98,109,46,114,115],"byte_start":2998877,"byte_end":2998886,"line_start":26,"line_end":26,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"lzcnt\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,98,109,46,114,115],"byte_start":2998887,"byte_end":2998922,"line_start":27,"line_end":27,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":11320},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,98,109,46,114,115],"byte_start":2999164,"byte_end":2999173,"line_start":37,"line_end":37,"column_start":15,"column_end":24},"name":"_popcnt32","qualname":"::coresimd::x86::abm::_popcnt32","value":"fn (x: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Counts the bits that are set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,98,109,46,114,115],"byte_start":2999063,"byte_end":2999072,"line_start":34,"line_end":34,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"popcnt\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,98,109,46,114,115],"byte_start":2999073,"byte_end":2999109,"line_start":35,"line_end":35,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":11326},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3000388,"byte_end":3000398,"line_start":20,"line_end":20,"column_start":15,"column_end":25},"name":"_bextr_u32","qualname":"::coresimd::x86::bmi::_bextr_u32","value":"fn (a: u32, start: u32, len: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Extracts bits in range [`start`, `start` + `length`) from `a` into\n the least significant bits of the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3000290,"byte_end":3000299,"line_start":17,"line_end":17,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3000300,"byte_end":3000334,"line_start":18,"line_end":18,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11328},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3000857,"byte_end":3000868,"line_start":32,"line_end":32,"column_start":15,"column_end":26},"name":"_bextr2_u32","qualname":"::coresimd::x86::bmi::_bextr2_u32","value":"fn (a: u32, control: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Extracts bits of `a` specified by `control` into\n the least significant bits of the result.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3000759,"byte_end":3000768,"line_start":29,"line_end":29,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3000769,"byte_end":3000803,"line_start":30,"line_end":30,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11330},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3001085,"byte_end":3001094,"line_start":40,"line_end":40,"column_start":15,"column_end":24},"name":"_andn_u32","qualname":"::coresimd::x86::bmi::_andn_u32","value":"fn (a: u32, b: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Bitwise logical `AND` of inverted `a` with `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3000988,"byte_end":3000997,"line_start":37,"line_end":37,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3000998,"byte_end":3001032,"line_start":38,"line_end":38,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11332},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3001268,"byte_end":3001277,"line_start":48,"line_end":48,"column_start":15,"column_end":24},"name":"_blsi_u32","qualname":"::coresimd::x86::bmi::_blsi_u32","value":"fn (x: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Extract lowest set isolated bit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3001171,"byte_end":3001180,"line_start":45,"line_end":45,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3001181,"byte_end":3001215,"line_start":46,"line_end":46,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11334},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3001457,"byte_end":3001468,"line_start":56,"line_end":56,"column_start":15,"column_end":26},"name":"_blsmsk_u32","qualname":"::coresimd::x86::bmi::_blsmsk_u32","value":"fn (x: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get mask up to lowest set bit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3001358,"byte_end":3001367,"line_start":53,"line_end":53,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3001368,"byte_end":3001402,"line_start":54,"line_end":54,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11336},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3001683,"byte_end":3001692,"line_start":66,"line_end":66,"column_start":15,"column_end":24},"name":"_blsr_u32","qualname":"::coresimd::x86::bmi::_blsr_u32","value":"fn (x: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Resets the lowest set bit of `x`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3001586,"byte_end":3001595,"line_start":63,"line_end":63,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3001596,"byte_end":3001630,"line_start":64,"line_end":64,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11338},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3001969,"byte_end":3001979,"line_start":76,"line_end":76,"column_start":15,"column_end":25},"name":"_tzcnt_u32","qualname":"::coresimd::x86::bmi::_tzcnt_u32","value":"fn (x: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of trailing least significant zero bits.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3001871,"byte_end":3001880,"line_start":73,"line_end":73,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3001881,"byte_end":3001915,"line_start":74,"line_end":74,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11340},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3002251,"byte_end":3002263,"line_start":86,"line_end":86,"column_start":15,"column_end":27},"name":"_mm_tzcnt_32","qualname":"::coresimd::x86::bmi::_mm_tzcnt_32","value":"fn (x: u32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of trailing least significant zero bits.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3002153,"byte_end":3002162,"line_start":83,"line_end":83,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,46,114,115],"byte_start":3002163,"byte_end":3002197,"line_start":84,"line_end":84,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11348},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,50,46,114,115],"byte_start":3005176,"byte_end":3005185,"line_start":25,"line_end":25,"column_start":15,"column_end":24},"name":"_mulx_u32","qualname":"::coresimd::x86::bmi2::_mulx_u32","value":"fn (a: u32, b: u32, hi: &mut u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Unsigned multiply without affecting flags.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,50,46,114,115],"byte_start":3004911,"byte_end":3004920,"line_start":20,"line_end":20,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,50,46,114,115],"byte_start":3005127,"byte_end":3005161,"line_start":24,"line_end":24,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11350},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,50,46,114,115],"byte_start":3005463,"byte_end":3005472,"line_start":35,"line_end":35,"column_start":15,"column_end":24},"name":"_bzhi_u32","qualname":"::coresimd::x86::bmi2::_bzhi_u32","value":"fn (a: u32, index: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Zero higher bits of `a` >= `index`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,50,46,114,115],"byte_start":3005366,"byte_end":3005375,"line_start":32,"line_end":32,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,50,46,114,115],"byte_start":3005376,"byte_end":3005410,"line_start":33,"line_end":33,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11352},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,50,46,114,115],"byte_start":3005738,"byte_end":3005747,"line_start":44,"line_end":44,"column_start":15,"column_end":24},"name":"_pdep_u32","qualname":"::coresimd::x86::bmi2::_pdep_u32","value":"fn (a: u32, mask: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Scatter contiguous low order bits of `a` to the result at the positions\n specified by the `mask`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,50,46,114,115],"byte_start":3005641,"byte_end":3005650,"line_start":41,"line_end":41,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,50,46,114,115],"byte_start":3005651,"byte_end":3005685,"line_start":42,"line_end":42,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11354},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,50,46,114,115],"byte_start":3006021,"byte_end":3006030,"line_start":53,"line_end":53,"column_start":15,"column_end":24},"name":"_pext_u32","qualname":"::coresimd::x86::bmi2::_pext_u32","value":"fn (a: u32, mask: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the bits of `x` specified by the `mask` into the contiguous low\n order bit positions of the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,50,46,114,115],"byte_start":3005924,"byte_end":3005933,"line_start":50,"line_end":50,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,98,109,105,50,46,114,115],"byte_start":3005934,"byte_end":3005968,"line_start":51,"line_end":51,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11370},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,97,46,114,115],"byte_start":3009087,"byte_end":3009103,"line_start":39,"line_end":39,"column_start":15,"column_end":31},"name":"_mm_extract_si64","qualname":"::coresimd::x86::sse4a::_mm_extract_si64","value":"fn (x: __m128i, y: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Extracts the bit range specified by `y` from the lower 64 bits of `x`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,97,46,114,115],"byte_start":3008988,"byte_end":3008997,"line_start":36,"line_end":36,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4a\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,97,46,114,115],"byte_start":3008998,"byte_end":3009033,"line_start":37,"line_end":37,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":11372},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,97,46,114,115],"byte_start":3009606,"byte_end":3009621,"line_start":55,"line_end":55,"column_start":15,"column_end":30},"name":"_mm_insert_si64","qualname":"::coresimd::x86::sse4a::_mm_insert_si64","value":"fn (x: __m128i, y: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Inserts the `[length:0]` bits of `y` into `x` at `index`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,97,46,114,115],"byte_start":3009505,"byte_end":3009514,"line_start":52,"line_end":52,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4a\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,97,46,114,115],"byte_start":3009515,"byte_end":3009550,"line_start":53,"line_end":53,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":11374},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,97,46,114,115],"byte_start":3009861,"byte_end":3009874,"line_start":63,"line_end":63,"column_start":15,"column_end":28},"name":"_mm_stream_sd","qualname":"::coresimd::x86::sse4a::_mm_stream_sd","value":"fn (p: *mut f64, a: __m128d) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Non-temporal store of `a.0` into `p`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,97,46,114,115],"byte_start":3009760,"byte_end":3009769,"line_start":60,"line_end":60,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4a\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,97,46,114,115],"byte_start":3009770,"byte_end":3009805,"line_start":61,"line_end":61,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":11376},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,97,46,114,115],"byte_start":3010067,"byte_end":3010080,"line_start":71,"line_end":71,"column_start":15,"column_end":28},"name":"_mm_stream_ss","qualname":"::coresimd::x86::sse4a::_mm_stream_ss","value":"fn (p: *mut f32, a: __m128) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Non-temporal store of `a.0` into `p`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,97,46,114,115],"byte_start":3009966,"byte_end":3009975,"line_start":68,"line_end":68,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4a\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,115,115,101,52,97,46,114,115],"byte_start":3009976,"byte_end":3010011,"line_start":69,"line_end":69,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":11382},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3014755,"byte_end":3014767,"line_start":73,"line_end":73,"column_start":15,"column_end":27},"name":"_blcfill_u32","qualname":"::coresimd::x86::tbm::_blcfill_u32","value":"fn (x: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Clears all bits below the least significant zero bit of `x`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3014656,"byte_end":3014665,"line_start":70,"line_end":70,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3014666,"byte_end":3014699,"line_start":71,"line_end":71,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11384},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3015104,"byte_end":3015116,"line_start":84,"line_end":84,"column_start":15,"column_end":27},"name":"_blcfill_u64","qualname":"::coresimd::x86::tbm::_blcfill_u64","value":"fn (x: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Clears all bits below the least significant zero bit of `x`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3014938,"byte_end":3014947,"line_start":80,"line_end":80,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3014948,"byte_end":3014981,"line_start":81,"line_end":81,"column_start":1,"column_end":34}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3015023,"byte_end":3015055,"line_start":83,"line_end":83,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11386},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3015392,"byte_end":3015401,"line_start":94,"line_end":94,"column_start":15,"column_end":24},"name":"_blci_u32","qualname":"::coresimd::x86::tbm::_blci_u32","value":"fn (x: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Sets all bits of `x` to 1 except for the least significant zero bit.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3015296,"byte_end":3015305,"line_start":91,"line_end":91,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3015306,"byte_end":3015339,"line_start":92,"line_end":92,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11388},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3015745,"byte_end":3015754,"line_start":105,"line_end":105,"column_start":15,"column_end":24},"name":"_blci_u64","qualname":"::coresimd::x86::tbm::_blci_u64","value":"fn (x: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Sets all bits of `x` to 1 except for the least significant zero bit.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3015582,"byte_end":3015591,"line_start":101,"line_end":101,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3015592,"byte_end":3015625,"line_start":102,"line_end":102,"column_start":1,"column_end":34}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3015664,"byte_end":3015696,"line_start":104,"line_end":104,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11390},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3016032,"byte_end":3016042,"line_start":115,"line_end":115,"column_start":15,"column_end":25},"name":"_blcic_u32","qualname":"::coresimd::x86::tbm::_blcic_u32","value":"fn (x: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Sets the least significant zero bit of `x` and clears all other bits.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3015935,"byte_end":3015944,"line_start":112,"line_end":112,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3015945,"byte_end":3015978,"line_start":113,"line_end":113,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11392},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3016387,"byte_end":3016397,"line_start":126,"line_end":126,"column_start":15,"column_end":25},"name":"_blcic_u64","qualname":"::coresimd::x86::tbm::_blcic_u64","value":"fn (x: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Sets the least significant zero bit of `x` and clears all other bits.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3016223,"byte_end":3016232,"line_start":122,"line_end":122,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3016233,"byte_end":3016266,"line_start":123,"line_end":123,"column_start":1,"column_end":34}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3016306,"byte_end":3016338,"line_start":125,"line_end":125,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11394},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3016694,"byte_end":3016705,"line_start":137,"line_end":137,"column_start":15,"column_end":26},"name":"_blcmsk_u32","qualname":"::coresimd::x86::tbm::_blcmsk_u32","value":"fn (x: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Sets the least significant zero bit of `x` and clears all bits above\n that bit.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3016596,"byte_end":3016605,"line_start":134,"line_end":134,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3016606,"byte_end":3016639,"line_start":135,"line_end":135,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11396},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3017068,"byte_end":3017079,"line_start":149,"line_end":149,"column_start":15,"column_end":26},"name":"_blcmsk_u64","qualname":"::coresimd::x86::tbm::_blcmsk_u64","value":"fn (x: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Sets the least significant zero bit of `x` and clears all bits above\n that bit.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3016903,"byte_end":3016912,"line_start":145,"line_end":145,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3016913,"byte_end":3016946,"line_start":146,"line_end":146,"column_start":1,"column_end":34}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3016987,"byte_end":3017019,"line_start":148,"line_end":148,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11398},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3017328,"byte_end":3017337,"line_start":159,"line_end":159,"column_start":15,"column_end":24},"name":"_blcs_u32","qualname":"::coresimd::x86::tbm::_blcs_u32","value":"fn (x: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Sets the least significant zero bit of `x`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3017232,"byte_end":3017241,"line_start":156,"line_end":156,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3017242,"byte_end":3017275,"line_start":157,"line_end":157,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11400},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3017653,"byte_end":3017662,"line_start":170,"line_end":170,"column_start":15,"column_end":24},"name":"_blcs_u64","qualname":"::coresimd::x86::tbm::_blcs_u64","value":"fn (x: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Sets the least significant zero bit of `x`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3017490,"byte_end":3017499,"line_start":166,"line_end":166,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3017500,"byte_end":3017533,"line_start":167,"line_end":167,"column_start":1,"column_end":34}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3017572,"byte_end":3017604,"line_start":169,"line_end":169,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11402},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3017927,"byte_end":3017939,"line_start":180,"line_end":180,"column_start":15,"column_end":27},"name":"_blsfill_u32","qualname":"::coresimd::x86::tbm::_blsfill_u32","value":"fn (x: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Sets all bits of `x` below the least significant one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3017828,"byte_end":3017837,"line_start":177,"line_end":177,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3017838,"byte_end":3017871,"line_start":178,"line_end":178,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11404},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3018273,"byte_end":3018285,"line_start":191,"line_end":191,"column_start":15,"column_end":27},"name":"_blsfill_u64","qualname":"::coresimd::x86::tbm::_blsfill_u64","value":"fn (x: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Sets all bits of `x` below the least significant one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3018107,"byte_end":3018116,"line_start":187,"line_end":187,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3018117,"byte_end":3018150,"line_start":188,"line_end":188,"column_start":1,"column_end":34}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3018192,"byte_end":3018224,"line_start":190,"line_end":190,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11406},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3018550,"byte_end":3018560,"line_start":201,"line_end":201,"column_start":15,"column_end":25},"name":"_blsic_u32","qualname":"::coresimd::x86::tbm::_blsic_u32","value":"fn (x: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Clears least significant bit and sets all other bits.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3018453,"byte_end":3018462,"line_start":198,"line_end":198,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3018463,"byte_end":3018496,"line_start":199,"line_end":199,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11408},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3018893,"byte_end":3018903,"line_start":212,"line_end":212,"column_start":15,"column_end":25},"name":"_blsic_u64","qualname":"::coresimd::x86::tbm::_blsic_u64","value":"fn (x: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Clears least significant bit and sets all other bits.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3018729,"byte_end":3018738,"line_start":208,"line_end":208,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3018739,"byte_end":3018772,"line_start":209,"line_end":209,"column_start":1,"column_end":34}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3018812,"byte_end":3018844,"line_start":211,"line_end":211,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11410},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3019208,"byte_end":3019219,"line_start":223,"line_end":223,"column_start":15,"column_end":26},"name":"_t1mskc_u32","qualname":"::coresimd::x86::tbm::_t1mskc_u32","value":"fn (x: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Clears all bits below the least significant zero of `x` and sets all other\n bits.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3019110,"byte_end":3019119,"line_start":220,"line_end":220,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3019120,"byte_end":3019153,"line_start":221,"line_end":221,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11412},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3019591,"byte_end":3019602,"line_start":235,"line_end":235,"column_start":15,"column_end":26},"name":"_t1mskc_u64","qualname":"::coresimd::x86::tbm::_t1mskc_u64","value":"fn (x: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Clears all bits below the least significant zero of `x` and sets all other\n bits.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3019426,"byte_end":3019435,"line_start":231,"line_end":231,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3019436,"byte_end":3019469,"line_start":232,"line_end":232,"column_start":1,"column_end":34}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3019510,"byte_end":3019542,"line_start":234,"line_end":234,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11414},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3019904,"byte_end":3019914,"line_start":246,"line_end":246,"column_start":15,"column_end":25},"name":"_tzmsk_u32","qualname":"::coresimd::x86::tbm::_tzmsk_u32","value":"fn (x: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Sets all bits below the least significant one of `x` and clears all other\n bits.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3019807,"byte_end":3019816,"line_start":243,"line_end":243,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3019817,"byte_end":3019850,"line_start":244,"line_end":244,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11416},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3020283,"byte_end":3020293,"line_start":258,"line_end":258,"column_start":15,"column_end":25},"name":"_tzmsk_u64","qualname":"::coresimd::x86::tbm::_tzmsk_u64","value":"fn (x: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Sets all bits below the least significant one of `x` and clears all other\n bits.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3020119,"byte_end":3020128,"line_start":254,"line_end":254,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"tbm\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3020129,"byte_end":3020162,"line_start":255,"line_end":255,"column_start":1,"column_end":34}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,116,98,109,46,114,115],"byte_start":3020202,"byte_end":3020234,"line_start":257,"line_end":257,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11428},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3026663,"byte_end":3026679,"line_start":24,"line_end":24,"column_start":15,"column_end":31},"name":"_mm_setzero_si64","qualname":"::coresimd::x86::mmx::_mm_setzero_si64","value":"fn () -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 64-bit integer vector initialized to zero.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3026417,"byte_end":3026426,"line_start":19,"line_end":19,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3026427,"byte_end":3026460,"line_start":20,"line_end":20,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11430},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3026865,"byte_end":3026876,"line_start":32,"line_end":32,"column_start":15,"column_end":26},"name":"_mm_add_pi8","qualname":"::coresimd::x86::mmx::_mm_add_pi8","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Add packed 8-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3026768,"byte_end":3026777,"line_start":29,"line_end":29,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3026778,"byte_end":3026811,"line_start":30,"line_end":30,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11432},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3027070,"byte_end":3027078,"line_start":40,"line_end":40,"column_start":15,"column_end":23},"name":"_m_paddb","qualname":"::coresimd::x86::mmx::_m_paddb","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Add packed 8-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3026973,"byte_end":3026982,"line_start":37,"line_end":37,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3026983,"byte_end":3027016,"line_start":38,"line_end":38,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11434},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3027279,"byte_end":3027291,"line_start":48,"line_end":48,"column_start":15,"column_end":27},"name":"_mm_add_pi16","qualname":"::coresimd::x86::mmx::_mm_add_pi16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Add packed 16-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3027182,"byte_end":3027191,"line_start":45,"line_end":45,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3027192,"byte_end":3027225,"line_start":46,"line_end":46,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11436},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3027486,"byte_end":3027494,"line_start":56,"line_end":56,"column_start":15,"column_end":23},"name":"_m_paddw","qualname":"::coresimd::x86::mmx::_m_paddw","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Add packed 16-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3027389,"byte_end":3027398,"line_start":53,"line_end":53,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3027399,"byte_end":3027432,"line_start":54,"line_end":54,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11438},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3027696,"byte_end":3027708,"line_start":64,"line_end":64,"column_start":15,"column_end":27},"name":"_mm_add_pi32","qualname":"::coresimd::x86::mmx::_mm_add_pi32","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Add packed 32-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3027599,"byte_end":3027608,"line_start":61,"line_end":61,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3027609,"byte_end":3027642,"line_start":62,"line_end":62,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11440},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3027903,"byte_end":3027911,"line_start":72,"line_end":72,"column_start":15,"column_end":23},"name":"_m_paddd","qualname":"::coresimd::x86::mmx::_m_paddd","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Add packed 32-bit integers in `a` and `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3027806,"byte_end":3027815,"line_start":69,"line_end":69,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3027816,"byte_end":3027849,"line_start":70,"line_end":70,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11442},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3028130,"byte_end":3028142,"line_start":80,"line_end":80,"column_start":15,"column_end":27},"name":"_mm_adds_pi8","qualname":"::coresimd::x86::mmx::_mm_adds_pi8","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Add packed 8-bit integers in `a` and `b` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3028032,"byte_end":3028041,"line_start":77,"line_end":77,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3028042,"byte_end":3028075,"line_start":78,"line_end":78,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11444},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3028355,"byte_end":3028364,"line_start":88,"line_end":88,"column_start":15,"column_end":24},"name":"_m_paddsb","qualname":"::coresimd::x86::mmx::_m_paddsb","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Add packed 8-bit integers in `a` and `b` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3028257,"byte_end":3028266,"line_start":85,"line_end":85,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3028267,"byte_end":3028300,"line_start":86,"line_end":86,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11446},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3028584,"byte_end":3028597,"line_start":96,"line_end":96,"column_start":15,"column_end":28},"name":"_mm_adds_pi16","qualname":"::coresimd::x86::mmx::_mm_adds_pi16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Add packed 16-bit integers in `a` and `b` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3028486,"byte_end":3028495,"line_start":93,"line_end":93,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3028496,"byte_end":3028529,"line_start":94,"line_end":94,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11448},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3028811,"byte_end":3028820,"line_start":104,"line_end":104,"column_start":15,"column_end":24},"name":"_m_paddsw","qualname":"::coresimd::x86::mmx::_m_paddsw","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Add packed 16-bit integers in `a` and `b` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3028713,"byte_end":3028722,"line_start":101,"line_end":101,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3028723,"byte_end":3028756,"line_start":102,"line_end":102,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11450},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3029050,"byte_end":3029062,"line_start":112,"line_end":112,"column_start":15,"column_end":27},"name":"_mm_adds_pu8","qualname":"::coresimd::x86::mmx::_mm_adds_pu8","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Add packed unsigned 8-bit integers in `a` and `b` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3028951,"byte_end":3028960,"line_start":109,"line_end":109,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3028961,"byte_end":3028994,"line_start":110,"line_end":110,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11452},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3029286,"byte_end":3029296,"line_start":120,"line_end":120,"column_start":15,"column_end":25},"name":"_m_paddusb","qualname":"::coresimd::x86::mmx::_m_paddusb","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Add packed unsigned 8-bit integers in `a` and `b` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3029187,"byte_end":3029196,"line_start":117,"line_end":117,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3029197,"byte_end":3029230,"line_start":118,"line_end":118,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11454},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3029526,"byte_end":3029539,"line_start":128,"line_end":128,"column_start":15,"column_end":28},"name":"_mm_adds_pu16","qualname":"::coresimd::x86::mmx::_mm_adds_pu16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Add packed unsigned 16-bit integers in `a` and `b` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3029427,"byte_end":3029436,"line_start":125,"line_end":125,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3029437,"byte_end":3029470,"line_start":126,"line_end":126,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11456},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3029764,"byte_end":3029774,"line_start":136,"line_end":136,"column_start":15,"column_end":25},"name":"_m_paddusw","qualname":"::coresimd::x86::mmx::_m_paddusw","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Add packed unsigned 16-bit integers in `a` and `b` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3029665,"byte_end":3029674,"line_start":133,"line_end":133,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3029675,"byte_end":3029708,"line_start":134,"line_end":134,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11458},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3030007,"byte_end":3030018,"line_start":144,"line_end":144,"column_start":15,"column_end":26},"name":"_mm_sub_pi8","qualname":"::coresimd::x86::mmx::_mm_sub_pi8","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3029910,"byte_end":3029919,"line_start":141,"line_end":141,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3029920,"byte_end":3029953,"line_start":142,"line_end":142,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11460},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3030243,"byte_end":3030251,"line_start":152,"line_end":152,"column_start":15,"column_end":23},"name":"_m_psubb","qualname":"::coresimd::x86::mmx::_m_psubb","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3030146,"byte_end":3030155,"line_start":149,"line_end":149,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3030156,"byte_end":3030189,"line_start":150,"line_end":150,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11462},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3030484,"byte_end":3030496,"line_start":160,"line_end":160,"column_start":15,"column_end":27},"name":"_mm_sub_pi16","qualname":"::coresimd::x86::mmx::_mm_sub_pi16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3030387,"byte_end":3030396,"line_start":157,"line_end":157,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3030397,"byte_end":3030430,"line_start":158,"line_end":158,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11464},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3030723,"byte_end":3030731,"line_start":168,"line_end":168,"column_start":15,"column_end":23},"name":"_m_psubw","qualname":"::coresimd::x86::mmx::_m_psubw","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3030626,"byte_end":3030635,"line_start":165,"line_end":165,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3030636,"byte_end":3030669,"line_start":166,"line_end":166,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11466},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3030965,"byte_end":3030977,"line_start":176,"line_end":176,"column_start":15,"column_end":27},"name":"_mm_sub_pi32","qualname":"::coresimd::x86::mmx::_mm_sub_pi32","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 32-bit integers in `b` from packed 32-bit integers in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3030868,"byte_end":3030877,"line_start":173,"line_end":173,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3030878,"byte_end":3030911,"line_start":174,"line_end":174,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11468},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3031204,"byte_end":3031212,"line_start":184,"line_end":184,"column_start":15,"column_end":23},"name":"_m_psubd","qualname":"::coresimd::x86::mmx::_m_psubd","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 32-bit integers in `b` from packed 32-bit integers in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3031107,"byte_end":3031116,"line_start":181,"line_end":181,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3031117,"byte_end":3031150,"line_start":182,"line_end":182,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11470},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3031466,"byte_end":3031478,"line_start":193,"line_end":193,"column_start":15,"column_end":27},"name":"_mm_subs_pi8","qualname":"::coresimd::x86::mmx::_mm_subs_pi8","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a`\n using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3031368,"byte_end":3031377,"line_start":190,"line_end":190,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3031378,"byte_end":3031411,"line_start":191,"line_end":191,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11472},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3031726,"byte_end":3031735,"line_start":202,"line_end":202,"column_start":15,"column_end":24},"name":"_m_psubsb","qualname":"::coresimd::x86::mmx::_m_psubsb","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 8-bit integers in `b` from packed 8-bit integers in `a`\n using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3031628,"byte_end":3031637,"line_start":199,"line_end":199,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3031638,"byte_end":3031671,"line_start":200,"line_end":200,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11474},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3031991,"byte_end":3032004,"line_start":211,"line_end":211,"column_start":15,"column_end":28},"name":"_mm_subs_pi16","qualname":"::coresimd::x86::mmx::_mm_subs_pi16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a`\n using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3031893,"byte_end":3031902,"line_start":208,"line_end":208,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3031903,"byte_end":3031936,"line_start":209,"line_end":209,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11476},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3032254,"byte_end":3032263,"line_start":220,"line_end":220,"column_start":15,"column_end":24},"name":"_m_psubsw","qualname":"::coresimd::x86::mmx::_m_psubsw","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed 16-bit integers in `b` from packed 16-bit integers in `a`\n using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3032156,"byte_end":3032165,"line_start":217,"line_end":217,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3032166,"byte_end":3032199,"line_start":218,"line_end":218,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11478},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3032537,"byte_end":3032549,"line_start":229,"line_end":229,"column_start":15,"column_end":27},"name":"_mm_subs_pu8","qualname":"::coresimd::x86::mmx::_mm_subs_pu8","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed unsigned 8-bit integers in `b` from packed unsigned 8-bit\n integers in `a` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3032438,"byte_end":3032447,"line_start":226,"line_end":226,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3032448,"byte_end":3032481,"line_start":227,"line_end":227,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11480},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3032817,"byte_end":3032827,"line_start":238,"line_end":238,"column_start":15,"column_end":25},"name":"_m_psubusb","qualname":"::coresimd::x86::mmx::_m_psubusb","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed unsigned 8-bit integers in `b` from packed unsigned 8-bit\n integers in `a` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3032718,"byte_end":3032727,"line_start":235,"line_end":235,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3032728,"byte_end":3032761,"line_start":236,"line_end":236,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11482},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3033102,"byte_end":3033115,"line_start":247,"line_end":247,"column_start":15,"column_end":28},"name":"_mm_subs_pu16","qualname":"::coresimd::x86::mmx::_mm_subs_pu16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed unsigned 16-bit integers in `b` from packed unsigned\n 16-bit integers in `a` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3033003,"byte_end":3033012,"line_start":244,"line_end":244,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3033013,"byte_end":3033046,"line_start":245,"line_end":245,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11484},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3033385,"byte_end":3033395,"line_start":256,"line_end":256,"column_start":15,"column_end":25},"name":"_m_psubusw","qualname":"::coresimd::x86::mmx::_m_psubusw","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Subtract packed unsigned 16-bit integers in `b` from packed unsigned\n 16-bit integers in `a` using saturation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3033286,"byte_end":3033295,"line_start":253,"line_end":253,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3033296,"byte_end":3033329,"line_start":254,"line_end":254,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11486},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3033783,"byte_end":3033797,"line_start":268,"line_end":268,"column_start":15,"column_end":29},"name":"_mm_packs_pi16","qualname":"::coresimd::x86::mmx::_mm_packs_pi16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Convert packed 16-bit integers from `a` and `b` to packed 8-bit integers\n using signed saturation.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3033683,"byte_end":3033692,"line_start":265,"line_end":265,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3033693,"byte_end":3033726,"line_start":266,"line_end":266,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11488},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3034181,"byte_end":3034195,"line_start":280,"line_end":280,"column_start":15,"column_end":29},"name":"_mm_packs_pi32","qualname":"::coresimd::x86::mmx::_mm_packs_pi32","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Convert packed 32-bit integers from `a` and `b` to packed 16-bit integers\n using signed saturation.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3034081,"byte_end":3034090,"line_start":277,"line_end":277,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3034091,"byte_end":3034124,"line_start":278,"line_end":278,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11490},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3034489,"byte_end":3034502,"line_start":289,"line_end":289,"column_start":15,"column_end":28},"name":"_mm_cmpgt_pi8","qualname":"::coresimd::x86::mmx::_mm_cmpgt_pi8","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Compares whether each element of `a` is greater than the corresponding\n element of `b` returning `0` for `false` and `-1` for `true`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3034390,"byte_end":3034399,"line_start":286,"line_end":286,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3034400,"byte_end":3034433,"line_start":287,"line_end":287,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11492},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3034795,"byte_end":3034809,"line_start":298,"line_end":298,"column_start":15,"column_end":29},"name":"_mm_cmpgt_pi16","qualname":"::coresimd::x86::mmx::_mm_cmpgt_pi16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Compares whether each element of `a` is greater than the corresponding\n element of `b` returning `0` for `false` and `-1` for `true`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3034696,"byte_end":3034705,"line_start":295,"line_end":295,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3034706,"byte_end":3034739,"line_start":296,"line_end":296,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11494},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3035102,"byte_end":3035116,"line_start":307,"line_end":307,"column_start":15,"column_end":29},"name":"_mm_cmpgt_pi32","qualname":"::coresimd::x86::mmx::_mm_cmpgt_pi32","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Compares whether each element of `a` is greater than the corresponding\n element of `b` returning `0` for `false` and `-1` for `true`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3035003,"byte_end":3035012,"line_start":304,"line_end":304,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3035013,"byte_end":3035046,"line_start":305,"line_end":305,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11496},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3035424,"byte_end":3035441,"line_start":316,"line_end":316,"column_start":15,"column_end":32},"name":"_mm_unpackhi_pi16","qualname":"::coresimd::x86::mmx::_mm_unpackhi_pi16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Unpacks the upper two elements from two `i16x4` vectors and interleaves\n them into the result: `[a.2, b.2, a.3, b.3]`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3035295,"byte_end":3035304,"line_start":313,"line_end":313,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3035305,"byte_end":3035338,"line_start":314,"line_end":314,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11498},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3035743,"byte_end":3035759,"line_start":325,"line_end":325,"column_start":15,"column_end":31},"name":"_mm_unpackhi_pi8","qualname":"::coresimd::x86::mmx::_mm_unpackhi_pi8","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Unpacks the upper four elements from two `i8x8` vectors and interleaves\n them into the result: `[a.4, b.4, a.5, b.5, a.6, b.6, a.7, b.7]`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3035642,"byte_end":3035651,"line_start":322,"line_end":322,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3035652,"byte_end":3035685,"line_start":323,"line_end":323,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11500},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3036061,"byte_end":3036077,"line_start":334,"line_end":334,"column_start":15,"column_end":31},"name":"_mm_unpacklo_pi8","qualname":"::coresimd::x86::mmx::_mm_unpacklo_pi8","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Unpacks the lower four elements from two `i8x8` vectors and interleaves\n them into the result: `[a.0, b.0, a.1, b.1, a.2, b.2, a.3, b.3]`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3035960,"byte_end":3035969,"line_start":331,"line_end":331,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3035970,"byte_end":3036003,"line_start":332,"line_end":332,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11502},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3036356,"byte_end":3036373,"line_start":343,"line_end":343,"column_start":15,"column_end":32},"name":"_mm_unpacklo_pi16","qualname":"::coresimd::x86::mmx::_mm_unpacklo_pi16","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Unpacks the lower two elements from two `i16x4` vectors and interleaves\n them into the result: `[a.0 b.0 a.1 b.1]`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3036255,"byte_end":3036264,"line_start":340,"line_end":340,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3036265,"byte_end":3036298,"line_start":341,"line_end":341,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11504},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3036640,"byte_end":3036657,"line_start":352,"line_end":352,"column_start":15,"column_end":32},"name":"_mm_unpackhi_pi32","qualname":"::coresimd::x86::mmx::_mm_unpackhi_pi32","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Unpacks the upper element from two `i32x2` vectors and interleaves them\n into the result: `[a.1, b.1]`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3036539,"byte_end":3036548,"line_start":349,"line_end":349,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3036549,"byte_end":3036582,"line_start":350,"line_end":350,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11506},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3036924,"byte_end":3036941,"line_start":361,"line_end":361,"column_start":15,"column_end":32},"name":"_mm_unpacklo_pi32","qualname":"::coresimd::x86::mmx::_mm_unpacklo_pi32","value":"fn (a: __m64, b: __m64) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Unpacks the lower element from two `i32x2` vectors and interleaves them\n into the result: `[a.0, b.0]`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3036823,"byte_end":3036832,"line_start":358,"line_end":358,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3036833,"byte_end":3036866,"line_start":359,"line_end":359,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11508},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3037118,"byte_end":3037130,"line_start":368,"line_end":368,"column_start":15,"column_end":27},"name":"_mm_set_pi16","qualname":"::coresimd::x86::mmx::_mm_set_pi16","value":"fn (e3: i16, e2: i16, e1: i16, e0: i16) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Set packed 16-bit integers in dst with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3037060,"byte_end":3037069,"line_start":366,"line_end":366,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3037070,"byte_end":3037103,"line_start":367,"line_end":367,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11510},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3037337,"byte_end":3037349,"line_start":375,"line_end":375,"column_start":15,"column_end":27},"name":"_mm_set_pi32","qualname":"::coresimd::x86::mmx::_mm_set_pi32","value":"fn (e1: i32, e0: i32) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Set packed 32-bit integers in dst with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3037279,"byte_end":3037288,"line_start":373,"line_end":373,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3037289,"byte_end":3037322,"line_start":374,"line_end":374,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11512},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3037529,"byte_end":3037540,"line_start":382,"line_end":382,"column_start":15,"column_end":26},"name":"_mm_set_pi8","qualname":"::coresimd::x86::mmx::_mm_set_pi8","value":"fn (e7: i8, e6: i8, e5: i8, e4: i8, e3: i8, e2: i8, e1: i8, e0: i8) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Set packed 8-bit integers in dst with the supplied values.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3037471,"byte_end":3037480,"line_start":380,"line_end":380,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3037481,"byte_end":3037514,"line_start":381,"line_end":381,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11514},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3037791,"byte_end":3037804,"line_start":391,"line_end":391,"column_start":15,"column_end":28},"name":"_mm_set1_pi16","qualname":"::coresimd::x86::mmx::_mm_set1_pi16","value":"fn (a: i16) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Broadcast 16-bit integer a to all all elements of dst.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3037733,"byte_end":3037742,"line_start":389,"line_end":389,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3037743,"byte_end":3037776,"line_start":390,"line_end":390,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11516},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3037974,"byte_end":3037987,"line_start":398,"line_end":398,"column_start":15,"column_end":28},"name":"_mm_set1_pi32","qualname":"::coresimd::x86::mmx::_mm_set1_pi32","value":"fn (a: i32) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Broadcast 32-bit integer a to all all elements of dst.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3037916,"byte_end":3037925,"line_start":396,"line_end":396,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3037926,"byte_end":3037959,"line_start":397,"line_end":397,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11518},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3038150,"byte_end":3038162,"line_start":405,"line_end":405,"column_start":15,"column_end":27},"name":"_mm_set1_pi8","qualname":"::coresimd::x86::mmx::_mm_set1_pi8","value":"fn (a: i8) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Broadcast 8-bit integer a to all all elements of dst.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3038092,"byte_end":3038101,"line_start":403,"line_end":403,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3038102,"byte_end":3038135,"line_start":404,"line_end":404,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11520},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3038368,"byte_end":3038381,"line_start":413,"line_end":413,"column_start":15,"column_end":28},"name":"_mm_setr_pi16","qualname":"::coresimd::x86::mmx::_mm_setr_pi16","value":"fn (e0: i16, e1: i16, e2: i16, e3: i16) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Set packed 16-bit integers in dst with the supplied values in reverse\n order.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3038310,"byte_end":3038319,"line_start":411,"line_end":411,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3038320,"byte_end":3038353,"line_start":412,"line_end":412,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11522},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3038622,"byte_end":3038635,"line_start":421,"line_end":421,"column_start":15,"column_end":28},"name":"_mm_setr_pi32","qualname":"::coresimd::x86::mmx::_mm_setr_pi32","value":"fn (e0: i32, e1: i32) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Set packed 32-bit integers in dst with the supplied values in reverse\n order.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3038564,"byte_end":3038573,"line_start":419,"line_end":419,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3038574,"byte_end":3038607,"line_start":420,"line_end":420,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11524},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3038845,"byte_end":3038857,"line_start":428,"line_end":428,"column_start":15,"column_end":27},"name":"_mm_setr_pi8","qualname":"::coresimd::x86::mmx::_mm_setr_pi8","value":"fn (e0: i8, e1: i8, e2: i8, e3: i8, e4: i8, e5: i8, e6: i8, e7: i8) -> __m64","parent":null,"children":[],"decl_id":null,"docs":" Set packed 8-bit integers in dst with the supplied values in reverse order.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3038787,"byte_end":3038796,"line_start":426,"line_end":426,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"mmx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,109,120,46,114,115],"byte_start":3038797,"byte_end":3038830,"line_start":427,"line_end":427,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11536},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,112,99,108,109,117,108,113,100,113,46,114,115],"byte_start":3050838,"byte_end":3050858,"line_start":37,"line_end":37,"column_start":15,"column_end":35},"name":"_mm_clmulepi64_si128","qualname":"::coresimd::x86::pclmulqdq::_mm_clmulepi64_si128","value":"fn (a: __m128i, b: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Perform a carry-less multiplication of two 64-bit polynomials over the\n finite field GF(2^k).","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,112,99,108,109,117,108,113,100,113,46,114,115],"byte_start":3050273,"byte_end":3050282,"line_start":24,"line_end":24,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"pclmulqdq\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,112,99,108,109,117,108,113,100,113,46,114,115],"byte_start":3050283,"byte_end":3050322,"line_start":25,"line_end":25,"column_start":1,"column_end":40}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,112,99,108,109,117,108,113,100,113,46,114,115],"byte_start":3050792,"byte_end":3050823,"line_start":36,"line_end":36,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11548},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3053824,"byte_end":3053840,"line_start":35,"line_end":35,"column_start":15,"column_end":31},"name":"_mm_aesdec_si128","qualname":"::coresimd::x86::aes::_mm_aesdec_si128","value":"fn (a: __m128i, round_key: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Perform one round of an AES decryption flow on data (state) in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3053726,"byte_end":3053735,"line_start":32,"line_end":32,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"aes\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3053736,"byte_end":3053769,"line_start":33,"line_end":33,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11550},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3054093,"byte_end":3054113,"line_start":43,"line_end":43,"column_start":15,"column_end":35},"name":"_mm_aesdeclast_si128","qualname":"::coresimd::x86::aes::_mm_aesdeclast_si128","value":"fn (a: __m128i, round_key: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Perform the last round of an AES decryption flow on data (state) in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3053991,"byte_end":3054000,"line_start":40,"line_end":40,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"aes\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3054001,"byte_end":3054034,"line_start":41,"line_end":41,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11552},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3054361,"byte_end":3054377,"line_start":51,"line_end":51,"column_start":15,"column_end":31},"name":"_mm_aesenc_si128","qualname":"::coresimd::x86::aes::_mm_aesenc_si128","value":"fn (a: __m128i, round_key: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Perform one round of an AES encryption flow on data (state) in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3054263,"byte_end":3054272,"line_start":48,"line_end":48,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"aes\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3054273,"byte_end":3054306,"line_start":49,"line_end":49,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11554},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3054630,"byte_end":3054650,"line_start":59,"line_end":59,"column_start":15,"column_end":35},"name":"_mm_aesenclast_si128","qualname":"::coresimd::x86::aes::_mm_aesenclast_si128","value":"fn (a: __m128i, round_key: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Perform the last round of an AES encryption flow on data (state) in `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3054528,"byte_end":3054537,"line_start":56,"line_end":56,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"aes\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3054538,"byte_end":3054571,"line_start":57,"line_end":57,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11556},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3054881,"byte_end":3054897,"line_start":67,"line_end":67,"column_start":15,"column_end":31},"name":"_mm_aesimc_si128","qualname":"::coresimd::x86::aes::_mm_aesimc_si128","value":"fn (a: __m128i) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Perform the `InvMixColumns` transformation on `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3054783,"byte_end":3054792,"line_start":64,"line_end":64,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"aes\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3054793,"byte_end":3054826,"line_start":65,"line_end":65,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11558},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3055316,"byte_end":3055341,"line_start":80,"line_end":80,"column_start":15,"column_end":40},"name":"_mm_aeskeygenassist_si128","qualname":"::coresimd::x86::aes::_mm_aeskeygenassist_si128","value":"fn (a: __m128i, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Assist in expanding the AES cipher key.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3055167,"byte_end":3055176,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"aes\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3055177,"byte_end":3055210,"line_start":77,"line_end":77,"column_start":1,"column_end":34}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,97,101,115,46,114,115],"byte_start":3055270,"byte_end":3055301,"line_start":79,"line_end":79,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11568},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,114,100,114,97,110,100,46,114,115],"byte_start":3059131,"byte_end":3059145,"line_start":21,"line_end":21,"column_start":15,"column_end":29},"name":"_rdrand16_step","qualname":"::coresimd::x86::rdrand::_rdrand16_step","value":"fn (val: &mut u16) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Read a hardware generated 16-bit random value and store the result in val.\n Return 1 if a random value was generated, and 0 otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,114,100,114,97,110,100,46,114,115],"byte_start":3058976,"byte_end":3058985,"line_start":17,"line_end":17,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"rdrand\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,114,100,114,97,110,100,46,114,115],"byte_start":3058986,"byte_end":3059022,"line_start":18,"line_end":18,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":11570},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,114,100,114,97,110,100,46,114,115],"byte_start":3059534,"byte_end":3059548,"line_start":33,"line_end":33,"column_start":15,"column_end":29},"name":"_rdrand32_step","qualname":"::coresimd::x86::rdrand::_rdrand32_step","value":"fn (val: &mut u32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Read a hardware generated 32-bit random value and store the result in val.\n Return 1 if a random value was generated, and 0 otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,114,100,114,97,110,100,46,114,115],"byte_start":3059379,"byte_end":3059388,"line_start":29,"line_end":29,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"rdrand\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,114,100,114,97,110,100,46,114,115],"byte_start":3059389,"byte_end":3059425,"line_start":30,"line_end":30,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":11572},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,114,100,114,97,110,100,46,114,115],"byte_start":3059892,"byte_end":3059906,"line_start":44,"line_end":44,"column_start":15,"column_end":29},"name":"_rdseed16_step","qualname":"::coresimd::x86::rdrand::_rdseed16_step","value":"fn (val: &mut u16) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Read a 16-bit NIST SP800-90B and SP800-90C compliant random value and store\n in val. Return 1 if a random value was generated, and 0 otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,114,100,114,97,110,100,46,114,115],"byte_start":3059791,"byte_end":3059800,"line_start":41,"line_end":41,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"rdseed\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,114,100,114,97,110,100,46,114,115],"byte_start":3059801,"byte_end":3059837,"line_start":42,"line_end":42,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":11574},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,114,100,114,97,110,100,46,114,115],"byte_start":3060250,"byte_end":3060264,"line_start":55,"line_end":55,"column_start":15,"column_end":29},"name":"_rdseed32_step","qualname":"::coresimd::x86::rdrand::_rdseed32_step","value":"fn (val: &mut u32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Read a 32-bit NIST SP800-90B and SP800-90C compliant random value and store\n in val. Return 1 if a random value was generated, and 0 otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,114,100,114,97,110,100,46,114,115],"byte_start":3060149,"byte_end":3060158,"line_start":52,"line_end":52,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"rdseed\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,114,100,114,97,110,100,46,114,115],"byte_start":3060159,"byte_end":3060195,"line_start":53,"line_end":53,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":11586},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,46,114,115],"byte_start":3061955,"byte_end":3061969,"line_start":30,"line_end":30,"column_start":15,"column_end":29},"name":"_mm_cvtss_si64","qualname":"::coresimd::x86_64::sse::_mm_cvtss_si64","value":"fn (a: __m128) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Convert the lowest 32 bit float in the input vector to a 64 bit integer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,46,114,115],"byte_start":3061855,"byte_end":3061864,"line_start":27,"line_end":27,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,46,114,115],"byte_start":3061865,"byte_end":3061898,"line_start":28,"line_end":28,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11588},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,46,114,115],"byte_start":3062595,"byte_end":3062610,"line_start":46,"line_end":46,"column_start":15,"column_end":30},"name":"_mm_cvttss_si64","qualname":"::coresimd::x86_64::sse::_mm_cvttss_si64","value":"fn (a: __m128) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Convert the lowest 32 bit float in the input vector to a 64 bit integer\n with truncation.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,46,114,115],"byte_start":3062494,"byte_end":3062503,"line_start":43,"line_end":43,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,46,114,115],"byte_start":3062504,"byte_end":3062537,"line_start":44,"line_end":44,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11590},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,46,114,115],"byte_start":3063001,"byte_end":3063015,"line_start":58,"line_end":58,"column_start":15,"column_end":29},"name":"_mm_cvtsi64_ss","qualname":"::coresimd::x86_64::sse::_mm_cvtsi64_ss","value":"fn (a: __m128, b: i64) -> __m128","parent":null,"children":[],"decl_id":null,"docs":" Convert a 64 bit integer to a 32 bit float. The result vector is the input\n vector `a` with the lowest 32 bit float replaced by the converted integer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,46,114,115],"byte_start":3062901,"byte_end":3062910,"line_start":55,"line_end":55,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,46,114,115],"byte_start":3062911,"byte_end":3062944,"line_start":56,"line_end":56,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11604},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3065929,"byte_end":3065943,"line_start":23,"line_end":23,"column_start":15,"column_end":29},"name":"_mm_cvtsd_si64","qualname":"::coresimd::x86_64::sse2::_mm_cvtsd_si64","value":"fn (a: __m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Convert the lower double-precision (64-bit) floating-point element in a to\n a 64-bit integer.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3065828,"byte_end":3065837,"line_start":20,"line_end":20,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3065838,"byte_end":3065872,"line_start":21,"line_end":21,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11606},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3066118,"byte_end":3066133,"line_start":31,"line_end":31,"column_start":15,"column_end":30},"name":"_mm_cvtsd_si64x","qualname":"::coresimd::x86_64::sse2::_mm_cvtsd_si64x","value":"fn (a: __m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Alias for `_mm_cvtsd_si64`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3066017,"byte_end":3066026,"line_start":28,"line_end":28,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3066027,"byte_end":3066061,"line_start":29,"line_end":29,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11608},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3066401,"byte_end":3066416,"line_start":40,"line_end":40,"column_start":15,"column_end":30},"name":"_mm_cvttsd_si64","qualname":"::coresimd::x86_64::sse2::_mm_cvttsd_si64","value":"fn (a: __m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Convert the lower double-precision (64-bit) floating-point element in `a`\n to a 64-bit integer with truncation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3066299,"byte_end":3066308,"line_start":37,"line_end":37,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3066309,"byte_end":3066343,"line_start":38,"line_end":38,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11610},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3066594,"byte_end":3066610,"line_start":48,"line_end":48,"column_start":15,"column_end":31},"name":"_mm_cvttsd_si64x","qualname":"::coresimd::x86_64::sse2::_mm_cvttsd_si64x","value":"fn (a: __m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Alias for `_mm_cvttsd_si64`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3066492,"byte_end":3066501,"line_start":45,"line_end":45,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3066502,"byte_end":3066536,"line_start":46,"line_end":46,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11612},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3066924,"byte_end":3066939,"line_start":58,"line_end":58,"column_start":15,"column_end":30},"name":"_mm_stream_si64","qualname":"::coresimd::x86_64::sse2::_mm_stream_si64","value":"fn (mem_addr: *mut i64, a: i64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores a 64-bit integer value in the specified memory location.\n To minimize caching, the data is flagged as non-temporal (unlikely to be\n used again soon).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3066825,"byte_end":3066834,"line_start":55,"line_end":55,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3066835,"byte_end":3066869,"line_start":56,"line_end":56,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11614},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3067222,"byte_end":3067239,"line_start":67,"line_end":67,"column_start":15,"column_end":32},"name":"_mm_cvtsi64_si128","qualname":"::coresimd::x86_64::sse2::_mm_cvtsi64_si128","value":"fn (a: i64) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return a vector whose lowest element is `a` and all higher elements are\n `0`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3067106,"byte_end":3067115,"line_start":64,"line_end":64,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3067116,"byte_end":3067150,"line_start":65,"line_end":65,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11616},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3067490,"byte_end":3067508,"line_start":76,"line_end":76,"column_start":15,"column_end":33},"name":"_mm_cvtsi64x_si128","qualname":"::coresimd::x86_64::sse2::_mm_cvtsi64x_si128","value":"fn (a: i64) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return a vector whose lowest element is `a` and all higher elements are\n `0`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3067374,"byte_end":3067383,"line_start":73,"line_end":73,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3067384,"byte_end":3067418,"line_start":74,"line_end":74,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11618},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3067712,"byte_end":3067729,"line_start":84,"line_end":84,"column_start":15,"column_end":32},"name":"_mm_cvtsi128_si64","qualname":"::coresimd::x86_64::sse2::_mm_cvtsi128_si64","value":"fn (a: __m128i) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Return the lowest element of `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3067596,"byte_end":3067605,"line_start":81,"line_end":81,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3067606,"byte_end":3067640,"line_start":82,"line_end":82,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11620},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3067942,"byte_end":3067960,"line_start":92,"line_end":92,"column_start":15,"column_end":33},"name":"_mm_cvtsi128_si64x","qualname":"::coresimd::x86_64::sse2::_mm_cvtsi128_si64x","value":"fn (a: __m128i) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Return the lowest element of `a`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3067826,"byte_end":3067835,"line_start":89,"line_end":89,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3067836,"byte_end":3067870,"line_start":90,"line_end":90,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11622},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3068202,"byte_end":3068216,"line_start":101,"line_end":101,"column_start":15,"column_end":29},"name":"_mm_cvtsi64_sd","qualname":"::coresimd::x86_64::sse2::_mm_cvtsi64_sd","value":"fn (a: __m128d, b: i64) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return `a` with its lower element replaced by `b` after converting it to\n an `f64`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3068101,"byte_end":3068110,"line_start":98,"line_end":98,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3068111,"byte_end":3068145,"line_start":99,"line_end":99,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11624},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3068477,"byte_end":3068492,"line_start":110,"line_end":110,"column_start":15,"column_end":30},"name":"_mm_cvtsi64x_sd","qualname":"::coresimd::x86_64::sse2::_mm_cvtsi64x_sd","value":"fn (a: __m128d, b: i64) -> __m128d","parent":null,"children":[],"decl_id":null,"docs":" Return `a` with its lower element replaced by `b` after converting it to\n an `f64`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3068376,"byte_end":3068385,"line_start":107,"line_end":107,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,50,46,114,115],"byte_start":3068386,"byte_end":3068420,"line_start":108,"line_end":108,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11636},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,52,49,46,114,115],"byte_start":3070617,"byte_end":3070634,"line_start":16,"line_end":16,"column_start":15,"column_end":32},"name":"_mm_extract_epi64","qualname":"::coresimd::x86_64::sse41::_mm_extract_epi64","value":"fn (a: __m128i, imm8: i32) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Extract an 64-bit integer from `a` selected with `imm8`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,52,49,46,114,115],"byte_start":3070444,"byte_end":3070453,"line_start":11,"line_end":11,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,52,49,46,114,115],"byte_start":3070454,"byte_end":3070490,"line_start":12,"line_end":12,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,52,49,46,114,115],"byte_start":3070571,"byte_end":3070602,"line_start":15,"line_end":15,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11638},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,52,49,46,114,115],"byte_start":3070990,"byte_end":3071006,"line_start":27,"line_end":27,"column_start":15,"column_end":31},"name":"_mm_insert_epi64","qualname":"::coresimd::x86_64::sse41::_mm_insert_epi64","value":"fn (a: __m128i, i: i64, imm8: i32) -> __m128i","parent":null,"children":[],"decl_id":null,"docs":" Return a copy of `a` with the 64-bit integer from `i` inserted at a\n location specified by `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,52,49,46,114,115],"byte_start":3070847,"byte_end":3070856,"line_start":23,"line_end":23,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,52,49,46,114,115],"byte_start":3070857,"byte_end":3070893,"line_start":24,"line_end":24,"column_start":1,"column_end":37}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,52,49,46,114,115],"byte_start":3070944,"byte_end":3070975,"line_start":26,"line_end":26,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11646},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,52,50,46,114,115],"byte_start":3072220,"byte_end":3072233,"line_start":17,"line_end":17,"column_start":15,"column_end":28},"name":"_mm_crc32_u64","qualname":"::coresimd::x86_64::sse42::_mm_crc32_u64","value":"fn (crc: u64, v: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Starting with the initial value in `crc`, return the accumulated\n CRC32 value for unsigned 64-bit integer `v`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,52,50,46,114,115],"byte_start":3072120,"byte_end":3072129,"line_start":14,"line_end":14,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"sse4.2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,115,115,101,52,50,46,114,115],"byte_start":3072130,"byte_end":3072166,"line_start":15,"line_end":15,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":11654},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3073852,"byte_end":3073860,"line_start":35,"line_end":35,"column_start":15,"column_end":23},"name":"_xsave64","qualname":"::coresimd::x86_64::xsave::_xsave64","value":"fn (mem_addr: *mut u8, save_mask: u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a full or partial save of the enabled processor states to memory at\n `mem_addr`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3073751,"byte_end":3073760,"line_start":32,"line_end":32,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"xsave\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3073761,"byte_end":3073796,"line_start":33,"line_end":33,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":11656},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3074364,"byte_end":3074373,"line_start":48,"line_end":48,"column_start":15,"column_end":24},"name":"_xrstor64","qualname":"::coresimd::x86_64::xsave::_xrstor64","value":"fn (mem_addr: *const u8, rs_mask: u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a full or partial restore of the enabled processor states using\n the state information stored in memory at `mem_addr`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3074262,"byte_end":3074271,"line_start":45,"line_end":45,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"xsave\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3074272,"byte_end":3074307,"line_start":46,"line_end":46,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":11658},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3074982,"byte_end":3074993,"line_start":62,"line_end":62,"column_start":15,"column_end":26},"name":"_xsaveopt64","qualname":"::coresimd::x86_64::xsave::_xsaveopt64","value":"fn (mem_addr: *mut u8, save_mask: u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a full or partial save of the enabled processor states to memory at\n `mem_addr`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3074869,"byte_end":3074878,"line_start":59,"line_end":59,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"xsave,xsaveopt\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3074879,"byte_end":3074923,"line_start":60,"line_end":60,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":11660},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3075534,"byte_end":3075543,"line_start":75,"line_end":75,"column_start":15,"column_end":24},"name":"_xsavec64","qualname":"::coresimd::x86_64::xsave::_xsavec64","value":"fn (mem_addr: *mut u8, save_mask: u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a full or partial save of the enabled processor states to memory\n at `mem_addr`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3075425,"byte_end":3075434,"line_start":72,"line_end":72,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"xsave,xsavec\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3075435,"byte_end":3075477,"line_start":73,"line_end":73,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":11662},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3076147,"byte_end":3076156,"line_start":89,"line_end":89,"column_start":15,"column_end":24},"name":"_xsaves64","qualname":"::coresimd::x86_64::xsave::_xsaves64","value":"fn (mem_addr: *mut u8, save_mask: u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a full or partial save of the enabled processor states to memory at\n `mem_addr`","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3076038,"byte_end":3076047,"line_start":86,"line_end":86,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"xsave,xsaves\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3076048,"byte_end":3076090,"line_start":87,"line_end":87,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":11664},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3076904,"byte_end":3076914,"line_start":105,"line_end":105,"column_start":15,"column_end":25},"name":"_xrstors64","qualname":"::coresimd::x86_64::xsave::_xrstors64","value":"fn (mem_addr: *const u8, rs_mask: u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a full or partial restore of the enabled processor states using the\n state information stored in memory at `mem_addr`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3076794,"byte_end":3076803,"line_start":102,"line_end":102,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"xsave,xsaves\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,120,115,97,118,101,46,114,115],"byte_start":3076804,"byte_end":3076846,"line_start":103,"line_end":103,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":11670},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,97,98,109,46,114,115],"byte_start":3080965,"byte_end":3080975,"line_start":29,"line_end":29,"column_start":15,"column_end":25},"name":"_lzcnt_u64","qualname":"::coresimd::x86_64::abm::_lzcnt_u64","value":"fn (x: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Counts the leading most significant zero bits.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,97,98,109,46,114,115],"byte_start":3080866,"byte_end":3080875,"line_start":26,"line_end":26,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"lzcnt\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,97,98,109,46,114,115],"byte_start":3080876,"byte_end":3080911,"line_start":27,"line_end":27,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":11672},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,97,98,109,46,114,115],"byte_start":3081160,"byte_end":3081169,"line_start":37,"line_end":37,"column_start":15,"column_end":24},"name":"_popcnt64","qualname":"::coresimd::x86_64::abm::_popcnt64","value":"fn (x: i64) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Counts the bits that are set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,97,98,109,46,114,115],"byte_start":3081059,"byte_end":3081068,"line_start":34,"line_end":34,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"popcnt\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,97,98,109,46,114,115],"byte_start":3081069,"byte_end":3081105,"line_start":35,"line_end":35,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":11684},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,97,118,120,46,114,115],"byte_start":3082556,"byte_end":3082575,"line_start":26,"line_end":26,"column_start":15,"column_end":34},"name":"_mm256_insert_epi64","qualname":"::coresimd::x86_64::avx::_mm256_insert_epi64","value":"fn (a: __m256i, i: i64, index: i32) -> __m256i","parent":null,"children":[],"decl_id":null,"docs":" Copy `a` to result, and insert the 64-bit integer `i` into result\n at the location specified by `index`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,97,118,120,46,114,115],"byte_start":3082414,"byte_end":3082423,"line_start":22,"line_end":22,"column_start":1,"column_end":10}},{"value":"rustc_args_required_const(2)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,97,118,120,46,114,115],"byte_start":3082424,"byte_end":3082455,"line_start":23,"line_end":23,"column_start":1,"column_end":32}},{"value":"target_feature(enable = \"avx\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,97,118,120,46,114,115],"byte_start":3082456,"byte_end":3082489,"line_start":24,"line_end":24,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":11690},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3083911,"byte_end":3083921,"line_start":21,"line_end":21,"column_start":15,"column_end":25},"name":"_bextr_u64","qualname":"::coresimd::x86_64::bmi::_bextr_u64","value":"fn (a: u64, start: u32, len: u32) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Extracts bits in range [`start`, `start` + `length`) from `a` into\n the least significant bits of the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3083780,"byte_end":3083789,"line_start":17,"line_end":17,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3083790,"byte_end":3083824,"line_start":18,"line_end":18,"column_start":1,"column_end":35}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3083864,"byte_end":3083896,"line_start":20,"line_end":20,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11692},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3084410,"byte_end":3084421,"line_start":34,"line_end":34,"column_start":15,"column_end":26},"name":"_bextr2_u64","qualname":"::coresimd::x86_64::bmi::_bextr2_u64","value":"fn (a: u64, control: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Extracts bits of `a` specified by `control` into\n the least significant bits of the result.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3084279,"byte_end":3084288,"line_start":30,"line_end":30,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3084289,"byte_end":3084323,"line_start":31,"line_end":31,"column_start":1,"column_end":35}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3084363,"byte_end":3084395,"line_start":33,"line_end":33,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11694},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3084638,"byte_end":3084647,"line_start":42,"line_end":42,"column_start":15,"column_end":24},"name":"_andn_u64","qualname":"::coresimd::x86_64::bmi::_andn_u64","value":"fn (a: u64, b: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Bitwise logical `AND` of inverted `a` with `b`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3084541,"byte_end":3084550,"line_start":39,"line_end":39,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3084551,"byte_end":3084585,"line_start":40,"line_end":40,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11696},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3084888,"byte_end":3084897,"line_start":51,"line_end":51,"column_start":15,"column_end":24},"name":"_blsi_u64","qualname":"::coresimd::x86_64::bmi::_blsi_u64","value":"fn (x: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Extract lowest set isolated bit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3084724,"byte_end":3084733,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3084734,"byte_end":3084768,"line_start":48,"line_end":48,"column_start":1,"column_end":35}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3084807,"byte_end":3084839,"line_start":50,"line_end":50,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11698},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3085144,"byte_end":3085155,"line_start":60,"line_end":60,"column_start":15,"column_end":26},"name":"_blsmsk_u64","qualname":"::coresimd::x86_64::bmi::_blsmsk_u64","value":"fn (x: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get mask up to lowest set bit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3084978,"byte_end":3084987,"line_start":56,"line_end":56,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3084988,"byte_end":3085022,"line_start":57,"line_end":57,"column_start":1,"column_end":35}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3085063,"byte_end":3085095,"line_start":59,"line_end":59,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11700},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3085437,"byte_end":3085446,"line_start":71,"line_end":71,"column_start":15,"column_end":24},"name":"_blsr_u64","qualname":"::coresimd::x86_64::bmi::_blsr_u64","value":"fn (x: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Resets the lowest set bit of `x`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3085273,"byte_end":3085282,"line_start":67,"line_end":67,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3085283,"byte_end":3085317,"line_start":68,"line_end":68,"column_start":1,"column_end":35}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3085356,"byte_end":3085388,"line_start":70,"line_end":70,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11702},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3085723,"byte_end":3085733,"line_start":81,"line_end":81,"column_start":15,"column_end":25},"name":"_tzcnt_u64","qualname":"::coresimd::x86_64::bmi::_tzcnt_u64","value":"fn (x: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of trailing least significant zero bits.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3085625,"byte_end":3085634,"line_start":78,"line_end":78,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3085635,"byte_end":3085669,"line_start":79,"line_end":79,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11704},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3086012,"byte_end":3086024,"line_start":91,"line_end":91,"column_start":15,"column_end":27},"name":"_mm_tzcnt_64","qualname":"::coresimd::x86_64::bmi::_mm_tzcnt_64","value":"fn (x: u64) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of trailing least significant zero bits.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3085914,"byte_end":3085923,"line_start":88,"line_end":88,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi1\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,46,114,115],"byte_start":3085924,"byte_end":3085958,"line_start":89,"line_end":89,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":11712},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,50,46,114,115],"byte_start":3088853,"byte_end":3088862,"line_start":24,"line_end":24,"column_start":15,"column_end":24},"name":"_mulx_u64","qualname":"::coresimd::x86_64::bmi2::_mulx_u64","value":"fn (a: u64, b: u64, hi: &mut u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Unsigned multiply without affecting flags.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,50,46,114,115],"byte_start":3088701,"byte_end":3088710,"line_start":20,"line_end":20,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,50,46,114,115],"byte_start":3088749,"byte_end":3088783,"line_start":22,"line_end":22,"column_start":1,"column_end":35}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,50,46,114,115],"byte_start":3088784,"byte_end":3088816,"line_start":23,"line_end":23,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11714},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,50,46,114,115],"byte_start":3089176,"byte_end":3089185,"line_start":35,"line_end":35,"column_start":15,"column_end":24},"name":"_bzhi_u64","qualname":"::coresimd::x86_64::bmi2::_bzhi_u64","value":"fn (a: u64, index: u32) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Zero higher bits of `a` >= `index`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,50,46,114,115],"byte_start":3089046,"byte_end":3089055,"line_start":31,"line_end":31,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,50,46,114,115],"byte_start":3089056,"byte_end":3089090,"line_start":32,"line_end":32,"column_start":1,"column_end":35}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,50,46,114,115],"byte_start":3089129,"byte_end":3089161,"line_start":34,"line_end":34,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11716},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,50,46,114,115],"byte_start":3089491,"byte_end":3089500,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"name":"_pdep_u64","qualname":"::coresimd::x86_64::bmi2::_pdep_u64","value":"fn (a: u64, mask: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Scatter contiguous low order bits of `a` to the result at the positions\n specified by the `mask`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,50,46,114,115],"byte_start":3089361,"byte_end":3089370,"line_start":41,"line_end":41,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,50,46,114,115],"byte_start":3089371,"byte_end":3089405,"line_start":42,"line_end":42,"column_start":1,"column_end":35}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,50,46,114,115],"byte_start":3089444,"byte_end":3089476,"line_start":44,"line_end":44,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11718},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,50,46,114,115],"byte_start":3089807,"byte_end":3089816,"line_start":55,"line_end":55,"column_start":15,"column_end":24},"name":"_pext_u64","qualname":"::coresimd::x86_64::bmi2::_pext_u64","value":"fn (a: u64, mask: u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Gathers the bits of `x` specified by the `mask` into the contiguous low\n order bit positions of the result.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,50,46,114,115],"byte_start":3089677,"byte_end":3089686,"line_start":51,"line_end":51,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"bmi2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,50,46,114,115],"byte_start":3089687,"byte_end":3089721,"line_start":52,"line_end":52,"column_start":1,"column_end":35}},{"value":"cfg(not(target_arch = \"x86\"))","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,109,105,50,46,114,115],"byte_start":3089760,"byte_end":3089792,"line_start":54,"line_end":54,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":11730},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,97,118,120,50,46,114,115],"byte_start":3093013,"byte_end":3093033,"line_start":29,"line_end":29,"column_start":15,"column_end":35},"name":"_mm256_extract_epi64","qualname":"::coresimd::x86_64::avx2::_mm256_extract_epi64","value":"fn (a: __m256i, imm8: i32) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Extract a 64-bit integer from `a`, selected with `imm8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,97,118,120,50,46,114,115],"byte_start":3092870,"byte_end":3092879,"line_start":25,"line_end":25,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"avx2\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,97,118,120,50,46,114,115],"byte_start":3092880,"byte_end":3092914,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"rustc_args_required_const(1)","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,97,118,120,50,46,114,115],"byte_start":3092915,"byte_end":3092946,"line_start":27,"line_end":27,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":11736},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,115,119,97,112,46,114,115],"byte_start":3093679,"byte_end":3093687,"line_start":11,"line_end":11,"column_start":15,"column_end":23},"name":"_bswap64","qualname":"::coresimd::x86_64::bswap::_bswap64","value":"fn (x: i64) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Return an integer with the reversed byte order of x\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,98,115,119,97,112,46,114,115],"byte_start":3093616,"byte_end":3093625,"line_start":9,"line_end":9,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":11746},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,114,100,114,97,110,100,46,114,115],"byte_start":3094740,"byte_end":3094754,"line_start":19,"line_end":19,"column_start":15,"column_end":29},"name":"_rdrand64_step","qualname":"::coresimd::x86_64::rdrand::_rdrand64_step","value":"fn (val: &mut u64) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Read a hardware generated 64-bit random value and store the result in val.\n Return 1 if a random value was generated, and 0 otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,114,100,114,97,110,100,46,114,115],"byte_start":3094585,"byte_end":3094594,"line_start":15,"line_end":15,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"rdrand\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,114,100,114,97,110,100,46,114,115],"byte_start":3094595,"byte_end":3094631,"line_start":16,"line_end":16,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":11748},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,114,100,114,97,110,100,46,114,115],"byte_start":3095098,"byte_end":3095112,"line_start":30,"line_end":30,"column_start":15,"column_end":29},"name":"_rdseed64_step","qualname":"::coresimd::x86_64::rdrand::_rdseed64_step","value":"fn (val: &mut u64) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Read a 64-bit NIST SP800-90B and SP800-90C compliant random value and store\n in val. Return 1 if a random value was generated, and 0 otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,114,100,114,97,110,100,46,114,115],"byte_start":3094997,"byte_end":3095006,"line_start":27,"line_end":27,"column_start":1,"column_end":10}},{"value":"target_feature(enable = \"rdseed\")","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,95,54,52,47,114,100,114,97,110,100,46,114,115],"byte_start":3095007,"byte_end":3095043,"line_start":28,"line_end":28,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":11756},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3096761,"byte_end":3096773,"line_start":46,"line_end":46,"column_start":15,"column_end":27},"name":"_syncthreads","qualname":"::coresimd::nvptx::_syncthreads","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" Synchronizes all threads in the block.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3096737,"byte_end":3096746,"line_start":45,"line_end":45,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":11758},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3096862,"byte_end":3096874,"line_start":52,"line_end":52,"column_start":15,"column_end":27},"name":"_block_dim_x","qualname":"::coresimd::nvptx::_block_dim_x","value":"fn () -> i32","parent":null,"children":[],"decl_id":null,"docs":" x-th thread-block dimension.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3096838,"byte_end":3096847,"line_start":51,"line_end":51,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":11760},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3096964,"byte_end":3096976,"line_start":58,"line_end":58,"column_start":15,"column_end":27},"name":"_block_dim_y","qualname":"::coresimd::nvptx::_block_dim_y","value":"fn () -> i32","parent":null,"children":[],"decl_id":null,"docs":" y-th thread-block dimension.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3096940,"byte_end":3096949,"line_start":57,"line_end":57,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":11762},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097066,"byte_end":3097078,"line_start":64,"line_end":64,"column_start":15,"column_end":27},"name":"_block_dim_z","qualname":"::coresimd::nvptx::_block_dim_z","value":"fn () -> i32","parent":null,"children":[],"decl_id":null,"docs":" z-th thread-block dimension.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097042,"byte_end":3097051,"line_start":63,"line_end":63,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":11764},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097164,"byte_end":3097176,"line_start":70,"line_end":70,"column_start":15,"column_end":27},"name":"_block_idx_x","qualname":"::coresimd::nvptx::_block_idx_x","value":"fn () -> i32","parent":null,"children":[],"decl_id":null,"docs":" x-th thread-block index.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097140,"byte_end":3097149,"line_start":69,"line_end":69,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":11766},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097262,"byte_end":3097274,"line_start":76,"line_end":76,"column_start":15,"column_end":27},"name":"_block_idx_y","qualname":"::coresimd::nvptx::_block_idx_y","value":"fn () -> i32","parent":null,"children":[],"decl_id":null,"docs":" y-th thread-block index.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097238,"byte_end":3097247,"line_start":75,"line_end":75,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":11768},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097360,"byte_end":3097372,"line_start":82,"line_end":82,"column_start":15,"column_end":27},"name":"_block_idx_z","qualname":"::coresimd::nvptx::_block_idx_z","value":"fn () -> i32","parent":null,"children":[],"decl_id":null,"docs":" z-th thread-block index.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097336,"byte_end":3097345,"line_start":81,"line_end":81,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":11770},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097460,"byte_end":3097471,"line_start":88,"line_end":88,"column_start":15,"column_end":26},"name":"_grid_dim_x","qualname":"::coresimd::nvptx::_grid_dim_x","value":"fn () -> i32","parent":null,"children":[],"decl_id":null,"docs":" x-th block-grid dimension.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097436,"byte_end":3097445,"line_start":87,"line_end":87,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":11772},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097558,"byte_end":3097569,"line_start":94,"line_end":94,"column_start":15,"column_end":26},"name":"_grid_dim_y","qualname":"::coresimd::nvptx::_grid_dim_y","value":"fn () -> i32","parent":null,"children":[],"decl_id":null,"docs":" y-th block-grid dimension.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097534,"byte_end":3097543,"line_start":93,"line_end":93,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":11774},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097656,"byte_end":3097667,"line_start":100,"line_end":100,"column_start":15,"column_end":26},"name":"_grid_dim_z","qualname":"::coresimd::nvptx::_grid_dim_z","value":"fn () -> i32","parent":null,"children":[],"decl_id":null,"docs":" z-th block-grid dimension.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097632,"byte_end":3097641,"line_start":99,"line_end":99,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":11776},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097746,"byte_end":3097759,"line_start":106,"line_end":106,"column_start":15,"column_end":28},"name":"_thread_idx_x","qualname":"::coresimd::nvptx::_thread_idx_x","value":"fn () -> i32","parent":null,"children":[],"decl_id":null,"docs":" x-th thread index.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097722,"byte_end":3097731,"line_start":105,"line_end":105,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":11778},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097840,"byte_end":3097853,"line_start":112,"line_end":112,"column_start":15,"column_end":28},"name":"_thread_idx_y","qualname":"::coresimd::nvptx::_thread_idx_y","value":"fn () -> i32","parent":null,"children":[],"decl_id":null,"docs":" y-th thread index.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097816,"byte_end":3097825,"line_start":111,"line_end":111,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":11780},"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097934,"byte_end":3097947,"line_start":118,"line_end":118,"column_start":15,"column_end":28},"name":"_thread_idx_z","qualname":"::coresimd::nvptx::_thread_idx_z","value":"fn () -> i32","parent":null,"children":[],"decl_id":null,"docs":" z-th thread index.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,110,118,112,116,120,47,109,111,100,46,114,115],"byte_start":3097910,"byte_end":3097919,"line_start":117,"line_end":117,"column_start":1,"column_end":10}}]}],"impls":[{"id":2,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":69354,"byte_end":69362,"line_start":150,"line_end":150,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":69555,"byte_end":69563,"line_start":157,"line_end":157,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":69750,"byte_end":69758,"line_start":164,"line_end":164,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":69943,"byte_end":69951,"line_start":171,"line_end":171,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":70142,"byte_end":70150,"line_start":178,"line_end":178,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":70341,"byte_end":70349,"line_start":185,"line_end":185,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":242324,"byte_end":242328,"line_start":184,"line_end":184,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":244061,"byte_end":244070,"line_start":233,"line_end":233,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374101,"byte_end":374109,"line_start":46,"line_end":46,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":387259,"byte_end":387266,"line_start":41,"line_end":41,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":870}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":322339,"byte_end":322354,"line_start":169,"line_end":169,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":322880,"byte_end":322895,"line_start":184,"line_end":184,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":411292,"byte_end":411294,"line_start":30,"line_end":30,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":934},{"krate":0,"index":938},{"krate":0,"index":940}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":192376,"byte_end":192391,"line_start":4199,"line_end":4199,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":192802,"byte_end":192817,"line_start":4211,"line_end":4211,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1050}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":192995,"byte_end":193010,"line_start":4218,"line_end":4218,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":201555,"byte_end":201568,"line_start":4490,"line_end":4490,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":202266,"byte_end":202279,"line_start":4507,"line_end":4507,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1098}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":510203,"byte_end":510215,"line_start":845,"line_end":845,"column_start":18,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":510308,"byte_end":510320,"line_start":848,"line_end":848,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":510466,"byte_end":510478,"line_start":855,"line_end":855,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1280}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":510636,"byte_end":510648,"line_start":862,"line_end":862,"column_start":21,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":510739,"byte_end":510751,"line_start":865,"line_end":865,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1286}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":510930,"byte_end":510942,"line_start":872,"line_end":872,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1290}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":513629,"byte_end":513641,"line_start":952,"line_end":952,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1296},{"krate":0,"index":1298},{"krate":0,"index":1300}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":515002,"byte_end":515014,"line_start":999,"line_end":999,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1304},{"krate":0,"index":1306}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":515230,"byte_end":515242,"line_start":1010,"line_end":1010,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1310}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":515471,"byte_end":515483,"line_start":1020,"line_end":1020,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1314}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":515748,"byte_end":515760,"line_start":1029,"line_end":1029,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1318},{"krate":0,"index":1320}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":516041,"byte_end":516053,"line_start":1040,"line_end":1040,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1324}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":516235,"byte_end":516247,"line_start":1047,"line_end":1047,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1328},{"krate":0,"index":1330}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":516493,"byte_end":516505,"line_start":1058,"line_end":1058,"column_start":20,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":516609,"byte_end":516621,"line_start":1061,"line_end":1061,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1336},{"krate":0,"index":1338},{"krate":0,"index":1340},{"krate":0,"index":1342},{"krate":0,"index":1344}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":517143,"byte_end":517155,"line_start":1084,"line_end":1084,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1348}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":517355,"byte_end":517367,"line_start":1091,"line_end":1091,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1352}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":518316,"byte_end":518319,"line_start":1121,"line_end":1121,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1360}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":518646,"byte_end":518649,"line_start":1132,"line_end":1132,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1364},{"krate":0,"index":1366},{"krate":0,"index":1368},{"krate":0,"index":1370}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":520623,"byte_end":520626,"line_start":1178,"line_end":1178,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1374},{"krate":0,"index":1376}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":520803,"byte_end":520806,"line_start":1187,"line_end":1187,"column_start":42,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1380}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":520978,"byte_end":520981,"line_start":1194,"line_end":1194,"column_start":49,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1384}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":521193,"byte_end":521196,"line_start":1201,"line_end":1201,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1388}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":521395,"byte_end":521398,"line_start":1208,"line_end":1208,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1392}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":521653,"byte_end":521656,"line_start":1215,"line_end":1215,"column_start":74,"column_end":77},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":521751,"byte_end":521754,"line_start":1218,"line_end":1218,"column_start":38,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":523846,"byte_end":523853,"line_start":68,"line_end":68,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1412},{"krate":0,"index":1414},{"krate":0,"index":1416}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":524489,"byte_end":524496,"line_start":92,"line_end":92,"column_start":79,"column_end":86},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":524544,"byte_end":524551,"line_start":94,"line_end":94,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1422}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":524682,"byte_end":524689,"line_start":100,"line_end":100,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1426}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":524849,"byte_end":524856,"line_start":107,"line_end":107,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1430}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":612848,"byte_end":612854,"line_start":2529,"line_end":2529,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1646}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":613292,"byte_end":613298,"line_start":2540,"line_end":2540,"column_start":40,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":613626,"byte_end":613632,"line_start":2547,"line_end":2547,"column_start":40,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":613708,"byte_end":613714,"line_start":2550,"line_end":2550,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1654}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":614194,"byte_end":614200,"line_start":2566,"line_end":2566,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1658},{"krate":0,"index":1660},{"krate":0,"index":1662},{"krate":0,"index":1664},{"krate":0,"index":1666}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":615579,"byte_end":615585,"line_start":2610,"line_end":2610,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1670}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":615721,"byte_end":615727,"line_start":2617,"line_end":2617,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":615844,"byte_end":615850,"line_start":2620,"line_end":2620,"column_start":57,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":615963,"byte_end":615969,"line_start":2623,"line_end":2623,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1678}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":616201,"byte_end":616207,"line_start":2631,"line_end":2631,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1682}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":616449,"byte_end":616455,"line_start":2639,"line_end":2639,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1686}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":616677,"byte_end":616683,"line_start":2646,"line_end":2646,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1690}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":618254,"byte_end":618261,"line_start":2677,"line_end":2677,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":618506,"byte_end":618513,"line_start":2682,"line_end":2682,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":618537,"byte_end":618544,"line_start":2684,"line_end":2684,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1700}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":618977,"byte_end":618984,"line_start":2699,"line_end":2699,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1704},{"krate":0,"index":1706},{"krate":0,"index":1708},{"krate":0,"index":1710},{"krate":0,"index":1712},{"krate":0,"index":1714},{"krate":0,"index":1716}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":621063,"byte_end":621070,"line_start":2764,"line_end":2764,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1720}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":621203,"byte_end":621210,"line_start":2771,"line_end":2771,"column_start":26,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":621333,"byte_end":621340,"line_start":2774,"line_end":2774,"column_start":58,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":621448,"byte_end":621455,"line_start":2777,"line_end":2777,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1728}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":621656,"byte_end":621663,"line_start":2784,"line_end":2784,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1732}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":621854,"byte_end":621861,"line_start":2791,"line_end":2791,"column_start":24,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":621948,"byte_end":621955,"line_start":2794,"line_end":2794,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1738}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":622124,"byte_end":622131,"line_start":2801,"line_end":2801,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1742}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":622315,"byte_end":622322,"line_start":2808,"line_end":2808,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1746}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":622530,"byte_end":622537,"line_start":2815,"line_end":2815,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1750}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":622727,"byte_end":622734,"line_start":2822,"line_end":2822,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1754}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":622944,"byte_end":622951,"line_start":2830,"line_end":2830,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1758}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":623169,"byte_end":623176,"line_start":2838,"line_end":2838,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1762}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":644681,"byte_end":644691,"line_start":591,"line_end":591,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":644732,"byte_end":644743,"line_start":592,"line_end":592,"column_start":35,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1886,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":733805,"byte_end":733814,"line_start":53,"line_end":53,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2122}],"docs":"","sig":null,"attributes":[]},{"id":1887,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":734977,"byte_end":734982,"line_start":89,"line_end":89,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2126}],"docs":"","sig":null,"attributes":[]},{"id":1888,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":735143,"byte_end":735148,"line_start":95,"line_end":95,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2130},{"krate":0,"index":2132}],"docs":"","sig":null,"attributes":[]},{"id":1889,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":737645,"byte_end":737654,"line_start":176,"line_end":176,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2136}],"docs":"","sig":null,"attributes":[]},{"id":1890,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":737896,"byte_end":737905,"line_start":183,"line_end":183,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2140}],"docs":"","sig":null,"attributes":[]},{"id":1891,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":739761,"byte_end":739768,"line_start":247,"line_end":247,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2144}],"docs":"","sig":null,"attributes":[]},{"id":1892,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":740008,"byte_end":740015,"line_start":254,"line_end":254,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2148}],"docs":"","sig":null,"attributes":[]},{"id":1893,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":741763,"byte_end":741777,"line_start":307,"line_end":307,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2152}],"docs":"","sig":null,"attributes":[]},{"id":1894,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":741939,"byte_end":741953,"line_start":313,"line_end":313,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2156},{"krate":0,"index":2158}],"docs":"","sig":null,"attributes":[]},{"id":1895,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":745148,"byte_end":745164,"line_start":419,"line_end":419,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2162}],"docs":"","sig":null,"attributes":[]},{"id":1896,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":745405,"byte_end":745421,"line_start":426,"line_end":426,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2166}],"docs":"","sig":null,"attributes":[]},{"id":1897,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":749000,"byte_end":749009,"line_start":547,"line_end":547,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2184},{"krate":0,"index":2186}],"docs":"","sig":null,"attributes":[]},{"id":1898,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":749326,"byte_end":749335,"line_start":559,"line_end":559,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2190},{"krate":0,"index":2192}],"docs":"","sig":null,"attributes":[]},{"id":1899,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":749667,"byte_end":749674,"line_start":571,"line_end":571,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2196},{"krate":0,"index":2198}],"docs":"","sig":null,"attributes":[]},{"id":1900,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":750004,"byte_end":750009,"line_start":583,"line_end":583,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2202},{"krate":0,"index":2204}],"docs":"","sig":null,"attributes":[]},{"id":1901,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":750351,"byte_end":750365,"line_start":595,"line_end":595,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2208},{"krate":0,"index":2210}],"docs":"","sig":null,"attributes":[]},{"id":1902,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":750707,"byte_end":750723,"line_start":607,"line_end":607,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2214},{"krate":0,"index":2216}],"docs":"","sig":null,"attributes":[]},{"id":1903,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":752100,"byte_end":752109,"line_start":653,"line_end":653,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2232},{"krate":0,"index":2234}],"docs":"","sig":null,"attributes":[]},{"id":1904,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":752448,"byte_end":752455,"line_start":665,"line_end":665,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2238},{"krate":0,"index":2240}],"docs":"","sig":null,"attributes":[]},{"id":1905,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":752792,"byte_end":752797,"line_start":677,"line_end":677,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2244},{"krate":0,"index":2246}],"docs":"","sig":null,"attributes":[]},{"id":1906,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":753145,"byte_end":753159,"line_start":689,"line_end":689,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2250},{"krate":0,"index":2252}],"docs":"","sig":null,"attributes":[]},{"id":1907,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":753507,"byte_end":753523,"line_start":701,"line_end":701,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2256},{"krate":0,"index":2258}],"docs":"","sig":null,"attributes":[]},{"id":1908,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":767740,"byte_end":767748,"line_start":219,"line_end":219,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2420},{"krate":0,"index":2422},{"krate":0,"index":2424}],"docs":"","sig":null,"attributes":[]},{"id":1909,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":771769,"byte_end":771776,"line_start":351,"line_end":351,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2428},{"krate":0,"index":2430},{"krate":0,"index":2432},{"krate":0,"index":2434},{"krate":0,"index":2436}],"docs":"","sig":null,"attributes":[]},{"id":1910,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":772287,"byte_end":772294,"line_start":368,"line_end":368,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2440}],"docs":"","sig":null,"attributes":[]},{"id":1911,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":775829,"byte_end":775837,"line_start":484,"line_end":484,"column_start":13,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1912,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":775901,"byte_end":775909,"line_start":487,"line_end":487,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2454}],"docs":"","sig":null,"attributes":[]},{"id":1913,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":776096,"byte_end":776104,"line_start":495,"line_end":495,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2458}],"docs":"","sig":null,"attributes":[]},{"id":2006,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":816441,"byte_end":816442,"line_start":397,"line_end":397,"column_start":24,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2678}],"docs":"","sig":null,"attributes":[]},{"id":2007,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":816621,"byte_end":816622,"line_start":406,"line_end":406,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2682}],"docs":"","sig":null,"attributes":[]},{"id":2008,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":816761,"byte_end":816762,"line_start":413,"line_end":413,"column_start":27,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2686},{"krate":0,"index":2688}],"docs":"","sig":null,"attributes":[]},{"id":2009,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":817084,"byte_end":817085,"line_start":425,"line_end":425,"column_start":27,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2692},{"krate":0,"index":2694}],"docs":"","sig":null,"attributes":[]},{"id":2011,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":826291,"byte_end":826292,"line_start":219,"line_end":219,"column_start":31,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2720}],"docs":"","sig":null,"attributes":[]},{"id":2012,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":826413,"byte_end":826414,"line_start":224,"line_end":224,"column_start":34,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2724}],"docs":"","sig":null,"attributes":[]},{"id":2013,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":831013,"byte_end":831014,"line_start":114,"line_end":114,"column_start":36,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2750}],"docs":"","sig":null,"attributes":[]},{"id":2014,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":831349,"byte_end":831352,"line_start":123,"line_end":123,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2754}],"docs":"","sig":null,"attributes":[]},{"id":2015,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":831788,"byte_end":831791,"line_start":139,"line_end":139,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":2762},{"krate":0,"index":2764},{"krate":0,"index":2766}],"docs":"","sig":null,"attributes":[]},{"id":2016,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":837496,"byte_end":837502,"line_start":351,"line_end":351,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2778}],"docs":"","sig":null,"attributes":[]},{"id":2017,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":840137,"byte_end":840138,"line_start":50,"line_end":50,"column_start":54,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2816},{"krate":0,"index":2818}],"docs":"","sig":null,"attributes":[]},{"id":2018,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":840503,"byte_end":840520,"line_start":66,"line_end":66,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2822}],"docs":"","sig":null,"attributes":[]},{"id":2019,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":840661,"byte_end":840678,"line_start":73,"line_end":73,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2826}],"docs":"","sig":null,"attributes":[]},{"id":2020,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,97,115,99,105,105,46,114,115],"byte_start":852131,"byte_end":852144,"line_start":126,"line_end":126,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2852},{"krate":0,"index":2854},{"krate":0,"index":2856}],"docs":"","sig":null,"attributes":[]},{"id":2021,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,97,115,99,105,105,46,114,115],"byte_start":852402,"byte_end":852415,"line_start":132,"line_end":132,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2860}],"docs":"","sig":null,"attributes":[]},{"id":2022,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,97,115,99,105,105,46,114,115],"byte_start":852596,"byte_end":852609,"line_start":138,"line_end":138,"column_start":28,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2023,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,97,115,99,105,105,46,114,115],"byte_start":852683,"byte_end":852696,"line_start":140,"line_end":140,"column_start":24,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2024,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,97,115,99,105,105,46,114,115],"byte_start":852772,"byte_end":852785,"line_start":143,"line_end":143,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2868}],"docs":"","sig":null,"attributes":[]},{"id":2025,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":858025,"byte_end":858035,"line_start":133,"line_end":133,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2888}],"docs":"","sig":null,"attributes":[]},{"id":2026,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":858304,"byte_end":858314,"line_start":143,"line_end":143,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2027,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":858693,"byte_end":858702,"line_start":156,"line_end":156,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2896}],"docs":"","sig":null,"attributes":[]},{"id":2028,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":858937,"byte_end":858946,"line_start":165,"line_end":165,"column_start":25,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2029,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":859057,"byte_end":859066,"line_start":168,"line_end":168,"column_start":25,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2030,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861757,"byte_end":861767,"line_start":236,"line_end":236,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2906},{"krate":0,"index":2908},{"krate":0,"index":2910},{"krate":0,"index":2912},{"krate":0,"index":2914},{"krate":0,"index":2916},{"krate":0,"index":2918},{"krate":0,"index":2920},{"krate":0,"index":2922},{"krate":0,"index":2924},{"krate":0,"index":2926},{"krate":0,"index":2928},{"krate":0,"index":2930}],"docs":"","sig":null,"attributes":[]},{"id":2031,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":876476,"byte_end":876485,"line_start":649,"line_end":649,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2934},{"krate":0,"index":2936},{"krate":0,"index":2938},{"krate":0,"index":2940},{"krate":0,"index":2942},{"krate":0,"index":2944},{"krate":0,"index":2946},{"krate":0,"index":2948},{"krate":0,"index":2950}],"docs":"","sig":null,"attributes":[]},{"id":2032,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":886374,"byte_end":886384,"line_start":933,"line_end":933,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2954}],"docs":"","sig":null,"attributes":[]},{"id":2033,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":886562,"byte_end":886571,"line_start":940,"line_end":940,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2958}],"docs":"","sig":null,"attributes":[]},{"id":2034,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":929416,"byte_end":929426,"line_start":2092,"line_end":2092,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3000}],"docs":"","sig":null,"attributes":[]},{"id":2035,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":929688,"byte_end":929697,"line_start":2100,"line_end":2100,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3004}],"docs":"","sig":null,"attributes":[]},{"id":2036,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":929966,"byte_end":929975,"line_start":2108,"line_end":2108,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3008}],"docs":"","sig":null,"attributes":[]},{"id":2037,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":939666,"byte_end":939670,"line_start":242,"line_end":242,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3040}],"docs":"","sig":null,"attributes":[]},{"id":2038,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":940093,"byte_end":940097,"line_start":262,"line_end":262,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2039,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":940183,"byte_end":940187,"line_start":265,"line_end":265,"column_start":19,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2040,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":940264,"byte_end":940268,"line_start":268,"line_end":268,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3048}],"docs":"","sig":null,"attributes":[]},{"id":2041,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":940434,"byte_end":940438,"line_start":276,"line_end":276,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3052}],"docs":"","sig":null,"attributes":[]},{"id":2042,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":940681,"byte_end":940685,"line_start":285,"line_end":285,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3056}],"docs":"","sig":null,"attributes":[]},{"id":2043,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":940865,"byte_end":940869,"line_start":293,"line_end":293,"column_start":26,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2044,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":940968,"byte_end":940972,"line_start":296,"line_end":296,"column_start":42,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3062},{"krate":0,"index":3064},{"krate":0,"index":3066},{"krate":0,"index":3068},{"krate":0,"index":3070}],"docs":"","sig":null,"attributes":[]},{"id":2045,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":941582,"byte_end":941586,"line_start":324,"line_end":324,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3074}],"docs":"","sig":null,"attributes":[]},{"id":2046,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":941772,"byte_end":941776,"line_start":332,"line_end":332,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3078}],"docs":"","sig":null,"attributes":[]},{"id":2047,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":941851,"byte_end":941855,"line_start":338,"line_end":338,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3082},{"krate":0,"index":3084},{"krate":0,"index":3086},{"krate":0,"index":3088},{"krate":0,"index":3090},{"krate":0,"index":3092},{"krate":0,"index":3094}],"docs":"","sig":null,"attributes":[]},{"id":2048,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":945000,"byte_end":945004,"line_start":474,"line_end":474,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3098}],"docs":"","sig":null,"attributes":[]},{"id":2049,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":945569,"byte_end":945573,"line_start":495,"line_end":495,"column_start":57,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2050,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":946107,"byte_end":946118,"line_start":513,"line_end":513,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3108}],"docs":"","sig":null,"attributes":[]},{"id":2051,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":946305,"byte_end":946316,"line_start":520,"line_end":520,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3112}],"docs":"","sig":null,"attributes":[]},{"id":2052,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":946704,"byte_end":946718,"line_start":533,"line_end":533,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3118}],"docs":"","sig":null,"attributes":[]},{"id":2053,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":946908,"byte_end":946922,"line_start":540,"line_end":540,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3122}],"docs":"","sig":null,"attributes":[]},{"id":2054,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":947270,"byte_end":947277,"line_start":552,"line_end":552,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3132},{"krate":0,"index":3134},{"krate":0,"index":3136},{"krate":0,"index":3138},{"krate":0,"index":3140}],"docs":"","sig":null,"attributes":[]},{"id":2055,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":950733,"byte_end":950740,"line_start":669,"line_end":669,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3144},{"krate":0,"index":3146},{"krate":0,"index":3148},{"krate":0,"index":3150},{"krate":0,"index":3152},{"krate":0,"index":3154}],"docs":"","sig":null,"attributes":[]},{"id":2056,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":956542,"byte_end":956549,"line_start":876,"line_end":876,"column_start":33,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2057,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":956643,"byte_end":956650,"line_start":879,"line_end":879,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2058,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":956729,"byte_end":956736,"line_start":882,"line_end":882,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3162}],"docs":"","sig":null,"attributes":[]},{"id":2059,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":957003,"byte_end":957010,"line_start":893,"line_end":893,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3166}],"docs":"","sig":null,"attributes":[]},{"id":2060,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":957265,"byte_end":957272,"line_start":902,"line_end":902,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3170}],"docs":"","sig":null,"attributes":[]},{"id":2061,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":957562,"byte_end":957569,"line_start":913,"line_end":913,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2062,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":957671,"byte_end":957678,"line_start":916,"line_end":916,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3176},{"krate":0,"index":3178},{"krate":0,"index":3180},{"krate":0,"index":3182},{"krate":0,"index":3184}],"docs":"","sig":null,"attributes":[]},{"id":2063,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":958825,"byte_end":958832,"line_start":959,"line_end":959,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3188}],"docs":"","sig":null,"attributes":[]},{"id":2064,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":959124,"byte_end":959131,"line_start":970,"line_end":970,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3192}],"docs":"","sig":null,"attributes":[]},{"id":2065,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":959320,"byte_end":959327,"line_start":977,"line_end":977,"column_start":60,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2066,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":959404,"byte_end":959413,"line_start":983,"line_end":983,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3200}],"docs":"","sig":null,"attributes":[]},{"id":2067,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":959717,"byte_end":959726,"line_start":996,"line_end":996,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3204}],"docs":"","sig":null,"attributes":[]},{"id":2068,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":959939,"byte_end":959948,"line_start":1005,"line_end":1005,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3208}],"docs":"","sig":null,"attributes":[]},{"id":2069,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":960769,"byte_end":960772,"line_start":1030,"line_end":1030,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3214},{"krate":0,"index":3216}],"docs":"","sig":null,"attributes":[]},{"id":2070,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":960894,"byte_end":960897,"line_start":1039,"line_end":1039,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3220},{"krate":0,"index":3222}],"docs":"","sig":null,"attributes":[]},{"id":2071,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":962527,"byte_end":962530,"line_start":1088,"line_end":1088,"column_start":74,"column_end":77},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2072,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":962651,"byte_end":962654,"line_start":1091,"line_end":1091,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3228}],"docs":"","sig":null,"attributes":[]},{"id":2073,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":962778,"byte_end":962784,"line_start":1097,"line_end":1097,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3232}],"docs":"","sig":null,"attributes":[]},{"id":2074,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":964035,"byte_end":964047,"line_start":1139,"line_end":1139,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3238}],"docs":"","sig":null,"attributes":[]},{"id":2075,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":964226,"byte_end":964238,"line_start":1148,"line_end":1148,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3242}],"docs":"","sig":null,"attributes":[]},{"id":2076,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":964884,"byte_end":964890,"line_start":1171,"line_end":1171,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3248},{"krate":0,"index":3250}],"docs":"","sig":null,"attributes":[]},{"id":2077,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":965071,"byte_end":965077,"line_start":1181,"line_end":1181,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3254}],"docs":"","sig":null,"attributes":[]},{"id":2078,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":965302,"byte_end":965308,"line_start":1189,"line_end":1189,"column_start":77,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2079,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":965429,"byte_end":965435,"line_start":1192,"line_end":1192,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3260}],"docs":"","sig":null,"attributes":[]},{"id":2080,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":968804,"byte_end":968814,"line_start":1262,"line_end":1262,"column_start":27,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2081,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":968830,"byte_end":968840,"line_start":1264,"line_end":1264,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3268},{"krate":0,"index":3270}],"docs":"","sig":null,"attributes":[]},{"id":2082,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":969665,"byte_end":969675,"line_start":1301,"line_end":1301,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3274}],"docs":"","sig":null,"attributes":[]},{"id":2083,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":970418,"byte_end":970428,"line_start":1326,"line_end":1326,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3278}],"docs":"","sig":null,"attributes":[]},{"id":2084,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":970659,"byte_end":970669,"line_start":1334,"line_end":1334,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3282}],"docs":"","sig":null,"attributes":[]},{"id":2085,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":970867,"byte_end":970877,"line_start":1341,"line_end":1341,"column_start":63,"column_end":73},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2088,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":992383,"byte_end":992397,"line_start":158,"line_end":158,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3316}],"docs":"","sig":null,"attributes":[]},{"id":2089,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":993025,"byte_end":993039,"line_start":180,"line_end":180,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3320}],"docs":"","sig":null,"attributes":[]},{"id":2092,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":994326,"byte_end":994342,"line_start":227,"line_end":227,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3336}],"docs":"","sig":null,"attributes":[]},{"id":2093,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":997393,"byte_end":997403,"line_start":36,"line_end":36,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3352},{"krate":0,"index":3354},{"krate":0,"index":3360}],"docs":"","sig":null,"attributes":[]},{"id":2094,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":1000923,"byte_end":1000933,"line_start":130,"line_end":130,"column_start":53,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2095,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":1003097,"byte_end":1003108,"line_start":203,"line_end":203,"column_start":44,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3368},{"krate":0,"index":3370},{"krate":0,"index":3372}],"docs":"","sig":null,"attributes":[]},{"id":2096,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":1004585,"byte_end":1004601,"line_start":246,"line_end":246,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3376}],"docs":"","sig":null,"attributes":[]},{"id":2097,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":1004873,"byte_end":1004889,"line_start":255,"line_end":255,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3380}],"docs":"","sig":null,"attributes":[]},{"id":2099,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":977643,"byte_end":977656,"line_start":155,"line_end":155,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3536},{"krate":0,"index":3538},{"krate":0,"index":3540},{"krate":0,"index":3542},{"krate":0,"index":3544}],"docs":"","sig":null,"attributes":[]},{"id":2100,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":979439,"byte_end":979452,"line_start":215,"line_end":215,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3548}],"docs":"","sig":null,"attributes":[]},{"id":2101,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":979975,"byte_end":979988,"line_start":231,"line_end":231,"column_start":24,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2102,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":980076,"byte_end":980089,"line_start":234,"line_end":234,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3554}],"docs":"","sig":null,"attributes":[]},{"id":2103,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":980873,"byte_end":980886,"line_start":265,"line_end":265,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3558},{"krate":0,"index":3560},{"krate":0,"index":3562},{"krate":0,"index":3564},{"krate":0,"index":3566},{"krate":0,"index":3568}],"docs":"","sig":null,"attributes":[]},{"id":2104,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":982868,"byte_end":982881,"line_start":332,"line_end":332,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3572}],"docs":"","sig":null,"attributes":[]},{"id":2105,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":983234,"byte_end":983247,"line_start":344,"line_end":344,"column_start":24,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2106,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":983335,"byte_end":983348,"line_start":347,"line_end":347,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3578}],"docs":"","sig":null,"attributes":[]},{"id":2107,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":984004,"byte_end":984015,"line_start":368,"line_end":368,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3582},{"krate":0,"index":3584},{"krate":0,"index":3586}],"docs":"","sig":null,"attributes":[]},{"id":2108,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":984259,"byte_end":984270,"line_start":375,"line_end":375,"column_start":28,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2109,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":984346,"byte_end":984357,"line_start":378,"line_end":378,"column_start":24,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2110,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":984443,"byte_end":984454,"line_start":381,"line_end":381,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3594}],"docs":"","sig":null,"attributes":[]},{"id":2111,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":985046,"byte_end":985057,"line_start":399,"line_end":399,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3598},{"krate":0,"index":3600}],"docs":"","sig":null,"attributes":[]},{"id":2112,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":985224,"byte_end":985235,"line_start":407,"line_end":407,"column_start":24,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2113,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":985723,"byte_end":985734,"line_start":421,"line_end":421,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3606},{"krate":0,"index":3608}],"docs":"","sig":null,"attributes":[]},{"id":2114,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":985901,"byte_end":985912,"line_start":429,"line_end":429,"column_start":24,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2115,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":986047,"byte_end":986062,"line_start":439,"line_end":439,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3614}],"docs":"","sig":null,"attributes":[]},{"id":2116,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":986471,"byte_end":986486,"line_start":453,"line_end":453,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3618},{"krate":0,"index":3620}],"docs":"","sig":null,"attributes":[]},{"id":2117,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":987054,"byte_end":987069,"line_start":474,"line_end":474,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3624}],"docs":"","sig":null,"attributes":[]},{"id":2118,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":987674,"byte_end":987685,"line_start":495,"line_end":495,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3628}],"docs":"","sig":null,"attributes":[]},{"id":2119,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":987877,"byte_end":987888,"line_start":502,"line_end":502,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3632}],"docs":"","sig":null,"attributes":[]},{"id":2120,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1049474,"byte_end":1049483,"line_start":46,"line_end":46,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3642},{"krate":0,"index":3644},{"krate":0,"index":3646},{"krate":0,"index":3648}],"docs":"","sig":null,"attributes":[]},{"id":2121,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1052211,"byte_end":1052220,"line_start":124,"line_end":124,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3652}],"docs":"","sig":null,"attributes":[]},{"id":2122,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1053743,"byte_end":1053751,"line_start":171,"line_end":171,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3656},{"krate":0,"index":3658},{"krate":0,"index":3660},{"krate":0,"index":3662}],"docs":"","sig":null,"attributes":[]},{"id":2123,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1056101,"byte_end":1056109,"line_start":249,"line_end":249,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3666}],"docs":"","sig":null,"attributes":[]},{"id":2136,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1239969,"byte_end":1239974,"line_start":209,"line_end":209,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4002},{"krate":0,"index":4004},{"krate":0,"index":4006},{"krate":0,"index":4008},{"krate":0,"index":4010},{"krate":0,"index":4012},{"krate":0,"index":4014}],"docs":"","sig":null,"attributes":[]},{"id":2137,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1242188,"byte_end":1242193,"line_start":282,"line_end":282,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4018}],"docs":"","sig":null,"attributes":[]},{"id":2138,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1242506,"byte_end":1242511,"line_start":295,"line_end":295,"column_start":38,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2139,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1242597,"byte_end":1242606,"line_start":298,"line_end":298,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4024},{"krate":0,"index":4026},{"krate":0,"index":4028},{"krate":0,"index":4030}],"docs":"","sig":null,"attributes":[]},{"id":2140,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1243190,"byte_end":1243199,"line_start":322,"line_end":322,"column_start":38,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2141,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1243302,"byte_end":1243311,"line_start":325,"line_end":325,"column_start":42,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2142,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1243408,"byte_end":1243422,"line_start":328,"line_end":328,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4038},{"krate":0,"index":4040},{"krate":0,"index":4042},{"krate":0,"index":4044},{"krate":0,"index":4048},{"krate":0,"index":4050},{"krate":0,"index":4052},{"krate":0,"index":4054}],"docs":"","sig":null,"attributes":[]},{"id":2143,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1245941,"byte_end":1245955,"line_start":422,"line_end":422,"column_start":44,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4058},{"krate":0,"index":4060}],"docs":"","sig":null,"attributes":[]},{"id":2144,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1247203,"byte_end":1247217,"line_start":463,"line_end":463,"column_start":38,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2145,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1247463,"byte_end":1247464,"line_start":471,"line_end":471,"column_start":33,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4070}],"docs":"","sig":null,"attributes":[]},{"id":2153,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1250023,"byte_end":1250029,"line_start":29,"line_end":29,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4096},{"krate":0,"index":4098},{"krate":0,"index":4100}],"docs":"","sig":null,"attributes":[]},{"id":2154,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1250311,"byte_end":1250317,"line_start":39,"line_end":39,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4104}],"docs":"","sig":null,"attributes":[]},{"id":2155,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1250492,"byte_end":1250498,"line_start":45,"line_end":45,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2156,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1250597,"byte_end":1250603,"line_start":48,"line_end":48,"column_start":38,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2157,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1252712,"byte_end":1252722,"line_start":122,"line_end":122,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4114},{"krate":0,"index":4116},{"krate":0,"index":4118}],"docs":"","sig":null,"attributes":[]},{"id":2158,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1253029,"byte_end":1253039,"line_start":133,"line_end":133,"column_start":50,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4122}],"docs":"","sig":null,"attributes":[]},{"id":2159,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1253225,"byte_end":1253235,"line_start":139,"line_end":139,"column_start":44,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2160,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1253344,"byte_end":1253354,"line_start":142,"line_end":142,"column_start":48,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2161,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1256049,"byte_end":1256054,"line_start":226,"line_end":226,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4134}],"docs":"","sig":null,"attributes":[]},{"id":2162,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1256223,"byte_end":1256228,"line_start":233,"line_end":233,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4138},{"krate":0,"index":4140},{"krate":0,"index":4142}],"docs":"","sig":null,"attributes":[]},{"id":2163,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1256476,"byte_end":1256481,"line_start":246,"line_end":246,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4146}],"docs":"","sig":null,"attributes":[]},{"id":2164,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1256633,"byte_end":1256638,"line_start":253,"line_end":253,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4150}],"docs":"","sig":null,"attributes":[]},{"id":2165,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1256776,"byte_end":1256781,"line_start":260,"line_end":260,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2166,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1256862,"byte_end":1256867,"line_start":263,"line_end":263,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2167,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1257025,"byte_end":1257030,"line_start":268,"line_end":268,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4158}],"docs":"","sig":null,"attributes":[]},{"id":2168,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1257268,"byte_end":1257273,"line_start":277,"line_end":277,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4162}],"docs":"","sig":null,"attributes":[]},{"id":2169,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1258131,"byte_end":1258135,"line_start":314,"line_end":314,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4168},{"krate":0,"index":4170},{"krate":0,"index":4172}],"docs":"","sig":null,"attributes":[]},{"id":2170,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1258406,"byte_end":1258410,"line_start":327,"line_end":327,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4176}],"docs":"","sig":null,"attributes":[]},{"id":2171,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1258579,"byte_end":1258583,"line_start":334,"line_end":334,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4180}],"docs":"","sig":null,"attributes":[]},{"id":2172,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1258736,"byte_end":1258740,"line_start":341,"line_end":341,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2173,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1258821,"byte_end":1258825,"line_start":344,"line_end":344,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2174,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1267349,"byte_end":1267350,"line_start":252,"line_end":252,"column_start":36,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4220},{"krate":0,"index":4222},{"krate":0,"index":4224}],"docs":"","sig":null,"attributes":[]},{"id":2223,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1286611,"byte_end":1286622,"line_start":849,"line_end":849,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4272},{"krate":0,"index":4274},{"krate":0,"index":4276}],"docs":"","sig":null,"attributes":[]},{"id":2224,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1287540,"byte_end":1287551,"line_start":881,"line_end":881,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4280},{"krate":0,"index":4282},{"krate":0,"index":4284}],"docs":"","sig":null,"attributes":[]},{"id":2225,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1288207,"byte_end":1288213,"line_start":908,"line_end":908,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4288}],"docs":"","sig":null,"attributes":[]},{"id":2226,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1289103,"byte_end":1289109,"line_start":936,"line_end":936,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4292}],"docs":"","sig":null,"attributes":[]},{"id":2227,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1071281,"byte_end":1071289,"line_start":361,"line_end":361,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4306},{"krate":0,"index":4308},{"krate":0,"index":4310},{"krate":0,"index":4312},{"krate":0,"index":4314}],"docs":"","sig":null,"attributes":[]},{"id":2228,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1071705,"byte_end":1071714,"line_start":379,"line_end":379,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4318},{"krate":0,"index":4320},{"krate":0,"index":4322},{"krate":0,"index":4324},{"krate":0,"index":4326}],"docs":"","sig":null,"attributes":[]},{"id":2229,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1072130,"byte_end":1072139,"line_start":395,"line_end":395,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":4330}],"docs":"","sig":null,"attributes":[]},{"id":2230,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1072344,"byte_end":1072353,"line_start":405,"line_end":405,"column_start":14,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":4334},{"krate":0,"index":4336}],"docs":"","sig":null,"attributes":[]},{"id":2231,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1073242,"byte_end":1073245,"line_start":437,"line_end":437,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4340},{"krate":0,"index":4342},{"krate":0,"index":4344},{"krate":0,"index":4346},{"krate":0,"index":4348},{"krate":0,"index":4350},{"krate":0,"index":4352}],"docs":"","sig":null,"attributes":[]},{"id":2232,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1074245,"byte_end":1074248,"line_start":473,"line_end":473,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4356},{"krate":0,"index":4358},{"krate":0,"index":4360},{"krate":0,"index":4362}],"docs":"","sig":null,"attributes":[]},{"id":2233,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1074932,"byte_end":1074935,"line_start":497,"line_end":497,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4366},{"krate":0,"index":4368}],"docs":"","sig":null,"attributes":[]},{"id":2234,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1075198,"byte_end":1075201,"line_start":510,"line_end":510,"column_start":27,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2235,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1075342,"byte_end":1075345,"line_start":514,"line_end":514,"column_start":31,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2236,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1075941,"byte_end":1075947,"line_start":532,"line_end":532,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4376},{"krate":0,"index":4378},{"krate":0,"index":4380},{"krate":0,"index":4382},{"krate":0,"index":4384}],"docs":"","sig":null,"attributes":[]},{"id":2237,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1076668,"byte_end":1076674,"line_start":559,"line_end":559,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":4388},{"krate":0,"index":4390},{"krate":0,"index":4392}],"docs":"","sig":null,"attributes":[]},{"id":2238,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1077311,"byte_end":1077317,"line_start":580,"line_end":580,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4396},{"krate":0,"index":4398}],"docs":"","sig":null,"attributes":[]},{"id":2239,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1077587,"byte_end":1077593,"line_start":593,"line_end":593,"column_start":38,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2240,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1077715,"byte_end":1077721,"line_start":598,"line_end":598,"column_start":51,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":4404},{"krate":0,"index":4406}],"docs":"","sig":null,"attributes":[]},{"id":2241,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1078040,"byte_end":1078046,"line_start":610,"line_end":610,"column_start":51,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":4410},{"krate":0,"index":4412}],"docs":"","sig":null,"attributes":[]},{"id":2242,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1078372,"byte_end":1078378,"line_start":622,"line_end":622,"column_start":42,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2243,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1078944,"byte_end":1078949,"line_start":643,"line_end":643,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4418},{"krate":0,"index":4420},{"krate":0,"index":4422}],"docs":"","sig":null,"attributes":[]},{"id":2244,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1079594,"byte_end":1079599,"line_start":666,"line_end":666,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2245,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1080359,"byte_end":1080365,"line_start":689,"line_end":689,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4428},{"krate":0,"index":4430},{"krate":0,"index":4432},{"krate":0,"index":4434}],"docs":"","sig":null,"attributes":[]},{"id":2246,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1082705,"byte_end":1082711,"line_start":763,"line_end":763,"column_start":31,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2247,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1083989,"byte_end":1083994,"line_start":805,"line_end":805,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4440},{"krate":0,"index":4442},{"krate":0,"index":4444},{"krate":0,"index":4446},{"krate":0,"index":4448},{"krate":0,"index":4450},{"krate":0,"index":4452},{"krate":0,"index":4454},{"krate":0,"index":4456}],"docs":"","sig":null,"attributes":[]},{"id":2248,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1087997,"byte_end":1088002,"line_start":945,"line_end":945,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4460},{"krate":0,"index":4462},{"krate":0,"index":4464}],"docs":"","sig":null,"attributes":[]},{"id":2249,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1089837,"byte_end":1089842,"line_start":1006,"line_end":1006,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2250,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1090010,"byte_end":1090015,"line_start":1012,"line_end":1012,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2251,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1090703,"byte_end":1090706,"line_start":1035,"line_end":1035,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4472},{"krate":0,"index":4474},{"krate":0,"index":4476},{"krate":0,"index":4478}],"docs":"","sig":null,"attributes":[]},{"id":2252,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1091175,"byte_end":1091178,"line_start":1056,"line_end":1056,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4482}],"docs":"","sig":null,"attributes":[]},{"id":2253,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1092100,"byte_end":1092103,"line_start":1088,"line_end":1088,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4502},{"krate":0,"index":4504},{"krate":0,"index":4506},{"krate":0,"index":4508},{"krate":0,"index":4510},{"krate":0,"index":4512}],"docs":"","sig":null,"attributes":[]},{"id":2254,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1093935,"byte_end":1093938,"line_start":1156,"line_end":1156,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4516},{"krate":0,"index":4518},{"krate":0,"index":4520},{"krate":0,"index":4522},{"krate":0,"index":4524}],"docs":"","sig":null,"attributes":[]},{"id":2255,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1096498,"byte_end":1096501,"line_start":1248,"line_end":1248,"column_start":34,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2256,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1096622,"byte_end":1096625,"line_start":1252,"line_end":1252,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4530},{"krate":0,"index":4532}],"docs":"","sig":null,"attributes":[]},{"id":2257,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1097029,"byte_end":1097032,"line_start":1266,"line_end":1266,"column_start":30,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2258,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1097176,"byte_end":1097179,"line_start":1270,"line_end":1270,"column_start":34,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2259,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1099173,"byte_end":1099176,"line_start":1333,"line_end":1333,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4540}],"docs":"","sig":null,"attributes":[]},{"id":2260,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1099427,"byte_end":1099430,"line_start":1342,"line_end":1342,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4544},{"krate":0,"index":4546},{"krate":0,"index":4548},{"krate":0,"index":4550},{"krate":0,"index":4552}],"docs":"","sig":null,"attributes":[]},{"id":2261,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1100248,"byte_end":1100251,"line_start":1371,"line_end":1371,"column_start":60,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4556},{"krate":0,"index":4558},{"krate":0,"index":4560}],"docs":"","sig":null,"attributes":[]},{"id":2262,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1100961,"byte_end":1100964,"line_start":1395,"line_end":1395,"column_start":56,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":4564},{"krate":0,"index":4566}],"docs":"","sig":null,"attributes":[]},{"id":2263,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1101231,"byte_end":1101234,"line_start":1408,"line_end":1408,"column_start":48,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2264,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1101368,"byte_end":1101371,"line_start":1412,"line_end":1412,"column_start":37,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2265,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1101500,"byte_end":1101503,"line_start":1417,"line_end":1417,"column_start":46,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4574},{"krate":0,"index":4576}],"docs":"","sig":null,"attributes":[]},{"id":2266,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1102324,"byte_end":1102330,"line_start":1444,"line_end":1444,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4580}],"docs":"","sig":null,"attributes":[]},{"id":2267,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1102581,"byte_end":1102587,"line_start":1453,"line_end":1453,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4584},{"krate":0,"index":4586},{"krate":0,"index":4588},{"krate":0,"index":4590},{"krate":0,"index":4592},{"krate":0,"index":4594}],"docs":"","sig":null,"attributes":[]},{"id":2268,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1104743,"byte_end":1104749,"line_start":1518,"line_end":1518,"column_start":57,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4598},{"krate":0,"index":4600},{"krate":0,"index":4602}],"docs":"","sig":null,"attributes":[]},{"id":2269,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1105819,"byte_end":1105825,"line_start":1557,"line_end":1557,"column_start":45,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2270,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1106449,"byte_end":1106458,"line_start":1576,"line_end":1576,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4608}],"docs":"","sig":null,"attributes":[]},{"id":2271,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1106715,"byte_end":1106724,"line_start":1585,"line_end":1585,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4612},{"krate":0,"index":4614},{"krate":0,"index":4616},{"krate":0,"index":4618},{"krate":0,"index":4620}],"docs":"","sig":null,"attributes":[]},{"id":2272,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1107964,"byte_end":1107973,"line_start":1630,"line_end":1630,"column_start":60,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":4624},{"krate":0,"index":4626},{"krate":0,"index":4628}],"docs":"","sig":null,"attributes":[]},{"id":2273,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1109007,"byte_end":1109016,"line_start":1667,"line_end":1667,"column_start":48,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2274,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1109631,"byte_end":1109640,"line_start":1686,"line_end":1686,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4634},{"krate":0,"index":4636},{"krate":0,"index":4638},{"krate":0,"index":4640},{"krate":0,"index":4642},{"krate":0,"index":4644},{"krate":0,"index":4646}],"docs":"","sig":null,"attributes":[]},{"id":2275,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1111646,"byte_end":1111655,"line_start":1757,"line_end":1757,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4650},{"krate":0,"index":4652},{"krate":0,"index":4654}],"docs":"","sig":null,"attributes":[]},{"id":2276,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1113091,"byte_end":1113100,"line_start":1798,"line_end":1798,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4658},{"krate":0,"index":4660}],"docs":"","sig":null,"attributes":[]},{"id":2277,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1113318,"byte_end":1113327,"line_start":1809,"line_end":1809,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4664},{"krate":0,"index":4666}],"docs":"","sig":null,"attributes":[]},{"id":2278,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1113653,"byte_end":1113662,"line_start":1822,"line_end":1822,"column_start":27,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2279,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1113777,"byte_end":1113786,"line_start":1825,"line_end":1825,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2280,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1114728,"byte_end":1114736,"line_start":1852,"line_end":1852,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4674},{"krate":0,"index":4676},{"krate":0,"index":4678},{"krate":0,"index":4680},{"krate":0,"index":4682},{"krate":0,"index":4684},{"krate":0,"index":4686},{"krate":0,"index":4688}],"docs":"","sig":null,"attributes":[]},{"id":2281,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1117153,"byte_end":1117161,"line_start":1939,"line_end":1939,"column_start":50,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2282,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1117257,"byte_end":1117265,"line_start":1942,"line_end":1942,"column_start":42,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2283,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1117291,"byte_end":1117299,"line_start":1944,"line_end":1944,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4696}],"docs":"","sig":null,"attributes":[]},{"id":2284,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1119530,"byte_end":1119539,"line_start":2013,"line_end":2013,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4700}],"docs":"","sig":null,"attributes":[]},{"id":2285,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1119832,"byte_end":1119841,"line_start":2023,"line_end":2023,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4704},{"krate":0,"index":4706},{"krate":0,"index":4708},{"krate":0,"index":4710},{"krate":0,"index":4712}],"docs":"","sig":null,"attributes":[]},{"id":2286,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1121260,"byte_end":1121269,"line_start":2076,"line_end":2076,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2287,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1121930,"byte_end":1121939,"line_start":2096,"line_end":2096,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4718}],"docs":"","sig":null,"attributes":[]},{"id":2288,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1122232,"byte_end":1122241,"line_start":2106,"line_end":2106,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4722},{"krate":0,"index":4724},{"krate":0,"index":4726},{"krate":0,"index":4728}],"docs":"","sig":null,"attributes":[]},{"id":2289,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1123578,"byte_end":1123587,"line_start":2155,"line_end":2155,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2290,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1124167,"byte_end":1124171,"line_start":2174,"line_end":2174,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4734},{"krate":0,"index":4736},{"krate":0,"index":4738},{"krate":0,"index":4740},{"krate":0,"index":4742},{"krate":0,"index":4744},{"krate":0,"index":4746},{"krate":0,"index":4748}],"docs":"","sig":null,"attributes":[]},{"id":2291,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1126441,"byte_end":1126445,"line_start":2264,"line_end":2264,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2292,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1126579,"byte_end":1126583,"line_start":2267,"line_end":2267,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4754},{"krate":0,"index":4756}],"docs":"","sig":null,"attributes":[]},{"id":2293,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1127392,"byte_end":1127396,"line_start":2294,"line_end":2294,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2294,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1127961,"byte_end":1127965,"line_start":2312,"line_end":2312,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4762},{"krate":0,"index":4764},{"krate":0,"index":4766},{"krate":0,"index":4768},{"krate":0,"index":4770}],"docs":"","sig":null,"attributes":[]},{"id":2295,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1129472,"byte_end":1129476,"line_start":2372,"line_end":2372,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2296,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1129584,"byte_end":1129588,"line_start":2375,"line_end":2375,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2297,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1129715,"byte_end":1129719,"line_start":2378,"line_end":2378,"column_start":43,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2298,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1130308,"byte_end":1130312,"line_start":2397,"line_end":2397,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":4780}],"docs":"","sig":null,"attributes":[]},{"id":2299,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1130603,"byte_end":1130607,"line_start":2407,"line_end":2407,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4784},{"krate":0,"index":4786},{"krate":0,"index":4788},{"krate":0,"index":4790}],"docs":"","sig":null,"attributes":[]},{"id":2300,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1132173,"byte_end":1132180,"line_start":2454,"line_end":2454,"column_start":61,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":4796}],"docs":"","sig":null,"attributes":[]},{"id":2301,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1132423,"byte_end":1132430,"line_start":2461,"line_end":2461,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4800}],"docs":"","sig":null,"attributes":[]},{"id":2302,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1132712,"byte_end":1132719,"line_start":2470,"line_end":2470,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":4804},{"krate":0,"index":4806},{"krate":0,"index":4808},{"krate":0,"index":4810},{"krate":0,"index":4812}],"docs":"","sig":null,"attributes":[]},{"id":2303,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1133455,"byte_end":1133462,"line_start":2497,"line_end":2497,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":4816},{"krate":0,"index":4818},{"krate":0,"index":4820}],"docs":"","sig":null,"attributes":[]},{"id":2304,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1134138,"byte_end":1134145,"line_start":2521,"line_end":2521,"column_start":33,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2305,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1134897,"byte_end":1134904,"line_start":2540,"line_end":2540,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4828}],"docs":"","sig":null,"attributes":[]},{"id":2306,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1135254,"byte_end":1135261,"line_start":2550,"line_end":2550,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4832}],"docs":"","sig":null,"attributes":[]},{"id":2307,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1135538,"byte_end":1135545,"line_start":2558,"line_end":2558,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4836},{"krate":0,"index":4838},{"krate":0,"index":4840},{"krate":0,"index":4842},{"krate":0,"index":4844}],"docs":"","sig":null,"attributes":[]},{"id":2308,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1136328,"byte_end":1136335,"line_start":2586,"line_end":2586,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4848},{"krate":0,"index":4850},{"krate":0,"index":4852}],"docs":"","sig":null,"attributes":[]},{"id":2309,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1137030,"byte_end":1137037,"line_start":2609,"line_end":2609,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2310,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1137582,"byte_end":1137595,"line_start":2627,"line_end":2627,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4860},{"krate":0,"index":4862},{"krate":0,"index":4864},{"krate":0,"index":4866},{"krate":0,"index":4868}],"docs":"","sig":null,"attributes":[]},{"id":2311,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1139818,"byte_end":1139831,"line_start":2696,"line_end":2696,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4872},{"krate":0,"index":4874},{"krate":0,"index":4876}],"docs":"","sig":null,"attributes":[]},{"id":2312,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1142146,"byte_end":1142150,"line_start":2769,"line_end":2769,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2313,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1142243,"byte_end":1142247,"line_start":2772,"line_end":2772,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4882},{"krate":0,"index":4884},{"krate":0,"index":4886},{"krate":0,"index":4888},{"krate":0,"index":4890},{"krate":0,"index":4892},{"krate":0,"index":4894},{"krate":0,"index":4896}],"docs":"","sig":null,"attributes":[]},{"id":2314,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1144022,"byte_end":1144026,"line_start":2850,"line_end":2850,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4900},{"krate":0,"index":4902},{"krate":0,"index":4904}],"docs":"","sig":null,"attributes":[]},{"id":2315,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1144996,"byte_end":1145000,"line_start":2887,"line_end":2887,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4908},{"krate":0,"index":4910}],"docs":"","sig":null,"attributes":[]},{"id":2316,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1145295,"byte_end":1145299,"line_start":2900,"line_end":2900,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4914},{"krate":0,"index":4916},{"krate":0,"index":4918},{"krate":0,"index":4920},{"krate":0,"index":4922},{"krate":0,"index":4924},{"krate":0,"index":4926}],"docs":"","sig":null,"attributes":[]},{"id":2317,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1146261,"byte_end":1146265,"line_start":2942,"line_end":2942,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4930},{"krate":0,"index":4932},{"krate":0,"index":4934}],"docs":"","sig":null,"attributes":[]},{"id":2318,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1146901,"byte_end":1146905,"line_start":2967,"line_end":2967,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4938},{"krate":0,"index":4940}],"docs":"","sig":null,"attributes":[]},{"id":2319,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1147654,"byte_end":1147661,"line_start":2994,"line_end":2994,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4944}],"docs":"","sig":null,"attributes":[]},{"id":2320,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1147854,"byte_end":1147861,"line_start":3002,"line_end":3002,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4948}],"docs":"","sig":null,"attributes":[]},{"id":2321,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1148153,"byte_end":1148160,"line_start":3014,"line_end":3014,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4952},{"krate":0,"index":4954},{"krate":0,"index":4956},{"krate":0,"index":4958},{"krate":0,"index":4960}],"docs":"","sig":null,"attributes":[]},{"id":2322,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1149092,"byte_end":1149099,"line_start":3046,"line_end":3046,"column_start":57,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":4964},{"krate":0,"index":4966},{"krate":0,"index":4968}],"docs":"","sig":null,"attributes":[]},{"id":2323,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1149917,"byte_end":1149924,"line_start":3073,"line_end":3073,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4972},{"krate":0,"index":4974}],"docs":"","sig":null,"attributes":[]},{"id":2324,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1150184,"byte_end":1150191,"line_start":3086,"line_end":3086,"column_start":45,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2325,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1297572,"byte_end":1297578,"line_start":172,"line_end":172,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4996},{"krate":0,"index":4998},{"krate":0,"index":5000},{"krate":0,"index":5002},{"krate":0,"index":5004},{"krate":0,"index":5006},{"krate":0,"index":5008},{"krate":0,"index":5010},{"krate":0,"index":5012},{"krate":0,"index":5014},{"krate":0,"index":5016},{"krate":0,"index":5018},{"krate":0,"index":5020},{"krate":0,"index":5022},{"krate":0,"index":5024},{"krate":0,"index":5026},{"krate":0,"index":5028},{"krate":0,"index":5030},{"krate":0,"index":5032},{"krate":0,"index":5034},{"krate":0,"index":5036},{"krate":0,"index":5038},{"krate":0,"index":5040}],"docs":"","sig":null,"attributes":[]},{"id":2326,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1316094,"byte_end":1316100,"line_start":804,"line_end":804,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":5044}],"docs":"","sig":null,"attributes":[]},{"id":2327,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1316575,"byte_end":1316581,"line_start":823,"line_end":823,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":5048}],"docs":"","sig":null,"attributes":[]},{"id":2328,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1317091,"byte_end":1317097,"line_start":842,"line_end":842,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":5052}],"docs":"","sig":null,"attributes":[]},{"id":2329,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1318438,"byte_end":1318444,"line_start":881,"line_end":881,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":5056}],"docs":"","sig":null,"attributes":[]},{"id":2330,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1319697,"byte_end":1319703,"line_start":923,"line_end":923,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5062}],"docs":"","sig":null,"attributes":[]},{"id":2331,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1319902,"byte_end":1319908,"line_start":932,"line_end":932,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5066},{"krate":0,"index":5068},{"krate":0,"index":5070}],"docs":"","sig":null,"attributes":[]},{"id":2332,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1320977,"byte_end":1320983,"line_start":976,"line_end":976,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5090}],"docs":"","sig":null,"attributes":[]},{"id":2333,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1321316,"byte_end":1321320,"line_start":991,"line_end":991,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":5094},{"krate":0,"index":5096},{"krate":0,"index":5098}],"docs":"","sig":null,"attributes":[]},{"id":2334,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1321642,"byte_end":1321646,"line_start":1008,"line_end":1008,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5102}],"docs":"","sig":null,"attributes":[]},{"id":2335,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1321772,"byte_end":1321776,"line_start":1015,"line_end":1015,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2336,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1321809,"byte_end":1321813,"line_start":1016,"line_end":1016,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2337,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1321850,"byte_end":1321854,"line_start":1017,"line_end":1017,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2338,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1322408,"byte_end":1322412,"line_start":1033,"line_end":1033,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5112},{"krate":0,"index":5114},{"krate":0,"index":5116}],"docs":"","sig":null,"attributes":[]},{"id":2339,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1322698,"byte_end":1322702,"line_start":1043,"line_end":1043,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5120}],"docs":"","sig":null,"attributes":[]},{"id":2340,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1322881,"byte_end":1322885,"line_start":1049,"line_end":1049,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2341,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1322974,"byte_end":1322978,"line_start":1052,"line_end":1052,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2342,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1323078,"byte_end":1323082,"line_start":1055,"line_end":1055,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2343,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1323162,"byte_end":1323166,"line_start":1058,"line_end":1058,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5130}],"docs":"","sig":null,"attributes":[]},{"id":2344,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1323838,"byte_end":1323845,"line_start":1078,"line_end":1078,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":5134},{"krate":0,"index":5136},{"krate":0,"index":5138}],"docs":"","sig":null,"attributes":[]},{"id":2345,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1324139,"byte_end":1324146,"line_start":1088,"line_end":1088,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5142}],"docs":"","sig":null,"attributes":[]},{"id":2346,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1324329,"byte_end":1324336,"line_start":1094,"line_end":1094,"column_start":35,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2347,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1324425,"byte_end":1324432,"line_start":1097,"line_end":1097,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2348,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1324531,"byte_end":1324538,"line_start":1099,"line_end":1099,"column_start":35,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2349,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1325100,"byte_end":1325108,"line_start":1115,"line_end":1115,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5152},{"krate":0,"index":5154},{"krate":0,"index":5156}],"docs":"","sig":null,"attributes":[]},{"id":2350,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1325378,"byte_end":1325386,"line_start":1125,"line_end":1125,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5160}],"docs":"","sig":null,"attributes":[]},{"id":2351,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1325553,"byte_end":1325561,"line_start":1131,"line_end":1131,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2352,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1325642,"byte_end":1325650,"line_start":1134,"line_end":1134,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2353,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1325742,"byte_end":1325750,"line_start":1137,"line_end":1137,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2354,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1326033,"byte_end":1326039,"line_start":1144,"line_end":1144,"column_start":57,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":5170}],"docs":"","sig":null,"attributes":[]},{"id":2355,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1327136,"byte_end":1327143,"line_start":1175,"line_end":1175,"column_start":62,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":5176},{"krate":0,"index":5178},{"krate":0,"index":5180}],"docs":"","sig":null,"attributes":[]},{"id":2356,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1328706,"byte_end":1328712,"line_start":1221,"line_end":1221,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":5184},{"krate":0,"index":5186},{"krate":0,"index":5188},{"krate":0,"index":5190},{"krate":0,"index":5192}],"docs":"","sig":null,"attributes":[]},{"id":2357,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1341219,"byte_end":1341225,"line_start":270,"line_end":270,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":5212},{"krate":0,"index":5214},{"krate":0,"index":5216},{"krate":0,"index":5218},{"krate":0,"index":5220},{"krate":0,"index":5222},{"krate":0,"index":5224},{"krate":0,"index":5226},{"krate":0,"index":5228},{"krate":0,"index":5230},{"krate":0,"index":5232},{"krate":0,"index":5234},{"krate":0,"index":5236},{"krate":0,"index":5238},{"krate":0,"index":5240},{"krate":0,"index":5242}],"docs":"","sig":null,"attributes":[]},{"id":2358,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1355666,"byte_end":1355672,"line_start":753,"line_end":753,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5246},{"krate":0,"index":5248}],"docs":"","sig":null,"attributes":[]},{"id":2359,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1357373,"byte_end":1357379,"line_start":814,"line_end":814,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5252},{"krate":0,"index":5254}],"docs":"","sig":null,"attributes":[]},{"id":2360,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1359066,"byte_end":1359072,"line_start":874,"line_end":874,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5258}],"docs":"","sig":null,"attributes":[]},{"id":2361,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1360377,"byte_end":1360383,"line_start":912,"line_end":912,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":5262}],"docs":"","sig":null,"attributes":[]},{"id":2362,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1361675,"byte_end":1361681,"line_start":953,"line_end":953,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5268},{"krate":0,"index":5270},{"krate":0,"index":5272}],"docs":"","sig":null,"attributes":[]},{"id":2363,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1363562,"byte_end":1363566,"line_start":1020,"line_end":1020,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5292},{"krate":0,"index":5294},{"krate":0,"index":5296}],"docs":"","sig":null,"attributes":[]},{"id":2364,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1363908,"byte_end":1363912,"line_start":1033,"line_end":1033,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5300}],"docs":"","sig":null,"attributes":[]},{"id":2365,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1364086,"byte_end":1364090,"line_start":1039,"line_end":1039,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2366,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1364179,"byte_end":1364183,"line_start":1042,"line_end":1042,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2367,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1364283,"byte_end":1364287,"line_start":1045,"line_end":1045,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2368,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1364367,"byte_end":1364371,"line_start":1048,"line_end":1048,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5310}],"docs":"","sig":null,"attributes":[]},{"id":2369,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1364901,"byte_end":1364908,"line_start":1064,"line_end":1064,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":5314},{"krate":0,"index":5316},{"krate":0,"index":5318}],"docs":"","sig":null,"attributes":[]},{"id":2370,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1365258,"byte_end":1365265,"line_start":1077,"line_end":1077,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5322}],"docs":"","sig":null,"attributes":[]},{"id":2371,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1365443,"byte_end":1365450,"line_start":1083,"line_end":1083,"column_start":35,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2372,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1365539,"byte_end":1365546,"line_start":1086,"line_end":1086,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2373,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1365646,"byte_end":1365653,"line_start":1089,"line_end":1089,"column_start":35,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2374,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1366324,"byte_end":1366332,"line_start":1107,"line_end":1107,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5332},{"krate":0,"index":5334},{"krate":0,"index":5336}],"docs":"","sig":null,"attributes":[]},{"id":2375,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1366658,"byte_end":1366666,"line_start":1120,"line_end":1120,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5340}],"docs":"","sig":null,"attributes":[]},{"id":2376,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1366828,"byte_end":1366836,"line_start":1126,"line_end":1126,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2377,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1366917,"byte_end":1366925,"line_start":1129,"line_end":1129,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2378,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1367017,"byte_end":1367025,"line_start":1132,"line_end":1132,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2379,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1367314,"byte_end":1367320,"line_start":1139,"line_end":1139,"column_start":63,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":5350}],"docs":"","sig":null,"attributes":[]},{"id":2380,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1368277,"byte_end":1368284,"line_start":1164,"line_end":1164,"column_start":68,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":5356},{"krate":0,"index":5358},{"krate":0,"index":5360}],"docs":"","sig":null,"attributes":[]},{"id":2381,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1369176,"byte_end":1369182,"line_start":1196,"line_end":1196,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5364},{"krate":0,"index":5366},{"krate":0,"index":5368},{"krate":0,"index":5370},{"krate":0,"index":5372}],"docs":"","sig":null,"attributes":[]},{"id":2382,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,114,111,116,97,116,101,46,114,115],"byte_start":1465520,"byte_end":1465528,"line_start":28,"line_end":28,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":5470},{"krate":0,"index":5472},{"krate":0,"index":5474}],"docs":"","sig":null,"attributes":[]},{"id":2383,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,115,111,114,116,46,114,115],"byte_start":1468960,"byte_end":1468970,"line_start":29,"line_end":29,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":5490}],"docs":"","sig":null,"attributes":[]},{"id":2385,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1396237,"byte_end":1396242,"line_start":876,"line_end":876,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":5792},{"krate":0,"index":5794},{"krate":0,"index":5796},{"krate":0,"index":5798},{"krate":0,"index":5800},{"krate":0,"index":5802},{"krate":0,"index":5804}],"docs":"","sig":null,"attributes":[]},{"id":2386,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1397938,"byte_end":1397945,"line_start":937,"line_end":937,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5808},{"krate":0,"index":5810},{"krate":0,"index":5812},{"krate":0,"index":5814},{"krate":0,"index":5816},{"krate":0,"index":5818},{"krate":0,"index":5820}],"docs":"","sig":null,"attributes":[]},{"id":2387,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1398767,"byte_end":1398776,"line_start":972,"line_end":972,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5824},{"krate":0,"index":5826},{"krate":0,"index":5828},{"krate":0,"index":5830},{"krate":0,"index":5832},{"krate":0,"index":5834},{"krate":0,"index":5836}],"docs":"","sig":null,"attributes":[]},{"id":2388,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1399670,"byte_end":1399679,"line_start":1007,"line_end":1007,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5840},{"krate":0,"index":5842},{"krate":0,"index":5844},{"krate":0,"index":5846},{"krate":0,"index":5848},{"krate":0,"index":5850},{"krate":0,"index":5852}],"docs":"","sig":null,"attributes":[]},{"id":2389,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1400351,"byte_end":1400365,"line_start":1043,"line_end":1043,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":5856},{"krate":0,"index":5858},{"krate":0,"index":5860},{"krate":0,"index":5862},{"krate":0,"index":5864},{"krate":0,"index":5866},{"krate":0,"index":5868}],"docs":"","sig":null,"attributes":[]},{"id":2390,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1401597,"byte_end":1401613,"line_start":1084,"line_end":1084,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":5872},{"krate":0,"index":5874},{"krate":0,"index":5876},{"krate":0,"index":5878},{"krate":0,"index":5880},{"krate":0,"index":5882},{"krate":0,"index":5884}],"docs":"","sig":null,"attributes":[]},{"id":2391,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1411756,"byte_end":1411760,"line_start":1391,"line_end":1391,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":5922}],"docs":"","sig":null,"attributes":[]},{"id":2392,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1412007,"byte_end":1412011,"line_start":1400,"line_end":1400,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2393,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1412102,"byte_end":1412106,"line_start":1402,"line_end":1402,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2394,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1412130,"byte_end":1412134,"line_start":1404,"line_end":1404,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":5930},{"krate":0,"index":5932}],"docs":"","sig":null,"attributes":[]},{"id":2395,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1413664,"byte_end":1413668,"line_start":1452,"line_end":1452,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5936}],"docs":"","sig":null,"attributes":[]},{"id":2396,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1413826,"byte_end":1413830,"line_start":1459,"line_end":1459,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2397,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1413930,"byte_end":1413934,"line_start":1462,"line_end":1462,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2398,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1414014,"byte_end":1414018,"line_start":1465,"line_end":1465,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5944}],"docs":"","sig":null,"attributes":[]},{"id":2399,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1414217,"byte_end":1414221,"line_start":1470,"line_end":1470,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5948}],"docs":"","sig":null,"attributes":[]},{"id":2400,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1415178,"byte_end":1415185,"line_start":1508,"line_end":1508,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":5954}],"docs":"","sig":null,"attributes":[]},{"id":2401,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1415451,"byte_end":1415458,"line_start":1517,"line_end":1517,"column_start":35,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2402,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1415549,"byte_end":1415556,"line_start":1519,"line_end":1519,"column_start":35,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2403,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1415580,"byte_end":1415587,"line_start":1521,"line_end":1521,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":5962},{"krate":0,"index":5964}],"docs":"","sig":null,"attributes":[]},{"id":2404,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1417621,"byte_end":1417628,"line_start":1580,"line_end":1580,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5968}],"docs":"","sig":null,"attributes":[]},{"id":2405,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1417786,"byte_end":1417793,"line_start":1587,"line_end":1587,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2406,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1417893,"byte_end":1417900,"line_start":1590,"line_end":1590,"column_start":35,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2407,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1419958,"byte_end":1419963,"line_start":1662,"line_end":1662,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":6000}],"docs":"","sig":null,"attributes":[]},{"id":2408,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1420331,"byte_end":1420336,"line_start":1673,"line_end":1673,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":6004}],"docs":"","sig":null,"attributes":[]},{"id":2409,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1420631,"byte_end":1420636,"line_start":1684,"line_end":1684,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":6008},{"krate":0,"index":6010},{"krate":0,"index":6012}],"docs":"","sig":null,"attributes":[]},{"id":2410,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1421347,"byte_end":1421352,"line_start":1712,"line_end":1712,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":6016}],"docs":"","sig":null,"attributes":[]},{"id":2411,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1421795,"byte_end":1421800,"line_start":1728,"line_end":1728,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":6020}],"docs":"","sig":null,"attributes":[]},{"id":2412,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1422067,"byte_end":1422072,"line_start":1736,"line_end":1736,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2413,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1422672,"byte_end":1422680,"line_start":1753,"line_end":1753,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":6028}],"docs":"","sig":null,"attributes":[]},{"id":2414,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1422954,"byte_end":1422962,"line_start":1762,"line_end":1762,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":6032}],"docs":"","sig":null,"attributes":[]},{"id":2415,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1423307,"byte_end":1423315,"line_start":1775,"line_end":1775,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":6036},{"krate":0,"index":6038},{"krate":0,"index":6040}],"docs":"","sig":null,"attributes":[]},{"id":2416,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1424383,"byte_end":1424391,"line_start":1810,"line_end":1810,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":6044}],"docs":"","sig":null,"attributes":[]},{"id":2417,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1425095,"byte_end":1425103,"line_start":1834,"line_end":1834,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2418,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1425777,"byte_end":1425783,"line_start":1850,"line_end":1850,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":6050}],"docs":"","sig":null,"attributes":[]},{"id":2419,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1426121,"byte_end":1426127,"line_start":1860,"line_end":1860,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":6054},{"krate":0,"index":6056},{"krate":0,"index":6058}],"docs":"","sig":null,"attributes":[]},{"id":2420,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1426489,"byte_end":1426495,"line_start":1875,"line_end":1875,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6062}],"docs":"","sig":null,"attributes":[]},{"id":2421,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1426717,"byte_end":1426723,"line_start":1883,"line_end":1883,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":6066}],"docs":"","sig":null,"attributes":[]},{"id":2422,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1426948,"byte_end":1426954,"line_start":1891,"line_end":1891,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2423,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1427580,"byte_end":1427589,"line_start":1906,"line_end":1906,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":6074}],"docs":"","sig":null,"attributes":[]},{"id":2424,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1427931,"byte_end":1427940,"line_start":1916,"line_end":1916,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":6078}],"docs":"","sig":null,"attributes":[]},{"id":2425,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1428164,"byte_end":1428173,"line_start":1924,"line_end":1924,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":6082},{"krate":0,"index":6084},{"krate":0,"index":6086}],"docs":"","sig":null,"attributes":[]},{"id":2426,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1428543,"byte_end":1428552,"line_start":1939,"line_end":1939,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":6090}],"docs":"","sig":null,"attributes":[]},{"id":2427,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1428787,"byte_end":1428796,"line_start":1949,"line_end":1949,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2428,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1429103,"byte_end":1429116,"line_start":1960,"line_end":1960,"column_start":44,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":6096},{"krate":0,"index":6098},{"krate":0,"index":6100}],"docs":"","sig":null,"attributes":[]},{"id":2429,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1430133,"byte_end":1430139,"line_start":1992,"line_end":1992,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":6106}],"docs":"","sig":null,"attributes":[]},{"id":2430,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1430949,"byte_end":1430956,"line_start":2014,"line_end":2014,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":6112}],"docs":"","sig":null,"attributes":[]},{"id":2431,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1431740,"byte_end":1431749,"line_start":2035,"line_end":2035,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":6118}],"docs":"","sig":null,"attributes":[]},{"id":2432,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1432580,"byte_end":1432590,"line_start":2057,"line_end":2057,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":6124}],"docs":"","sig":null,"attributes":[]},{"id":2433,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1434194,"byte_end":1434201,"line_start":2110,"line_end":2110,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":6130}],"docs":"","sig":null,"attributes":[]},{"id":2434,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1434411,"byte_end":1434418,"line_start":2120,"line_end":2120,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":6134},{"krate":0,"index":6136},{"krate":0,"index":6138},{"krate":0,"index":6140},{"krate":0,"index":6142},{"krate":0,"index":6144}],"docs":"","sig":null,"attributes":[]},{"id":2435,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1435682,"byte_end":1435689,"line_start":2174,"line_end":2174,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":6148}],"docs":"","sig":null,"attributes":[]},{"id":2436,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1436060,"byte_end":1436067,"line_start":2188,"line_end":2188,"column_start":35,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2437,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1436156,"byte_end":1436163,"line_start":2191,"line_end":2191,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2438,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1436233,"byte_end":1436240,"line_start":2194,"line_end":2194,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":6156},{"krate":0,"index":6158}],"docs":"","sig":null,"attributes":[]},{"id":2439,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1437098,"byte_end":1437104,"line_start":2220,"line_end":2220,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":6162}],"docs":"","sig":null,"attributes":[]},{"id":2440,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1437324,"byte_end":1437330,"line_start":2230,"line_end":2230,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":6166},{"krate":0,"index":6168},{"krate":0,"index":6170},{"krate":0,"index":6172},{"krate":0,"index":6174},{"krate":0,"index":6176}],"docs":"","sig":null,"attributes":[]},{"id":2441,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1438961,"byte_end":1438967,"line_start":2291,"line_end":2291,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6180}],"docs":"","sig":null,"attributes":[]},{"id":2442,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1439466,"byte_end":1439472,"line_start":2307,"line_end":2307,"column_start":35,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2443,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1439561,"byte_end":1439567,"line_start":2310,"line_end":2310,"column_start":31,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2444,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1439637,"byte_end":1439643,"line_start":2313,"line_end":2313,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":6188},{"krate":0,"index":6190}],"docs":"","sig":null,"attributes":[]},{"id":2445,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1440675,"byte_end":1440684,"line_start":2341,"line_end":2341,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":6194},{"krate":0,"index":6196},{"krate":0,"index":6198},{"krate":0,"index":6200},{"krate":0,"index":6202},{"krate":0,"index":6204}],"docs":"","sig":null,"attributes":[]},{"id":2446,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1442500,"byte_end":1442509,"line_start":2405,"line_end":2405,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6208}],"docs":"","sig":null,"attributes":[]},{"id":2447,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1443097,"byte_end":1443106,"line_start":2423,"line_end":2423,"column_start":35,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2448,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1443195,"byte_end":1443204,"line_start":2426,"line_end":2426,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2449,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1443274,"byte_end":1443283,"line_start":2429,"line_end":2429,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":6216},{"krate":0,"index":6218}],"docs":"","sig":null,"attributes":[]},{"id":2450,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1444402,"byte_end":1444413,"line_start":2460,"line_end":2460,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":6222}],"docs":"","sig":null,"attributes":[]},{"id":2451,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1444652,"byte_end":1444663,"line_start":2470,"line_end":2470,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":6226},{"krate":0,"index":6228},{"krate":0,"index":6230},{"krate":0,"index":6232},{"krate":0,"index":6234},{"krate":0,"index":6236}],"docs":"","sig":null,"attributes":[]},{"id":2452,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1445723,"byte_end":1445734,"line_start":2515,"line_end":2515,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":6240}],"docs":"","sig":null,"attributes":[]},{"id":2453,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1446119,"byte_end":1446130,"line_start":2529,"line_end":2529,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6244}],"docs":"","sig":null,"attributes":[]},{"id":2454,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1446293,"byte_end":1446304,"line_start":2536,"line_end":2536,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2455,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1446374,"byte_end":1446385,"line_start":2539,"line_end":2539,"column_start":44,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":6250},{"krate":0,"index":6252}],"docs":"","sig":null,"attributes":[]},{"id":2456,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1447303,"byte_end":1447317,"line_start":2563,"line_end":2563,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":6256},{"krate":0,"index":6258},{"krate":0,"index":6260},{"krate":0,"index":6262},{"krate":0,"index":6264},{"krate":0,"index":6266}],"docs":"","sig":null,"attributes":[]},{"id":2457,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1448512,"byte_end":1448526,"line_start":2610,"line_end":2610,"column_start":37,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":6270}],"docs":"","sig":null,"attributes":[]},{"id":2458,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1449010,"byte_end":1449024,"line_start":2626,"line_end":2626,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":6274}],"docs":"","sig":null,"attributes":[]},{"id":2459,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1449187,"byte_end":1449201,"line_start":2633,"line_end":2633,"column_start":31,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2460,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1449271,"byte_end":1449285,"line_start":2636,"line_end":2636,"column_start":44,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":6280},{"krate":0,"index":6282}],"docs":"","sig":null,"attributes":[]},{"id":2473,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1457160,"byte_end":1457164,"line_start":2918,"line_end":2918,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":6356},{"krate":0,"index":6358}],"docs":"","sig":null,"attributes":[]},{"id":2474,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1457387,"byte_end":1457394,"line_start":2926,"line_end":2926,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":6362},{"krate":0,"index":6364}],"docs":"","sig":null,"attributes":[]},{"id":2475,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1457675,"byte_end":1457676,"line_start":2937,"line_end":2937,"column_start":27,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":6372}],"docs":"","sig":null,"attributes":[]},{"id":2478,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1589232,"byte_end":1589244,"line_start":279,"line_end":279,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6464},{"krate":0,"index":6466},{"krate":0,"index":6468}],"docs":"","sig":null,"attributes":[]},{"id":2479,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1592551,"byte_end":1592563,"line_start":353,"line_end":353,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":6472},{"krate":0,"index":6474}],"docs":"","sig":null,"attributes":[]},{"id":2480,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1596271,"byte_end":1596283,"line_start":429,"line_end":429,"column_start":38,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2482,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1597866,"byte_end":1597867,"line_start":489,"line_end":489,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":6496}],"docs":"","sig":null,"attributes":[]},{"id":2483,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1598366,"byte_end":1598384,"line_start":510,"line_end":510,"column_start":42,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":6506},{"krate":0,"index":6508}],"docs":"","sig":null,"attributes":[]},{"id":2484,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1598731,"byte_end":1598750,"line_start":523,"line_end":523,"column_start":50,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":6512},{"krate":0,"index":6514}],"docs":"","sig":null,"attributes":[]},{"id":2485,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1599497,"byte_end":1599516,"line_start":548,"line_end":548,"column_start":57,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":6518}],"docs":"","sig":null,"attributes":[]},{"id":2486,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1600191,"byte_end":1600210,"line_start":568,"line_end":568,"column_start":54,"column_end":73},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2487,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1602372,"byte_end":1602389,"line_start":645,"line_end":645,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":41354},{"krate":0,"index":41356},{"krate":0,"index":41358},{"krate":0,"index":41360}],"docs":"","sig":null,"attributes":[]},{"id":2488,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1602479,"byte_end":1602496,"line_start":649,"line_end":649,"column_start":45,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":41362},{"krate":0,"index":41364},{"krate":0,"index":41366}],"docs":"","sig":null,"attributes":[]},{"id":2489,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1602583,"byte_end":1602600,"line_start":653,"line_end":653,"column_start":42,"column_end":59},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2490,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1603234,"byte_end":1603255,"line_start":669,"line_end":669,"column_start":28,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":6536}],"docs":"","sig":null,"attributes":[]},{"id":2491,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1603577,"byte_end":1603598,"line_start":679,"line_end":679,"column_start":37,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":41384},{"krate":0,"index":41386},{"krate":0,"index":41388},{"krate":0,"index":41390}],"docs":"","sig":null,"attributes":[]},{"id":2492,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1603719,"byte_end":1603740,"line_start":685,"line_end":685,"column_start":44,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":41392},{"krate":0,"index":41394},{"krate":0,"index":41396}],"docs":"","sig":null,"attributes":[]},{"id":2493,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1603858,"byte_end":1603879,"line_start":691,"line_end":691,"column_start":41,"column_end":62},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2494,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1604006,"byte_end":1604007,"line_start":695,"line_end":695,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":41398},{"krate":0,"index":41400},{"krate":0,"index":41402},{"krate":0,"index":41404},{"krate":0,"index":41406}],"docs":"","sig":null,"attributes":[]},{"id":2495,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1606165,"byte_end":1606176,"line_start":768,"line_end":768,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":6560}],"docs":"","sig":null,"attributes":[]},{"id":2496,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1606923,"byte_end":1606934,"line_start":793,"line_end":793,"column_start":38,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":6564},{"krate":0,"index":6566},{"krate":0,"index":6568}],"docs":"","sig":null,"attributes":[]},{"id":2497,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1610414,"byte_end":1610425,"line_start":874,"line_end":874,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":6572},{"krate":0,"index":6574}],"docs":"","sig":null,"attributes":[]},{"id":2498,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1617332,"byte_end":1617346,"line_start":1039,"line_end":1039,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":6578},{"krate":0,"index":6580},{"krate":0,"index":6582},{"krate":0,"index":6584},{"krate":0,"index":6586},{"krate":0,"index":6588},{"krate":0,"index":6590}],"docs":"","sig":null,"attributes":[]},{"id":2499,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1631458,"byte_end":1631467,"line_start":1390,"line_end":1390,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":6606},{"krate":0,"index":6608},{"krate":0,"index":6610},{"krate":0,"index":6612}],"docs":"","sig":null,"attributes":[]},{"id":2500,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1631811,"byte_end":1631825,"line_start":1404,"line_end":1404,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":6618},{"krate":0,"index":6620},{"krate":0,"index":6622},{"krate":0,"index":6624}],"docs":"","sig":null,"attributes":[]},{"id":2501,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1632770,"byte_end":1632779,"line_start":23,"line_end":23,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":6642},{"krate":0,"index":6644},{"krate":0,"index":6646}],"docs":"","sig":null,"attributes":[]},{"id":2502,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1633638,"byte_end":1633657,"line_start":56,"line_end":56,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":6652},{"krate":0,"index":6654}],"docs":"","sig":null,"attributes":[]},{"id":2503,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1636888,"byte_end":1636897,"line_start":154,"line_end":154,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":6666}],"docs":"","sig":null,"attributes":[]},{"id":2504,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1637792,"byte_end":1637801,"line_start":180,"line_end":180,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":6670}],"docs":"","sig":null,"attributes":[]},{"id":2506,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1498102,"byte_end":1498116,"line_start":152,"line_end":152,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":6686}],"docs":"","sig":null,"attributes":[]},{"id":2507,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1499845,"byte_end":1499854,"line_start":210,"line_end":210,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":6690},{"krate":0,"index":6692}],"docs":"","sig":null,"attributes":[]},{"id":2508,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1508081,"byte_end":1508090,"line_start":473,"line_end":473,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":6706}],"docs":"","sig":null,"attributes":[]},{"id":2509,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1511868,"byte_end":1511873,"line_start":594,"line_end":594,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":6722},{"krate":0,"index":6724},{"krate":0,"index":6726},{"krate":0,"index":6728},{"krate":0,"index":6730}],"docs":"","sig":null,"attributes":[]},{"id":2510,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1513081,"byte_end":1513086,"line_start":635,"line_end":635,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":6734}],"docs":"","sig":null,"attributes":[]},{"id":2511,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1513457,"byte_end":1513462,"line_start":648,"line_end":648,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2512,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1513480,"byte_end":1513485,"line_start":650,"line_end":650,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":6740}],"docs":"","sig":null,"attributes":[]},{"id":2513,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1514741,"byte_end":1514752,"line_start":692,"line_end":692,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":6744},{"krate":0,"index":6746},{"krate":0,"index":6748},{"krate":0,"index":6750},{"krate":0,"index":6752}],"docs":"","sig":null,"attributes":[]},{"id":2514,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1515604,"byte_end":1515615,"line_start":727,"line_end":727,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":6756}],"docs":"","sig":null,"attributes":[]},{"id":2515,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1515992,"byte_end":1516003,"line_start":741,"line_end":741,"column_start":28,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2516,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1516021,"byte_end":1516032,"line_start":743,"line_end":743,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":6762}],"docs":"","sig":null,"attributes":[]},{"id":2517,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1516837,"byte_end":1516842,"line_start":767,"line_end":767,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":6766},{"krate":0,"index":6768},{"krate":0,"index":6770},{"krate":0,"index":6772},{"krate":0,"index":6774},{"krate":0,"index":6776},{"krate":0,"index":6778},{"krate":0,"index":6780},{"krate":0,"index":6782},{"krate":0,"index":6784},{"krate":0,"index":6786}],"docs":"","sig":null,"attributes":[]},{"id":2518,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1518127,"byte_end":1518132,"line_start":828,"line_end":828,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":6790},{"krate":0,"index":6792}],"docs":"","sig":null,"attributes":[]},{"id":2519,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1518476,"byte_end":1518481,"line_start":843,"line_end":843,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":6796},{"krate":0,"index":6798}],"docs":"","sig":null,"attributes":[]},{"id":2520,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1518715,"byte_end":1518720,"line_start":856,"line_end":856,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2521,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1518814,"byte_end":1518819,"line_start":859,"line_end":859,"column_start":32,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2522,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1518883,"byte_end":1518888,"line_start":862,"line_end":862,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6806},{"krate":0,"index":6808}],"docs":"","sig":null,"attributes":[]},{"id":2523,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1526106,"byte_end":1526119,"line_start":1071,"line_end":1071,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":6818}],"docs":"","sig":null,"attributes":[]},{"id":2524,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1526555,"byte_end":1526568,"line_start":1083,"line_end":1083,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":6822},{"krate":0,"index":6824},{"krate":0,"index":6826}],"docs":"","sig":null,"attributes":[]},{"id":2525,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1529636,"byte_end":1529650,"line_start":1188,"line_end":1188,"column_start":41,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":6832}],"docs":"","sig":null,"attributes":[]},{"id":2526,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1529926,"byte_end":1529940,"line_start":1197,"line_end":1197,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":6836},{"krate":0,"index":6838}],"docs":"","sig":null,"attributes":[]},{"id":2527,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1531210,"byte_end":1531230,"line_start":1244,"line_end":1244,"column_start":41,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":6844}],"docs":"","sig":null,"attributes":[]},{"id":2528,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1531459,"byte_end":1531479,"line_start":1252,"line_end":1252,"column_start":26,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":6848},{"krate":0,"index":6850}],"docs":"","sig":null,"attributes":[]},{"id":2529,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1532757,"byte_end":1532772,"line_start":1295,"line_end":1295,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":6856}],"docs":"","sig":null,"attributes":[]},{"id":2530,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1532996,"byte_end":1533011,"line_start":1303,"line_end":1303,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":6860},{"krate":0,"index":6862}],"docs":"","sig":null,"attributes":[]},{"id":2531,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1534563,"byte_end":1534568,"line_start":1353,"line_end":1353,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":6866},{"krate":0,"index":6868},{"krate":0,"index":6870}],"docs":"","sig":null,"attributes":[]},{"id":2532,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1534869,"byte_end":1534874,"line_start":1368,"line_end":1368,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":6874}],"docs":"","sig":null,"attributes":[]},{"id":2533,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1535054,"byte_end":1535059,"line_start":1376,"line_end":1376,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2534,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1535487,"byte_end":1535498,"line_start":1391,"line_end":1391,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":6880}],"docs":"","sig":null,"attributes":[]},{"id":2535,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1535751,"byte_end":1535762,"line_start":1400,"line_end":1400,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":6884}],"docs":"","sig":null,"attributes":[]},{"id":2536,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1535934,"byte_end":1535945,"line_start":1407,"line_end":1407,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":6888},{"krate":0,"index":6890}],"docs":"","sig":null,"attributes":[]},{"id":2537,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1536197,"byte_end":1536205,"line_start":1418,"line_end":1418,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":6894},{"krate":0,"index":6896},{"krate":0,"index":6898}],"docs":"","sig":null,"attributes":[]},{"id":2538,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1536527,"byte_end":1536535,"line_start":1434,"line_end":1434,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":6902}],"docs":"","sig":null,"attributes":[]},{"id":2539,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1536736,"byte_end":1536744,"line_start":1443,"line_end":1443,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2556,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1550729,"byte_end":1550738,"line_start":1853,"line_end":1853,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":7014},{"krate":0,"index":7016},{"krate":0,"index":7018},{"krate":0,"index":7020},{"krate":0,"index":7022},{"krate":0,"index":7024},{"krate":0,"index":7026}],"docs":"","sig":null,"attributes":[]},{"id":2557,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1551570,"byte_end":1551575,"line_start":1882,"line_end":1882,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":7030},{"krate":0,"index":7032},{"krate":0,"index":7034},{"krate":0,"index":7036},{"krate":0,"index":7038},{"krate":0,"index":7040},{"krate":0,"index":7042}],"docs":"","sig":null,"attributes":[]},{"id":2558,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1553789,"byte_end":1553796,"line_start":1936,"line_end":1936,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":7046},{"krate":0,"index":7048},{"krate":0,"index":7050},{"krate":0,"index":7052},{"krate":0,"index":7054},{"krate":0,"index":7056},{"krate":0,"index":7058}],"docs":"","sig":null,"attributes":[]},{"id":2559,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1555490,"byte_end":1555499,"line_start":1981,"line_end":1981,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":7062},{"krate":0,"index":7064},{"krate":0,"index":7066},{"krate":0,"index":7068},{"krate":0,"index":7070},{"krate":0,"index":7072},{"krate":0,"index":7074}],"docs":"","sig":null,"attributes":[]},{"id":2560,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1557379,"byte_end":1557393,"line_start":2028,"line_end":2028,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":7078},{"krate":0,"index":7080},{"krate":0,"index":7082},{"krate":0,"index":7084},{"krate":0,"index":7086},{"krate":0,"index":7088},{"krate":0,"index":7090}],"docs":"","sig":null,"attributes":[]},{"id":2561,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1558884,"byte_end":1558900,"line_start":2071,"line_end":2071,"column_start":35,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":7094},{"krate":0,"index":7096},{"krate":0,"index":7098},{"krate":0,"index":7100},{"krate":0,"index":7102},{"krate":0,"index":7104},{"krate":0,"index":7106}],"docs":"","sig":null,"attributes":[]},{"id":2564,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1577500,"byte_end":1577512,"line_start":2614,"line_end":2614,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":7308},{"krate":0,"index":7310}],"docs":"","sig":null,"attributes":[]},{"id":2565,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1577686,"byte_end":1577698,"line_start":2623,"line_end":2623,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":7314}],"docs":"","sig":null,"attributes":[]},{"id":2566,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1577903,"byte_end":1577913,"line_start":2633,"line_end":2633,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":7318},{"krate":0,"index":7320}],"docs":"","sig":null,"attributes":[]},{"id":2567,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1578103,"byte_end":1578113,"line_start":2642,"line_end":2642,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":7324}],"docs":"","sig":null,"attributes":[]},{"id":2568,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1578317,"byte_end":1578332,"line_start":2651,"line_end":2651,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":7328},{"krate":0,"index":7330}],"docs":"","sig":null,"attributes":[]},{"id":2569,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1578534,"byte_end":1578549,"line_start":2660,"line_end":2660,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":7334}],"docs":"","sig":null,"attributes":[]},{"id":2570,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1578719,"byte_end":1578734,"line_start":2667,"line_end":2667,"column_start":28,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2571,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1664111,"byte_end":1664120,"line_start":144,"line_end":144,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":7368},{"krate":0,"index":7370}],"docs":"","sig":null,"attributes":[]},{"id":2572,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1664905,"byte_end":1664916,"line_start":166,"line_end":166,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":7374},{"krate":0,"index":7376}],"docs":"","sig":null,"attributes":[]},{"id":2573,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1665728,"byte_end":1665734,"line_start":188,"line_end":188,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":7380},{"krate":0,"index":7382},{"krate":0,"index":7384}],"docs":"","sig":null,"attributes":[]},{"id":2574,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1667824,"byte_end":1667833,"line_start":252,"line_end":252,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":7388},{"krate":0,"index":7390}],"docs":"","sig":null,"attributes":[]},{"id":2575,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1668091,"byte_end":1668102,"line_start":265,"line_end":265,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":7394},{"krate":0,"index":7396}],"docs":"","sig":null,"attributes":[]},{"id":2576,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1668308,"byte_end":1668314,"line_start":277,"line_end":277,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":7400},{"krate":0,"index":7402},{"krate":0,"index":7404},{"krate":0,"index":7406}],"docs":"","sig":null,"attributes":[]},{"id":2577,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1670198,"byte_end":1670204,"line_start":350,"line_end":350,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":7410}],"docs":"","sig":null,"attributes":[]},{"id":2578,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1670529,"byte_end":1670535,"line_start":365,"line_end":365,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":7414}],"docs":"","sig":null,"attributes":[]},{"id":2579,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1670859,"byte_end":1670870,"line_start":382,"line_end":382,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":7424},{"krate":0,"index":7426}],"docs":"","sig":null,"attributes":[]},{"id":2580,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1671162,"byte_end":1671173,"line_start":399,"line_end":399,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":7430},{"krate":0,"index":7432}],"docs":"","sig":null,"attributes":[]},{"id":2581,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1653788,"byte_end":1653806,"line_start":516,"line_end":516,"column_start":24,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":7510}],"docs":"","sig":null,"attributes":[]},{"id":2582,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1654011,"byte_end":1654029,"line_start":523,"line_end":523,"column_start":43,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":7514},{"krate":0,"index":7516}],"docs":"","sig":null,"attributes":[]},{"id":2583,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1654192,"byte_end":1654210,"line_start":532,"line_end":532,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":7520}],"docs":"","sig":null,"attributes":[]},{"id":2584,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1654393,"byte_end":1654411,"line_start":539,"line_end":539,"column_start":21,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":7524}],"docs":"","sig":null,"attributes":[]},{"id":2588,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1750910,"byte_end":1750920,"line_start":18,"line_end":18,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":7702}],"docs":"","sig":null,"attributes":[]},{"id":2589,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1751282,"byte_end":1751292,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":7706}],"docs":"","sig":null,"attributes":[]},{"id":2590,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1753281,"byte_end":1753292,"line_start":107,"line_end":107,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":7714},{"krate":0,"index":7716},{"krate":0,"index":7718}],"docs":"","sig":null,"attributes":[]},{"id":2591,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1756066,"byte_end":1756076,"line_start":204,"line_end":204,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":7726},{"krate":0,"index":7728},{"krate":0,"index":7730}],"docs":"","sig":null,"attributes":[]},{"id":2592,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1757741,"byte_end":1757751,"line_start":260,"line_end":260,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":7736},{"krate":0,"index":7738},{"krate":0,"index":7740}],"docs":"","sig":null,"attributes":[]},{"id":2593,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1759854,"byte_end":1759862,"line_start":340,"line_end":340,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":7748},{"krate":0,"index":7750},{"krate":0,"index":7752}],"docs":"","sig":null,"attributes":[]},{"id":2594,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1761881,"byte_end":1761890,"line_start":411,"line_end":411,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":7760},{"krate":0,"index":7762},{"krate":0,"index":7764}],"docs":"","sig":null,"attributes":[]},{"id":2595,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1763987,"byte_end":1763995,"line_start":482,"line_end":482,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":7772},{"krate":0,"index":7774},{"krate":0,"index":7776},{"krate":0,"index":7778}],"docs":"","sig":null,"attributes":[]},{"id":2596,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1678067,"byte_end":1678074,"line_start":210,"line_end":210,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":7810},{"krate":0,"index":7812},{"krate":0,"index":7814}],"docs":"","sig":null,"attributes":[]},{"id":2597,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1680795,"byte_end":1680805,"line_start":293,"line_end":293,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":7830}],"docs":"","sig":null,"attributes":[]},{"id":2598,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1680884,"byte_end":1680894,"line_start":299,"line_end":299,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":7834},{"krate":0,"index":7836},{"krate":0,"index":7838},{"krate":0,"index":7840}],"docs":"","sig":null,"attributes":[]},{"id":2599,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1682065,"byte_end":1682074,"line_start":338,"line_end":338,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":7844},{"krate":0,"index":7846},{"krate":0,"index":7848}],"docs":"","sig":null,"attributes":[]},{"id":2600,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1686064,"byte_end":1686073,"line_start":438,"line_end":438,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":7852}],"docs":"","sig":null,"attributes":[]},{"id":2601,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1686239,"byte_end":1686248,"line_start":445,"line_end":445,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":7856}],"docs":"","sig":null,"attributes":[]},{"id":2602,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1702352,"byte_end":1702361,"line_start":1059,"line_end":1059,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":7898},{"krate":0,"index":7900},{"krate":0,"index":7902},{"krate":0,"index":7904},{"krate":0,"index":7906},{"krate":0,"index":7908},{"krate":0,"index":7910},{"krate":0,"index":7912},{"krate":0,"index":7918},{"krate":0,"index":7920},{"krate":0,"index":7922},{"krate":0,"index":7924},{"krate":0,"index":7926},{"krate":0,"index":7928},{"krate":0,"index":7930},{"krate":0,"index":7932},{"krate":0,"index":7934},{"krate":0,"index":7936},{"krate":0,"index":7938},{"krate":0,"index":7940},{"krate":0,"index":7942},{"krate":0,"index":7944},{"krate":0,"index":7946},{"krate":0,"index":7948},{"krate":0,"index":7950},{"krate":0,"index":7952}],"docs":"","sig":null,"attributes":[]},{"id":2603,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1726435,"byte_end":1726444,"line_start":1739,"line_end":1739,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":7956},{"krate":0,"index":7958},{"krate":0,"index":7960}],"docs":"","sig":null,"attributes":[]},{"id":2604,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1726784,"byte_end":1726789,"line_start":1754,"line_end":1754,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":7964}],"docs":"","sig":null,"attributes":[]},{"id":2611,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1732647,"byte_end":1732658,"line_start":1964,"line_end":1964,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":8040}],"docs":"","sig":null,"attributes":[]},{"id":2612,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1732829,"byte_end":1732833,"line_start":1971,"line_end":1971,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":8044}],"docs":"","sig":null,"attributes":[]},{"id":2613,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1733071,"byte_end":1733078,"line_start":1980,"line_end":1980,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":8048}],"docs":"","sig":null,"attributes":[]},{"id":2614,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1733560,"byte_end":1733579,"line_start":1993,"line_end":1993,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":8054}],"docs":"","sig":null,"attributes":[]},{"id":2615,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1733985,"byte_end":1733988,"line_start":2008,"line_end":2008,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":8058}],"docs":"","sig":null,"attributes":[]},{"id":2616,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1734171,"byte_end":1734177,"line_start":2015,"line_end":2015,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":8062}],"docs":"","sig":null,"attributes":[]},{"id":2617,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1734375,"byte_end":1734385,"line_start":2022,"line_end":2022,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":8066}],"docs":"","sig":null,"attributes":[]},{"id":2618,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1769746,"byte_end":1769754,"line_start":68,"line_end":68,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":8102},{"krate":0,"index":8104},{"krate":0,"index":8106},{"krate":0,"index":8108},{"krate":0,"index":8110},{"krate":0,"index":8112},{"krate":0,"index":8114},{"krate":0,"index":8116},{"krate":0,"index":8118},{"krate":0,"index":8120},{"krate":0,"index":8122},{"krate":0,"index":8124},{"krate":0,"index":8126}],"docs":"","sig":null,"attributes":[]},{"id":2619,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1781163,"byte_end":1781171,"line_start":412,"line_end":412,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":8130},{"krate":0,"index":8132}],"docs":"","sig":null,"attributes":[]},{"id":2620,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1781414,"byte_end":1781422,"line_start":421,"line_end":421,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":8136}],"docs":"","sig":null,"attributes":[]},{"id":2621,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1781571,"byte_end":1781579,"line_start":428,"line_end":428,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":8140},{"krate":0,"index":8142}],"docs":"","sig":null,"attributes":[]},{"id":2622,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1781827,"byte_end":1781835,"line_start":437,"line_end":437,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":8146}],"docs":"","sig":null,"attributes":[]},{"id":2623,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1781989,"byte_end":1781997,"line_start":444,"line_end":444,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":8150},{"krate":0,"index":8152}],"docs":"","sig":null,"attributes":[]},{"id":2624,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1782254,"byte_end":1782262,"line_start":453,"line_end":453,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":8156}],"docs":"","sig":null,"attributes":[]},{"id":2625,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1782411,"byte_end":1782419,"line_start":460,"line_end":460,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":8160},{"krate":0,"index":8162}],"docs":"","sig":null,"attributes":[]},{"id":2626,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1782685,"byte_end":1782693,"line_start":469,"line_end":469,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":8166}],"docs":"","sig":null,"attributes":[]},{"id":2627,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1782842,"byte_end":1782850,"line_start":476,"line_end":476,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":8170}],"docs":"","sig":null,"attributes":[]},{"id":2628,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1783062,"byte_end":1783070,"line_start":483,"line_end":483,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":8174}],"docs":"","sig":null,"attributes":[]},{"id":2629,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,98,111,111,108,95,116,114,105,101,46,114,115],"byte_start":1790473,"byte_end":1790481,"line_start":43,"line_end":43,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":8184}],"docs":"","sig":null,"attributes":[]},{"id":2630,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,98,111,111,108,95,116,114,105,101,46,114,115],"byte_start":1791115,"byte_end":1791128,"line_start":64,"line_end":64,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":8190}],"docs":"","sig":null,"attributes":[]},{"id":2631,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2014486,"byte_end":2014492,"line_start":32,"line_end":32,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":8320},{"krate":0,"index":8322}],"docs":"","sig":null,"attributes":[]},{"id":2632,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2016305,"byte_end":2016311,"line_start":86,"line_end":86,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":8328},{"krate":0,"index":8330},{"krate":0,"index":8332},{"krate":0,"index":8334},{"krate":0,"index":8336},{"krate":0,"index":8338},{"krate":0,"index":8340},{"krate":0,"index":8342},{"krate":0,"index":8344},{"krate":0,"index":8346},{"krate":0,"index":8348},{"krate":0,"index":8350},{"krate":0,"index":8352}],"docs":"","sig":null,"attributes":[]},{"id":2633,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2026904,"byte_end":2026913,"line_start":337,"line_end":337,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":8356}],"docs":"","sig":null,"attributes":[]},{"id":2634,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2027406,"byte_end":2027414,"line_start":351,"line_end":351,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":8360}],"docs":"","sig":null,"attributes":[]},{"id":2635,"kind":"Inherent","span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2027774,"byte_end":2027794,"line_start":363,"line_end":363,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":8364}],"docs":"","sig":null,"attributes":[]},{"id":2636,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2027977,"byte_end":2027997,"line_start":370,"line_end":370,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":8368}],"docs":"","sig":null,"attributes":[]},{"id":2637,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2028630,"byte_end":2028648,"line_start":388,"line_end":388,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":8372}],"docs":"","sig":null,"attributes":[]},{"id":2638,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,109,111,100,46,114,115],"byte_start":2072622,"byte_end":2072623,"line_start":66,"line_end":66,"column_start":28,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":8742}],"docs":"","sig":null,"attributes":[]},{"id":2639,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,109,111,100,46,114,115],"byte_start":2072801,"byte_end":2072802,"line_start":77,"line_end":77,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":8746}],"docs":"","sig":null,"attributes":[]},{"id":2640,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231545,"byte_end":2231552,"line_start":402,"line_end":402,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":8806}],"docs":"","sig":null,"attributes":[]},{"id":2641,"kind":"Direct","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2232747,"byte_end":2232754,"line_start":455,"line_end":455,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":8830}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4609,"byte_end":4614,"line_start":122,"line_end":122,"column_start":34,"column_end":39},"ref_id":{"krate":0,"index":46}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4649,"byte_end":4651,"line_start":123,"line_end":123,"column_start":34,"column_end":36},"ref_id":{"krate":0,"index":48}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4686,"byte_end":4689,"line_start":124,"line_end":124,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":50}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4724,"byte_end":4727,"line_start":125,"line_end":125,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":52}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4762,"byte_end":4765,"line_start":126,"line_end":126,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":54}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4801,"byte_end":4805,"line_start":127,"line_end":127,"column_start":35,"column_end":39},"ref_id":{"krate":0,"index":56}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4841,"byte_end":4846,"line_start":129,"line_end":129,"column_start":34,"column_end":39},"ref_id":{"krate":0,"index":58}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4881,"byte_end":4883,"line_start":130,"line_end":130,"column_start":34,"column_end":36},"ref_id":{"krate":0,"index":60}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4918,"byte_end":4921,"line_start":131,"line_end":131,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":62}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4956,"byte_end":4959,"line_start":132,"line_end":132,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":64}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4994,"byte_end":4997,"line_start":133,"line_end":133,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":66}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5033,"byte_end":5037,"line_start":134,"line_end":134,"column_start":35,"column_end":39},"ref_id":{"krate":0,"index":68}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5073,"byte_end":5076,"line_start":136,"line_end":136,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":70}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5111,"byte_end":5114,"line_start":137,"line_end":137,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":186}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5138,"byte_end":5141,"line_start":140,"line_end":140,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":300}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":70545,"byte_end":70552,"line_start":194,"line_end":194,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":388}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":240874,"byte_end":240883,"line_start":136,"line_end":136,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":402}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":240893,"byte_end":240900,"line_start":137,"line_end":137,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":406}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":240967,"byte_end":240973,"line_start":141,"line_end":141,"column_start":13,"column_end":19},"ref_id":{"krate":0,"index":434}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":240987,"byte_end":240992,"line_start":142,"line_end":142,"column_start":13,"column_end":18},"ref_id":{"krate":0,"index":476}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":70562,"byte_end":70569,"line_start":195,"line_end":195,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":568}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":320518,"byte_end":320523,"line_start":106,"line_end":106,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":684}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":320533,"byte_end":320538,"line_start":107,"line_end":107,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":854}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":70579,"byte_end":70585,"line_start":196,"line_end":196,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":904}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":70595,"byte_end":70604,"line_start":197,"line_end":197,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":930}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5226,"byte_end":5233,"line_start":144,"line_end":144,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1114}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,109,111,100,46,114,115],"byte_start":413593,"byte_end":413595,"line_start":15,"line_end":15,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":1116}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5289,"byte_end":5299,"line_start":148,"line_end":148,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1198}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5309,"byte_end":5312,"line_start":149,"line_end":149,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1206}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5322,"byte_end":5329,"line_start":150,"line_end":150,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1398}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5339,"byte_end":5342,"line_start":151,"line_end":151,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1432}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5381,"byte_end":5387,"line_start":155,"line_end":155,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1764}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5397,"byte_end":5400,"line_start":156,"line_end":156,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1832}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5410,"byte_end":5413,"line_start":157,"line_end":157,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2402}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5423,"byte_end":5428,"line_start":158,"line_end":158,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2592}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5438,"byte_end":5445,"line_start":159,"line_end":159,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2626}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5455,"byte_end":5462,"line_start":160,"line_end":160,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2634}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5472,"byte_end":5478,"line_start":161,"line_end":161,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2708}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5533,"byte_end":5536,"line_start":165,"line_end":165,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2738}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5546,"byte_end":5551,"line_start":166,"line_end":166,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2780}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5561,"byte_end":5566,"line_start":167,"line_end":167,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2836}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5576,"byte_end":5580,"line_start":168,"line_end":168,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2870}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,109,111,100,46,114,115],"byte_start":853449,"byte_end":853455,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2872}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5590,"byte_end":5594,"line_start":169,"line_end":169,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":3010}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5604,"byte_end":5608,"line_start":170,"line_end":170,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":3288}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5618,"byte_end":5623,"line_start":171,"line_end":171,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3634}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5633,"byte_end":5642,"line_start":172,"line_end":172,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":3668}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5652,"byte_end":5656,"line_start":173,"line_end":173,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":3680}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5666,"byte_end":5672,"line_start":174,"line_end":174,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4978}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5682,"byte_end":5685,"line_start":175,"line_end":175,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":5194}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5695,"byte_end":5701,"line_start":176,"line_end":176,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":5196}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5712,"byte_end":5717,"line_start":178,"line_end":178,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":5374}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1371320,"byte_end":1371326,"line_start":56,"line_end":56,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":5436}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5727,"byte_end":5730,"line_start":179,"line_end":179,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":6382}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1494314,"byte_end":1494321,"line_start":27,"line_end":27,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":6420}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1494407,"byte_end":1494412,"line_start":31,"line_end":31,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":6626}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5740,"byte_end":5744,"line_start":180,"line_end":180,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":7338}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5754,"byte_end":5757,"line_start":181,"line_end":181,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":7572}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1672898,"byte_end":1672900,"line_start":49,"line_end":49,"column_start":13,"column_end":15},"ref_id":{"krate":0,"index":7794}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5767,"byte_end":5771,"line_start":182,"line_end":182,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":8068}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5782,"byte_end":5789,"line_start":184,"line_end":184,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":8176}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5857,"byte_end":5862,"line_start":188,"line_end":188,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":8300}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":2134969,"byte_end":2134972,"line_start":3,"line_end":3,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":8558}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":2134982,"byte_end":2134989,"line_start":4,"line_end":4,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":8574}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":2134999,"byte_end":2135002,"line_start":5,"line_end":5,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":8590}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":2135012,"byte_end":2135014,"line_start":6,"line_end":6,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":8604}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":2135024,"byte_end":2135027,"line_start":7,"line_end":7,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":8618}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":2135037,"byte_end":2135040,"line_start":8,"line_end":8,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":8632}},{"kind":"Mod","span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":2135050,"byte_end":2135053,"line_start":9,"line_end":9,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":8646}}],"macro_refs":[],"relations":[{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":69354,"byte_end":69362,"line_start":150,"line_end":150,"column_start":36,"column_end":44},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":12674},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":69555,"byte_end":69563,"line_start":157,"line_end":157,"column_start":40,"column_end":48},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":12674},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":69750,"byte_end":69758,"line_start":164,"line_end":164,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":12674},"to":{"krate":0,"index":7870}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":69943,"byte_end":69951,"line_start":171,"line_end":171,"column_start":36,"column_end":44},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":12674},"to":{"krate":0,"index":7866}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":70142,"byte_end":70150,"line_start":178,"line_end":178,"column_start":42,"column_end":50},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":12674},"to":{"krate":0,"index":7874}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":70341,"byte_end":70349,"line_start":185,"line_end":185,"column_start":42,"column_end":50},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":12674},"to":{"krate":0,"index":7878}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":266386,"byte_end":266394,"line_start":54,"line_end":54,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":744},"to":{"krate":0,"index":418}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":266397,"byte_end":266401,"line_start":54,"line_end":54,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":1784},"to":{"krate":0,"index":418}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":242324,"byte_end":242328,"line_start":184,"line_end":184,"column_start":10,"column_end":14},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":16712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":244061,"byte_end":244070,"line_start":233,"line_end":233,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":16734},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374101,"byte_end":374109,"line_start":46,"line_end":46,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":16760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374588,"byte_end":374593,"line_start":59,"line_end":59,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":1004},"to":{"krate":0,"index":744}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374600,"byte_end":374604,"line_start":60,"line_end":60,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":0,"index":1784},"to":{"krate":0,"index":744}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374611,"byte_end":374616,"line_start":61,"line_end":61,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":7858},"to":{"krate":0,"index":744}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374623,"byte_end":374631,"line_start":62,"line_end":62,"column_start":7,"column_end":15},"kind":"SuperTrait","from":{"krate":0,"index":7886},"to":{"krate":0,"index":744}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374638,"byte_end":374641,"line_start":63,"line_end":63,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":1852},"to":{"krate":0,"index":744}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374661,"byte_end":374664,"line_start":64,"line_end":64,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":1860},"to":{"krate":0,"index":744}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":374684,"byte_end":374687,"line_start":65,"line_end":65,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":1880},"to":{"krate":0,"index":744}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":387259,"byte_end":387266,"line_start":41,"line_end":41,"column_start":10,"column_end":17},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":16822},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":322339,"byte_end":322354,"line_start":169,"line_end":169,"column_start":6,"column_end":21},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":16866},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":322880,"byte_end":322895,"line_start":184,"line_end":184,"column_start":23,"column_end":38},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":16866},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":391945,"byte_end":391950,"line_start":34,"line_end":34,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":910}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":411292,"byte_end":411294,"line_start":30,"line_end":30,"column_start":6,"column_end":8},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":17118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":188759,"byte_end":188764,"line_start":4106,"line_end":4106,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":1004}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":192376,"byte_end":192391,"line_start":4199,"line_end":4199,"column_start":6,"column_end":21},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":18722},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":192802,"byte_end":192817,"line_start":4211,"line_end":4211,"column_start":23,"column_end":38},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":18722},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":192995,"byte_end":193010,"line_start":4218,"line_end":4218,"column_start":18,"column_end":33},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":18722},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":197384,"byte_end":197394,"line_start":4363,"line_end":4363,"column_start":27,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":2460},"to":{"krate":0,"index":1070}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":197397,"byte_end":197401,"line_start":4363,"line_end":4363,"column_start":40,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":1784},"to":{"krate":0,"index":1070}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":201555,"byte_end":201568,"line_start":4490,"line_end":4490,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[139]},"from":{"krate":0,"index":19358},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":202266,"byte_end":202279,"line_start":4507,"line_end":4507,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[140]},"from":{"krate":0,"index":19358},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":510203,"byte_end":510215,"line_start":845,"line_end":845,"column_start":18,"column_end":30},"kind":{"variant":"Impl","fields":[187]},"from":{"krate":0,"index":1270},"to":{"krate":0,"index":1784}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":510308,"byte_end":510320,"line_start":848,"line_end":848,"column_start":26,"column_end":38},"kind":{"variant":"Impl","fields":[188]},"from":{"krate":0,"index":1270},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":510466,"byte_end":510478,"line_start":855,"line_end":855,"column_start":28,"column_end":40},"kind":{"variant":"Impl","fields":[189]},"from":{"krate":0,"index":1270},"to":{"krate":0,"index":2406}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":510636,"byte_end":510648,"line_start":862,"line_end":862,"column_start":21,"column_end":33},"kind":{"variant":"Impl","fields":[190]},"from":{"krate":0,"index":1270},"to":{"krate":0,"index":2412}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":510739,"byte_end":510751,"line_start":865,"line_end":865,"column_start":24,"column_end":36},"kind":{"variant":"Impl","fields":[191]},"from":{"krate":0,"index":1270},"to":{"krate":0,"index":7434}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":510930,"byte_end":510942,"line_start":872,"line_end":872,"column_start":24,"column_end":36},"kind":{"variant":"Impl","fields":[192]},"from":{"krate":0,"index":1270},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":513629,"byte_end":513641,"line_start":952,"line_end":952,"column_start":9,"column_end":21},"kind":{"variant":"Impl","fields":[193]},"from":{"krate":0,"index":19580},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":515002,"byte_end":515014,"line_start":999,"line_end":999,"column_start":19,"column_end":31},"kind":{"variant":"Impl","fields":[194]},"from":{"krate":0,"index":19580},"to":{"krate":0,"index":2012}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":515230,"byte_end":515242,"line_start":1010,"line_end":1010,"column_start":22,"column_end":34},"kind":{"variant":"Impl","fields":[195]},"from":{"krate":0,"index":19580},"to":{"krate":0,"index":2030}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":515471,"byte_end":515483,"line_start":1020,"line_end":1020,"column_start":40,"column_end":52},"kind":{"variant":"Impl","fields":[196]},"from":{"krate":0,"index":19580},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":515748,"byte_end":515760,"line_start":1029,"line_end":1029,"column_start":26,"column_end":38},"kind":{"variant":"Impl","fields":[197]},"from":{"krate":0,"index":19580},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":516041,"byte_end":516053,"line_start":1040,"line_end":1040,"column_start":30,"column_end":42},"kind":{"variant":"Impl","fields":[198]},"from":{"krate":0,"index":19580},"to":{"krate":0,"index":2628}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":516235,"byte_end":516247,"line_start":1047,"line_end":1047,"column_start":34,"column_end":46},"kind":{"variant":"Impl","fields":[199]},"from":{"krate":0,"index":19580},"to":{"krate":0,"index":2406}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":516493,"byte_end":516505,"line_start":1058,"line_end":1058,"column_start":20,"column_end":32},"kind":{"variant":"Impl","fields":[200]},"from":{"krate":0,"index":19580},"to":{"krate":0,"index":2412}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":516609,"byte_end":516621,"line_start":1061,"line_end":1061,"column_start":36,"column_end":48},"kind":{"variant":"Impl","fields":[201]},"from":{"krate":0,"index":19580},"to":{"krate":0,"index":2460}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":517143,"byte_end":517155,"line_start":1084,"line_end":1084,"column_start":22,"column_end":34},"kind":{"variant":"Impl","fields":[202]},"from":{"krate":0,"index":19580},"to":{"krate":0,"index":2442}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":517355,"byte_end":517367,"line_start":1091,"line_end":1091,"column_start":40,"column_end":52},"kind":{"variant":"Impl","fields":[203]},"from":{"krate":0,"index":19580},"to":{"krate":0,"index":7434}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":518316,"byte_end":518319,"line_start":1121,"line_end":1121,"column_start":29,"column_end":32},"kind":{"variant":"Impl","fields":[204]},"from":{"krate":0,"index":1356},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":518646,"byte_end":518649,"line_start":1132,"line_end":1132,"column_start":21,"column_end":24},"kind":{"variant":"Impl","fields":[205]},"from":{"krate":0,"index":1356},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":520623,"byte_end":520626,"line_start":1178,"line_end":1178,"column_start":31,"column_end":34},"kind":{"variant":"Impl","fields":[206]},"from":{"krate":0,"index":1356},"to":{"krate":0,"index":2012}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":520803,"byte_end":520806,"line_start":1187,"line_end":1187,"column_start":42,"column_end":45},"kind":{"variant":"Impl","fields":[207]},"from":{"krate":0,"index":1356},"to":{"krate":0,"index":2030}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":520978,"byte_end":520981,"line_start":1194,"line_end":1194,"column_start":49,"column_end":52},"kind":{"variant":"Impl","fields":[208]},"from":{"krate":0,"index":1356},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":521193,"byte_end":521196,"line_start":1201,"line_end":1201,"column_start":53,"column_end":56},"kind":{"variant":"Impl","fields":[209]},"from":{"krate":0,"index":1356},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":521395,"byte_end":521398,"line_start":1208,"line_end":1208,"column_start":38,"column_end":41},"kind":{"variant":"Impl","fields":[210]},"from":{"krate":0,"index":1356},"to":{"krate":0,"index":7882}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":521653,"byte_end":521656,"line_start":1215,"line_end":1215,"column_start":74,"column_end":77},"kind":{"variant":"Impl","fields":[211]},"from":{"krate":0,"index":1356},"to":{"krate":0,"index":2278}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":521751,"byte_end":521754,"line_start":1218,"line_end":1218,"column_start":38,"column_end":41},"kind":{"variant":"Impl","fields":[212]},"from":{"krate":0,"index":1356},"to":{"krate":0,"index":1816}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":523846,"byte_end":523853,"line_start":68,"line_end":68,"column_start":19,"column_end":26},"kind":{"variant":"Impl","fields":[225]},"from":{"krate":0,"index":19640},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":524489,"byte_end":524496,"line_start":92,"line_end":92,"column_start":79,"column_end":86},"kind":{"variant":"Impl","fields":[226]},"from":{"krate":0,"index":19640},"to":{"krate":0,"index":2278}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":524544,"byte_end":524551,"line_start":94,"line_end":94,"column_start":41,"column_end":48},"kind":{"variant":"Impl","fields":[227]},"from":{"krate":0,"index":19640},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":524682,"byte_end":524689,"line_start":100,"line_end":100,"column_start":41,"column_end":48},"kind":{"variant":"Impl","fields":[228]},"from":{"krate":0,"index":19640},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":524849,"byte_end":524856,"line_start":107,"line_end":107,"column_start":37,"column_end":44},"kind":{"variant":"Impl","fields":[229]},"from":{"krate":0,"index":19640},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":612848,"byte_end":612854,"line_start":2529,"line_end":2529,"column_start":32,"column_end":38},"kind":{"variant":"Impl","fields":[230]},"from":{"krate":0,"index":1642},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":613292,"byte_end":613298,"line_start":2540,"line_end":2540,"column_start":40,"column_end":46},"kind":{"variant":"Impl","fields":[231]},"from":{"krate":0,"index":1642},"to":{"krate":0,"index":1774}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":613626,"byte_end":613632,"line_start":2547,"line_end":2547,"column_start":40,"column_end":46},"kind":{"variant":"Impl","fields":[232]},"from":{"krate":0,"index":1642},"to":{"krate":0,"index":1786}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":613708,"byte_end":613714,"line_start":2550,"line_end":2550,"column_start":16,"column_end":22},"kind":{"variant":"Impl","fields":[233]},"from":{"krate":0,"index":1642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":614194,"byte_end":614200,"line_start":2566,"line_end":2566,"column_start":17,"column_end":23},"kind":{"variant":"Impl","fields":[234]},"from":{"krate":0,"index":1642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":615579,"byte_end":615585,"line_start":2610,"line_end":2610,"column_start":27,"column_end":33},"kind":{"variant":"Impl","fields":[235]},"from":{"krate":0,"index":1642},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":615721,"byte_end":615727,"line_start":2617,"line_end":2617,"column_start":26,"column_end":32},"kind":{"variant":"Impl","fields":[236]},"from":{"krate":0,"index":1642},"to":{"krate":0,"index":1784}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":615844,"byte_end":615850,"line_start":2620,"line_end":2620,"column_start":57,"column_end":63},"kind":{"variant":"Impl","fields":[237]},"from":{"krate":0,"index":1642},"to":{"krate":0,"index":2278}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":615963,"byte_end":615969,"line_start":2623,"line_end":2623,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[238]},"from":{"krate":0,"index":1642},"to":{"krate":0,"index":7882}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":616201,"byte_end":616207,"line_start":2631,"line_end":2631,"column_start":41,"column_end":47},"kind":{"variant":"Impl","fields":[239]},"from":{"krate":0,"index":1642},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":616449,"byte_end":616455,"line_start":2639,"line_end":2639,"column_start":37,"column_end":43},"kind":{"variant":"Impl","fields":[240]},"from":{"krate":0,"index":1642},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":616677,"byte_end":616683,"line_start":2646,"line_end":2646,"column_start":42,"column_end":48},"kind":{"variant":"Impl","fields":[241]},"from":{"krate":0,"index":1642},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":618254,"byte_end":618261,"line_start":2677,"line_end":2677,"column_start":27,"column_end":34},"kind":{"variant":"Impl","fields":[242]},"from":{"krate":0,"index":1692},"to":{"krate":0,"index":1774}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":618506,"byte_end":618513,"line_start":2682,"line_end":2682,"column_start":27,"column_end":34},"kind":{"variant":"Impl","fields":[243]},"from":{"krate":0,"index":1692},"to":{"krate":0,"index":1786}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":618537,"byte_end":618544,"line_start":2684,"line_end":2684,"column_start":16,"column_end":23},"kind":{"variant":"Impl","fields":[244]},"from":{"krate":0,"index":1692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":618977,"byte_end":618984,"line_start":2699,"line_end":2699,"column_start":17,"column_end":24},"kind":{"variant":"Impl","fields":[245]},"from":{"krate":0,"index":1692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":621063,"byte_end":621070,"line_start":2764,"line_end":2764,"column_start":27,"column_end":34},"kind":{"variant":"Impl","fields":[246]},"from":{"krate":0,"index":1692},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":621203,"byte_end":621210,"line_start":2771,"line_end":2771,"column_start":26,"column_end":33},"kind":{"variant":"Impl","fields":[247]},"from":{"krate":0,"index":1692},"to":{"krate":0,"index":1784}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":621333,"byte_end":621340,"line_start":2774,"line_end":2774,"column_start":58,"column_end":65},"kind":{"variant":"Impl","fields":[248]},"from":{"krate":0,"index":1692},"to":{"krate":0,"index":2278}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":621448,"byte_end":621455,"line_start":2777,"line_end":2777,"column_start":32,"column_end":39},"kind":{"variant":"Impl","fields":[249]},"from":{"krate":0,"index":1692},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":621656,"byte_end":621663,"line_start":2784,"line_end":2784,"column_start":34,"column_end":41},"kind":{"variant":"Impl","fields":[250]},"from":{"krate":0,"index":1692},"to":{"krate":0,"index":7882}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":621854,"byte_end":621861,"line_start":2791,"line_end":2791,"column_start":24,"column_end":31},"kind":{"variant":"Impl","fields":[251]},"from":{"krate":0,"index":1692},"to":{"krate":0,"index":2412}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":621948,"byte_end":621955,"line_start":2794,"line_end":2794,"column_start":31,"column_end":38},"kind":{"variant":"Impl","fields":[252]},"from":{"krate":0,"index":1692},"to":{"krate":0,"index":2406}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":622124,"byte_end":622131,"line_start":2801,"line_end":2801,"column_start":25,"column_end":32},"kind":{"variant":"Impl","fields":[253]},"from":{"krate":0,"index":1692},"to":{"krate":0,"index":2442}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":622315,"byte_end":622322,"line_start":2808,"line_end":2808,"column_start":32,"column_end":39},"kind":{"variant":"Impl","fields":[254]},"from":{"krate":0,"index":1692},"to":{"krate":0,"index":2460}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":622530,"byte_end":622537,"line_start":2815,"line_end":2815,"column_start":32,"column_end":39},"kind":{"variant":"Impl","fields":[255]},"from":{"krate":0,"index":1692},"to":{"krate":0,"index":7434}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":622727,"byte_end":622734,"line_start":2822,"line_end":2822,"column_start":37,"column_end":44},"kind":{"variant":"Impl","fields":[256]},"from":{"krate":0,"index":1692},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":622944,"byte_end":622951,"line_start":2830,"line_end":2830,"column_start":41,"column_end":48},"kind":{"variant":"Impl","fields":[257]},"from":{"krate":0,"index":1692},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":623169,"byte_end":623176,"line_start":2838,"line_end":2838,"column_start":37,"column_end":44},"kind":{"variant":"Impl","fields":[258]},"from":{"krate":0,"index":1692},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":633601,"byte_end":633606,"line_start":288,"line_end":288,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":0,"index":2594},"to":{"krate":0,"index":1784}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":644681,"byte_end":644691,"line_start":591,"line_end":591,"column_start":29,"column_end":39},"kind":{"variant":"Impl","fields":[259]},"from":{"krate":0,"index":3262},"to":{"krate":0,"index":1802}},{"span":{"file_name":[108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":644732,"byte_end":644743,"line_start":592,"line_end":592,"column_start":35,"column_end":46},"kind":{"variant":"Impl","fields":[260]},"from":{"krate":0,"index":1794},"to":{"krate":0,"index":1802}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":708563,"byte_end":708568,"line_start":166,"line_end":166,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":0,"index":2012},"to":{"krate":0,"index":2030}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":714981,"byte_end":714986,"line_start":70,"line_end":70,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":2050},"to":{"krate":0,"index":2046}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":717395,"byte_end":717401,"line_start":143,"line_end":143,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":2054},"to":{"krate":0,"index":2050}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":731972,"byte_end":731977,"line_start":149,"line_end":149,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":2106},"to":{"krate":0,"index":2112}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":733805,"byte_end":733814,"line_start":53,"line_end":53,"column_start":21,"column_end":30},"kind":{"variant":"Impl","fields":[1886]},"from":{"krate":0,"index":34716},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":734977,"byte_end":734982,"line_start":89,"line_end":89,"column_start":38,"column_end":43},"kind":{"variant":"Impl","fields":[1887]},"from":{"krate":0,"index":34736},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":735143,"byte_end":735148,"line_start":95,"line_end":95,"column_start":28,"column_end":33},"kind":{"variant":"Impl","fields":[1888]},"from":{"krate":0,"index":34736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":737645,"byte_end":737654,"line_start":176,"line_end":176,"column_start":38,"column_end":47},"kind":{"variant":"Impl","fields":[1889]},"from":{"krate":0,"index":34756},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":737896,"byte_end":737905,"line_start":183,"line_end":183,"column_start":28,"column_end":37},"kind":{"variant":"Impl","fields":[1890]},"from":{"krate":0,"index":34756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":739761,"byte_end":739768,"line_start":247,"line_end":247,"column_start":38,"column_end":45},"kind":{"variant":"Impl","fields":[1891]},"from":{"krate":0,"index":34776},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":740008,"byte_end":740015,"line_start":254,"line_end":254,"column_start":28,"column_end":35},"kind":{"variant":"Impl","fields":[1892]},"from":{"krate":0,"index":34776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":741763,"byte_end":741777,"line_start":307,"line_end":307,"column_start":38,"column_end":52},"kind":{"variant":"Impl","fields":[1893]},"from":{"krate":0,"index":34798},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":741939,"byte_end":741953,"line_start":313,"line_end":313,"column_start":28,"column_end":42},"kind":{"variant":"Impl","fields":[1894]},"from":{"krate":0,"index":34798},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":745148,"byte_end":745164,"line_start":419,"line_end":419,"column_start":38,"column_end":54},"kind":{"variant":"Impl","fields":[1895]},"from":{"krate":0,"index":34818},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":745405,"byte_end":745421,"line_start":426,"line_end":426,"column_start":28,"column_end":44},"kind":{"variant":"Impl","fields":[1896]},"from":{"krate":0,"index":34818},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":749000,"byte_end":749009,"line_start":547,"line_end":547,"column_start":36,"column_end":45},"kind":{"variant":"Impl","fields":[1897]},"from":{"krate":0,"index":34716},"to":{"krate":0,"index":2168}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":749326,"byte_end":749335,"line_start":559,"line_end":559,"column_start":28,"column_end":37},"kind":{"variant":"Impl","fields":[1898]},"from":{"krate":0,"index":34756},"to":{"krate":0,"index":2168}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":749667,"byte_end":749674,"line_start":571,"line_end":571,"column_start":28,"column_end":35},"kind":{"variant":"Impl","fields":[1899]},"from":{"krate":0,"index":34776},"to":{"krate":0,"index":2168}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":750004,"byte_end":750009,"line_start":583,"line_end":583,"column_start":28,"column_end":33},"kind":{"variant":"Impl","fields":[1900]},"from":{"krate":0,"index":34736},"to":{"krate":0,"index":2168}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":750351,"byte_end":750365,"line_start":595,"line_end":595,"column_start":28,"column_end":42},"kind":{"variant":"Impl","fields":[1901]},"from":{"krate":0,"index":34798},"to":{"krate":0,"index":2168}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":750707,"byte_end":750723,"line_start":607,"line_end":607,"column_start":28,"column_end":44},"kind":{"variant":"Impl","fields":[1902]},"from":{"krate":0,"index":34818},"to":{"krate":0,"index":2168}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":752100,"byte_end":752109,"line_start":653,"line_end":653,"column_start":32,"column_end":41},"kind":{"variant":"Impl","fields":[1903]},"from":{"krate":0,"index":34756},"to":{"krate":0,"index":2168}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":752448,"byte_end":752455,"line_start":665,"line_end":665,"column_start":32,"column_end":39},"kind":{"variant":"Impl","fields":[1904]},"from":{"krate":0,"index":34776},"to":{"krate":0,"index":2168}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":752792,"byte_end":752797,"line_start":677,"line_end":677,"column_start":32,"column_end":37},"kind":{"variant":"Impl","fields":[1905]},"from":{"krate":0,"index":34736},"to":{"krate":0,"index":2168}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":753145,"byte_end":753159,"line_start":689,"line_end":689,"column_start":32,"column_end":46},"kind":{"variant":"Impl","fields":[1906]},"from":{"krate":0,"index":34798},"to":{"krate":0,"index":2168}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":753507,"byte_end":753523,"line_start":701,"line_end":701,"column_start":32,"column_end":48},"kind":{"variant":"Impl","fields":[1907]},"from":{"krate":0,"index":34818},"to":{"krate":0,"index":2168}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":765973,"byte_end":765982,"line_start":164,"line_end":164,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":2406},"to":{"krate":0,"index":2412}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":767740,"byte_end":767748,"line_start":219,"line_end":219,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[1908]},"from":{"krate":0,"index":34866},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":771769,"byte_end":771776,"line_start":351,"line_end":351,"column_start":36,"column_end":43},"kind":{"variant":"Impl","fields":[1909]},"from":{"krate":0,"index":34886},"to":{"krate":0,"index":2460}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":772287,"byte_end":772294,"line_start":368,"line_end":368,"column_start":22,"column_end":29},"kind":{"variant":"Impl","fields":[1910]},"from":{"krate":0,"index":34886},"to":{"krate":0,"index":2442}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":774304,"byte_end":774306,"line_start":432,"line_end":432,"column_start":16,"column_end":18},"kind":"SuperTrait","from":{"krate":0,"index":2412},"to":{"krate":0,"index":2442}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":774309,"byte_end":774319,"line_start":432,"line_end":432,"column_start":21,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":2460},"to":{"krate":0,"index":2442}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":775829,"byte_end":775837,"line_start":484,"line_end":484,"column_start":13,"column_end":21},"kind":{"variant":"Impl","fields":[1911]},"from":{"krate":0,"index":34866},"to":{"krate":0,"index":2412}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":775901,"byte_end":775909,"line_start":487,"line_end":487,"column_start":14,"column_end":22},"kind":{"variant":"Impl","fields":[1912]},"from":{"krate":0,"index":34866},"to":{"krate":0,"index":2442}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":776096,"byte_end":776104,"line_start":495,"line_end":495,"column_start":21,"column_end":29},"kind":{"variant":"Impl","fields":[1913]},"from":{"krate":0,"index":34866},"to":{"krate":0,"index":2460}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":779445,"byte_end":779454,"line_start":603,"line_end":603,"column_start":43,"column_end":52},"kind":"SuperTrait","from":{"krate":0,"index":2406},"to":{"krate":0,"index":2460}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":795670,"byte_end":795675,"line_start":109,"line_end":109,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":801070,"byte_end":801075,"line_start":94,"line_end":94,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":2628}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":810952,"byte_end":810957,"line_start":225,"line_end":225,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":2644}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":813555,"byte_end":813560,"line_start":308,"line_end":308,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":814264,"byte_end":814269,"line_start":326,"line_end":326,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":2652}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":814666,"byte_end":814671,"line_start":338,"line_end":338,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":2658}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":816441,"byte_end":816442,"line_start":397,"line_end":397,"column_start":24,"column_end":25},"kind":{"variant":"Impl","fields":[2006]},"from":{"krate":0,"index":1527},"to":{"krate":0,"index":2644}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":816621,"byte_end":816622,"line_start":406,"line_end":406,"column_start":21,"column_end":22},"kind":{"variant":"Impl","fields":[2007]},"from":{"krate":0,"index":1531},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":816761,"byte_end":816762,"line_start":413,"line_end":413,"column_start":27,"column_end":28},"kind":{"variant":"Impl","fields":[2008]},"from":{"krate":0,"index":1533},"to":{"krate":0,"index":2652}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":817084,"byte_end":817085,"line_start":425,"line_end":425,"column_start":27,"column_end":28},"kind":{"variant":"Impl","fields":[2009]},"from":{"krate":0,"index":1537},"to":{"krate":0,"index":2658}},{"span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":825767,"byte_end":825773,"line_start":198,"line_end":198,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":2710},"to":{"krate":0,"index":2714}},{"span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":826291,"byte_end":826292,"line_start":219,"line_end":219,"column_start":31,"column_end":32},"kind":{"variant":"Impl","fields":[2011]},"from":{"krate":0,"index":1549},"to":{"krate":0,"index":2710}},{"span":{"file_name":[108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":826413,"byte_end":826414,"line_start":224,"line_end":224,"column_start":34,"column_end":35},"kind":{"variant":"Impl","fields":[2012]},"from":{"krate":0,"index":1551},"to":{"krate":0,"index":2714}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":831013,"byte_end":831014,"line_start":114,"line_end":114,"column_start":36,"column_end":37},"kind":{"variant":"Impl","fields":[2013]},"from":{"krate":0,"index":1565},"to":{"krate":0,"index":2744}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":831349,"byte_end":831352,"line_start":123,"line_end":123,"column_start":21,"column_end":24},"kind":{"variant":"Impl","fields":[2014]},"from":{"krate":0,"index":2744},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":831788,"byte_end":831791,"line_start":139,"line_end":139,"column_start":6,"column_end":9},"kind":{"variant":"Impl","fields":[2015]},"from":{"krate":0,"index":2744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":837496,"byte_end":837502,"line_start":351,"line_end":351,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[2016]},"from":{"krate":0,"index":35406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":840137,"byte_end":840138,"line_start":50,"line_end":50,"column_start":54,"column_end":55},"kind":{"variant":"Impl","fields":[2017]},"from":{"krate":0,"index":1585},"to":{"krate":0,"index":2808}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":840503,"byte_end":840520,"line_start":66,"line_end":66,"column_start":23,"column_end":40},"kind":{"variant":"Impl","fields":[2018]},"from":{"krate":0,"index":35448},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":840661,"byte_end":840678,"line_start":73,"line_end":73,"column_start":6,"column_end":23},"kind":{"variant":"Impl","fields":[2019]},"from":{"krate":0,"index":35448},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,115,99,105,105,46,114,115],"byte_start":852131,"byte_end":852144,"line_start":126,"line_end":126,"column_start":19,"column_end":32},"kind":{"variant":"Impl","fields":[2020]},"from":{"krate":0,"index":2844},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,115,99,105,105,46,114,115],"byte_start":852402,"byte_end":852415,"line_start":132,"line_end":132,"column_start":30,"column_end":43},"kind":{"variant":"Impl","fields":[2021]},"from":{"krate":0,"index":2844},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,115,99,105,105,46,114,115],"byte_start":852596,"byte_end":852609,"line_start":138,"line_end":138,"column_start":28,"column_end":41},"kind":{"variant":"Impl","fields":[2022]},"from":{"krate":0,"index":2844},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,115,99,105,105,46,114,115],"byte_start":852683,"byte_end":852696,"line_start":140,"line_end":140,"column_start":24,"column_end":37},"kind":{"variant":"Impl","fields":[2023]},"from":{"krate":0,"index":2844},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,115,99,105,105,46,114,115],"byte_start":852772,"byte_end":852785,"line_start":143,"line_end":143,"column_start":21,"column_end":34},"kind":{"variant":"Impl","fields":[2024]},"from":{"krate":0,"index":2844},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":858025,"byte_end":858035,"line_start":133,"line_end":133,"column_start":18,"column_end":28},"kind":{"variant":"Impl","fields":[2025]},"from":{"krate":0,"index":2884},"to":{"krate":0,"index":2628}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":858304,"byte_end":858314,"line_start":143,"line_end":143,"column_start":22,"column_end":32},"kind":{"variant":"Impl","fields":[2026]},"from":{"krate":0,"index":2884},"to":{"krate":0,"index":1786}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":858693,"byte_end":858702,"line_start":156,"line_end":156,"column_start":21,"column_end":30},"kind":{"variant":"Impl","fields":[2027]},"from":{"krate":0,"index":2892},"to":{"krate":0,"index":2628}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":858937,"byte_end":858946,"line_start":165,"line_end":165,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[2028]},"from":{"krate":0,"index":2892},"to":{"krate":0,"index":1774}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":859057,"byte_end":859066,"line_start":168,"line_end":168,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[2029]},"from":{"krate":0,"index":2892},"to":{"krate":0,"index":1786}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":861757,"byte_end":861767,"line_start":236,"line_end":236,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[2030]},"from":{"krate":0,"index":2884},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":876476,"byte_end":876485,"line_start":649,"line_end":649,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[2031]},"from":{"krate":0,"index":2892},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":886374,"byte_end":886384,"line_start":933,"line_end":933,"column_start":21,"column_end":31},"kind":{"variant":"Impl","fields":[2032]},"from":{"krate":0,"index":2884},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":886562,"byte_end":886571,"line_start":940,"line_end":940,"column_start":26,"column_end":35},"kind":{"variant":"Impl","fields":[2033]},"from":{"krate":0,"index":2892},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":929416,"byte_end":929426,"line_start":2092,"line_end":2092,"column_start":21,"column_end":31},"kind":{"variant":"Impl","fields":[2034]},"from":{"krate":0,"index":2884},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":929688,"byte_end":929697,"line_start":2100,"line_end":2100,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[2035]},"from":{"krate":0,"index":2892},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":929966,"byte_end":929975,"line_start":2108,"line_end":2108,"column_start":26,"column_end":35},"kind":{"variant":"Impl","fields":[2036]},"from":{"krate":0,"index":2892},"to":{"krate":0,"index":7882}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":939666,"byte_end":939670,"line_start":242,"line_end":242,"column_start":14,"column_end":18},"kind":{"variant":"Impl","fields":[2037]},"from":{"krate":0,"index":3036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":940093,"byte_end":940097,"line_start":262,"line_end":262,"column_start":25,"column_end":29},"kind":{"variant":"Impl","fields":[2038]},"from":{"krate":0,"index":3036},"to":{"krate":0,"index":1774}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":940183,"byte_end":940187,"line_start":265,"line_end":265,"column_start":19,"column_end":23},"kind":{"variant":"Impl","fields":[2039]},"from":{"krate":0,"index":3036},"to":{"krate":0,"index":1786}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":940264,"byte_end":940268,"line_start":268,"line_end":268,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[2040]},"from":{"krate":0,"index":3036},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":940434,"byte_end":940438,"line_start":276,"line_end":276,"column_start":29,"column_end":33},"kind":{"variant":"Impl","fields":[2041]},"from":{"krate":0,"index":3036},"to":{"krate":0,"index":2628}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":940681,"byte_end":940685,"line_start":285,"line_end":285,"column_start":40,"column_end":44},"kind":{"variant":"Impl","fields":[2042]},"from":{"krate":0,"index":3036},"to":{"krate":0,"index":2406}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":940865,"byte_end":940869,"line_start":293,"line_end":293,"column_start":26,"column_end":30},"kind":{"variant":"Impl","fields":[2043]},"from":{"krate":0,"index":3036},"to":{"krate":0,"index":2412}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":940968,"byte_end":940972,"line_start":296,"line_end":296,"column_start":42,"column_end":46},"kind":{"variant":"Impl","fields":[2044]},"from":{"krate":0,"index":3036},"to":{"krate":0,"index":2460}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":941582,"byte_end":941586,"line_start":324,"line_end":324,"column_start":28,"column_end":32},"kind":{"variant":"Impl","fields":[2045]},"from":{"krate":0,"index":3036},"to":{"krate":0,"index":2442}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":941772,"byte_end":941776,"line_start":332,"line_end":332,"column_start":21,"column_end":25},"kind":{"variant":"Impl","fields":[2046]},"from":{"krate":0,"index":3036},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":941851,"byte_end":941855,"line_start":338,"line_end":338,"column_start":9,"column_end":13},"kind":{"variant":"Impl","fields":[2047]},"from":{"krate":0,"index":3036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":945000,"byte_end":945004,"line_start":474,"line_end":474,"column_start":18,"column_end":22},"kind":{"variant":"Impl","fields":[2048]},"from":{"krate":0,"index":3036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":945569,"byte_end":945573,"line_start":495,"line_end":495,"column_start":57,"column_end":61},"kind":{"variant":"Impl","fields":[2049]},"from":{"krate":0,"index":3036},"to":{"krate":0,"index":2278}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":946107,"byte_end":946118,"line_start":513,"line_end":513,"column_start":16,"column_end":27},"kind":{"variant":"Impl","fields":[2050]},"from":{"krate":0,"index":3104},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":946305,"byte_end":946316,"line_start":520,"line_end":520,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[2051]},"from":{"krate":0,"index":3104},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":946704,"byte_end":946718,"line_start":533,"line_end":533,"column_start":16,"column_end":30},"kind":{"variant":"Impl","fields":[2052]},"from":{"krate":0,"index":3114},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":946908,"byte_end":946922,"line_start":540,"line_end":540,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[2053]},"from":{"krate":0,"index":3114},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":947270,"byte_end":947277,"line_start":552,"line_end":552,"column_start":9,"column_end":16},"kind":{"variant":"Impl","fields":[2054]},"from":{"krate":0,"index":3102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":950733,"byte_end":950740,"line_start":669,"line_end":669,"column_start":17,"column_end":24},"kind":{"variant":"Impl","fields":[2055]},"from":{"krate":0,"index":3102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":956542,"byte_end":956549,"line_start":876,"line_end":876,"column_start":33,"column_end":40},"kind":{"variant":"Impl","fields":[2056]},"from":{"krate":0,"index":3102},"to":{"krate":0,"index":1774}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":956643,"byte_end":956650,"line_start":879,"line_end":879,"column_start":27,"column_end":34},"kind":{"variant":"Impl","fields":[2057]},"from":{"krate":0,"index":3102},"to":{"krate":0,"index":1786}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":956729,"byte_end":956736,"line_start":882,"line_end":882,"column_start":26,"column_end":33},"kind":{"variant":"Impl","fields":[2058]},"from":{"krate":0,"index":3102},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":957003,"byte_end":957010,"line_start":893,"line_end":893,"column_start":29,"column_end":36},"kind":{"variant":"Impl","fields":[2059]},"from":{"krate":0,"index":3102},"to":{"krate":0,"index":2628}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":957265,"byte_end":957272,"line_start":902,"line_end":902,"column_start":43,"column_end":50},"kind":{"variant":"Impl","fields":[2060]},"from":{"krate":0,"index":3102},"to":{"krate":0,"index":2406}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":957562,"byte_end":957569,"line_start":913,"line_end":913,"column_start":29,"column_end":36},"kind":{"variant":"Impl","fields":[2061]},"from":{"krate":0,"index":3102},"to":{"krate":0,"index":2412}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":957671,"byte_end":957678,"line_start":916,"line_end":916,"column_start":45,"column_end":52},"kind":{"variant":"Impl","fields":[2062]},"from":{"krate":0,"index":3102},"to":{"krate":0,"index":2460}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":958825,"byte_end":958832,"line_start":959,"line_end":959,"column_start":31,"column_end":38},"kind":{"variant":"Impl","fields":[2063]},"from":{"krate":0,"index":3102},"to":{"krate":0,"index":2442}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":959124,"byte_end":959131,"line_start":970,"line_end":970,"column_start":21,"column_end":28},"kind":{"variant":"Impl","fields":[2064]},"from":{"krate":0,"index":3102},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":959320,"byte_end":959327,"line_start":977,"line_end":977,"column_start":60,"column_end":67},"kind":{"variant":"Impl","fields":[2065]},"from":{"krate":0,"index":3102},"to":{"krate":0,"index":2278}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":959404,"byte_end":959413,"line_start":983,"line_end":983,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[2066]},"from":{"krate":0,"index":3196},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":959717,"byte_end":959726,"line_start":996,"line_end":996,"column_start":19,"column_end":28},"kind":{"variant":"Impl","fields":[2067]},"from":{"krate":0,"index":3196},"to":{"krate":0,"index":2040}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":959939,"byte_end":959948,"line_start":1005,"line_end":1005,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[2068]},"from":{"krate":0,"index":3196},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":960769,"byte_end":960772,"line_start":1030,"line_end":1030,"column_start":31,"column_end":34},"kind":{"variant":"Impl","fields":[2069]},"from":{"krate":0,"index":3210},"to":{"krate":0,"index":2012}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":960894,"byte_end":960897,"line_start":1039,"line_end":1039,"column_start":21,"column_end":24},"kind":{"variant":"Impl","fields":[2070]},"from":{"krate":0,"index":3210},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":962527,"byte_end":962530,"line_start":1088,"line_end":1088,"column_start":74,"column_end":77},"kind":{"variant":"Impl","fields":[2071]},"from":{"krate":0,"index":3210},"to":{"krate":0,"index":2278}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":962651,"byte_end":962654,"line_start":1091,"line_end":1091,"column_start":53,"column_end":56},"kind":{"variant":"Impl","fields":[2072]},"from":{"krate":0,"index":3210},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":962778,"byte_end":962784,"line_start":1097,"line_end":1097,"column_start":21,"column_end":27},"kind":{"variant":"Impl","fields":[2073]},"from":{"krate":0,"index":3244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":964035,"byte_end":964047,"line_start":1139,"line_end":1139,"column_start":19,"column_end":31},"kind":{"variant":"Impl","fields":[2074]},"from":{"krate":0,"index":3234},"to":{"krate":0,"index":2040}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":964226,"byte_end":964238,"line_start":1148,"line_end":1148,"column_start":10,"column_end":22},"kind":{"variant":"Impl","fields":[2075]},"from":{"krate":0,"index":3234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":964884,"byte_end":964890,"line_start":1171,"line_end":1171,"column_start":31,"column_end":37},"kind":{"variant":"Impl","fields":[2076]},"from":{"krate":0,"index":3244},"to":{"krate":0,"index":2012}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":965071,"byte_end":965077,"line_start":1181,"line_end":1181,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[2077]},"from":{"krate":0,"index":3244},"to":{"krate":0,"index":2030}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":965302,"byte_end":965308,"line_start":1189,"line_end":1189,"column_start":77,"column_end":83},"kind":{"variant":"Impl","fields":[2078]},"from":{"krate":0,"index":3244},"to":{"krate":0,"index":2278}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":965429,"byte_end":965435,"line_start":1192,"line_end":1192,"column_start":53,"column_end":59},"kind":{"variant":"Impl","fields":[2079]},"from":{"krate":0,"index":3244},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":968804,"byte_end":968814,"line_start":1262,"line_end":1262,"column_start":27,"column_end":37},"kind":{"variant":"Impl","fields":[2080]},"from":{"krate":0,"index":3262},"to":{"krate":0,"index":1786}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":968830,"byte_end":968840,"line_start":1264,"line_end":1264,"column_start":9,"column_end":19},"kind":{"variant":"Impl","fields":[2081]},"from":{"krate":0,"index":3262},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":969665,"byte_end":969675,"line_start":1301,"line_end":1301,"column_start":17,"column_end":27},"kind":{"variant":"Impl","fields":[2082]},"from":{"krate":0,"index":3262},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":970418,"byte_end":970428,"line_start":1326,"line_end":1326,"column_start":30,"column_end":40},"kind":{"variant":"Impl","fields":[2083]},"from":{"krate":0,"index":3262},"to":{"krate":0,"index":2628}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":970659,"byte_end":970669,"line_start":1334,"line_end":1334,"column_start":21,"column_end":31},"kind":{"variant":"Impl","fields":[2084]},"from":{"krate":0,"index":3262},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":970867,"byte_end":970877,"line_start":1341,"line_end":1341,"column_start":63,"column_end":73},"kind":{"variant":"Impl","fields":[2085]},"from":{"krate":0,"index":3262},"to":{"krate":0,"index":2278}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":992383,"byte_end":992397,"line_start":158,"line_end":158,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[2088]},"from":{"krate":0,"index":39860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":993025,"byte_end":993039,"line_start":180,"line_end":180,"column_start":23,"column_end":37},"kind":{"variant":"Impl","fields":[2089]},"from":{"krate":0,"index":39860},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,99,111,110,118,101,114,116,46,114,115],"byte_start":994326,"byte_end":994342,"line_start":227,"line_end":227,"column_start":23,"column_end":39},"kind":{"variant":"Impl","fields":[2092]},"from":{"krate":0,"index":39900},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":997393,"byte_end":997403,"line_start":36,"line_end":36,"column_start":43,"column_end":53},"kind":{"variant":"Impl","fields":[2093]},"from":{"krate":0,"index":39922},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":1000923,"byte_end":1000933,"line_start":130,"line_end":130,"column_start":53,"column_end":63},"kind":{"variant":"Impl","fields":[2094]},"from":{"krate":0,"index":39922},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":1003097,"byte_end":1003108,"line_start":203,"line_end":203,"column_start":44,"column_end":55},"kind":{"variant":"Impl","fields":[2095]},"from":{"krate":0,"index":39948},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":1004585,"byte_end":1004601,"line_start":246,"line_end":246,"column_start":6,"column_end":22},"kind":{"variant":"Impl","fields":[2096]},"from":{"krate":0,"index":39958},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,100,101,99,111,100,101,46,114,115],"byte_start":1004873,"byte_end":1004889,"line_start":255,"line_end":255,"column_start":23,"column_end":39},"kind":{"variant":"Impl","fields":[2097]},"from":{"krate":0,"index":39958},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":977643,"byte_end":977656,"line_start":155,"line_end":155,"column_start":19,"column_end":32},"kind":{"variant":"Impl","fields":[2099]},"from":{"krate":0,"index":39978},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":979439,"byte_end":979452,"line_start":215,"line_end":215,"column_start":28,"column_end":41},"kind":{"variant":"Impl","fields":[2100]},"from":{"krate":0,"index":39978},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":979975,"byte_end":979988,"line_start":231,"line_end":231,"column_start":24,"column_end":37},"kind":{"variant":"Impl","fields":[2101]},"from":{"krate":0,"index":39978},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":980076,"byte_end":980089,"line_start":234,"line_end":234,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[2102]},"from":{"krate":0,"index":39978},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":980873,"byte_end":980886,"line_start":265,"line_end":265,"column_start":19,"column_end":32},"kind":{"variant":"Impl","fields":[2103]},"from":{"krate":0,"index":39998},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":982868,"byte_end":982881,"line_start":332,"line_end":332,"column_start":28,"column_end":41},"kind":{"variant":"Impl","fields":[2104]},"from":{"krate":0,"index":39998},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":983234,"byte_end":983247,"line_start":344,"line_end":344,"column_start":24,"column_end":37},"kind":{"variant":"Impl","fields":[2105]},"from":{"krate":0,"index":39998},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":983335,"byte_end":983348,"line_start":347,"line_end":347,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[2106]},"from":{"krate":0,"index":39998},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":984004,"byte_end":984015,"line_start":368,"line_end":368,"column_start":19,"column_end":30},"kind":{"variant":"Impl","fields":[2107]},"from":{"krate":0,"index":40018},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":984259,"byte_end":984270,"line_start":375,"line_end":375,"column_start":28,"column_end":39},"kind":{"variant":"Impl","fields":[2108]},"from":{"krate":0,"index":40018},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":984346,"byte_end":984357,"line_start":378,"line_end":378,"column_start":24,"column_end":35},"kind":{"variant":"Impl","fields":[2109]},"from":{"krate":0,"index":40018},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":984443,"byte_end":984454,"line_start":381,"line_end":381,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[2110]},"from":{"krate":0,"index":40018},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":985046,"byte_end":985057,"line_start":399,"line_end":399,"column_start":19,"column_end":30},"kind":{"variant":"Impl","fields":[2111]},"from":{"krate":0,"index":40028},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":985224,"byte_end":985235,"line_start":407,"line_end":407,"column_start":24,"column_end":35},"kind":{"variant":"Impl","fields":[2112]},"from":{"krate":0,"index":40028},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":985723,"byte_end":985734,"line_start":421,"line_end":421,"column_start":19,"column_end":30},"kind":{"variant":"Impl","fields":[2113]},"from":{"krate":0,"index":40038},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":985901,"byte_end":985912,"line_start":429,"line_end":429,"column_start":24,"column_end":35},"kind":{"variant":"Impl","fields":[2114]},"from":{"krate":0,"index":40038},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":986047,"byte_end":986062,"line_start":439,"line_end":439,"column_start":6,"column_end":21},"kind":{"variant":"Impl","fields":[2115]},"from":{"krate":0,"index":40048},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":986471,"byte_end":986486,"line_start":453,"line_end":453,"column_start":19,"column_end":34},"kind":{"variant":"Impl","fields":[2116]},"from":{"krate":0,"index":40048},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":987054,"byte_end":987069,"line_start":474,"line_end":474,"column_start":23,"column_end":38},"kind":{"variant":"Impl","fields":[2117]},"from":{"krate":0,"index":40048},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":987674,"byte_end":987685,"line_start":495,"line_end":495,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[2118]},"from":{"krate":0,"index":40028},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,99,104,97,114,47,109,111,100,46,114,115],"byte_start":987877,"byte_end":987888,"line_start":502,"line_end":502,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[2119]},"from":{"krate":0,"index":40038},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1049474,"byte_end":1049483,"line_start":46,"line_end":46,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[2120]},"from":{"krate":0,"index":40058},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1052211,"byte_end":1052220,"line_start":124,"line_end":124,"column_start":27,"column_end":36},"kind":{"variant":"Impl","fields":[2121]},"from":{"krate":0,"index":40058},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1053743,"byte_end":1053751,"line_start":171,"line_end":171,"column_start":10,"column_end":18},"kind":{"variant":"Impl","fields":[2122]},"from":{"krate":0,"index":40064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,112,97,110,105,99,46,114,115],"byte_start":1056101,"byte_end":1056109,"line_start":249,"line_end":249,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[2123]},"from":{"krate":0,"index":40064},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1234092,"byte_end":1234097,"line_start":25,"line_end":25,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":2594},"to":{"krate":0,"index":3970}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1234100,"byte_end":1234110,"line_start":25,"line_end":25,"column_start":25,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":2460},"to":{"krate":0,"index":3970}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1234113,"byte_end":1234118,"line_start":25,"line_end":25,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":3970}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1239969,"byte_end":1239974,"line_start":209,"line_end":209,"column_start":33,"column_end":38},"kind":{"variant":"Impl","fields":[2136]},"from":{"krate":0,"index":34736},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1242188,"byte_end":1242193,"line_start":282,"line_end":282,"column_start":44,"column_end":49},"kind":{"variant":"Impl","fields":[2137]},"from":{"krate":0,"index":34736},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1242506,"byte_end":1242511,"line_start":295,"line_end":295,"column_start":38,"column_end":43},"kind":{"variant":"Impl","fields":[2138]},"from":{"krate":0,"index":34736},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1242597,"byte_end":1242606,"line_start":298,"line_end":298,"column_start":33,"column_end":42},"kind":{"variant":"Impl","fields":[2139]},"from":{"krate":0,"index":34756},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1243190,"byte_end":1243199,"line_start":322,"line_end":322,"column_start":38,"column_end":47},"kind":{"variant":"Impl","fields":[2140]},"from":{"krate":0,"index":34756},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1243302,"byte_end":1243311,"line_start":325,"line_end":325,"column_start":42,"column_end":51},"kind":{"variant":"Impl","fields":[2141]},"from":{"krate":0,"index":34756},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1243408,"byte_end":1243422,"line_start":328,"line_end":328,"column_start":33,"column_end":47},"kind":{"variant":"Impl","fields":[2142]},"from":{"krate":0,"index":34798},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1245941,"byte_end":1245955,"line_start":422,"line_end":422,"column_start":44,"column_end":58},"kind":{"variant":"Impl","fields":[2143]},"from":{"krate":0,"index":34798},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1247203,"byte_end":1247217,"line_start":463,"line_end":463,"column_start":38,"column_end":52},"kind":{"variant":"Impl","fields":[2144]},"from":{"krate":0,"index":34798},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1247365,"byte_end":1247370,"line_start":467,"line_end":467,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":4064}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1247463,"byte_end":1247464,"line_start":471,"line_end":471,"column_start":33,"column_end":34},"kind":{"variant":"Impl","fields":[2145]},"from":{"krate":0,"index":2051},"to":{"krate":0,"index":4064}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1250023,"byte_end":1250029,"line_start":29,"line_end":29,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[2153]},"from":{"krate":0,"index":40330},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1250311,"byte_end":1250317,"line_start":39,"line_end":39,"column_start":40,"column_end":46},"kind":{"variant":"Impl","fields":[2154]},"from":{"krate":0,"index":40330},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1250492,"byte_end":1250498,"line_start":45,"line_end":45,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[2155]},"from":{"krate":0,"index":40330},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1250597,"byte_end":1250603,"line_start":48,"line_end":48,"column_start":38,"column_end":44},"kind":{"variant":"Impl","fields":[2156]},"from":{"krate":0,"index":40330},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1252712,"byte_end":1252722,"line_start":122,"line_end":122,"column_start":39,"column_end":49},"kind":{"variant":"Impl","fields":[2157]},"from":{"krate":0,"index":40340},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1253029,"byte_end":1253039,"line_start":133,"line_end":133,"column_start":50,"column_end":60},"kind":{"variant":"Impl","fields":[2158]},"from":{"krate":0,"index":40340},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1253225,"byte_end":1253235,"line_start":139,"line_end":139,"column_start":44,"column_end":54},"kind":{"variant":"Impl","fields":[2159]},"from":{"krate":0,"index":40340},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1253344,"byte_end":1253354,"line_start":142,"line_end":142,"column_start":48,"column_end":58},"kind":{"variant":"Impl","fields":[2160]},"from":{"krate":0,"index":40340},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1256049,"byte_end":1256054,"line_start":226,"line_end":226,"column_start":24,"column_end":29},"kind":{"variant":"Impl","fields":[2161]},"from":{"krate":0,"index":4130},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1256223,"byte_end":1256228,"line_start":233,"line_end":233,"column_start":22,"column_end":27},"kind":{"variant":"Impl","fields":[2162]},"from":{"krate":0,"index":4130},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1256476,"byte_end":1256481,"line_start":246,"line_end":246,"column_start":33,"column_end":38},"kind":{"variant":"Impl","fields":[2163]},"from":{"krate":0,"index":4130},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1256633,"byte_end":1256638,"line_start":253,"line_end":253,"column_start":31,"column_end":36},"kind":{"variant":"Impl","fields":[2164]},"from":{"krate":0,"index":4130},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1256776,"byte_end":1256781,"line_start":260,"line_end":260,"column_start":31,"column_end":36},"kind":{"variant":"Impl","fields":[2165]},"from":{"krate":0,"index":4130},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1256862,"byte_end":1256867,"line_start":263,"line_end":263,"column_start":27,"column_end":32},"kind":{"variant":"Impl","fields":[2166]},"from":{"krate":0,"index":4130},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1257025,"byte_end":1257030,"line_start":268,"line_end":268,"column_start":19,"column_end":24},"kind":{"variant":"Impl","fields":[2167]},"from":{"krate":0,"index":4130},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1257268,"byte_end":1257273,"line_start":277,"line_end":277,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[2168]},"from":{"krate":0,"index":4130},"to":{"krate":0,"index":2628}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1258131,"byte_end":1258135,"line_start":314,"line_end":314,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[2169]},"from":{"krate":0,"index":40352},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1258406,"byte_end":1258410,"line_start":327,"line_end":327,"column_start":33,"column_end":37},"kind":{"variant":"Impl","fields":[2170]},"from":{"krate":0,"index":40352},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1258579,"byte_end":1258583,"line_start":334,"line_end":334,"column_start":31,"column_end":35},"kind":{"variant":"Impl","fields":[2171]},"from":{"krate":0,"index":40352},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1258736,"byte_end":1258740,"line_start":341,"line_end":341,"column_start":31,"column_end":35},"kind":{"variant":"Impl","fields":[2172]},"from":{"krate":0,"index":40352},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1258821,"byte_end":1258825,"line_start":344,"line_end":344,"column_start":27,"column_end":31},"kind":{"variant":"Impl","fields":[2173]},"from":{"krate":0,"index":40352},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1263504,"byte_end":1263509,"line_start":109,"line_end":109,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":4206}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1267349,"byte_end":1267350,"line_start":252,"line_end":252,"column_start":36,"column_end":37},"kind":{"variant":"Impl","fields":[2174]},"from":{"krate":0,"index":2125},"to":{"krate":0,"index":4210}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1271555,"byte_end":1271563,"line_start":390,"line_end":390,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":3820},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1279949,"byte_end":1279957,"line_start":653,"line_end":653,"column_start":30,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":3820},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1282764,"byte_end":1282769,"line_start":737,"line_end":737,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":4256}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1283682,"byte_end":1283687,"line_start":756,"line_end":756,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":4260}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1286611,"byte_end":1286622,"line_start":849,"line_end":849,"column_start":15,"column_end":26},"kind":{"variant":"Impl","fields":[2223]},"from":{"krate":0,"index":4268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1287540,"byte_end":1287551,"line_start":881,"line_end":881,"column_start":28,"column_end":39},"kind":{"variant":"Impl","fields":[2224]},"from":{"krate":0,"index":4268},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1288207,"byte_end":1288213,"line_start":908,"line_end":908,"column_start":37,"column_end":43},"kind":{"variant":"Impl","fields":[2225]},"from":{"krate":0,"index":41072},"to":{"krate":0,"index":4256}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1289103,"byte_end":1289109,"line_start":936,"line_end":936,"column_start":41,"column_end":47},"kind":{"variant":"Impl","fields":[2226]},"from":{"krate":0,"index":41072},"to":{"krate":0,"index":4260}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1290370,"byte_end":1290378,"line_start":964,"line_end":964,"column_start":26,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":3820},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1291479,"byte_end":1291487,"line_start":989,"line_end":989,"column_start":31,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":3820},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1071281,"byte_end":1071289,"line_start":361,"line_end":361,"column_start":17,"column_end":25},"kind":{"variant":"Impl","fields":[2227]},"from":{"krate":0,"index":4302},"to":{"krate":0,"index":2262}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1071705,"byte_end":1071714,"line_start":379,"line_end":379,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[2228]},"from":{"krate":0,"index":40778},"to":{"krate":0,"index":2262}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1072130,"byte_end":1072139,"line_start":395,"line_end":395,"column_start":12,"column_end":21},"kind":{"variant":"Impl","fields":[2229]},"from":{"krate":0,"index":40778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1072344,"byte_end":1072353,"line_start":405,"line_end":405,"column_start":14,"column_end":23},"kind":{"variant":"Impl","fields":[2230]},"from":{"krate":0,"index":40778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1073242,"byte_end":1073245,"line_start":437,"line_end":437,"column_start":22,"column_end":25},"kind":{"variant":"Impl","fields":[2231]},"from":{"krate":0,"index":40786},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1074245,"byte_end":1074248,"line_start":473,"line_end":473,"column_start":33,"column_end":36},"kind":{"variant":"Impl","fields":[2232]},"from":{"krate":0,"index":40786},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1074932,"byte_end":1074935,"line_start":497,"line_end":497,"column_start":31,"column_end":34},"kind":{"variant":"Impl","fields":[2233]},"from":{"krate":0,"index":40786},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1075198,"byte_end":1075201,"line_start":510,"line_end":510,"column_start":27,"column_end":30},"kind":{"variant":"Impl","fields":[2234]},"from":{"krate":0,"index":40786},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1075342,"byte_end":1075345,"line_start":514,"line_end":514,"column_start":31,"column_end":34},"kind":{"variant":"Impl","fields":[2235]},"from":{"krate":0,"index":40786},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1075941,"byte_end":1075947,"line_start":532,"line_end":532,"column_start":33,"column_end":39},"kind":{"variant":"Impl","fields":[2236]},"from":{"krate":0,"index":40796},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1076668,"byte_end":1076674,"line_start":559,"line_end":559,"column_start":44,"column_end":50},"kind":{"variant":"Impl","fields":[2237]},"from":{"krate":0,"index":40796},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1077311,"byte_end":1077317,"line_start":580,"line_end":580,"column_start":42,"column_end":48},"kind":{"variant":"Impl","fields":[2238]},"from":{"krate":0,"index":40796},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1077587,"byte_end":1077593,"line_start":593,"line_end":593,"column_start":38,"column_end":44},"kind":{"variant":"Impl","fields":[2239]},"from":{"krate":0,"index":40796},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1077715,"byte_end":1077721,"line_start":598,"line_end":598,"column_start":51,"column_end":57},"kind":{"variant":"Impl","fields":[2240]},"from":{"krate":0,"index":40796},"to":{"krate":0,"index":8424}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1078040,"byte_end":1078046,"line_start":610,"line_end":610,"column_start":51,"column_end":57},"kind":{"variant":"Impl","fields":[2241]},"from":{"krate":0,"index":40796},"to":{"krate":0,"index":8424}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1078372,"byte_end":1078378,"line_start":622,"line_end":622,"column_start":42,"column_end":48},"kind":{"variant":"Impl","fields":[2242]},"from":{"krate":0,"index":40796},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1078944,"byte_end":1078949,"line_start":643,"line_end":643,"column_start":22,"column_end":27},"kind":{"variant":"Impl","fields":[2243]},"from":{"krate":0,"index":40806},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1079594,"byte_end":1079599,"line_start":666,"line_end":666,"column_start":27,"column_end":32},"kind":{"variant":"Impl","fields":[2244]},"from":{"krate":0,"index":40806},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1080359,"byte_end":1080365,"line_start":689,"line_end":689,"column_start":22,"column_end":28},"kind":{"variant":"Impl","fields":[2245]},"from":{"krate":0,"index":40816},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1082705,"byte_end":1082711,"line_start":763,"line_end":763,"column_start":31,"column_end":37},"kind":{"variant":"Impl","fields":[2246]},"from":{"krate":0,"index":40816},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1083989,"byte_end":1083994,"line_start":805,"line_end":805,"column_start":25,"column_end":30},"kind":{"variant":"Impl","fields":[2247]},"from":{"krate":0,"index":40826},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1087997,"byte_end":1088002,"line_start":945,"line_end":945,"column_start":36,"column_end":41},"kind":{"variant":"Impl","fields":[2248]},"from":{"krate":0,"index":40826},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1089837,"byte_end":1089842,"line_start":1006,"line_end":1006,"column_start":30,"column_end":35},"kind":{"variant":"Impl","fields":[2249]},"from":{"krate":0,"index":40826},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1090010,"byte_end":1090015,"line_start":1012,"line_end":1012,"column_start":34,"column_end":39},"kind":{"variant":"Impl","fields":[2250]},"from":{"krate":0,"index":40826},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1090703,"byte_end":1090706,"line_start":1035,"line_end":1035,"column_start":25,"column_end":28},"kind":{"variant":"Impl","fields":[2251]},"from":{"krate":0,"index":40846},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1091175,"byte_end":1091178,"line_start":1056,"line_end":1056,"column_start":36,"column_end":39},"kind":{"variant":"Impl","fields":[2252]},"from":{"krate":0,"index":40846},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1092100,"byte_end":1092103,"line_start":1088,"line_end":1088,"column_start":30,"column_end":33},"kind":{"variant":"Impl","fields":[2253]},"from":{"krate":0,"index":40846},"to":{"krate":0,"index":4484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1093935,"byte_end":1093938,"line_start":1156,"line_end":1156,"column_start":30,"column_end":33},"kind":{"variant":"Impl","fields":[2254]},"from":{"krate":0,"index":40846},"to":{"krate":0,"index":4484}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1096498,"byte_end":1096501,"line_start":1248,"line_end":1248,"column_start":34,"column_end":37},"kind":{"variant":"Impl","fields":[2255]},"from":{"krate":0,"index":40846},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1096622,"byte_end":1096625,"line_start":1252,"line_end":1252,"column_start":43,"column_end":46},"kind":{"variant":"Impl","fields":[2256]},"from":{"krate":0,"index":40846},"to":{"krate":0,"index":8424}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1097029,"byte_end":1097032,"line_start":1266,"line_end":1266,"column_start":30,"column_end":33},"kind":{"variant":"Impl","fields":[2257]},"from":{"krate":0,"index":40846},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1097176,"byte_end":1097179,"line_start":1270,"line_end":1270,"column_start":34,"column_end":37},"kind":{"variant":"Impl","fields":[2258]},"from":{"krate":0,"index":40846},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1099173,"byte_end":1099176,"line_start":1333,"line_end":1333,"column_start":39,"column_end":42},"kind":{"variant":"Impl","fields":[2259]},"from":{"krate":0,"index":40856},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1099427,"byte_end":1099430,"line_start":1342,"line_end":1342,"column_start":38,"column_end":41},"kind":{"variant":"Impl","fields":[2260]},"from":{"krate":0,"index":40856},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1100248,"byte_end":1100251,"line_start":1371,"line_end":1371,"column_start":60,"column_end":63},"kind":{"variant":"Impl","fields":[2261]},"from":{"krate":0,"index":40856},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1100961,"byte_end":1100964,"line_start":1395,"line_end":1395,"column_start":56,"column_end":59},"kind":{"variant":"Impl","fields":[2262]},"from":{"krate":0,"index":40856},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1101231,"byte_end":1101234,"line_start":1408,"line_end":1408,"column_start":48,"column_end":51},"kind":{"variant":"Impl","fields":[2263]},"from":{"krate":0,"index":40856},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1101368,"byte_end":1101371,"line_start":1412,"line_end":1412,"column_start":37,"column_end":40},"kind":{"variant":"Impl","fields":[2264]},"from":{"krate":0,"index":40856},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1101500,"byte_end":1101503,"line_start":1417,"line_end":1417,"column_start":46,"column_end":49},"kind":{"variant":"Impl","fields":[2265]},"from":{"krate":0,"index":40856},"to":{"krate":0,"index":8424}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1102324,"byte_end":1102330,"line_start":1444,"line_end":1444,"column_start":39,"column_end":45},"kind":{"variant":"Impl","fields":[2266]},"from":{"krate":0,"index":40862},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1102581,"byte_end":1102587,"line_start":1453,"line_end":1453,"column_start":35,"column_end":41},"kind":{"variant":"Impl","fields":[2267]},"from":{"krate":0,"index":40862},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1104743,"byte_end":1104749,"line_start":1518,"line_end":1518,"column_start":57,"column_end":63},"kind":{"variant":"Impl","fields":[2268]},"from":{"krate":0,"index":40862},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1105819,"byte_end":1105825,"line_start":1557,"line_end":1557,"column_start":45,"column_end":51},"kind":{"variant":"Impl","fields":[2269]},"from":{"krate":0,"index":40862},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1106449,"byte_end":1106458,"line_start":1576,"line_end":1576,"column_start":39,"column_end":48},"kind":{"variant":"Impl","fields":[2270]},"from":{"krate":0,"index":40868},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1106715,"byte_end":1106724,"line_start":1585,"line_end":1585,"column_start":38,"column_end":47},"kind":{"variant":"Impl","fields":[2271]},"from":{"krate":0,"index":40868},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1107964,"byte_end":1107973,"line_start":1630,"line_end":1630,"column_start":60,"column_end":69},"kind":{"variant":"Impl","fields":[2272]},"from":{"krate":0,"index":40868},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1109007,"byte_end":1109016,"line_start":1667,"line_end":1667,"column_start":48,"column_end":57},"kind":{"variant":"Impl","fields":[2273]},"from":{"krate":0,"index":40868},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1109631,"byte_end":1109640,"line_start":1686,"line_end":1686,"column_start":22,"column_end":31},"kind":{"variant":"Impl","fields":[2274]},"from":{"krate":0,"index":40874},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1111646,"byte_end":1111655,"line_start":1757,"line_end":1757,"column_start":33,"column_end":42},"kind":{"variant":"Impl","fields":[2275]},"from":{"krate":0,"index":40874},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1113091,"byte_end":1113100,"line_start":1798,"line_end":1798,"column_start":31,"column_end":40},"kind":{"variant":"Impl","fields":[2276]},"from":{"krate":0,"index":40874},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1113318,"byte_end":1113327,"line_start":1809,"line_end":1809,"column_start":40,"column_end":49},"kind":{"variant":"Impl","fields":[2277]},"from":{"krate":0,"index":40874},"to":{"krate":0,"index":8424}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1113653,"byte_end":1113662,"line_start":1822,"line_end":1822,"column_start":27,"column_end":36},"kind":{"variant":"Impl","fields":[2278]},"from":{"krate":0,"index":40874},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1113777,"byte_end":1113786,"line_start":1825,"line_end":1825,"column_start":31,"column_end":40},"kind":{"variant":"Impl","fields":[2279]},"from":{"krate":0,"index":40874},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1114728,"byte_end":1114736,"line_start":1852,"line_end":1852,"column_start":32,"column_end":40},"kind":{"variant":"Impl","fields":[2280]},"from":{"krate":0,"index":40884},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1117153,"byte_end":1117161,"line_start":1939,"line_end":1939,"column_start":50,"column_end":58},"kind":{"variant":"Impl","fields":[2281]},"from":{"krate":0,"index":40884},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1117257,"byte_end":1117265,"line_start":1942,"line_end":1942,"column_start":42,"column_end":50},"kind":{"variant":"Impl","fields":[2282]},"from":{"krate":0,"index":40884},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1117291,"byte_end":1117299,"line_start":1944,"line_end":1944,"column_start":19,"column_end":27},"kind":{"variant":"Impl","fields":[2283]},"from":{"krate":0,"index":40884},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1119530,"byte_end":1119539,"line_start":2013,"line_end":2013,"column_start":39,"column_end":48},"kind":{"variant":"Impl","fields":[2284]},"from":{"krate":0,"index":40894},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1119832,"byte_end":1119841,"line_start":2023,"line_end":2023,"column_start":35,"column_end":44},"kind":{"variant":"Impl","fields":[2285]},"from":{"krate":0,"index":40894},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1121260,"byte_end":1121269,"line_start":2076,"line_end":2076,"column_start":30,"column_end":39},"kind":{"variant":"Impl","fields":[2286]},"from":{"krate":0,"index":40894},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1121930,"byte_end":1121939,"line_start":2096,"line_end":2096,"column_start":39,"column_end":48},"kind":{"variant":"Impl","fields":[2287]},"from":{"krate":0,"index":40900},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1122232,"byte_end":1122241,"line_start":2106,"line_end":2106,"column_start":35,"column_end":44},"kind":{"variant":"Impl","fields":[2288]},"from":{"krate":0,"index":40900},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1123578,"byte_end":1123587,"line_start":2155,"line_end":2155,"column_start":30,"column_end":39},"kind":{"variant":"Impl","fields":[2289]},"from":{"krate":0,"index":40900},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1124167,"byte_end":1124171,"line_start":2174,"line_end":2174,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[2290]},"from":{"krate":0,"index":40906},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1126441,"byte_end":1126445,"line_start":2264,"line_end":2264,"column_start":31,"column_end":35},"kind":{"variant":"Impl","fields":[2291]},"from":{"krate":0,"index":40906},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1126579,"byte_end":1126583,"line_start":2267,"line_end":2267,"column_start":33,"column_end":37},"kind":{"variant":"Impl","fields":[2292]},"from":{"krate":0,"index":40906},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1127392,"byte_end":1127396,"line_start":2294,"line_end":2294,"column_start":27,"column_end":31},"kind":{"variant":"Impl","fields":[2293]},"from":{"krate":0,"index":40906},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1127961,"byte_end":1127965,"line_start":2312,"line_end":2312,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[2294]},"from":{"krate":0,"index":40916},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1129472,"byte_end":1129476,"line_start":2372,"line_end":2372,"column_start":31,"column_end":35},"kind":{"variant":"Impl","fields":[2295]},"from":{"krate":0,"index":40916},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1129584,"byte_end":1129588,"line_start":2375,"line_end":2375,"column_start":27,"column_end":31},"kind":{"variant":"Impl","fields":[2296]},"from":{"krate":0,"index":40916},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1129715,"byte_end":1129719,"line_start":2378,"line_end":2378,"column_start":43,"column_end":47},"kind":{"variant":"Impl","fields":[2297]},"from":{"krate":0,"index":40916},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1130308,"byte_end":1130312,"line_start":2397,"line_end":2397,"column_start":55,"column_end":59},"kind":{"variant":"Impl","fields":[2298]},"from":{"krate":0,"index":40926},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1130603,"byte_end":1130607,"line_start":2407,"line_end":2407,"column_start":32,"column_end":36},"kind":{"variant":"Impl","fields":[2299]},"from":{"krate":0,"index":40926},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1132173,"byte_end":1132180,"line_start":2454,"line_end":2454,"column_start":61,"column_end":68},"kind":{"variant":"Impl","fields":[2300]},"from":{"krate":0,"index":4792},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1132423,"byte_end":1132430,"line_start":2461,"line_end":2461,"column_start":56,"column_end":63},"kind":{"variant":"Impl","fields":[2301]},"from":{"krate":0,"index":4792},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1132712,"byte_end":1132719,"line_start":2470,"line_end":2470,"column_start":52,"column_end":59},"kind":{"variant":"Impl","fields":[2302]},"from":{"krate":0,"index":4792},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1133455,"byte_end":1133462,"line_start":2497,"line_end":2497,"column_start":60,"column_end":67},"kind":{"variant":"Impl","fields":[2303]},"from":{"krate":0,"index":4792},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1134138,"byte_end":1134145,"line_start":2521,"line_end":2521,"column_start":33,"column_end":40},"kind":{"variant":"Impl","fields":[2304]},"from":{"krate":0,"index":4792},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1134897,"byte_end":1134904,"line_start":2540,"line_end":2540,"column_start":27,"column_end":34},"kind":{"variant":"Impl","fields":[2305]},"from":{"krate":0,"index":4824},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1135254,"byte_end":1135261,"line_start":2550,"line_end":2550,"column_start":22,"column_end":29},"kind":{"variant":"Impl","fields":[2306]},"from":{"krate":0,"index":4824},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1135538,"byte_end":1135545,"line_start":2558,"line_end":2558,"column_start":25,"column_end":32},"kind":{"variant":"Impl","fields":[2307]},"from":{"krate":0,"index":4824},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1136328,"byte_end":1136335,"line_start":2586,"line_end":2586,"column_start":36,"column_end":43},"kind":{"variant":"Impl","fields":[2308]},"from":{"krate":0,"index":4824},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1137030,"byte_end":1137037,"line_start":2609,"line_end":2609,"column_start":30,"column_end":37},"kind":{"variant":"Impl","fields":[2309]},"from":{"krate":0,"index":4824},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1137582,"byte_end":1137595,"line_start":2627,"line_end":2627,"column_start":25,"column_end":38},"kind":{"variant":"Impl","fields":[2310]},"from":{"krate":0,"index":40932},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1139818,"byte_end":1139831,"line_start":2696,"line_end":2696,"column_start":36,"column_end":49},"kind":{"variant":"Impl","fields":[2311]},"from":{"krate":0,"index":40932},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1142146,"byte_end":1142150,"line_start":2769,"line_end":2769,"column_start":27,"column_end":31},"kind":{"variant":"Impl","fields":[2312]},"from":{"krate":0,"index":40942},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1142243,"byte_end":1142247,"line_start":2772,"line_end":2772,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[2313]},"from":{"krate":0,"index":40942},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1144022,"byte_end":1144026,"line_start":2850,"line_end":2850,"column_start":33,"column_end":37},"kind":{"variant":"Impl","fields":[2314]},"from":{"krate":0,"index":40942},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1144996,"byte_end":1145000,"line_start":2887,"line_end":2887,"column_start":40,"column_end":44},"kind":{"variant":"Impl","fields":[2315]},"from":{"krate":0,"index":40942},"to":{"krate":0,"index":8424}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1145295,"byte_end":1145299,"line_start":2900,"line_end":2900,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[2316]},"from":{"krate":0,"index":40942},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1146261,"byte_end":1146265,"line_start":2942,"line_end":2942,"column_start":33,"column_end":37},"kind":{"variant":"Impl","fields":[2317]},"from":{"krate":0,"index":40942},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1146901,"byte_end":1146905,"line_start":2967,"line_end":2967,"column_start":31,"column_end":35},"kind":{"variant":"Impl","fields":[2318]},"from":{"krate":0,"index":40942},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1147654,"byte_end":1147661,"line_start":2994,"line_end":2994,"column_start":39,"column_end":46},"kind":{"variant":"Impl","fields":[2319]},"from":{"krate":0,"index":40952},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1147854,"byte_end":1147861,"line_start":3002,"line_end":3002,"column_start":22,"column_end":29},"kind":{"variant":"Impl","fields":[2320]},"from":{"krate":0,"index":40952},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1148153,"byte_end":1148160,"line_start":3014,"line_end":3014,"column_start":35,"column_end":42},"kind":{"variant":"Impl","fields":[2321]},"from":{"krate":0,"index":40952},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1149092,"byte_end":1149099,"line_start":3046,"line_end":3046,"column_start":57,"column_end":64},"kind":{"variant":"Impl","fields":[2322]},"from":{"krate":0,"index":40952},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1149917,"byte_end":1149924,"line_start":3073,"line_end":3073,"column_start":53,"column_end":60},"kind":{"variant":"Impl","fields":[2323]},"from":{"krate":0,"index":40952},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":1150184,"byte_end":1150191,"line_start":3086,"line_end":3086,"column_start":45,"column_end":52},"kind":{"variant":"Impl","fields":[2324]},"from":{"krate":0,"index":40952},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1297572,"byte_end":1297578,"line_start":172,"line_end":172,"column_start":9,"column_end":15},"kind":{"variant":"Impl","fields":[2325]},"from":{"krate":0,"index":40958},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1316094,"byte_end":1316100,"line_start":804,"line_end":804,"column_start":20,"column_end":26},"kind":{"variant":"Impl","fields":[2326]},"from":{"krate":0,"index":40958},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1316575,"byte_end":1316581,"line_start":823,"line_end":823,"column_start":20,"column_end":26},"kind":{"variant":"Impl","fields":[2327]},"from":{"krate":0,"index":40958},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1317091,"byte_end":1317097,"line_start":842,"line_end":842,"column_start":18,"column_end":24},"kind":{"variant":"Impl","fields":[2328]},"from":{"krate":0,"index":40958},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1318438,"byte_end":1318444,"line_start":881,"line_end":881,"column_start":12,"column_end":18},"kind":{"variant":"Impl","fields":[2329]},"from":{"krate":0,"index":40958},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1319697,"byte_end":1319703,"line_start":923,"line_end":923,"column_start":21,"column_end":27},"kind":{"variant":"Impl","fields":[2330]},"from":{"krate":0,"index":40958},"to":{"krate":0,"index":2628}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1319902,"byte_end":1319908,"line_start":932,"line_end":932,"column_start":26,"column_end":32},"kind":{"variant":"Impl","fields":[2331]},"from":{"krate":0,"index":40958},"to":{"krate":0,"index":4210}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1320977,"byte_end":1320983,"line_start":976,"line_end":976,"column_start":21,"column_end":27},"kind":{"variant":"Impl","fields":[2332]},"from":{"krate":0,"index":40958},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1321316,"byte_end":1321320,"line_start":991,"line_end":991,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[2333]},"from":{"krate":0,"index":41000},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1321642,"byte_end":1321646,"line_start":1008,"line_end":1008,"column_start":33,"column_end":37},"kind":{"variant":"Impl","fields":[2334]},"from":{"krate":0,"index":41000},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1321772,"byte_end":1321776,"line_start":1015,"line_end":1015,"column_start":31,"column_end":35},"kind":{"variant":"Impl","fields":[2335]},"from":{"krate":0,"index":41000},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1321809,"byte_end":1321813,"line_start":1016,"line_end":1016,"column_start":27,"column_end":31},"kind":{"variant":"Impl","fields":[2336]},"from":{"krate":0,"index":41000},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1321850,"byte_end":1321854,"line_start":1017,"line_end":1017,"column_start":31,"column_end":35},"kind":{"variant":"Impl","fields":[2337]},"from":{"krate":0,"index":41000},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1322408,"byte_end":1322412,"line_start":1033,"line_end":1033,"column_start":26,"column_end":30},"kind":{"variant":"Impl","fields":[2338]},"from":{"krate":0,"index":41010},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1322698,"byte_end":1322702,"line_start":1043,"line_end":1043,"column_start":37,"column_end":41},"kind":{"variant":"Impl","fields":[2339]},"from":{"krate":0,"index":41010},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1322881,"byte_end":1322885,"line_start":1049,"line_end":1049,"column_start":35,"column_end":39},"kind":{"variant":"Impl","fields":[2340]},"from":{"krate":0,"index":41010},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1322974,"byte_end":1322978,"line_start":1052,"line_end":1052,"column_start":31,"column_end":35},"kind":{"variant":"Impl","fields":[2341]},"from":{"krate":0,"index":41010},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1323078,"byte_end":1323082,"line_start":1055,"line_end":1055,"column_start":35,"column_end":39},"kind":{"variant":"Impl","fields":[2342]},"from":{"krate":0,"index":41010},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1323162,"byte_end":1323166,"line_start":1058,"line_end":1058,"column_start":23,"column_end":27},"kind":{"variant":"Impl","fields":[2343]},"from":{"krate":0,"index":41010},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1323838,"byte_end":1323845,"line_start":1078,"line_end":1078,"column_start":26,"column_end":33},"kind":{"variant":"Impl","fields":[2344]},"from":{"krate":0,"index":41016},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1324139,"byte_end":1324146,"line_start":1088,"line_end":1088,"column_start":37,"column_end":44},"kind":{"variant":"Impl","fields":[2345]},"from":{"krate":0,"index":41016},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1324329,"byte_end":1324336,"line_start":1094,"line_end":1094,"column_start":35,"column_end":42},"kind":{"variant":"Impl","fields":[2346]},"from":{"krate":0,"index":41016},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1324425,"byte_end":1324432,"line_start":1097,"line_end":1097,"column_start":31,"column_end":38},"kind":{"variant":"Impl","fields":[2347]},"from":{"krate":0,"index":41016},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1324531,"byte_end":1324538,"line_start":1099,"line_end":1099,"column_start":35,"column_end":42},"kind":{"variant":"Impl","fields":[2348]},"from":{"krate":0,"index":41016},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1325100,"byte_end":1325108,"line_start":1115,"line_end":1115,"column_start":22,"column_end":30},"kind":{"variant":"Impl","fields":[2349]},"from":{"krate":0,"index":41022},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1325378,"byte_end":1325386,"line_start":1125,"line_end":1125,"column_start":33,"column_end":41},"kind":{"variant":"Impl","fields":[2350]},"from":{"krate":0,"index":41022},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1325553,"byte_end":1325561,"line_start":1131,"line_end":1131,"column_start":31,"column_end":39},"kind":{"variant":"Impl","fields":[2351]},"from":{"krate":0,"index":41022},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1325642,"byte_end":1325650,"line_start":1134,"line_end":1134,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[2352]},"from":{"krate":0,"index":41022},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1325742,"byte_end":1325750,"line_start":1137,"line_end":1137,"column_start":31,"column_end":39},"kind":{"variant":"Impl","fields":[2353]},"from":{"krate":0,"index":41022},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1326033,"byte_end":1326039,"line_start":1144,"line_end":1144,"column_start":57,"column_end":63},"kind":{"variant":"Impl","fields":[2354]},"from":{"krate":0,"index":40958},"to":{"krate":0,"index":4206}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1327136,"byte_end":1327143,"line_start":1175,"line_end":1175,"column_start":62,"column_end":69},"kind":{"variant":"Impl","fields":[2355]},"from":{"krate":0,"index":5172},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1328706,"byte_end":1328712,"line_start":1221,"line_end":1221,"column_start":22,"column_end":28},"kind":{"variant":"Impl","fields":[2356]},"from":{"krate":0,"index":40958},"to":{"krate":0,"index":2262}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1341219,"byte_end":1341225,"line_start":270,"line_end":270,"column_start":12,"column_end":18},"kind":{"variant":"Impl","fields":[2357]},"from":{"krate":0,"index":41072},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1355666,"byte_end":1355672,"line_start":753,"line_end":753,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[2358]},"from":{"krate":0,"index":41072},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1357373,"byte_end":1357379,"line_start":814,"line_end":814,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[2359]},"from":{"krate":0,"index":41072},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1359066,"byte_end":1359072,"line_start":874,"line_end":874,"column_start":21,"column_end":27},"kind":{"variant":"Impl","fields":[2360]},"from":{"krate":0,"index":41072},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1360377,"byte_end":1360383,"line_start":912,"line_end":912,"column_start":12,"column_end":18},"kind":{"variant":"Impl","fields":[2361]},"from":{"krate":0,"index":41072},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1361675,"byte_end":1361681,"line_start":953,"line_end":953,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[2362]},"from":{"krate":0,"index":41072},"to":{"krate":0,"index":4210}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1363562,"byte_end":1363566,"line_start":1020,"line_end":1020,"column_start":26,"column_end":30},"kind":{"variant":"Impl","fields":[2363]},"from":{"krate":0,"index":41114},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1363908,"byte_end":1363912,"line_start":1033,"line_end":1033,"column_start":37,"column_end":41},"kind":{"variant":"Impl","fields":[2364]},"from":{"krate":0,"index":41114},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1364086,"byte_end":1364090,"line_start":1039,"line_end":1039,"column_start":35,"column_end":39},"kind":{"variant":"Impl","fields":[2365]},"from":{"krate":0,"index":41114},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1364179,"byte_end":1364183,"line_start":1042,"line_end":1042,"column_start":31,"column_end":35},"kind":{"variant":"Impl","fields":[2366]},"from":{"krate":0,"index":41114},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1364283,"byte_end":1364287,"line_start":1045,"line_end":1045,"column_start":35,"column_end":39},"kind":{"variant":"Impl","fields":[2367]},"from":{"krate":0,"index":41114},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1364367,"byte_end":1364371,"line_start":1048,"line_end":1048,"column_start":23,"column_end":27},"kind":{"variant":"Impl","fields":[2368]},"from":{"krate":0,"index":41114},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1364901,"byte_end":1364908,"line_start":1064,"line_end":1064,"column_start":26,"column_end":33},"kind":{"variant":"Impl","fields":[2369]},"from":{"krate":0,"index":41120},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1365258,"byte_end":1365265,"line_start":1077,"line_end":1077,"column_start":37,"column_end":44},"kind":{"variant":"Impl","fields":[2370]},"from":{"krate":0,"index":41120},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1365443,"byte_end":1365450,"line_start":1083,"line_end":1083,"column_start":35,"column_end":42},"kind":{"variant":"Impl","fields":[2371]},"from":{"krate":0,"index":41120},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1365539,"byte_end":1365546,"line_start":1086,"line_end":1086,"column_start":31,"column_end":38},"kind":{"variant":"Impl","fields":[2372]},"from":{"krate":0,"index":41120},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1365646,"byte_end":1365653,"line_start":1089,"line_end":1089,"column_start":35,"column_end":42},"kind":{"variant":"Impl","fields":[2373]},"from":{"krate":0,"index":41120},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1366324,"byte_end":1366332,"line_start":1107,"line_end":1107,"column_start":22,"column_end":30},"kind":{"variant":"Impl","fields":[2374]},"from":{"krate":0,"index":41126},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1366658,"byte_end":1366666,"line_start":1120,"line_end":1120,"column_start":33,"column_end":41},"kind":{"variant":"Impl","fields":[2375]},"from":{"krate":0,"index":41126},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1366828,"byte_end":1366836,"line_start":1126,"line_end":1126,"column_start":31,"column_end":39},"kind":{"variant":"Impl","fields":[2376]},"from":{"krate":0,"index":41126},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1366917,"byte_end":1366925,"line_start":1129,"line_end":1129,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[2377]},"from":{"krate":0,"index":41126},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1367017,"byte_end":1367025,"line_start":1132,"line_end":1132,"column_start":31,"column_end":39},"kind":{"variant":"Impl","fields":[2378]},"from":{"krate":0,"index":41126},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1367314,"byte_end":1367320,"line_start":1139,"line_end":1139,"column_start":63,"column_end":69},"kind":{"variant":"Impl","fields":[2379]},"from":{"krate":0,"index":41072},"to":{"krate":0,"index":4206}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1368277,"byte_end":1368284,"line_start":1164,"line_end":1164,"column_start":68,"column_end":75},"kind":{"variant":"Impl","fields":[2380]},"from":{"krate":0,"index":5352},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1369176,"byte_end":1369182,"line_start":1196,"line_end":1196,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[2381]},"from":{"krate":0,"index":41072},"to":{"krate":0,"index":2262}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,114,111,116,97,116,101,46,114,115],"byte_start":1465520,"byte_end":1465528,"line_start":28,"line_end":28,"column_start":9,"column_end":17},"kind":{"variant":"Impl","fields":[2382]},"from":{"krate":0,"index":5466},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,115,111,114,116,46,114,115],"byte_start":1468960,"byte_end":1468970,"line_start":29,"line_end":29,"column_start":18,"column_end":28},"kind":{"variant":"Impl","fields":[2383]},"from":{"krate":0,"index":5486},"to":{"krate":0,"index":2040}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1396237,"byte_end":1396242,"line_start":876,"line_end":876,"column_start":35,"column_end":40},"kind":{"variant":"Impl","fields":[2385]},"from":{"krate":0,"index":34736},"to":{"krate":0,"index":5758}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1397938,"byte_end":1397945,"line_start":937,"line_end":937,"column_start":34,"column_end":41},"kind":{"variant":"Impl","fields":[2386]},"from":{"krate":0,"index":34776},"to":{"krate":0,"index":5758}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1398767,"byte_end":1398776,"line_start":972,"line_end":972,"column_start":34,"column_end":43},"kind":{"variant":"Impl","fields":[2387]},"from":{"krate":0,"index":34756},"to":{"krate":0,"index":5758}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1399670,"byte_end":1399679,"line_start":1007,"line_end":1007,"column_start":34,"column_end":43},"kind":{"variant":"Impl","fields":[2388]},"from":{"krate":0,"index":34716},"to":{"krate":0,"index":5758}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1400351,"byte_end":1400365,"line_start":1043,"line_end":1043,"column_start":34,"column_end":48},"kind":{"variant":"Impl","fields":[2389]},"from":{"krate":0,"index":34798},"to":{"krate":0,"index":5758}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1401597,"byte_end":1401613,"line_start":1084,"line_end":1084,"column_start":34,"column_end":50},"kind":{"variant":"Impl","fields":[2390]},"from":{"krate":0,"index":34818},"to":{"krate":0,"index":5758}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1411756,"byte_end":1411760,"line_start":1391,"line_end":1391,"column_start":45,"column_end":49},"kind":{"variant":"Impl","fields":[2391]},"from":{"krate":0,"index":5918},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1412007,"byte_end":1412011,"line_start":1400,"line_end":1400,"column_start":35,"column_end":39},"kind":{"variant":"Impl","fields":[2392]},"from":{"krate":0,"index":5918},"to":{"krate":0,"index":1786}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1412102,"byte_end":1412106,"line_start":1402,"line_end":1402,"column_start":35,"column_end":39},"kind":{"variant":"Impl","fields":[2393]},"from":{"krate":0,"index":5918},"to":{"krate":0,"index":1774}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1412130,"byte_end":1412134,"line_start":1404,"line_end":1404,"column_start":13,"column_end":17},"kind":{"variant":"Impl","fields":[2394]},"from":{"krate":0,"index":5918},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1413664,"byte_end":1413668,"line_start":1452,"line_end":1452,"column_start":35,"column_end":39},"kind":{"variant":"Impl","fields":[2395]},"from":{"krate":0,"index":5918},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1413826,"byte_end":1413830,"line_start":1459,"line_end":1459,"column_start":31,"column_end":35},"kind":{"variant":"Impl","fields":[2396]},"from":{"krate":0,"index":5918},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1413930,"byte_end":1413934,"line_start":1462,"line_end":1462,"column_start":35,"column_end":39},"kind":{"variant":"Impl","fields":[2397]},"from":{"krate":0,"index":5918},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1414014,"byte_end":1414018,"line_start":1465,"line_end":1465,"column_start":23,"column_end":27},"kind":{"variant":"Impl","fields":[2398]},"from":{"krate":0,"index":5918},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1414217,"byte_end":1414221,"line_start":1470,"line_end":1470,"column_start":28,"column_end":32},"kind":{"variant":"Impl","fields":[2399]},"from":{"krate":0,"index":5918},"to":{"krate":0,"index":2636}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1415178,"byte_end":1415185,"line_start":1508,"line_end":1508,"column_start":45,"column_end":52},"kind":{"variant":"Impl","fields":[2400]},"from":{"krate":0,"index":5950},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1415451,"byte_end":1415458,"line_start":1517,"line_end":1517,"column_start":35,"column_end":42},"kind":{"variant":"Impl","fields":[2401]},"from":{"krate":0,"index":5950},"to":{"krate":0,"index":1786}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1415549,"byte_end":1415556,"line_start":1519,"line_end":1519,"column_start":35,"column_end":42},"kind":{"variant":"Impl","fields":[2402]},"from":{"krate":0,"index":5950},"to":{"krate":0,"index":1774}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1415580,"byte_end":1415587,"line_start":1521,"line_end":1521,"column_start":13,"column_end":20},"kind":{"variant":"Impl","fields":[2403]},"from":{"krate":0,"index":5950},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1417621,"byte_end":1417628,"line_start":1580,"line_end":1580,"column_start":35,"column_end":42},"kind":{"variant":"Impl","fields":[2404]},"from":{"krate":0,"index":5950},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1417786,"byte_end":1417793,"line_start":1587,"line_end":1587,"column_start":31,"column_end":38},"kind":{"variant":"Impl","fields":[2405]},"from":{"krate":0,"index":5950},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1417893,"byte_end":1417900,"line_start":1590,"line_end":1590,"column_start":35,"column_end":42},"kind":{"variant":"Impl","fields":[2406]},"from":{"krate":0,"index":5950},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1418347,"byte_end":1418351,"line_start":1605,"line_end":1605,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":1784},"to":{"krate":0,"index":5976}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1419254,"byte_end":1419273,"line_start":1641,"line_end":1641,"column_start":18,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":4230},"to":{"krate":0,"index":5992}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1419958,"byte_end":1419963,"line_start":1662,"line_end":1662,"column_start":48,"column_end":53},"kind":{"variant":"Impl","fields":[2407]},"from":{"krate":0,"index":5996},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1420331,"byte_end":1420336,"line_start":1673,"line_end":1673,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[2408]},"from":{"krate":0,"index":5996},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1420631,"byte_end":1420636,"line_start":1684,"line_end":1684,"column_start":29,"column_end":34},"kind":{"variant":"Impl","fields":[2409]},"from":{"krate":0,"index":5996},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1421347,"byte_end":1421352,"line_start":1712,"line_end":1712,"column_start":40,"column_end":45},"kind":{"variant":"Impl","fields":[2410]},"from":{"krate":0,"index":5996},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1421795,"byte_end":1421800,"line_start":1728,"line_end":1728,"column_start":30,"column_end":35},"kind":{"variant":"Impl","fields":[2411]},"from":{"krate":0,"index":5996},"to":{"krate":0,"index":5992}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1422067,"byte_end":1422072,"line_start":1736,"line_end":1736,"column_start":34,"column_end":39},"kind":{"variant":"Impl","fields":[2412]},"from":{"krate":0,"index":5996},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1422672,"byte_end":1422680,"line_start":1753,"line_end":1753,"column_start":48,"column_end":56},"kind":{"variant":"Impl","fields":[2413]},"from":{"krate":0,"index":6024},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1422954,"byte_end":1422962,"line_start":1762,"line_end":1762,"column_start":30,"column_end":38},"kind":{"variant":"Impl","fields":[2414]},"from":{"krate":0,"index":6024},"to":{"krate":0,"index":5992}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1423307,"byte_end":1423315,"line_start":1775,"line_end":1775,"column_start":29,"column_end":37},"kind":{"variant":"Impl","fields":[2415]},"from":{"krate":0,"index":6024},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1424383,"byte_end":1424391,"line_start":1810,"line_end":1810,"column_start":40,"column_end":48},"kind":{"variant":"Impl","fields":[2416]},"from":{"krate":0,"index":6024},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1425095,"byte_end":1425103,"line_start":1834,"line_end":1834,"column_start":34,"column_end":42},"kind":{"variant":"Impl","fields":[2417]},"from":{"krate":0,"index":6024},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1425777,"byte_end":1425783,"line_start":1850,"line_end":1850,"column_start":48,"column_end":54},"kind":{"variant":"Impl","fields":[2418]},"from":{"krate":0,"index":41196},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1426121,"byte_end":1426127,"line_start":1860,"line_end":1860,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[2419]},"from":{"krate":0,"index":41196},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1426489,"byte_end":1426495,"line_start":1875,"line_end":1875,"column_start":40,"column_end":46},"kind":{"variant":"Impl","fields":[2420]},"from":{"krate":0,"index":41196},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1426717,"byte_end":1426723,"line_start":1883,"line_end":1883,"column_start":30,"column_end":36},"kind":{"variant":"Impl","fields":[2421]},"from":{"krate":0,"index":41196},"to":{"krate":0,"index":5992}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1426948,"byte_end":1426954,"line_start":1891,"line_end":1891,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[2422]},"from":{"krate":0,"index":41196},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1427580,"byte_end":1427589,"line_start":1906,"line_end":1906,"column_start":48,"column_end":57},"kind":{"variant":"Impl","fields":[2423]},"from":{"krate":0,"index":6070},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1427931,"byte_end":1427940,"line_start":1916,"line_end":1916,"column_start":30,"column_end":39},"kind":{"variant":"Impl","fields":[2424]},"from":{"krate":0,"index":6070},"to":{"krate":0,"index":5992}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1428164,"byte_end":1428173,"line_start":1924,"line_end":1924,"column_start":29,"column_end":38},"kind":{"variant":"Impl","fields":[2425]},"from":{"krate":0,"index":6070},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1428543,"byte_end":1428552,"line_start":1939,"line_end":1939,"column_start":40,"column_end":49},"kind":{"variant":"Impl","fields":[2426]},"from":{"krate":0,"index":6070},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1428787,"byte_end":1428796,"line_start":1949,"line_end":1949,"column_start":34,"column_end":43},"kind":{"variant":"Impl","fields":[2427]},"from":{"krate":0,"index":6070},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1429103,"byte_end":1429116,"line_start":1960,"line_end":1960,"column_start":44,"column_end":57},"kind":{"variant":"Impl","fields":[2428]},"from":{"krate":0,"index":41202},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1430133,"byte_end":1430139,"line_start":1992,"line_end":1992,"column_start":48,"column_end":54},"kind":{"variant":"Impl","fields":[2429]},"from":{"krate":0,"index":6102},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1430949,"byte_end":1430956,"line_start":2014,"line_end":2014,"column_start":48,"column_end":55},"kind":{"variant":"Impl","fields":[2430]},"from":{"krate":0,"index":6108},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1431740,"byte_end":1431749,"line_start":2035,"line_end":2035,"column_start":48,"column_end":57},"kind":{"variant":"Impl","fields":[2431]},"from":{"krate":0,"index":6114},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1432580,"byte_end":1432590,"line_start":2057,"line_end":2057,"column_start":48,"column_end":58},"kind":{"variant":"Impl","fields":[2432]},"from":{"krate":0,"index":6120},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1434194,"byte_end":1434201,"line_start":2110,"line_end":2110,"column_start":23,"column_end":30},"kind":{"variant":"Impl","fields":[2433]},"from":{"krate":0,"index":41248},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1434411,"byte_end":1434418,"line_start":2120,"line_end":2120,"column_start":26,"column_end":33},"kind":{"variant":"Impl","fields":[2434]},"from":{"krate":0,"index":41248},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1435682,"byte_end":1435689,"line_start":2174,"line_end":2174,"column_start":37,"column_end":44},"kind":{"variant":"Impl","fields":[2435]},"from":{"krate":0,"index":41248},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1436060,"byte_end":1436067,"line_start":2188,"line_end":2188,"column_start":35,"column_end":42},"kind":{"variant":"Impl","fields":[2436]},"from":{"krate":0,"index":41248},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1436156,"byte_end":1436163,"line_start":2191,"line_end":2191,"column_start":31,"column_end":38},"kind":{"variant":"Impl","fields":[2437]},"from":{"krate":0,"index":41248},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1436233,"byte_end":1436240,"line_start":2194,"line_end":2194,"column_start":44,"column_end":51},"kind":{"variant":"Impl","fields":[2438]},"from":{"krate":0,"index":41248},"to":{"krate":0,"index":8424}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1437098,"byte_end":1437104,"line_start":2220,"line_end":2220,"column_start":23,"column_end":29},"kind":{"variant":"Impl","fields":[2439]},"from":{"krate":0,"index":41254},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1437324,"byte_end":1437330,"line_start":2230,"line_end":2230,"column_start":26,"column_end":32},"kind":{"variant":"Impl","fields":[2440]},"from":{"krate":0,"index":41254},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1438961,"byte_end":1438967,"line_start":2291,"line_end":2291,"column_start":37,"column_end":43},"kind":{"variant":"Impl","fields":[2441]},"from":{"krate":0,"index":41254},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1439466,"byte_end":1439472,"line_start":2307,"line_end":2307,"column_start":35,"column_end":41},"kind":{"variant":"Impl","fields":[2442]},"from":{"krate":0,"index":41254},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1439561,"byte_end":1439567,"line_start":2310,"line_end":2310,"column_start":31,"column_end":37},"kind":{"variant":"Impl","fields":[2443]},"from":{"krate":0,"index":41254},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1439637,"byte_end":1439643,"line_start":2313,"line_end":2313,"column_start":44,"column_end":50},"kind":{"variant":"Impl","fields":[2444]},"from":{"krate":0,"index":41254},"to":{"krate":0,"index":8424}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1440675,"byte_end":1440684,"line_start":2341,"line_end":2341,"column_start":26,"column_end":35},"kind":{"variant":"Impl","fields":[2445]},"from":{"krate":0,"index":41260},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1442500,"byte_end":1442509,"line_start":2405,"line_end":2405,"column_start":37,"column_end":46},"kind":{"variant":"Impl","fields":[2446]},"from":{"krate":0,"index":41260},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1443097,"byte_end":1443106,"line_start":2423,"line_end":2423,"column_start":35,"column_end":44},"kind":{"variant":"Impl","fields":[2447]},"from":{"krate":0,"index":41260},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1443195,"byte_end":1443204,"line_start":2426,"line_end":2426,"column_start":31,"column_end":40},"kind":{"variant":"Impl","fields":[2448]},"from":{"krate":0,"index":41260},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1443274,"byte_end":1443283,"line_start":2429,"line_end":2429,"column_start":44,"column_end":53},"kind":{"variant":"Impl","fields":[2449]},"from":{"krate":0,"index":41260},"to":{"krate":0,"index":8424}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1444402,"byte_end":1444413,"line_start":2460,"line_end":2460,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[2450]},"from":{"krate":0,"index":41266},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1444652,"byte_end":1444663,"line_start":2470,"line_end":2470,"column_start":26,"column_end":37},"kind":{"variant":"Impl","fields":[2451]},"from":{"krate":0,"index":41266},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1445723,"byte_end":1445734,"line_start":2515,"line_end":2515,"column_start":37,"column_end":48},"kind":{"variant":"Impl","fields":[2452]},"from":{"krate":0,"index":41266},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1446119,"byte_end":1446130,"line_start":2529,"line_end":2529,"column_start":35,"column_end":46},"kind":{"variant":"Impl","fields":[2453]},"from":{"krate":0,"index":41266},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1446293,"byte_end":1446304,"line_start":2536,"line_end":2536,"column_start":31,"column_end":42},"kind":{"variant":"Impl","fields":[2454]},"from":{"krate":0,"index":41266},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1446374,"byte_end":1446385,"line_start":2539,"line_end":2539,"column_start":44,"column_end":55},"kind":{"variant":"Impl","fields":[2455]},"from":{"krate":0,"index":41266},"to":{"krate":0,"index":8424}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1447303,"byte_end":1447317,"line_start":2563,"line_end":2563,"column_start":26,"column_end":40},"kind":{"variant":"Impl","fields":[2456]},"from":{"krate":0,"index":41272},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1448512,"byte_end":1448526,"line_start":2610,"line_end":2610,"column_start":37,"column_end":51},"kind":{"variant":"Impl","fields":[2457]},"from":{"krate":0,"index":41272},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1449010,"byte_end":1449024,"line_start":2626,"line_end":2626,"column_start":35,"column_end":49},"kind":{"variant":"Impl","fields":[2458]},"from":{"krate":0,"index":41272},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1449187,"byte_end":1449201,"line_start":2633,"line_end":2633,"column_start":31,"column_end":45},"kind":{"variant":"Impl","fields":[2459]},"from":{"krate":0,"index":41272},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1449271,"byte_end":1449285,"line_start":2636,"line_end":2636,"column_start":44,"column_end":58},"kind":{"variant":"Impl","fields":[2460]},"from":{"krate":0,"index":41272},"to":{"krate":0,"index":8424}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1457160,"byte_end":1457164,"line_start":2918,"line_end":2918,"column_start":44,"column_end":48},"kind":{"variant":"Impl","fields":[2473]},"from":{"krate":0,"index":5918},"to":{"krate":0,"index":8424}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1457387,"byte_end":1457394,"line_start":2926,"line_end":2926,"column_start":44,"column_end":51},"kind":{"variant":"Impl","fields":[2474]},"from":{"krate":0,"index":5950},"to":{"krate":0,"index":8424}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1457588,"byte_end":1457593,"line_start":2933,"line_end":2933,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":6366}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1457675,"byte_end":1457676,"line_start":2937,"line_end":2937,"column_start":27,"column_end":28},"kind":{"variant":"Impl","fields":[2475]},"from":{"krate":0,"index":4041},"to":{"krate":0,"index":6366}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1580006,"byte_end":1580011,"line_start":38,"line_end":38,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":6430}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1585147,"byte_end":1585155,"line_start":177,"line_end":177,"column_start":39,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":6442},"to":{"krate":0,"index":6452}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1587741,"byte_end":1587756,"line_start":244,"line_end":244,"column_start":36,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":6452},"to":{"krate":0,"index":6460}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1589232,"byte_end":1589244,"line_start":279,"line_end":279,"column_start":34,"column_end":46},"kind":{"variant":"Impl","fields":[2478]},"from":{"krate":0,"index":41324},"to":{"krate":0,"index":6442}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1592551,"byte_end":1592563,"line_start":353,"line_end":353,"column_start":41,"column_end":53},"kind":{"variant":"Impl","fields":[2479]},"from":{"krate":0,"index":41324},"to":{"krate":0,"index":6452}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1596271,"byte_end":1596283,"line_start":429,"line_end":429,"column_start":38,"column_end":50},"kind":{"variant":"Impl","fields":[2480]},"from":{"krate":0,"index":41324},"to":{"krate":0,"index":6460}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1597866,"byte_end":1597867,"line_start":489,"line_end":489,"column_start":25,"column_end":26},"kind":{"variant":"Impl","fields":[2482]},"from":{"krate":0,"index":4065},"to":{"krate":0,"index":6490}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1598366,"byte_end":1598384,"line_start":510,"line_end":510,"column_start":42,"column_end":60},"kind":{"variant":"Impl","fields":[2483]},"from":{"krate":0,"index":6502},"to":{"krate":0,"index":6430}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1598731,"byte_end":1598750,"line_start":523,"line_end":523,"column_start":50,"column_end":69},"kind":{"variant":"Impl","fields":[2484]},"from":{"krate":0,"index":41334},"to":{"krate":0,"index":6442}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1599497,"byte_end":1599516,"line_start":548,"line_end":548,"column_start":57,"column_end":76},"kind":{"variant":"Impl","fields":[2485]},"from":{"krate":0,"index":41334},"to":{"krate":0,"index":6452}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1600191,"byte_end":1600210,"line_start":568,"line_end":568,"column_start":54,"column_end":73},"kind":{"variant":"Impl","fields":[2486]},"from":{"krate":0,"index":41334},"to":{"krate":0,"index":6460}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1602372,"byte_end":1602389,"line_start":645,"line_end":645,"column_start":38,"column_end":55},"kind":{"variant":"Impl","fields":[2487]},"from":{"krate":0,"index":41344},"to":{"krate":0,"index":6442}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1602479,"byte_end":1602496,"line_start":649,"line_end":649,"column_start":45,"column_end":62},"kind":{"variant":"Impl","fields":[2488]},"from":{"krate":0,"index":41344},"to":{"krate":0,"index":6452}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1602583,"byte_end":1602600,"line_start":653,"line_end":653,"column_start":42,"column_end":59},"kind":{"variant":"Impl","fields":[2489]},"from":{"krate":0,"index":41344},"to":{"krate":0,"index":6460}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1603234,"byte_end":1603255,"line_start":669,"line_end":669,"column_start":28,"column_end":49},"kind":{"variant":"Impl","fields":[2490]},"from":{"krate":0,"index":41378},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1603577,"byte_end":1603598,"line_start":679,"line_end":679,"column_start":37,"column_end":58},"kind":{"variant":"Impl","fields":[2491]},"from":{"krate":0,"index":41378},"to":{"krate":0,"index":6442}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1603719,"byte_end":1603740,"line_start":685,"line_end":685,"column_start":44,"column_end":65},"kind":{"variant":"Impl","fields":[2492]},"from":{"krate":0,"index":41378},"to":{"krate":0,"index":6452}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1603858,"byte_end":1603879,"line_start":691,"line_end":691,"column_start":41,"column_end":62},"kind":{"variant":"Impl","fields":[2493]},"from":{"krate":0,"index":41378},"to":{"krate":0,"index":6460}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1604006,"byte_end":1604007,"line_start":695,"line_end":695,"column_start":29,"column_end":30},"kind":{"variant":"Impl","fields":[2494]},"from":{"krate":0,"index":4127},"to":{"krate":0,"index":6430}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1606165,"byte_end":1606176,"line_start":768,"line_end":768,"column_start":14,"column_end":25},"kind":{"variant":"Impl","fields":[2495]},"from":{"krate":0,"index":41418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1606923,"byte_end":1606934,"line_start":793,"line_end":793,"column_start":38,"column_end":49},"kind":{"variant":"Impl","fields":[2496]},"from":{"krate":0,"index":41418},"to":{"krate":0,"index":6442}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1610414,"byte_end":1610425,"line_start":874,"line_end":874,"column_start":45,"column_end":56},"kind":{"variant":"Impl","fields":[2497]},"from":{"krate":0,"index":41418},"to":{"krate":0,"index":6452}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1617332,"byte_end":1617346,"line_start":1039,"line_end":1039,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[2498]},"from":{"krate":0,"index":41448},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1631458,"byte_end":1631467,"line_start":1390,"line_end":1390,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[2499]},"from":{"krate":0,"index":6602},"to":{"krate":0,"index":6592}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1631811,"byte_end":1631825,"line_start":1404,"line_end":1404,"column_start":25,"column_end":39},"kind":{"variant":"Impl","fields":[2500]},"from":{"krate":0,"index":6614},"to":{"krate":0,"index":6592}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1632770,"byte_end":1632779,"line_start":23,"line_end":23,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[2501]},"from":{"krate":0,"index":6638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1633638,"byte_end":1633657,"line_start":56,"line_end":56,"column_start":23,"column_end":42},"kind":{"variant":"Impl","fields":[2502]},"from":{"krate":0,"index":6648},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1636888,"byte_end":1636897,"line_start":154,"line_end":154,"column_start":23,"column_end":32},"kind":{"variant":"Impl","fields":[2503]},"from":{"krate":0,"index":6638},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,108,111,115,115,121,46,114,115],"byte_start":1637792,"byte_end":1637801,"line_start":180,"line_end":180,"column_start":21,"column_end":30},"kind":{"variant":"Impl","fields":[2504]},"from":{"krate":0,"index":6638},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1495702,"byte_end":1495707,"line_start":76,"line_end":76,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":6672}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1498102,"byte_end":1498116,"line_start":152,"line_end":152,"column_start":23,"column_end":37},"kind":{"variant":"Impl","fields":[2506]},"from":{"krate":0,"index":41474},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1499845,"byte_end":1499854,"line_start":210,"line_end":210,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[2507]},"from":{"krate":0,"index":41494},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1508081,"byte_end":1508090,"line_start":473,"line_end":473,"column_start":23,"column_end":32},"kind":{"variant":"Impl","fields":[2508]},"from":{"krate":0,"index":41494},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1511868,"byte_end":1511873,"line_start":594,"line_end":594,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[2509]},"from":{"krate":0,"index":41516},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1513081,"byte_end":1513086,"line_start":635,"line_end":635,"column_start":34,"column_end":39},"kind":{"variant":"Impl","fields":[2510]},"from":{"krate":0,"index":41516},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1513457,"byte_end":1513462,"line_start":648,"line_end":648,"column_start":28,"column_end":33},"kind":{"variant":"Impl","fields":[2511]},"from":{"krate":0,"index":41516},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1513480,"byte_end":1513485,"line_start":650,"line_end":650,"column_start":10,"column_end":15},"kind":{"variant":"Impl","fields":[2512]},"from":{"krate":0,"index":41516},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1514741,"byte_end":1514752,"line_start":692,"line_end":692,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[2513]},"from":{"krate":0,"index":41526},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1515604,"byte_end":1515615,"line_start":727,"line_end":727,"column_start":34,"column_end":45},"kind":{"variant":"Impl","fields":[2514]},"from":{"krate":0,"index":41526},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1515992,"byte_end":1516003,"line_start":741,"line_end":741,"column_start":28,"column_end":39},"kind":{"variant":"Impl","fields":[2515]},"from":{"krate":0,"index":41526},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1516021,"byte_end":1516032,"line_start":743,"line_end":743,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[2516]},"from":{"krate":0,"index":41526},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1516837,"byte_end":1516842,"line_start":767,"line_end":767,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[2517]},"from":{"krate":0,"index":41536},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1518127,"byte_end":1518132,"line_start":828,"line_end":828,"column_start":34,"column_end":39},"kind":{"variant":"Impl","fields":[2518]},"from":{"krate":0,"index":41536},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1518476,"byte_end":1518481,"line_start":843,"line_end":843,"column_start":32,"column_end":37},"kind":{"variant":"Impl","fields":[2519]},"from":{"krate":0,"index":41536},"to":{"krate":0,"index":4244}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1518715,"byte_end":1518720,"line_start":856,"line_end":856,"column_start":28,"column_end":33},"kind":{"variant":"Impl","fields":[2520]},"from":{"krate":0,"index":41536},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1518814,"byte_end":1518819,"line_start":859,"line_end":859,"column_start":32,"column_end":37},"kind":{"variant":"Impl","fields":[2521]},"from":{"krate":0,"index":41536},"to":{"krate":0,"index":4298}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1518883,"byte_end":1518888,"line_start":862,"line_end":862,"column_start":41,"column_end":46},"kind":{"variant":"Impl","fields":[2522]},"from":{"krate":0,"index":41536},"to":{"krate":0,"index":8424}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1526106,"byte_end":1526119,"line_start":1071,"line_end":1071,"column_start":41,"column_end":54},"kind":{"variant":"Impl","fields":[2523]},"from":{"krate":0,"index":6814},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1526555,"byte_end":1526568,"line_start":1083,"line_end":1083,"column_start":26,"column_end":39},"kind":{"variant":"Impl","fields":[2524]},"from":{"krate":0,"index":6814},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1529636,"byte_end":1529650,"line_start":1188,"line_end":1188,"column_start":41,"column_end":55},"kind":{"variant":"Impl","fields":[2525]},"from":{"krate":0,"index":6828},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1529926,"byte_end":1529940,"line_start":1197,"line_end":1197,"column_start":26,"column_end":40},"kind":{"variant":"Impl","fields":[2526]},"from":{"krate":0,"index":6828},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1531210,"byte_end":1531230,"line_start":1244,"line_end":1244,"column_start":41,"column_end":61},"kind":{"variant":"Impl","fields":[2527]},"from":{"krate":0,"index":6840},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1531459,"byte_end":1531479,"line_start":1252,"line_end":1252,"column_start":26,"column_end":46},"kind":{"variant":"Impl","fields":[2528]},"from":{"krate":0,"index":6840},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1532757,"byte_end":1532772,"line_start":1295,"line_end":1295,"column_start":41,"column_end":56},"kind":{"variant":"Impl","fields":[2529]},"from":{"krate":0,"index":6852},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1532996,"byte_end":1533011,"line_start":1303,"line_end":1303,"column_start":26,"column_end":41},"kind":{"variant":"Impl","fields":[2530]},"from":{"krate":0,"index":6852},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1534563,"byte_end":1534568,"line_start":1353,"line_end":1353,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[2531]},"from":{"krate":0,"index":41774},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1534869,"byte_end":1534874,"line_start":1368,"line_end":1368,"column_start":34,"column_end":39},"kind":{"variant":"Impl","fields":[2532]},"from":{"krate":0,"index":41774},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1535054,"byte_end":1535059,"line_start":1376,"line_end":1376,"column_start":28,"column_end":33},"kind":{"variant":"Impl","fields":[2533]},"from":{"krate":0,"index":41774},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1535487,"byte_end":1535498,"line_start":1391,"line_end":1391,"column_start":29,"column_end":40},"kind":{"variant":"Impl","fields":[2534]},"from":{"krate":0,"index":41794},"to":{"krate":0,"index":2046}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1535751,"byte_end":1535762,"line_start":1400,"line_end":1400,"column_start":32,"column_end":43},"kind":{"variant":"Impl","fields":[2535]},"from":{"krate":0,"index":41794},"to":{"krate":0,"index":2050}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1535934,"byte_end":1535945,"line_start":1407,"line_end":1407,"column_start":33,"column_end":44},"kind":{"variant":"Impl","fields":[2536]},"from":{"krate":0,"index":41794},"to":{"krate":0,"index":2054}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1536197,"byte_end":1536205,"line_start":1418,"line_end":1418,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[2537]},"from":{"krate":0,"index":41784},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1536527,"byte_end":1536535,"line_start":1434,"line_end":1434,"column_start":34,"column_end":42},"kind":{"variant":"Impl","fields":[2538]},"from":{"krate":0,"index":41784},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1536736,"byte_end":1536744,"line_start":1443,"line_end":1443,"column_start":28,"column_end":36},"kind":{"variant":"Impl","fields":[2539]},"from":{"krate":0,"index":41784},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1550729,"byte_end":1550738,"line_start":1853,"line_end":1853,"column_start":35,"column_end":44},"kind":{"variant":"Impl","fields":[2556]},"from":{"krate":0,"index":34716},"to":{"krate":0,"index":5758}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1551570,"byte_end":1551575,"line_start":1882,"line_end":1882,"column_start":35,"column_end":40},"kind":{"variant":"Impl","fields":[2557]},"from":{"krate":0,"index":34736},"to":{"krate":0,"index":5758}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1553789,"byte_end":1553796,"line_start":1936,"line_end":1936,"column_start":35,"column_end":42},"kind":{"variant":"Impl","fields":[2558]},"from":{"krate":0,"index":34776},"to":{"krate":0,"index":5758}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1555490,"byte_end":1555499,"line_start":1981,"line_end":1981,"column_start":35,"column_end":44},"kind":{"variant":"Impl","fields":[2559]},"from":{"krate":0,"index":34756},"to":{"krate":0,"index":5758}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1557379,"byte_end":1557393,"line_start":2028,"line_end":2028,"column_start":35,"column_end":49},"kind":{"variant":"Impl","fields":[2560]},"from":{"krate":0,"index":34798},"to":{"krate":0,"index":5758}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1558884,"byte_end":1558900,"line_start":2071,"line_end":2071,"column_start":35,"column_end":51},"kind":{"variant":"Impl","fields":[2561]},"from":{"krate":0,"index":34818},"to":{"krate":0,"index":5758}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1577500,"byte_end":1577512,"line_start":2614,"line_end":2614,"column_start":27,"column_end":39},"kind":{"variant":"Impl","fields":[2564]},"from":{"krate":0,"index":41810},"to":{"krate":0,"index":2054}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1577686,"byte_end":1577698,"line_start":2623,"line_end":2623,"column_start":26,"column_end":38},"kind":{"variant":"Impl","fields":[2565]},"from":{"krate":0,"index":41810},"to":{"krate":0,"index":2050}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1577903,"byte_end":1577913,"line_start":2633,"line_end":2633,"column_start":42,"column_end":52},"kind":{"variant":"Impl","fields":[2566]},"from":{"krate":0,"index":41816},"to":{"krate":0,"index":2054}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1578103,"byte_end":1578113,"line_start":2642,"line_end":2642,"column_start":41,"column_end":51},"kind":{"variant":"Impl","fields":[2567]},"from":{"krate":0,"index":41816},"to":{"krate":0,"index":2050}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1578317,"byte_end":1578332,"line_start":2651,"line_end":2651,"column_start":23,"column_end":38},"kind":{"variant":"Impl","fields":[2568]},"from":{"krate":0,"index":41800},"to":{"krate":0,"index":3820}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1578534,"byte_end":1578549,"line_start":2660,"line_end":2660,"column_start":34,"column_end":49},"kind":{"variant":"Impl","fields":[2569]},"from":{"krate":0,"index":41800},"to":{"krate":0,"index":4230}},{"span":{"file_name":[108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1578719,"byte_end":1578734,"line_start":2667,"line_end":2667,"column_start":28,"column_end":43},"kind":{"variant":"Impl","fields":[2570]},"from":{"krate":0,"index":41800},"to":{"krate":0,"index":4294}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1664111,"byte_end":1664120,"line_start":144,"line_end":144,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[2571]},"from":{"krate":0,"index":41850},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1664905,"byte_end":1664916,"line_start":166,"line_end":166,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[2572]},"from":{"krate":0,"index":41822},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1665728,"byte_end":1665734,"line_start":188,"line_end":188,"column_start":14,"column_end":20},"kind":{"variant":"Impl","fields":[2573]},"from":{"krate":0,"index":41864},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1667824,"byte_end":1667833,"line_start":252,"line_end":252,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[2574]},"from":{"krate":0,"index":41850},"to":{"krate":0,"index":7440}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1668091,"byte_end":1668102,"line_start":265,"line_end":265,"column_start":24,"column_end":35},"kind":{"variant":"Impl","fields":[2575]},"from":{"krate":0,"index":41822},"to":{"krate":0,"index":7440}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1668308,"byte_end":1668314,"line_start":277,"line_end":277,"column_start":32,"column_end":38},"kind":{"variant":"Impl","fields":[2576]},"from":{"krate":0,"index":41864},"to":{"krate":0,"index":7440}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1670198,"byte_end":1670204,"line_start":350,"line_end":350,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[2577]},"from":{"krate":0,"index":41864},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1670529,"byte_end":1670535,"line_start":365,"line_end":365,"column_start":26,"column_end":32},"kind":{"variant":"Impl","fields":[2578]},"from":{"krate":0,"index":41864},"to":{"krate":0,"index":2628}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1670859,"byte_end":1670870,"line_start":382,"line_end":382,"column_start":14,"column_end":25},"kind":{"variant":"Impl","fields":[2579]},"from":{"krate":0,"index":41882},"to":{"krate":0,"index":7416}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1671162,"byte_end":1671173,"line_start":399,"line_end":399,"column_start":14,"column_end":25},"kind":{"variant":"Impl","fields":[2580]},"from":{"krate":0,"index":41896},"to":{"krate":0,"index":7416}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1653788,"byte_end":1653806,"line_start":516,"line_end":516,"column_start":24,"column_end":42},"kind":{"variant":"Impl","fields":[2581]},"from":{"krate":0,"index":7506},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1654011,"byte_end":1654029,"line_start":523,"line_end":523,"column_start":43,"column_end":61},"kind":{"variant":"Impl","fields":[2582]},"from":{"krate":0,"index":7506},"to":{"krate":0,"index":7500}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1654192,"byte_end":1654210,"line_start":532,"line_end":532,"column_start":19,"column_end":37},"kind":{"variant":"Impl","fields":[2583]},"from":{"krate":0,"index":7506},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1654393,"byte_end":1654411,"line_start":539,"line_end":539,"column_start":21,"column_end":39},"kind":{"variant":"Impl","fields":[2584]},"from":{"krate":0,"index":7506},"to":{"krate":0,"index":2628}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1741533,"byte_end":1741542,"line_start":24,"line_end":24,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":2406},"to":{"krate":0,"index":7654}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1741545,"byte_end":1741555,"line_start":24,"line_end":24,"column_start":24,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":2460},"to":{"krate":0,"index":7654}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1741558,"byte_end":1741561,"line_start":24,"line_end":24,"column_start":37,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":1860},"to":{"krate":0,"index":7654}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1741577,"byte_end":1741580,"line_start":24,"line_end":24,"column_start":56,"column_end":59},"kind":"SuperTrait","from":{"krate":0,"index":1870},"to":{"krate":0,"index":7654}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1741607,"byte_end":1741610,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":0,"index":1844},"to":{"krate":0,"index":7654}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1741626,"byte_end":1741630,"line_start":25,"line_end":25,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":1784},"to":{"krate":0,"index":7654}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1750910,"byte_end":1750920,"line_start":18,"line_end":18,"column_start":10,"column_end":20},"kind":{"variant":"Impl","fields":[2588]},"from":{"krate":0,"index":7698},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1751282,"byte_end":1751292,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"kind":{"variant":"Impl","fields":[2589]},"from":{"krate":0,"index":7698},"to":{"krate":0,"index":7798}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1753281,"byte_end":1753292,"line_start":107,"line_end":107,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[2590]},"from":{"krate":0,"index":7708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1756066,"byte_end":1756076,"line_start":204,"line_end":204,"column_start":18,"column_end":28},"kind":{"variant":"Impl","fields":[2591]},"from":{"krate":0,"index":7720},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1757741,"byte_end":1757751,"line_start":260,"line_end":260,"column_start":18,"column_end":28},"kind":{"variant":"Impl","fields":[2592]},"from":{"krate":0,"index":7732},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1759854,"byte_end":1759862,"line_start":340,"line_end":340,"column_start":18,"column_end":26},"kind":{"variant":"Impl","fields":[2593]},"from":{"krate":0,"index":7742},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1761881,"byte_end":1761890,"line_start":411,"line_end":411,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[2594]},"from":{"krate":0,"index":7754},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1763987,"byte_end":1763995,"line_start":482,"line_end":482,"column_start":18,"column_end":26},"kind":{"variant":"Impl","fields":[2595]},"from":{"krate":0,"index":7766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1678067,"byte_end":1678074,"line_start":210,"line_end":210,"column_start":39,"column_end":46},"kind":{"variant":"Impl","fields":[2596]},"from":{"krate":0,"index":7806},"to":{"krate":0,"index":7798}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1680795,"byte_end":1680805,"line_start":293,"line_end":293,"column_start":20,"column_end":30},"kind":{"variant":"Impl","fields":[2597]},"from":{"krate":0,"index":42708},"to":{"krate":0,"index":2594}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1680884,"byte_end":1680894,"line_start":299,"line_end":299,"column_start":10,"column_end":20},"kind":{"variant":"Impl","fields":[2598]},"from":{"krate":0,"index":42708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1682065,"byte_end":1682074,"line_start":338,"line_end":338,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[2599]},"from":{"krate":0,"index":42720},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1686064,"byte_end":1686073,"line_start":438,"line_end":438,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[2600]},"from":{"krate":0,"index":42720},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1686239,"byte_end":1686248,"line_start":445,"line_end":445,"column_start":22,"column_end":31},"kind":{"variant":"Impl","fields":[2601]},"from":{"krate":0,"index":42720},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1702352,"byte_end":1702361,"line_start":1059,"line_end":1059,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[2602]},"from":{"krate":0,"index":7824},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1726435,"byte_end":1726444,"line_start":1739,"line_end":1739,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[2603]},"from":{"krate":0,"index":7824},"to":{"krate":0,"index":7798}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1726784,"byte_end":1726789,"line_start":1754,"line_end":1754,"column_start":18,"column_end":23},"kind":{"variant":"Impl","fields":[2604]},"from":{"krate":0,"index":42672},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1732647,"byte_end":1732658,"line_start":1964,"line_end":1964,"column_start":27,"column_end":38},"kind":{"variant":"Impl","fields":[2611]},"from":{"krate":0,"index":1794},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1732829,"byte_end":1732833,"line_start":1971,"line_end":1971,"column_start":33,"column_end":37},"kind":{"variant":"Impl","fields":[2612]},"from":{"krate":0,"index":3036},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1733071,"byte_end":1733078,"line_start":1980,"line_end":1980,"column_start":35,"column_end":42},"kind":{"variant":"Impl","fields":[2613]},"from":{"krate":0,"index":3102},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1733560,"byte_end":1733579,"line_start":1993,"line_end":1993,"column_start":32,"column_end":51},"kind":{"variant":"Impl","fields":[2614]},"from":{"krate":0,"index":8050},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1733985,"byte_end":1733988,"line_start":2008,"line_end":2008,"column_start":39,"column_end":42},"kind":{"variant":"Impl","fields":[2615]},"from":{"krate":0,"index":3210},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1734171,"byte_end":1734177,"line_start":2015,"line_end":2015,"column_start":39,"column_end":45},"kind":{"variant":"Impl","fields":[2616]},"from":{"krate":0,"index":3244},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1734375,"byte_end":1734385,"line_start":2022,"line_end":2022,"column_start":35,"column_end":45},"kind":{"variant":"Impl","fields":[2617]},"from":{"krate":0,"index":3262},"to":{"krate":0,"index":7858}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1769746,"byte_end":1769754,"line_start":68,"line_end":68,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[2618]},"from":{"krate":0,"index":42840},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1781163,"byte_end":1781171,"line_start":412,"line_end":412,"column_start":14,"column_end":22},"kind":{"variant":"Impl","fields":[2619]},"from":{"krate":0,"index":42840},"to":{"krate":0,"index":1836}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1781414,"byte_end":1781422,"line_start":421,"line_end":421,"column_start":20,"column_end":28},"kind":{"variant":"Impl","fields":[2620]},"from":{"krate":0,"index":42840},"to":{"krate":0,"index":1892}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1781571,"byte_end":1781579,"line_start":428,"line_end":428,"column_start":14,"column_end":22},"kind":{"variant":"Impl","fields":[2621]},"from":{"krate":0,"index":42840},"to":{"krate":0,"index":1844}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1781827,"byte_end":1781835,"line_start":437,"line_end":437,"column_start":20,"column_end":28},"kind":{"variant":"Impl","fields":[2622]},"from":{"krate":0,"index":42840},"to":{"krate":0,"index":1898}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1781989,"byte_end":1781997,"line_start":444,"line_end":444,"column_start":19,"column_end":27},"kind":{"variant":"Impl","fields":[2623]},"from":{"krate":0,"index":42840},"to":{"krate":0,"index":1852}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1782254,"byte_end":1782262,"line_start":453,"line_end":453,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[2624]},"from":{"krate":0,"index":42840},"to":{"krate":0,"index":1904}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1782411,"byte_end":1782419,"line_start":460,"line_end":460,"column_start":19,"column_end":27},"kind":{"variant":"Impl","fields":[2625]},"from":{"krate":0,"index":42840},"to":{"krate":0,"index":1860}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1782685,"byte_end":1782693,"line_start":469,"line_end":469,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[2626]},"from":{"krate":0,"index":42840},"to":{"krate":0,"index":1910}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1782842,"byte_end":1782850,"line_start":476,"line_end":476,"column_start":14,"column_end":22},"kind":{"variant":"Impl","fields":[2627]},"from":{"krate":0,"index":42840},"to":{"krate":0,"index":4256}},{"span":{"file_name":[108,105,98,99,111,114,101,47,116,105,109,101,46,114,115],"byte_start":1783062,"byte_end":1783070,"line_start":483,"line_end":483,"column_start":32,"column_end":40},"kind":{"variant":"Impl","fields":[2628]},"from":{"krate":0,"index":42840},"to":{"krate":0,"index":4256}},{"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,98,111,111,108,95,116,114,105,101,46,114,115],"byte_start":1790473,"byte_end":1790481,"line_start":43,"line_end":43,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[2629]},"from":{"krate":0,"index":8180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,117,110,105,99,111,100,101,47,98,111,111,108,95,116,114,105,101,46,114,115],"byte_start":1791115,"byte_end":1791128,"line_start":64,"line_end":64,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[2630]},"from":{"krate":0,"index":8186},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2014486,"byte_end":2014492,"line_start":32,"line_end":32,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[2631]},"from":{"krate":0,"index":4959},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2016305,"byte_end":2016311,"line_start":86,"line_end":86,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[2632]},"from":{"krate":0,"index":42930},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2026904,"byte_end":2026913,"line_start":337,"line_end":337,"column_start":23,"column_end":32},"kind":{"variant":"Impl","fields":[2633]},"from":{"krate":0,"index":42950},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2027406,"byte_end":2027414,"line_start":351,"line_end":351,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[2634]},"from":{"krate":0,"index":42970},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2027774,"byte_end":2027794,"line_start":363,"line_end":363,"column_start":6,"column_end":26},"kind":{"variant":"Impl","fields":[2635]},"from":{"krate":0,"index":42988},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2027977,"byte_end":2027997,"line_start":370,"line_end":370,"column_start":23,"column_end":43},"kind":{"variant":"Impl","fields":[2636]},"from":{"krate":0,"index":42988},"to":{"krate":0,"index":7862}},{"span":{"file_name":[108,105,98,99,111,114,101,47,97,108,108,111,99,46,114,115],"byte_start":2028630,"byte_end":2028648,"line_start":388,"line_end":388,"column_start":25,"column_end":43},"kind":{"variant":"Impl","fields":[2637]},"from":{"krate":0,"index":43006},"to":{"krate":0,"index":2648}},{"span":{"file_name":[108,105,98,99,111,114,101,47,105,116,101,114,95,112,114,105,118,97,116,101,46,114,115],"byte_start":2060385,"byte_end":2060402,"line_start":23,"line_end":23,"column_start":40,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":4244},"to":{"krate":0,"index":8424}},{"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,109,111,100,46,114,115],"byte_start":2072288,"byte_end":2072293,"line_start":54,"line_end":54,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":8732}},{"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,109,111,100,46,114,115],"byte_start":2072466,"byte_end":2072471,"line_start":60,"line_end":60,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":8736}},{"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,109,111,100,46,114,115],"byte_start":2072622,"byte_end":2072623,"line_start":66,"line_end":66,"column_start":28,"column_end":29},"kind":{"variant":"Impl","fields":[2638]},"from":{"krate":0,"index":5557},"to":{"krate":0,"index":8736}},{"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,112,112,115,118,47,109,111,100,46,114,115],"byte_start":2072801,"byte_end":2072802,"line_start":77,"line_end":77,"column_start":25,"column_end":26},"kind":{"variant":"Impl","fields":[2639]},"from":{"krate":0,"index":5561},"to":{"krate":0,"index":8732}},{"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2230498,"byte_end":2230503,"line_start":358,"line_end":358,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":8784}},{"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231545,"byte_end":2231552,"line_start":402,"line_end":402,"column_start":19,"column_end":26},"kind":{"variant":"Impl","fields":[2640]},"from":{"krate":0,"index":66164},"to":{"krate":0,"index":8784}},{"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2231696,"byte_end":2231701,"line_start":411,"line_end":411,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":1780},"to":{"krate":0,"index":8808}},{"span":{"file_name":[108,105,98,99,111,114,101,47,46,46,47,115,116,100,115,105,109,100,47,99,111,114,101,115,105,109,100,47,120,56,54,47,109,111,100,46,114,115],"byte_start":2232747,"byte_end":2232754,"line_start":455,"line_end":455,"column_start":19,"column_end":26},"kind":{"variant":"Impl","fields":[2641]},"from":{"krate":0,"index":66188},"to":{"krate":0,"index":8808}}]}